(function () {
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

  function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

  function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

  function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass2(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _classCallCheck2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  (self["webpackChunkglobing"] = self["webpackChunkglobing"] || []).push([["vendor"], {
    /***/
    17238:
    /*!******************************************************************************!*\
      !*** ./node_modules/@angular/animations/__ivy_ngcc__/fesm2015/animations.js ***!
      \******************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "AUTO_STYLE": function AUTO_STYLE() {
          return (
            /* binding */
            _AUTO_STYLE
          );
        },

        /* harmony export */
        "AnimationBuilder": function AnimationBuilder() {
          return (
            /* binding */
            _AnimationBuilder
          );
        },

        /* harmony export */
        "AnimationFactory": function AnimationFactory() {
          return (
            /* binding */
            _AnimationFactory
          );
        },

        /* harmony export */
        "NoopAnimationPlayer": function NoopAnimationPlayer() {
          return (
            /* binding */
            _NoopAnimationPlayer
          );
        },

        /* harmony export */
        "animate": function animate() {
          return (
            /* binding */
            _animate
          );
        },

        /* harmony export */
        "animateChild": function animateChild() {
          return (
            /* binding */
            _animateChild
          );
        },

        /* harmony export */
        "animation": function animation() {
          return (
            /* binding */
            _animation
          );
        },

        /* harmony export */
        "group": function group() {
          return (
            /* binding */
            _group
          );
        },

        /* harmony export */
        "keyframes": function keyframes() {
          return (
            /* binding */
            _keyframes
          );
        },

        /* harmony export */
        "query": function query() {
          return (
            /* binding */
            _query2
          );
        },

        /* harmony export */
        "sequence": function sequence() {
          return (
            /* binding */
            _sequence
          );
        },

        /* harmony export */
        "stagger": function stagger() {
          return (
            /* binding */
            _stagger
          );
        },

        /* harmony export */
        "state": function state() {
          return (
            /* binding */
            _state
          );
        },

        /* harmony export */
        "style": function style() {
          return (
            /* binding */
            _style
          );
        },

        /* harmony export */
        "transition": function transition() {
          return (
            /* binding */
            _transition
          );
        },

        /* harmony export */
        "trigger": function trigger() {
          return (
            /* binding */
            _trigger
          );
        },

        /* harmony export */
        "useAnimation": function useAnimation() {
          return (
            /* binding */
            _useAnimation
          );
        },

        /* harmony export */
        "ɵAnimationGroupPlayer": function ɵAnimationGroupPlayer() {
          return (
            /* binding */
            AnimationGroupPlayer
          );
        },

        /* harmony export */
        "ɵPRE_STYLE": function ɵPRE_STYLE() {
          return (
            /* binding */
            _ɵPRE_STYLE
          );
        }
        /* harmony export */

      });
      /**
       * @license Angular v12.0.3
       * (c) 2010-2021 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * An injectable service that produces an animation sequence programmatically within an
       * Angular component or directive.
       * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.
       *
       * @usageNotes
       *
       * To use this service, add it to your component or directive as a dependency.
       * The service is instantiated along with your component.
       *
       * Apps do not typically need to create their own animation players, but if you
       * do need to, follow these steps:
       *
       * 1. Use the `build()` method to create a programmatic animation using the
       * `animate()` function. The method returns an `AnimationFactory` instance.
       *
       * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.
       *
       * 3. Use the player object to control the animation programmatically.
       *
       * For example:
       *
       * ```ts
       * // import the service from BrowserAnimationsModule
       * import {AnimationBuilder} from '@angular/animations';
       * // require the service as a dependency
       * class MyCmp {
       *   constructor(private _builder: AnimationBuilder) {}
       *
       *   makeAnimation(element: any) {
       *     // first define a reusable animation
       *     const myAnimation = this._builder.build([
       *       style({ width: 0 }),
       *       animate(1000, style({ width: '100px' }))
       *     ]);
       *
       *     // use the returned factory object to create a player
       *     const player = myAnimation.create(element);
       *
       *     player.play();
       *   }
       * }
       * ```
       *
       * @publicApi
       */


      var _AnimationBuilder = function _AnimationBuilder() {
        _classCallCheck2(this, _AnimationBuilder);
      };
      /**
       * A factory object returned from the `AnimationBuilder`.`build()` method.
       *
       * @publicApi
       */


      var _AnimationFactory = function _AnimationFactory() {
        _classCallCheck2(this, _AnimationFactory);
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Specifies automatic styling.
       *
       * @publicApi
       */


      var _AUTO_STYLE = '*';
      /**
       * Creates a named animation trigger, containing a  list of `state()`
       * and `transition()` entries to be evaluated when the expression
       * bound to the trigger changes.
       *
       * @param name An identifying string.
       * @param definitions  An animation definition object, containing an array of `state()`
       * and `transition()` declarations.
       *
       * @return An object that encapsulates the trigger data.
       *
       * @usageNotes
       * Define an animation trigger in the `animations` section of `@Component` metadata.
       * In the template, reference the trigger by name and bind it to a trigger expression that
       * evaluates to a defined animation state, using the following format:
       *
       * `[@triggerName]="expression"`
       *
       * Animation trigger bindings convert all values to strings, and then match the
       * previous and current values against any linked transitions.
       * Booleans can be specified as `1` or `true` and `0` or `false`.
       *
       * ### Usage Example
       *
       * The following example creates an animation trigger reference based on the provided
       * name value.
       * The provided animation value is expected to be an array consisting of state and
       * transition declarations.
       *
       * ```typescript
       * @Component({
       *   selector: "my-component",
       *   templateUrl: "my-component-tpl.html",
       *   animations: [
       *     trigger("myAnimationTrigger", [
       *       state(...),
       *       state(...),
       *       transition(...),
       *       transition(...)
       *     ])
       *   ]
       * })
       * class MyComponent {
       *   myStatusExp = "something";
       * }
       * ```
       *
       * The template associated with this component makes use of the defined trigger
       * by binding to an element within its template code.
       *
       * ```html
       * <!-- somewhere inside of my-component-tpl.html -->
       * <div [@myAnimationTrigger]="myStatusExp">...</div>
       * ```
       *
       * ### Using an inline function
       * The `transition` animation method also supports reading an inline function which can decide
       * if its associated animation should be run.
       *
       * ```typescript
       * // this method is run each time the `myAnimationTrigger` trigger value changes.
       * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:
       string]: any}): boolean {
       *   // notice that `element` and `params` are also available here
       *   return toState == 'yes-please-animate';
       * }
       *
       * @Component({
       *   selector: 'my-component',
       *   templateUrl: 'my-component-tpl.html',
       *   animations: [
       *     trigger('myAnimationTrigger', [
       *       transition(myInlineMatcherFn, [
       *         // the animation sequence code
       *       ]),
       *     ])
       *   ]
       * })
       * class MyComponent {
       *   myStatusExp = "yes-please-animate";
       * }
       * ```
       *
       * ### Disabling Animations
       * When true, the special animation control binding `@.disabled` binding prevents
       * all animations from rendering.
       * Place the  `@.disabled` binding on an element to disable
       * animations on the element itself, as well as any inner animation triggers
       * within the element.
       *
       * The following example shows how to use this feature:
       *
       * ```typescript
       * @Component({
       *   selector: 'my-component',
       *   template: `
       *     <div [@.disabled]="isDisabled">
       *       <div [@childAnimation]="exp"></div>
       *     </div>
       *   `,
       *   animations: [
       *     trigger("childAnimation", [
       *       // ...
       *     ])
       *   ]
       * })
       * class MyComponent {
       *   isDisabled = true;
       *   exp = '...';
       * }
       * ```
       *
       * When `@.disabled` is true, it prevents the `@childAnimation` trigger from animating,
       * along with any inner animations.
       *
       * ### Disable animations application-wide
       * When an area of the template is set to have animations disabled,
       * **all** inner components have their animations disabled as well.
       * This means that you can disable all animations for an app
       * by placing a host binding set on `@.disabled` on the topmost Angular component.
       *
       * ```typescript
       * import {Component, HostBinding} from '@angular/core';
       *
       * @Component({
       *   selector: 'app-component',
       *   templateUrl: 'app.component.html',
       * })
       * class AppComponent {
       *   @HostBinding('@.disabled')
       *   public animationsDisabled = true;
       * }
       * ```
       *
       * ### Overriding disablement of inner animations
       * Despite inner animations being disabled, a parent animation can `query()`
       * for inner elements located in disabled areas of the template and still animate
       * them if needed. This is also the case for when a sub animation is
       * queried by a parent and then later animated using `animateChild()`.
       *
       * ### Detecting when an animation is disabled
       * If a region of the DOM (or the entire application) has its animations disabled, the animation
       * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides
       * an instance of an `AnimationEvent`. If animations are disabled,
       * the `.disabled` flag on the event is true.
       *
       * @publicApi
       */

      function _trigger(name, definitions) {
        return {
          type: 7
          /* Trigger */
          ,
          name: name,
          definitions: definitions,
          options: {}
        };
      }
      /**
       * Defines an animation step that combines styling information with timing information.
       *
       * @param timings Sets `AnimateTimings` for the parent animation.
       * A string in the format "duration [delay] [easing]".
       *  - Duration and delay are expressed as a number and optional time unit,
       * such as "1s" or "10ms" for one second and 10 milliseconds, respectively.
       * The default unit is milliseconds.
       *  - The easing value controls how the animation accelerates and decelerates
       * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,
       * `ease-in-out`, or a `cubic-bezier()` function call.
       * If not supplied, no easing is applied.
       *
       * For example, the string "1s 100ms ease-out" specifies a duration of
       * 1000 milliseconds, and delay of 100 ms, and the "ease-out" easing style,
       * which decelerates near the end of the duration.
       * @param styles Sets AnimationStyles for the parent animation.
       * A function call to either `style()` or `keyframes()`
       * that returns a collection of CSS style entries to be applied to the parent animation.
       * When null, uses the styles from the destination state.
       * This is useful when describing an animation step that will complete an animation;
       * see "Animating to the final state" in `transitions()`.
       * @returns An object that encapsulates the animation step.
       *
       * @usageNotes
       * Call within an animation `sequence()`, `{@link animations/group group()}`, or
       * `transition()` call to specify an animation step
       * that applies given style data to the parent animation for a given amount of time.
       *
       * ### Syntax Examples
       * **Timing examples**
       *
       * The following examples show various `timings` specifications.
       * - `animate(500)` : Duration is 500 milliseconds.
       * - `animate("1s")` : Duration is 1000 milliseconds.
       * - `animate("100ms 0.5s")` : Duration is 100 milliseconds, delay is 500 milliseconds.
       * - `animate("5s ease-in")` : Duration is 5000 milliseconds, easing in.
       * - `animate("5s 10ms cubic-bezier(.17,.67,.88,.1)")` : Duration is 5000 milliseconds, delay is 10
       * milliseconds, easing according to a bezier curve.
       *
       * **Style examples**
       *
       * The following example calls `style()` to set a single CSS style.
       * ```typescript
       * animate(500, style({ background: "red" }))
       * ```
       * The following example calls `keyframes()` to set a CSS style
       * to different values for successive keyframes.
       * ```typescript
       * animate(500, keyframes(
       *  [
       *   style({ background: "blue" }),
       *   style({ background: "red" })
       *  ])
       * ```
       *
       * @publicApi
       */


      function _animate(timings) {
        var styles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return {
          type: 4
          /* Animate */
          ,
          styles: styles,
          timings: timings
        };
      }
      /**
       * @description Defines a list of animation steps to be run in parallel.
       *
       * @param steps An array of animation step objects.
       * - When steps are defined by `style()` or `animate()`
       * function calls, each call within the group is executed instantly.
       * - To specify offset styles to be applied at a later time, define steps with
       * `keyframes()`, or use `animate()` calls with a delay value.
       * For example:
       *
       * ```typescript
       * group([
       *   animate("1s", style({ background: "black" })),
       *   animate("2s", style({ color: "white" }))
       * ])
       * ```
       *
       * @param options An options object containing a delay and
       * developer-defined parameters that provide styling defaults and
       * can be overridden on invocation.
       *
       * @return An object that encapsulates the group data.
       *
       * @usageNotes
       * Grouped animations are useful when a series of styles must be
       * animated at different starting times and closed off at different ending times.
       *
       * When called within a `sequence()` or a
       * `transition()` call, does not continue to the next
       * instruction until all of the inner animation steps have completed.
       *
       * @publicApi
       */


      function _group(steps) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return {
          type: 3
          /* Group */
          ,
          steps: steps,
          options: options
        };
      }
      /**
       * Defines a list of animation steps to be run sequentially, one by one.
       *
       * @param steps An array of animation step objects.
       * - Steps defined by `style()` calls apply the styling data immediately.
       * - Steps defined by `animate()` calls apply the styling data over time
       *   as specified by the timing data.
       *
       * ```typescript
       * sequence([
       *   style({ opacity: 0 }),
       *   animate("1s", style({ opacity: 1 }))
       * ])
       * ```
       *
       * @param options An options object containing a delay and
       * developer-defined parameters that provide styling defaults and
       * can be overridden on invocation.
       *
       * @return An object that encapsulates the sequence data.
       *
       * @usageNotes
       * When you pass an array of steps to a
       * `transition()` call, the steps run sequentially by default.
       * Compare this to the `{@link animations/group group()}` call, which runs animation steps in
       *parallel.
       *
       * When a sequence is used within a `{@link animations/group group()}` or a `transition()` call,
       * execution continues to the next instruction only after each of the inner animation
       * steps have completed.
       *
       * @publicApi
       **/


      function _sequence(steps) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return {
          type: 2
          /* Sequence */
          ,
          steps: steps,
          options: options
        };
      }
      /**
       * Declares a key/value object containing CSS properties/styles that
       * can then be used for an animation `state`, within an animation `sequence`,
       * or as styling data for calls to `animate()` and `keyframes()`.
       *
       * @param tokens A set of CSS styles or HTML styles associated with an animation state.
       * The value can be any of the following:
       * - A key-value style pair associating a CSS property with a value.
       * - An array of key-value style pairs.
       * - An asterisk (*), to use auto-styling, where styles are derived from the element
       * being animated and applied to the animation when it starts.
       *
       * Auto-styling can be used to define a state that depends on layout or other
       * environmental factors.
       *
       * @return An object that encapsulates the style data.
       *
       * @usageNotes
       * The following examples create animation styles that collect a set of
       * CSS property values:
       *
       * ```typescript
       * // string values for CSS properties
       * style({ background: "red", color: "blue" })
       *
       * // numerical pixel values
       * style({ width: 100, height: 0 })
       * ```
       *
       * The following example uses auto-styling to allow a component to animate from
       * a height of 0 up to the height of the parent element:
       *
       * ```
       * style({ height: 0 }),
       * animate("1s", style({ height: "*" }))
       * ```
       *
       * @publicApi
       **/


      function _style(tokens) {
        return {
          type: 6
          /* Style */
          ,
          styles: tokens,
          offset: null
        };
      }
      /**
       * Declares an animation state within a trigger attached to an element.
       *
       * @param name One or more names for the defined state in a comma-separated string.
       * The following reserved state names can be supplied to define a style for specific use
       * cases:
       *
       * - `void` You can associate styles with this name to be used when
       * the element is detached from the application. For example, when an `ngIf` evaluates
       * to false, the state of the associated element is void.
       *  - `*` (asterisk) Indicates the default state. You can associate styles with this name
       * to be used as the fallback when the state that is being animated is not declared
       * within the trigger.
       *
       * @param styles A set of CSS styles associated with this state, created using the
       * `style()` function.
       * This set of styles persists on the element once the state has been reached.
       * @param options Parameters that can be passed to the state when it is invoked.
       * 0 or more key-value pairs.
       * @return An object that encapsulates the new state data.
       *
       * @usageNotes
       * Use the `trigger()` function to register states to an animation trigger.
       * Use the `transition()` function to animate between states.
       * When a state is active within a component, its associated styles persist on the element,
       * even when the animation ends.
       *
       * @publicApi
       **/


      function _state(name, styles, options) {
        return {
          type: 0
          /* State */
          ,
          name: name,
          styles: styles,
          options: options
        };
      }
      /**
       * Defines a set of animation styles, associating each style with an optional `offset` value.
       *
       * @param steps A set of animation styles with optional offset data.
       * The optional `offset` value for a style specifies a percentage of the total animation
       * time at which that style is applied.
       * @returns An object that encapsulates the keyframes data.
       *
       * @usageNotes
       * Use with the `animate()` call. Instead of applying animations
       * from the current state
       * to the destination state, keyframes describe how each style entry is applied and at what point
       * within the animation arc.
       * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).
       *
       * ### Usage
       *
       * In the following example, the offset values describe
       * when each `backgroundColor` value is applied. The color is red at the start, and changes to
       * blue when 20% of the total time has elapsed.
       *
       * ```typescript
       * // the provided offset values
       * animate("5s", keyframes([
       *   style({ backgroundColor: "red", offset: 0 }),
       *   style({ backgroundColor: "blue", offset: 0.2 }),
       *   style({ backgroundColor: "orange", offset: 0.3 }),
       *   style({ backgroundColor: "black", offset: 1 })
       * ]))
       * ```
       *
       * If there are no `offset` values specified in the style entries, the offsets
       * are calculated automatically.
       *
       * ```typescript
       * animate("5s", keyframes([
       *   style({ backgroundColor: "red" }) // offset = 0
       *   style({ backgroundColor: "blue" }) // offset = 0.33
       *   style({ backgroundColor: "orange" }) // offset = 0.66
       *   style({ backgroundColor: "black" }) // offset = 1
       * ]))
       *```
      
       * @publicApi
       */


      function _keyframes(steps) {
        return {
          type: 5
          /* Keyframes */
          ,
          steps: steps
        };
      }
      /**
       * Declares an animation transition as a sequence of animation steps to run when a given
       * condition is satisfied. The condition is a Boolean expression or function that compares
       * the previous and current animation states, and returns true if this transition should occur.
       * When the state criteria of a defined transition are met, the associated animation is
       * triggered.
       *
       * @param stateChangeExpr A Boolean expression or function that compares the previous and current
       * animation states, and returns true if this transition should occur. Note that  "true" and "false"
       * match 1 and 0, respectively. An expression is evaluated each time a state change occurs in the
       * animation trigger element.
       * The animation steps run when the expression evaluates to true.
       *
       * - A state-change string takes the form "state1 => state2", where each side is a defined animation
       * state, or an asterix (*) to refer to a dynamic start or end state.
       *   - The expression string can contain multiple comma-separated statements;
       * for example "state1 => state2, state3 => state4".
       *   - Special values `:enter` and `:leave` initiate a transition on the entry and exit states,
       * equivalent to  "void => *"  and "* => void".
       *   - Special values `:increment` and `:decrement` initiate a transition when a numeric value has
       * increased or decreased in value.
       * - A function is executed each time a state change occurs in the animation trigger element.
       * The animation steps run when the function returns true.
       *
       * @param steps One or more animation objects, as returned by the `animate()` or
       * `sequence()` function, that form a transformation from one state to another.
       * A sequence is used by default when you pass an array.
       * @param options An options object that can contain a delay value for the start of the animation,
       * and additional developer-defined parameters. Provided values for additional parameters are used
       * as defaults, and override values can be passed to the caller on invocation.
       * @returns An object that encapsulates the transition data.
       *
       * @usageNotes
       * The template associated with a component binds an animation trigger to an element.
       *
       * ```HTML
       * <!-- somewhere inside of my-component-tpl.html -->
       * <div [@myAnimationTrigger]="myStatusExp">...</div>
       * ```
       *
       * All transitions are defined within an animation trigger,
       * along with named states that the transitions change to and from.
       *
       * ```typescript
       * trigger("myAnimationTrigger", [
       *  // define states
       *  state("on", style({ background: "green" })),
       *  state("off", style({ background: "grey" })),
       *  ...]
       * ```
       *
       * Note that when you call the `sequence()` function within a `{@link animations/group group()}`
       * or a `transition()` call, execution does not continue to the next instruction
       * until each of the inner animation steps have completed.
       *
       * ### Syntax examples
       *
       * The following examples define transitions between the two defined states (and default states),
       * using various options:
       *
       * ```typescript
       * // Transition occurs when the state value
       * // bound to "myAnimationTrigger" changes from "on" to "off"
       * transition("on => off", animate(500))
       * // Run the same animation for both directions
       * transition("on <=> off", animate(500))
       * // Define multiple state-change pairs separated by commas
       * transition("on => off, off => void", animate(500))
       * ```
       *
       * ### Special values for state-change expressions
       *
       * - Catch-all state change for when an element is inserted into the page and the
       * destination state is unknown:
       *
       * ```typescript
       * transition("void => *", [
       *  style({ opacity: 0 }),
       *  animate(500)
       *  ])
       * ```
       *
       * - Capture a state change between any states:
       *
       *  `transition("* => *", animate("1s 0s"))`
       *
       * - Entry and exit transitions:
       *
       * ```typescript
       * transition(":enter", [
       *   style({ opacity: 0 }),
       *   animate(500, style({ opacity: 1 }))
       *   ]),
       * transition(":leave", [
       *   animate(500, style({ opacity: 0 }))
       *   ])
       * ```
       *
       * - Use `:increment` and `:decrement` to initiate transitions:
       *
       * ```typescript
       * transition(":increment", group([
       *  query(':enter', [
       *     style({ left: '100%' }),
       *     animate('0.5s ease-out', style('*'))
       *   ]),
       *  query(':leave', [
       *     animate('0.5s ease-out', style({ left: '-100%' }))
       *  ])
       * ]))
       *
       * transition(":decrement", group([
       *  query(':enter', [
       *     style({ left: '100%' }),
       *     animate('0.5s ease-out', style('*'))
       *   ]),
       *  query(':leave', [
       *     animate('0.5s ease-out', style({ left: '-100%' }))
       *  ])
       * ]))
       * ```
       *
       * ### State-change functions
       *
       * Here is an example of a `fromState` specified as a state-change function that invokes an
       * animation when true:
       *
       * ```typescript
       * transition((fromState, toState) =>
       *  {
       *   return fromState == "off" && toState == "on";
       *  },
       *  animate("1s 0s"))
       * ```
       *
       * ### Animating to the final state
       *
       * If the final step in a transition is a call to `animate()` that uses a timing value
       * with no style data, that step is automatically considered the final animation arc,
       * for the element to reach the final state. Angular automatically adds or removes
       * CSS styles to ensure that the element is in the correct final state.
       *
       * The following example defines a transition that starts by hiding the element,
       * then makes sure that it animates properly to whatever state is currently active for trigger:
       *
       * ```typescript
       * transition("void => *", [
       *   style({ opacity: 0 }),
       *   animate(500)
       *  ])
       * ```
       * ### Boolean value matching
       * If a trigger binding value is a Boolean, it can be matched using a transition expression
       * that compares true and false or 1 and 0. For example:
       *
       * ```
       * // in the template
       * <div [@openClose]="open ? true : false">...</div>
       * // in the component metadata
       * trigger('openClose', [
       *   state('true', style({ height: '*' })),
       *   state('false', style({ height: '0px' })),
       *   transition('false <=> true', animate(500))
       * ])
       * ```
       *
       * @publicApi
       **/


      function _transition(stateChangeExpr, steps) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        return {
          type: 1
          /* Transition */
          ,
          expr: stateChangeExpr,
          animation: steps,
          options: options
        };
      }
      /**
       * Produces a reusable animation that can be invoked in another animation or sequence,
       * by calling the `useAnimation()` function.
       *
       * @param steps One or more animation objects, as returned by the `animate()`
       * or `sequence()` function, that form a transformation from one state to another.
       * A sequence is used by default when you pass an array.
       * @param options An options object that can contain a delay value for the start of the
       * animation, and additional developer-defined parameters.
       * Provided values for additional parameters are used as defaults,
       * and override values can be passed to the caller on invocation.
       * @returns An object that encapsulates the animation data.
       *
       * @usageNotes
       * The following example defines a reusable animation, providing some default parameter
       * values.
       *
       * ```typescript
       * var fadeAnimation = animation([
       *   style({ opacity: '{{ start }}' }),
       *   animate('{{ time }}',
       *   style({ opacity: '{{ end }}'}))
       *   ],
       *   { params: { time: '1000ms', start: 0, end: 1 }});
       * ```
       *
       * The following invokes the defined animation with a call to `useAnimation()`,
       * passing in override parameter values.
       *
       * ```js
       * useAnimation(fadeAnimation, {
       *   params: {
       *     time: '2s',
       *     start: 1,
       *     end: 0
       *   }
       * })
       * ```
       *
       * If any of the passed-in parameter values are missing from this call,
       * the default values are used. If one or more parameter values are missing before a step is
       * animated, `useAnimation()` throws an error.
       *
       * @publicApi
       */


      function _animation(steps) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return {
          type: 8
          /* Reference */
          ,
          animation: steps,
          options: options
        };
      }
      /**
       * Executes a queried inner animation element within an animation sequence.
       *
       * @param options An options object that can contain a delay value for the start of the
       * animation, and additional override values for developer-defined parameters.
       * @return An object that encapsulates the child animation data.
       *
       * @usageNotes
       * Each time an animation is triggered in Angular, the parent animation
       * has priority and any child animations are blocked. In order
       * for a child animation to run, the parent animation must query each of the elements
       * containing child animations, and run them using this function.
       *
       * Note that this feature is designed to be used with `query()` and it will only work
       * with animations that are assigned using the Angular animation library. CSS keyframes
       * and transitions are not handled by this API.
       *
       * @publicApi
       */


      function _animateChild() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        return {
          type: 9
          /* AnimateChild */
          ,
          options: options
        };
      }
      /**
       * Starts a reusable animation that is created using the `animation()` function.
       *
       * @param animation The reusable animation to start.
       * @param options An options object that can contain a delay value for the start of
       * the animation, and additional override values for developer-defined parameters.
       * @return An object that contains the animation parameters.
       *
       * @publicApi
       */


      function _useAnimation(animation) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return {
          type: 10
          /* AnimateRef */
          ,
          animation: animation,
          options: options
        };
      }
      /**
       * Finds one or more inner elements within the current element that is
       * being animated within a sequence. Use with `animate()`.
       *
       * @param selector The element to query, or a set of elements that contain Angular-specific
       * characteristics, specified with one or more of the following tokens.
       *  - `query(":enter")` or `query(":leave")` : Query for newly inserted/removed elements.
       *  - `query(":animating")` : Query all currently animating elements.
       *  - `query("@triggerName")` : Query elements that contain an animation trigger.
       *  - `query("@*")` : Query all elements that contain an animation triggers.
       *  - `query(":self")` : Include the current element into the animation sequence.
       *
       * @param animation One or more animation steps to apply to the queried element or elements.
       * An array is treated as an animation sequence.
       * @param options An options object. Use the 'limit' field to limit the total number of
       * items to collect.
       * @return An object that encapsulates the query data.
       *
       * @usageNotes
       * Tokens can be merged into a combined query selector string. For example:
       *
       * ```typescript
       *  query(':self, .record:enter, .record:leave, @subTrigger', [...])
       * ```
       *
       * The `query()` function collects multiple elements and works internally by using
       * `element.querySelectorAll`. Use the `limit` field of an options object to limit
       * the total number of items to be collected. For example:
       *
       * ```js
       * query('div', [
       *   animate(...),
       *   animate(...)
       * ], { limit: 1 })
       * ```
       *
       * By default, throws an error when zero items are found. Set the
       * `optional` flag to ignore this error. For example:
       *
       * ```js
       * query('.some-element-that-may-not-be-there', [
       *   animate(...),
       *   animate(...)
       * ], { optional: true })
       * ```
       *
       * ### Usage Example
       *
       * The following example queries for inner elements and animates them
       * individually using `animate()`.
       *
       * ```typescript
       * @Component({
       *   selector: 'inner',
       *   template: `
       *     <div [@queryAnimation]="exp">
       *       <h1>Title</h1>
       *       <div class="content">
       *         Blah blah blah
       *       </div>
       *     </div>
       *   `,
       *   animations: [
       *    trigger('queryAnimation', [
       *      transition('* => goAnimate', [
       *        // hide the inner elements
       *        query('h1', style({ opacity: 0 })),
       *        query('.content', style({ opacity: 0 })),
       *
       *        // animate the inner elements in, one by one
       *        query('h1', animate(1000, style({ opacity: 1 }))),
       *        query('.content', animate(1000, style({ opacity: 1 }))),
       *      ])
       *    ])
       *  ]
       * })
       * class Cmp {
       *   exp = '';
       *
       *   goAnimate() {
       *     this.exp = 'goAnimate';
       *   }
       * }
       * ```
       *
       * @publicApi
       */


      function _query2(selector, animation) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        return {
          type: 11
          /* Query */
          ,
          selector: selector,
          animation: animation,
          options: options
        };
      }
      /**
       * Use within an animation `query()` call to issue a timing gap after
       * each queried item is animated.
       *
       * @param timings A delay value.
       * @param animation One ore more animation steps.
       * @returns An object that encapsulates the stagger data.
       *
       * @usageNotes
       * In the following example, a container element wraps a list of items stamped out
       * by an `ngFor`. The container element contains an animation trigger that will later be set
       * to query for each of the inner items.
       *
       * Each time items are added, the opacity fade-in animation runs,
       * and each removed item is faded out.
       * When either of these animations occur, the stagger effect is
       * applied after each item's animation is started.
       *
       * ```html
       * <!-- list.component.html -->
       * <button (click)="toggle()">Show / Hide Items</button>
       * <hr />
       * <div [@listAnimation]="items.length">
       *   <div *ngFor="let item of items">
       *     {{ item }}
       *   </div>
       * </div>
       * ```
       *
       * Here is the component code:
       *
       * ```typescript
       * import {trigger, transition, style, animate, query, stagger} from '@angular/animations';
       * @Component({
       *   templateUrl: 'list.component.html',
       *   animations: [
       *     trigger('listAnimation', [
       *     ...
       *     ])
       *   ]
       * })
       * class ListComponent {
       *   items = [];
       *
       *   showItems() {
       *     this.items = [0,1,2,3,4];
       *   }
       *
       *   hideItems() {
       *     this.items = [];
       *   }
       *
       *   toggle() {
       *     this.items.length ? this.hideItems() : this.showItems();
       *    }
       *  }
       * ```
       *
       * Here is the animation trigger code:
       *
       * ```typescript
       * trigger('listAnimation', [
       *   transition('* => *', [ // each time the binding value changes
       *     query(':leave', [
       *       stagger(100, [
       *         animate('0.5s', style({ opacity: 0 }))
       *       ])
       *     ]),
       *     query(':enter', [
       *       style({ opacity: 0 }),
       *       stagger(100, [
       *         animate('0.5s', style({ opacity: 1 }))
       *       ])
       *     ])
       *   ])
       * ])
       * ```
       *
       * @publicApi
       */


      function _stagger(timings, animation) {
        return {
          type: 12
          /* Stagger */
          ,
          timings: timings,
          animation: animation
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function scheduleMicroTask(cb) {
        Promise.resolve(null).then(cb);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * An empty programmatic controller for reusable animations.
       * Used internally when animations are disabled, to avoid
       * checking for the null case when an animation player is expected.
       *
       * @see `animate()`
       * @see `AnimationPlayer`
       * @see `GroupPlayer`
       *
       * @publicApi
       */


      var _NoopAnimationPlayer = /*#__PURE__*/function () {
        function _NoopAnimationPlayer() {
          var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

          _classCallCheck2(this, _NoopAnimationPlayer);

          this._onDoneFns = [];
          this._onStartFns = [];
          this._onDestroyFns = [];
          this._started = false;
          this._destroyed = false;
          this._finished = false;
          this._position = 0;
          this.parentPlayer = null;
          this.totalTime = duration + delay;
        }

        _createClass2(_NoopAnimationPlayer, [{
          key: "_onFinish",
          value: function _onFinish() {
            if (!this._finished) {
              this._finished = true;

              this._onDoneFns.forEach(function (fn) {
                return fn();
              });

              this._onDoneFns = [];
            }
          }
        }, {
          key: "onStart",
          value: function onStart(fn) {
            this._onStartFns.push(fn);
          }
        }, {
          key: "onDone",
          value: function onDone(fn) {
            this._onDoneFns.push(fn);
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(fn) {
            this._onDestroyFns.push(fn);
          }
        }, {
          key: "hasStarted",
          value: function hasStarted() {
            return this._started;
          }
        }, {
          key: "init",
          value: function init() {}
        }, {
          key: "play",
          value: function play() {
            if (!this.hasStarted()) {
              this._onStart();

              this.triggerMicrotask();
            }

            this._started = true;
          }
          /** @internal */

        }, {
          key: "triggerMicrotask",
          value: function triggerMicrotask() {
            var _this7 = this;

            scheduleMicroTask(function () {
              return _this7._onFinish();
            });
          }
        }, {
          key: "_onStart",
          value: function _onStart() {
            this._onStartFns.forEach(function (fn) {
              return fn();
            });

            this._onStartFns = [];
          }
        }, {
          key: "pause",
          value: function pause() {}
        }, {
          key: "restart",
          value: function restart() {}
        }, {
          key: "finish",
          value: function finish() {
            this._onFinish();
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (!this._destroyed) {
              this._destroyed = true;

              if (!this.hasStarted()) {
                this._onStart();
              }

              this.finish();

              this._onDestroyFns.forEach(function (fn) {
                return fn();
              });

              this._onDestroyFns = [];
            }
          }
        }, {
          key: "reset",
          value: function reset() {
            this._started = false;
          }
        }, {
          key: "setPosition",
          value: function setPosition(position) {
            this._position = this.totalTime ? position * this.totalTime : 1;
          }
        }, {
          key: "getPosition",
          value: function getPosition() {
            return this.totalTime ? this._position / this.totalTime : 1;
          }
          /** @internal */

        }, {
          key: "triggerCallback",
          value: function triggerCallback(phaseName) {
            var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
            methods.forEach(function (fn) {
              return fn();
            });
            methods.length = 0;
          }
        }]);

        return _NoopAnimationPlayer;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A programmatic controller for a group of reusable animations.
       * Used internally to control animations.
       *
       * @see `AnimationPlayer`
       * @see `{@link animations/group group()}`
       *
       */


      var AnimationGroupPlayer = /*#__PURE__*/function () {
        function AnimationGroupPlayer(_players) {
          var _this8 = this;

          _classCallCheck2(this, AnimationGroupPlayer);

          this._onDoneFns = [];
          this._onStartFns = [];
          this._finished = false;
          this._started = false;
          this._destroyed = false;
          this._onDestroyFns = [];
          this.parentPlayer = null;
          this.totalTime = 0;
          this.players = _players;
          var doneCount = 0;
          var destroyCount = 0;
          var startCount = 0;
          var total = this.players.length;

          if (total == 0) {
            scheduleMicroTask(function () {
              return _this8._onFinish();
            });
          } else {
            this.players.forEach(function (player) {
              player.onDone(function () {
                if (++doneCount == total) {
                  _this8._onFinish();
                }
              });
              player.onDestroy(function () {
                if (++destroyCount == total) {
                  _this8._onDestroy();
                }
              });
              player.onStart(function () {
                if (++startCount == total) {
                  _this8._onStart();
                }
              });
            });
          }

          this.totalTime = this.players.reduce(function (time, player) {
            return Math.max(time, player.totalTime);
          }, 0);
        }

        _createClass2(AnimationGroupPlayer, [{
          key: "_onFinish",
          value: function _onFinish() {
            if (!this._finished) {
              this._finished = true;

              this._onDoneFns.forEach(function (fn) {
                return fn();
              });

              this._onDoneFns = [];
            }
          }
        }, {
          key: "init",
          value: function init() {
            this.players.forEach(function (player) {
              return player.init();
            });
          }
        }, {
          key: "onStart",
          value: function onStart(fn) {
            this._onStartFns.push(fn);
          }
        }, {
          key: "_onStart",
          value: function _onStart() {
            if (!this.hasStarted()) {
              this._started = true;

              this._onStartFns.forEach(function (fn) {
                return fn();
              });

              this._onStartFns = [];
            }
          }
        }, {
          key: "onDone",
          value: function onDone(fn) {
            this._onDoneFns.push(fn);
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(fn) {
            this._onDestroyFns.push(fn);
          }
        }, {
          key: "hasStarted",
          value: function hasStarted() {
            return this._started;
          }
        }, {
          key: "play",
          value: function play() {
            if (!this.parentPlayer) {
              this.init();
            }

            this._onStart();

            this.players.forEach(function (player) {
              return player.play();
            });
          }
        }, {
          key: "pause",
          value: function pause() {
            this.players.forEach(function (player) {
              return player.pause();
            });
          }
        }, {
          key: "restart",
          value: function restart() {
            this.players.forEach(function (player) {
              return player.restart();
            });
          }
        }, {
          key: "finish",
          value: function finish() {
            this._onFinish();

            this.players.forEach(function (player) {
              return player.finish();
            });
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this._onDestroy();
          }
        }, {
          key: "_onDestroy",
          value: function _onDestroy() {
            if (!this._destroyed) {
              this._destroyed = true;

              this._onFinish();

              this.players.forEach(function (player) {
                return player.destroy();
              });

              this._onDestroyFns.forEach(function (fn) {
                return fn();
              });

              this._onDestroyFns = [];
            }
          }
        }, {
          key: "reset",
          value: function reset() {
            this.players.forEach(function (player) {
              return player.reset();
            });
            this._destroyed = false;
            this._finished = false;
            this._started = false;
          }
        }, {
          key: "setPosition",
          value: function setPosition(p) {
            var timeAtPosition = p * this.totalTime;
            this.players.forEach(function (player) {
              var position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;
              player.setPosition(position);
            });
          }
        }, {
          key: "getPosition",
          value: function getPosition() {
            var longestPlayer = this.players.reduce(function (longestSoFar, player) {
              var newPlayerIsLongest = longestSoFar === null || player.totalTime > longestSoFar.totalTime;
              return newPlayerIsLongest ? player : longestSoFar;
            }, null);
            return longestPlayer != null ? longestPlayer.getPosition() : 0;
          }
        }, {
          key: "beforeDestroy",
          value: function beforeDestroy() {
            this.players.forEach(function (player) {
              if (player.beforeDestroy) {
                player.beforeDestroy();
              }
            });
          }
          /** @internal */

        }, {
          key: "triggerCallback",
          value: function triggerCallback(phaseName) {
            var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
            methods.forEach(function (fn) {
              return fn();
            });
            methods.length = 0;
          }
        }]);

        return AnimationGroupPlayer;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _ɵPRE_STYLE = '!';
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=animations.js.map

      /***/
    },

    /***/
    93154:
    /*!***************************************************************************!*\
      !*** ./node_modules/@angular/animations/__ivy_ngcc__/fesm2015/browser.js ***!
      \***************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "AnimationDriver": function AnimationDriver() {
          return (
            /* binding */
            _AnimationDriver
          );
        },

        /* harmony export */
        "ɵAnimation": function ɵAnimation() {
          return (
            /* binding */
            Animation
          );
        },

        /* harmony export */
        "ɵAnimationEngine": function ɵAnimationEngine() {
          return (
            /* binding */
            AnimationEngine
          );
        },

        /* harmony export */
        "ɵAnimationStyleNormalizer": function ɵAnimationStyleNormalizer() {
          return (
            /* binding */
            AnimationStyleNormalizer
          );
        },

        /* harmony export */
        "ɵCssKeyframesDriver": function ɵCssKeyframesDriver() {
          return (
            /* binding */
            CssKeyframesDriver
          );
        },

        /* harmony export */
        "ɵCssKeyframesPlayer": function ɵCssKeyframesPlayer() {
          return (
            /* binding */
            CssKeyframesPlayer
          );
        },

        /* harmony export */
        "ɵNoopAnimationDriver": function ɵNoopAnimationDriver() {
          return (
            /* binding */
            NoopAnimationDriver
          );
        },

        /* harmony export */
        "ɵNoopAnimationStyleNormalizer": function ɵNoopAnimationStyleNormalizer() {
          return (
            /* binding */
            NoopAnimationStyleNormalizer
          );
        },

        /* harmony export */
        "ɵWebAnimationsDriver": function ɵWebAnimationsDriver() {
          return (
            /* binding */
            WebAnimationsDriver
          );
        },

        /* harmony export */
        "ɵWebAnimationsPlayer": function ɵWebAnimationsPlayer() {
          return (
            /* binding */
            WebAnimationsPlayer
          );
        },

        /* harmony export */
        "ɵWebAnimationsStyleNormalizer": function ɵWebAnimationsStyleNormalizer() {
          return (
            /* binding */
            WebAnimationsStyleNormalizer
          );
        },

        /* harmony export */
        "ɵallowPreviousPlayerStylesMerge": function ɵallowPreviousPlayerStylesMerge() {
          return (
            /* binding */
            allowPreviousPlayerStylesMerge
          );
        },

        /* harmony export */
        "ɵangular_packages_animations_browser_browser_a": function ɵangular_packages_animations_browser_browser_a() {
          return (
            /* binding */
            SpecialCasedStyles
          );
        },

        /* harmony export */
        "ɵcontainsElement": function ɵcontainsElement() {
          return (
            /* binding */
            _containsElement
          );
        },

        /* harmony export */
        "ɵinvokeQuery": function ɵinvokeQuery() {
          return (
            /* binding */
            invokeQuery
          );
        },

        /* harmony export */
        "ɵmatchesElement": function ɵmatchesElement() {
          return (
            /* binding */
            _matchesElement
          );
        },

        /* harmony export */
        "ɵsupportsWebAnimations": function ɵsupportsWebAnimations() {
          return (
            /* binding */
            supportsWebAnimations
          );
        },

        /* harmony export */
        "ɵvalidateStyleProperty": function ɵvalidateStyleProperty() {
          return (
            /* binding */
            _validateStyleProperty
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/animations */
      17238);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      37716);
      /**
       * @license Angular v12.0.3
       * (c) 2010-2021 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function isBrowser() {
        return typeof window !== 'undefined' && typeof window.document !== 'undefined';
      }

      function isNode() {
        // Checking only for `process` isn't enough to identify whether or not we're in a Node
        // environment, because Webpack by default will polyfill the `process`. While we can discern
        // that Webpack polyfilled it by looking at `process.browser`, it's very Webpack-specific and
        // might not be future-proof. Instead we look at the stringified version of `process` which
        // is `[object process]` in Node and `[object Object]` when polyfilled.
        return typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
      }

      function optimizeGroupPlayer(players) {
        switch (players.length) {
          case 0:
            return new _angular_animations__WEBPACK_IMPORTED_MODULE_0__.NoopAnimationPlayer();

          case 1:
            return players[0];

          default:
            return new _angular_animations__WEBPACK_IMPORTED_MODULE_0__["ɵAnimationGroupPlayer"](players);
        }
      }

      function normalizeKeyframes(driver, normalizer, element, keyframes) {
        var preStyles = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
        var postStyles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
        var errors = [];
        var normalizedKeyframes = [];
        var previousOffset = -1;
        var previousKeyframe = null;
        keyframes.forEach(function (kf) {
          var offset = kf['offset'];
          var isSameOffset = offset == previousOffset;
          var normalizedKeyframe = isSameOffset && previousKeyframe || {};
          Object.keys(kf).forEach(function (prop) {
            var normalizedProp = prop;
            var normalizedValue = kf[prop];

            if (prop !== 'offset') {
              normalizedProp = normalizer.normalizePropertyName(normalizedProp, errors);

              switch (normalizedValue) {
                case _angular_animations__WEBPACK_IMPORTED_MODULE_0__["ɵPRE_STYLE"]:
                  normalizedValue = preStyles[prop];
                  break;

                case _angular_animations__WEBPACK_IMPORTED_MODULE_0__.AUTO_STYLE:
                  normalizedValue = postStyles[prop];
                  break;

                default:
                  normalizedValue = normalizer.normalizeStyleValue(prop, normalizedProp, normalizedValue, errors);
                  break;
              }
            }

            normalizedKeyframe[normalizedProp] = normalizedValue;
          });

          if (!isSameOffset) {
            normalizedKeyframes.push(normalizedKeyframe);
          }

          previousKeyframe = normalizedKeyframe;
          previousOffset = offset;
        });

        if (errors.length) {
          var LINE_START = '\n - ';
          throw new Error("Unable to animate due to the following errors:".concat(LINE_START).concat(errors.join(LINE_START)));
        }

        return normalizedKeyframes;
      }

      function listenOnPlayer(player, eventName, event, callback) {
        switch (eventName) {
          case 'start':
            player.onStart(function () {
              return callback(event && copyAnimationEvent(event, 'start', player));
            });
            break;

          case 'done':
            player.onDone(function () {
              return callback(event && copyAnimationEvent(event, 'done', player));
            });
            break;

          case 'destroy':
            player.onDestroy(function () {
              return callback(event && copyAnimationEvent(event, 'destroy', player));
            });
            break;
        }
      }

      function copyAnimationEvent(e, phaseName, player) {
        var totalTime = player.totalTime;
        var disabled = player.disabled ? true : false;
        var event = makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, phaseName || e.phaseName, totalTime == undefined ? e.totalTime : totalTime, disabled);
        var data = e['_data'];

        if (data != null) {
          event['_data'] = data;
        }

        return event;
      }

      function makeAnimationEvent(element, triggerName, fromState, toState) {
        var phaseName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
        var totalTime = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
        var disabled = arguments.length > 6 ? arguments[6] : undefined;
        return {
          element: element,
          triggerName: triggerName,
          fromState: fromState,
          toState: toState,
          phaseName: phaseName,
          totalTime: totalTime,
          disabled: !!disabled
        };
      }

      function getOrSetAsInMap(map, key, defaultValue) {
        var value;

        if (map instanceof Map) {
          value = map.get(key);

          if (!value) {
            map.set(key, value = defaultValue);
          }
        } else {
          value = map[key];

          if (!value) {
            value = map[key] = defaultValue;
          }
        }

        return value;
      }

      function parseTimelineCommand(command) {
        var separatorPos = command.indexOf(':');
        var id = command.substring(1, separatorPos);
        var action = command.substr(separatorPos + 1);
        return [id, action];
      }

      var _contains = function _contains(elm1, elm2) {
        return false;
      };

      var ɵ0 = _contains;

      var _matches = function _matches(element, selector) {
        return false;
      };

      var ɵ1 = _matches;

      var _query = function _query(element, selector, multi) {
        return [];
      };

      var ɵ2 = _query; // Define utility methods for browsers and platform-server(domino) where Element
      // and utility methods exist.

      var _isNode = isNode();

      if (_isNode || typeof Element !== 'undefined') {
        if (!isBrowser()) {
          _contains = function _contains(elm1, elm2) {
            return elm1.contains(elm2);
          };
        } else {
          _contains = function _contains(elm1, elm2) {
            while (elm2 && elm2 !== document.documentElement) {
              if (elm2 === elm1) {
                return true;
              }

              elm2 = elm2.parentNode || elm2.host; // consider host to support shadow DOM
            }

            return false;
          };
        }

        _matches = function () {
          if (_isNode || Element.prototype.matches) {
            return function (element, selector) {
              return element.matches(selector);
            };
          } else {
            var proto = Element.prototype;
            var fn = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;

            if (fn) {
              return function (element, selector) {
                return fn.apply(element, [selector]);
              };
            } else {
              return _matches;
            }
          }
        }();

        _query = function _query(element, selector, multi) {
          var results = [];

          if (multi) {
            // DO NOT REFACTOR TO USE SPREAD SYNTAX.
            // For element queries that return sufficiently large NodeList objects,
            // using spread syntax to populate the results array causes a RangeError
            // due to the call stack limit being reached. `Array.from` can not be used
            // as well, since NodeList is not iterable in IE 11, see
            // https://developer.mozilla.org/en-US/docs/Web/API/NodeList
            // More info is available in #38551.
            var elems = element.querySelectorAll(selector);

            for (var i = 0; i < elems.length; i++) {
              results.push(elems[i]);
            }
          } else {
            var elm = element.querySelector(selector);

            if (elm) {
              results.push(elm);
            }
          }

          return results;
        };
      }

      function containsVendorPrefix(prop) {
        // Webkit is the only real popular vendor prefix nowadays
        // cc: http://shouldiprefix.com/
        return prop.substring(1, 6) == 'ebkit'; // webkit or Webkit
      }

      var _CACHED_BODY = null;
      var _IS_WEBKIT = false;

      function _validateStyleProperty(prop) {
        if (!_CACHED_BODY) {
          _CACHED_BODY = getBodyNode() || {};
          _IS_WEBKIT = _CACHED_BODY.style ? 'WebkitAppearance' in _CACHED_BODY.style : false;
        }

        var result = true;

        if (_CACHED_BODY.style && !containsVendorPrefix(prop)) {
          result = prop in _CACHED_BODY.style;

          if (!result && _IS_WEBKIT) {
            var camelProp = 'Webkit' + prop.charAt(0).toUpperCase() + prop.substr(1);
            result = camelProp in _CACHED_BODY.style;
          }
        }

        return result;
      }

      function getBodyNode() {
        if (typeof document != 'undefined') {
          return document.body;
        }

        return null;
      }

      var _matchesElement = _matches;
      var _containsElement = _contains;
      var invokeQuery = _query;

      function hypenatePropsObject(object) {
        var newObj = {};
        Object.keys(object).forEach(function (prop) {
          var newProp = prop.replace(/([a-z])([A-Z])/g, '$1-$2');
          newObj[newProp] = object[prop];
        });
        return newObj;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @publicApi
       */


      var NoopAnimationDriver = /*#__PURE__*/function () {
        function NoopAnimationDriver() {
          _classCallCheck2(this, NoopAnimationDriver);
        }

        _createClass2(NoopAnimationDriver, [{
          key: "validateStyleProperty",
          value: function validateStyleProperty(prop) {
            return _validateStyleProperty(prop);
          }
        }, {
          key: "matchesElement",
          value: function matchesElement(element, selector) {
            return _matchesElement(element, selector);
          }
        }, {
          key: "containsElement",
          value: function containsElement(elm1, elm2) {
            return _containsElement(elm1, elm2);
          }
        }, {
          key: "query",
          value: function query(element, selector, multi) {
            return invokeQuery(element, selector, multi);
          }
        }, {
          key: "computeStyle",
          value: function computeStyle(element, prop, defaultValue) {
            return defaultValue || '';
          }
        }, {
          key: "animate",
          value: function animate(element, keyframes, duration, delay, easing) {
            var previousPlayers = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
            var scrubberAccessRequested = arguments.length > 6 ? arguments[6] : undefined;
            return new _angular_animations__WEBPACK_IMPORTED_MODULE_0__.NoopAnimationPlayer(duration, delay);
          }
        }]);

        return NoopAnimationDriver;
      }();

      NoopAnimationDriver.ɵfac = function NoopAnimationDriver_Factory(t) {
        return new (t || NoopAnimationDriver)();
      };

      NoopAnimationDriver.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: NoopAnimationDriver,
        factory: NoopAnimationDriver.ɵfac
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NoopAnimationDriver, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
        }], null, null);
      })();
      /**
       * @publicApi
       */


      var _AnimationDriver = function _AnimationDriver() {
        _classCallCheck2(this, _AnimationDriver);
      };

      _AnimationDriver.NOOP = new NoopAnimationDriver();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var ONE_SECOND = 1000;
      var SUBSTITUTION_EXPR_START = '{{';
      var SUBSTITUTION_EXPR_END = '}}';
      var ENTER_CLASSNAME = 'ng-enter';
      var LEAVE_CLASSNAME = 'ng-leave';
      var ENTER_SELECTOR = '.ng-enter';
      var LEAVE_SELECTOR = '.ng-leave';
      var NG_TRIGGER_CLASSNAME = 'ng-trigger';
      var NG_TRIGGER_SELECTOR = '.ng-trigger';
      var NG_ANIMATING_CLASSNAME = 'ng-animating';
      var NG_ANIMATING_SELECTOR = '.ng-animating';

      function resolveTimingValue(value) {
        if (typeof value == 'number') return value;
        var matches = value.match(/^(-?[\.\d]+)(m?s)/);
        if (!matches || matches.length < 2) return 0;
        return _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
      }

      function _convertTimeValueToMS(value, unit) {
        switch (unit) {
          case 's':
            return value * ONE_SECOND;

          default:
            // ms or something else
            return value;
        }
      }

      function resolveTiming(timings, errors, allowNegativeValues) {
        return timings.hasOwnProperty('duration') ? timings : parseTimeExpression(timings, errors, allowNegativeValues);
      }

      function parseTimeExpression(exp, errors, allowNegativeValues) {
        var regex = /^(-?[\.\d]+)(m?s)(?:\s+(-?[\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i;
        var duration;
        var delay = 0;
        var easing = '';

        if (typeof exp === 'string') {
          var matches = exp.match(regex);

          if (matches === null) {
            errors.push("The provided timing value \"".concat(exp, "\" is invalid."));
            return {
              duration: 0,
              delay: 0,
              easing: ''
            };
          }

          duration = _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
          var delayMatch = matches[3];

          if (delayMatch != null) {
            delay = _convertTimeValueToMS(parseFloat(delayMatch), matches[4]);
          }

          var easingVal = matches[5];

          if (easingVal) {
            easing = easingVal;
          }
        } else {
          duration = exp;
        }

        if (!allowNegativeValues) {
          var containsErrors = false;
          var startIndex = errors.length;

          if (duration < 0) {
            errors.push("Duration values below 0 are not allowed for this animation step.");
            containsErrors = true;
          }

          if (delay < 0) {
            errors.push("Delay values below 0 are not allowed for this animation step.");
            containsErrors = true;
          }

          if (containsErrors) {
            errors.splice(startIndex, 0, "The provided timing value \"".concat(exp, "\" is invalid."));
          }
        }

        return {
          duration: duration,
          delay: delay,
          easing: easing
        };
      }

      function copyObj(obj) {
        var destination = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        Object.keys(obj).forEach(function (prop) {
          destination[prop] = obj[prop];
        });
        return destination;
      }

      function normalizeStyles(styles) {
        var normalizedStyles = {};

        if (Array.isArray(styles)) {
          styles.forEach(function (data) {
            return copyStyles(data, false, normalizedStyles);
          });
        } else {
          copyStyles(styles, false, normalizedStyles);
        }

        return normalizedStyles;
      }

      function copyStyles(styles, readPrototype) {
        var destination = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        if (readPrototype) {
          // we make use of a for-in loop so that the
          // prototypically inherited properties are
          // revealed from the backFill map
          for (var prop in styles) {
            destination[prop] = styles[prop];
          }
        } else {
          copyObj(styles, destination);
        }

        return destination;
      }

      function getStyleAttributeString(element, key, value) {
        // Return the key-value pair string to be added to the style attribute for the
        // given CSS style key.
        if (value) {
          return key + ':' + value + ';';
        } else {
          return '';
        }
      }

      function writeStyleAttribute(element) {
        // Read the style property of the element and manually reflect it to the
        // style attribute. This is needed because Domino on platform-server doesn't
        // understand the full set of allowed CSS properties and doesn't reflect some
        // of them automatically.
        var styleAttrValue = '';

        for (var i = 0; i < element.style.length; i++) {
          var key = element.style.item(i);
          styleAttrValue += getStyleAttributeString(element, key, element.style.getPropertyValue(key));
        }

        for (var _key in element.style) {
          // Skip internal Domino properties that don't need to be reflected.
          if (!element.style.hasOwnProperty(_key) || _key.startsWith('_')) {
            continue;
          }

          var dashKey = camelCaseToDashCase(_key);
          styleAttrValue += getStyleAttributeString(element, dashKey, element.style[_key]);
        }

        element.setAttribute('style', styleAttrValue);
      }

      function setStyles(element, styles, formerStyles) {
        if (element['style']) {
          Object.keys(styles).forEach(function (prop) {
            var camelProp = dashCaseToCamelCase(prop);

            if (formerStyles && !formerStyles.hasOwnProperty(prop)) {
              formerStyles[prop] = element.style[camelProp];
            }

            element.style[camelProp] = styles[prop];
          }); // On the server set the 'style' attribute since it's not automatically reflected.

          if (isNode()) {
            writeStyleAttribute(element);
          }
        }
      }

      function eraseStyles(element, styles) {
        if (element['style']) {
          Object.keys(styles).forEach(function (prop) {
            var camelProp = dashCaseToCamelCase(prop);
            element.style[camelProp] = '';
          }); // On the server set the 'style' attribute since it's not automatically reflected.

          if (isNode()) {
            writeStyleAttribute(element);
          }
        }
      }

      function normalizeAnimationEntry(steps) {
        if (Array.isArray(steps)) {
          if (steps.length == 1) return steps[0];
          return (0, _angular_animations__WEBPACK_IMPORTED_MODULE_0__.sequence)(steps);
        }

        return steps;
      }

      function validateStyleParams(value, options, errors) {
        var params = options.params || {};
        var matches = extractStyleParams(value);

        if (matches.length) {
          matches.forEach(function (varName) {
            if (!params.hasOwnProperty(varName)) {
              errors.push("Unable to resolve the local animation param ".concat(varName, " in the given list of values"));
            }
          });
        }
      }

      var PARAM_REGEX = new RegExp("".concat(SUBSTITUTION_EXPR_START, "\\s*(.+?)\\s*").concat(SUBSTITUTION_EXPR_END), 'g');

      function extractStyleParams(value) {
        var params = [];

        if (typeof value === 'string') {
          var match;

          while (match = PARAM_REGEX.exec(value)) {
            params.push(match[1]);
          }

          PARAM_REGEX.lastIndex = 0;
        }

        return params;
      }

      function interpolateParams(value, params, errors) {
        var original = value.toString();
        var str = original.replace(PARAM_REGEX, function (_, varName) {
          var localVal = params[varName]; // this means that the value was never overridden by the data passed in by the user

          if (!params.hasOwnProperty(varName)) {
            errors.push("Please provide a value for the animation param ".concat(varName));
            localVal = '';
          }

          return localVal.toString();
        }); // we do this to assert that numeric values stay as they are

        return str == original ? value : str;
      }

      function iteratorToArray(iterator) {
        var arr = [];
        var item = iterator.next();

        while (!item.done) {
          arr.push(item.value);
          item = iterator.next();
        }

        return arr;
      }

      var DASH_CASE_REGEXP = /-+([a-z0-9])/g;

      function dashCaseToCamelCase(input) {
        return input.replace(DASH_CASE_REGEXP, function () {
          for (var _len = arguments.length, m = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
            m[_key2] = arguments[_key2];
          }

          return m[1].toUpperCase();
        });
      }

      function camelCaseToDashCase(input) {
        return input.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
      }

      function allowPreviousPlayerStylesMerge(duration, delay) {
        return duration === 0 || delay === 0;
      }

      function balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles) {
        var previousStyleProps = Object.keys(previousStyles);

        if (previousStyleProps.length && keyframes.length) {
          var startingKeyframe = keyframes[0];
          var missingStyleProps = [];
          previousStyleProps.forEach(function (prop) {
            if (!startingKeyframe.hasOwnProperty(prop)) {
              missingStyleProps.push(prop);
            }

            startingKeyframe[prop] = previousStyles[prop];
          });

          if (missingStyleProps.length) {
            var _loop = function _loop() {
              var kf = keyframes[i];
              missingStyleProps.forEach(function (prop) {
                kf[prop] = computeStyle(element, prop);
              });
            };

            // tslint:disable-next-line
            for (var i = 1; i < keyframes.length; i++) {
              _loop();
            }
          }
        }

        return keyframes;
      }

      function visitDslNode(visitor, node, context) {
        switch (node.type) {
          case 7
          /* Trigger */
          :
            return visitor.visitTrigger(node, context);

          case 0
          /* State */
          :
            return visitor.visitState(node, context);

          case 1
          /* Transition */
          :
            return visitor.visitTransition(node, context);

          case 2
          /* Sequence */
          :
            return visitor.visitSequence(node, context);

          case 3
          /* Group */
          :
            return visitor.visitGroup(node, context);

          case 4
          /* Animate */
          :
            return visitor.visitAnimate(node, context);

          case 5
          /* Keyframes */
          :
            return visitor.visitKeyframes(node, context);

          case 6
          /* Style */
          :
            return visitor.visitStyle(node, context);

          case 8
          /* Reference */
          :
            return visitor.visitReference(node, context);

          case 9
          /* AnimateChild */
          :
            return visitor.visitAnimateChild(node, context);

          case 10
          /* AnimateRef */
          :
            return visitor.visitAnimateRef(node, context);

          case 11
          /* Query */
          :
            return visitor.visitQuery(node, context);

          case 12
          /* Stagger */
          :
            return visitor.visitStagger(node, context);

          default:
            throw new Error("Unable to resolve animation metadata node #".concat(node.type));
        }
      }

      function computeStyle(element, prop) {
        return window.getComputedStyle(element)[prop];
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ANY_STATE = '*';

      function parseTransitionExpr(transitionValue, errors) {
        var expressions = [];

        if (typeof transitionValue == 'string') {
          transitionValue.split(/\s*,\s*/).forEach(function (str) {
            return parseInnerTransitionStr(str, expressions, errors);
          });
        } else {
          expressions.push(transitionValue);
        }

        return expressions;
      }

      function parseInnerTransitionStr(eventStr, expressions, errors) {
        if (eventStr[0] == ':') {
          var result = parseAnimationAlias(eventStr, errors);

          if (typeof result == 'function') {
            expressions.push(result);
            return;
          }

          eventStr = result;
        }

        var match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);

        if (match == null || match.length < 4) {
          errors.push("The provided transition expression \"".concat(eventStr, "\" is not supported"));
          return expressions;
        }

        var fromState = match[1];
        var separator = match[2];
        var toState = match[3];
        expressions.push(makeLambdaFromStates(fromState, toState));
        var isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;

        if (separator[0] == '<' && !isFullAnyStateExpr) {
          expressions.push(makeLambdaFromStates(toState, fromState));
        }
      }

      function parseAnimationAlias(alias, errors) {
        switch (alias) {
          case ':enter':
            return 'void => *';

          case ':leave':
            return '* => void';

          case ':increment':
            return function (fromState, toState) {
              return parseFloat(toState) > parseFloat(fromState);
            };

          case ':decrement':
            return function (fromState, toState) {
              return parseFloat(toState) < parseFloat(fromState);
            };

          default:
            errors.push("The transition alias value \"".concat(alias, "\" is not supported"));
            return '* => *';
        }
      } // DO NOT REFACTOR ... keep the follow set instantiations
      // with the values intact (closure compiler for some reason
      // removes follow-up lines that add the values outside of
      // the constructor...


      var TRUE_BOOLEAN_VALUES = new Set(['true', '1']);
      var FALSE_BOOLEAN_VALUES = new Set(['false', '0']);

      function makeLambdaFromStates(lhs, rhs) {
        var LHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(lhs) || FALSE_BOOLEAN_VALUES.has(lhs);
        var RHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(rhs) || FALSE_BOOLEAN_VALUES.has(rhs);
        return function (fromState, toState) {
          var lhsMatch = lhs == ANY_STATE || lhs == fromState;
          var rhsMatch = rhs == ANY_STATE || rhs == toState;

          if (!lhsMatch && LHS_MATCH_BOOLEAN && typeof fromState === 'boolean') {
            lhsMatch = fromState ? TRUE_BOOLEAN_VALUES.has(lhs) : FALSE_BOOLEAN_VALUES.has(lhs);
          }

          if (!rhsMatch && RHS_MATCH_BOOLEAN && typeof toState === 'boolean') {
            rhsMatch = toState ? TRUE_BOOLEAN_VALUES.has(rhs) : FALSE_BOOLEAN_VALUES.has(rhs);
          }

          return lhsMatch && rhsMatch;
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SELF_TOKEN = ':self';
      var SELF_TOKEN_REGEX = new RegExp("s*".concat(SELF_TOKEN, "s*,?"), 'g');
      /*
       * [Validation]
       * The visitor code below will traverse the animation AST generated by the animation verb functions
       * (the output is a tree of objects) and attempt to perform a series of validations on the data. The
       * following corner-cases will be validated:
       *
       * 1. Overlap of animations
       * Given that a CSS property cannot be animated in more than one place at the same time, it's
       * important that this behavior is detected and validated. The way in which this occurs is that
       * each time a style property is examined, a string-map containing the property will be updated with
       * the start and end times for when the property is used within an animation step.
       *
       * If there are two or more parallel animations that are currently running (these are invoked by the
       * group()) on the same element then the validator will throw an error. Since the start/end timing
       * values are collected for each property then if the current animation step is animating the same
       * property and its timing values fall anywhere into the window of time that the property is
       * currently being animated within then this is what causes an error.
       *
       * 2. Timing values
       * The validator will validate to see if a timing value of `duration delay easing` or
       * `durationNumber` is valid or not.
       *
       * (note that upon validation the code below will replace the timing data with an object containing
       * {duration,delay,easing}.
       *
       * 3. Offset Validation
       * Each of the style() calls are allowed to have an offset value when placed inside of keyframes().
       * Offsets within keyframes() are considered valid when:
       *
       *   - No offsets are used at all
       *   - Each style() entry contains an offset value
       *   - Each offset is between 0 and 1
       *   - Each offset is greater to or equal than the previous one
       *
       * Otherwise an error will be thrown.
       */

      function buildAnimationAst(driver, metadata, errors) {
        return new AnimationAstBuilderVisitor(driver).build(metadata, errors);
      }

      var ROOT_SELECTOR = '';

      var AnimationAstBuilderVisitor = /*#__PURE__*/function () {
        function AnimationAstBuilderVisitor(_driver) {
          _classCallCheck2(this, AnimationAstBuilderVisitor);

          this._driver = _driver;
        }

        _createClass2(AnimationAstBuilderVisitor, [{
          key: "build",
          value: function build(metadata, errors) {
            var context = new AnimationAstBuilderContext(errors);

            this._resetContextStyleTimingState(context);

            return visitDslNode(this, normalizeAnimationEntry(metadata), context);
          }
        }, {
          key: "_resetContextStyleTimingState",
          value: function _resetContextStyleTimingState(context) {
            context.currentQuerySelector = ROOT_SELECTOR;
            context.collectedStyles = {};
            context.collectedStyles[ROOT_SELECTOR] = {};
            context.currentTime = 0;
          }
        }, {
          key: "visitTrigger",
          value: function visitTrigger(metadata, context) {
            var _this9 = this;

            var queryCount = context.queryCount = 0;
            var depCount = context.depCount = 0;
            var states = [];
            var transitions = [];

            if (metadata.name.charAt(0) == '@') {
              context.errors.push('animation triggers cannot be prefixed with an `@` sign (e.g. trigger(\'@foo\', [...]))');
            }

            metadata.definitions.forEach(function (def) {
              _this9._resetContextStyleTimingState(context);

              if (def.type == 0
              /* State */
              ) {
                  var stateDef = def;
                  var name = stateDef.name;
                  name.toString().split(/\s*,\s*/).forEach(function (n) {
                    stateDef.name = n;
                    states.push(_this9.visitState(stateDef, context));
                  });
                  stateDef.name = name;
                } else if (def.type == 1
              /* Transition */
              ) {
                  var transition = _this9.visitTransition(def, context);

                  queryCount += transition.queryCount;
                  depCount += transition.depCount;
                  transitions.push(transition);
                } else {
                context.errors.push('only state() and transition() definitions can sit inside of a trigger()');
              }
            });
            return {
              type: 7
              /* Trigger */
              ,
              name: metadata.name,
              states: states,
              transitions: transitions,
              queryCount: queryCount,
              depCount: depCount,
              options: null
            };
          }
        }, {
          key: "visitState",
          value: function visitState(metadata, context) {
            var styleAst = this.visitStyle(metadata.styles, context);
            var astParams = metadata.options && metadata.options.params || null;

            if (styleAst.containsDynamicStyles) {
              var missingSubs = new Set();
              var params = astParams || {};
              styleAst.styles.forEach(function (value) {
                if (isObject(value)) {
                  var stylesObj = value;
                  Object.keys(stylesObj).forEach(function (prop) {
                    extractStyleParams(stylesObj[prop]).forEach(function (sub) {
                      if (!params.hasOwnProperty(sub)) {
                        missingSubs.add(sub);
                      }
                    });
                  });
                }
              });

              if (missingSubs.size) {
                var missingSubsArr = iteratorToArray(missingSubs.values());
                context.errors.push("state(\"".concat(metadata.name, "\", ...) must define default values for all the following style substitutions: ").concat(missingSubsArr.join(', ')));
              }
            }

            return {
              type: 0
              /* State */
              ,
              name: metadata.name,
              style: styleAst,
              options: astParams ? {
                params: astParams
              } : null
            };
          }
        }, {
          key: "visitTransition",
          value: function visitTransition(metadata, context) {
            context.queryCount = 0;
            context.depCount = 0;
            var animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
            var matchers = parseTransitionExpr(metadata.expr, context.errors);
            return {
              type: 1
              /* Transition */
              ,
              matchers: matchers,
              animation: animation,
              queryCount: context.queryCount,
              depCount: context.depCount,
              options: normalizeAnimationOptions(metadata.options)
            };
          }
        }, {
          key: "visitSequence",
          value: function visitSequence(metadata, context) {
            var _this10 = this;

            return {
              type: 2
              /* Sequence */
              ,
              steps: metadata.steps.map(function (s) {
                return visitDslNode(_this10, s, context);
              }),
              options: normalizeAnimationOptions(metadata.options)
            };
          }
        }, {
          key: "visitGroup",
          value: function visitGroup(metadata, context) {
            var _this11 = this;

            var currentTime = context.currentTime;
            var furthestTime = 0;
            var steps = metadata.steps.map(function (step) {
              context.currentTime = currentTime;
              var innerAst = visitDslNode(_this11, step, context);
              furthestTime = Math.max(furthestTime, context.currentTime);
              return innerAst;
            });
            context.currentTime = furthestTime;
            return {
              type: 3
              /* Group */
              ,
              steps: steps,
              options: normalizeAnimationOptions(metadata.options)
            };
          }
        }, {
          key: "visitAnimate",
          value: function visitAnimate(metadata, context) {
            var timingAst = constructTimingAst(metadata.timings, context.errors);
            context.currentAnimateTimings = timingAst;
            var styleAst;
            var styleMetadata = metadata.styles ? metadata.styles : (0, _angular_animations__WEBPACK_IMPORTED_MODULE_0__.style)({});

            if (styleMetadata.type == 5
            /* Keyframes */
            ) {
                styleAst = this.visitKeyframes(styleMetadata, context);
              } else {
              var _styleMetadata = metadata.styles;
              var isEmpty = false;

              if (!_styleMetadata) {
                isEmpty = true;
                var newStyleData = {};

                if (timingAst.easing) {
                  newStyleData['easing'] = timingAst.easing;
                }

                _styleMetadata = (0, _angular_animations__WEBPACK_IMPORTED_MODULE_0__.style)(newStyleData);
              }

              context.currentTime += timingAst.duration + timingAst.delay;

              var _styleAst = this.visitStyle(_styleMetadata, context);

              _styleAst.isEmptyStep = isEmpty;
              styleAst = _styleAst;
            }

            context.currentAnimateTimings = null;
            return {
              type: 4
              /* Animate */
              ,
              timings: timingAst,
              style: styleAst,
              options: null
            };
          }
        }, {
          key: "visitStyle",
          value: function visitStyle(metadata, context) {
            var ast = this._makeStyleAst(metadata, context);

            this._validateStyleAst(ast, context);

            return ast;
          }
        }, {
          key: "_makeStyleAst",
          value: function _makeStyleAst(metadata, context) {
            var styles = [];

            if (Array.isArray(metadata.styles)) {
              metadata.styles.forEach(function (styleTuple) {
                if (typeof styleTuple == 'string') {
                  if (styleTuple == _angular_animations__WEBPACK_IMPORTED_MODULE_0__.AUTO_STYLE) {
                    styles.push(styleTuple);
                  } else {
                    context.errors.push("The provided style string value ".concat(styleTuple, " is not allowed."));
                  }
                } else {
                  styles.push(styleTuple);
                }
              });
            } else {
              styles.push(metadata.styles);
            }

            var containsDynamicStyles = false;
            var collectedEasing = null;
            styles.forEach(function (styleData) {
              if (isObject(styleData)) {
                var styleMap = styleData;
                var easing = styleMap['easing'];

                if (easing) {
                  collectedEasing = easing;
                  delete styleMap['easing'];
                }

                if (!containsDynamicStyles) {
                  for (var prop in styleMap) {
                    var value = styleMap[prop];

                    if (value.toString().indexOf(SUBSTITUTION_EXPR_START) >= 0) {
                      containsDynamicStyles = true;
                      break;
                    }
                  }
                }
              }
            });
            return {
              type: 6
              /* Style */
              ,
              styles: styles,
              easing: collectedEasing,
              offset: metadata.offset,
              containsDynamicStyles: containsDynamicStyles,
              options: null
            };
          }
        }, {
          key: "_validateStyleAst",
          value: function _validateStyleAst(ast, context) {
            var _this12 = this;

            var timings = context.currentAnimateTimings;
            var endTime = context.currentTime;
            var startTime = context.currentTime;

            if (timings && startTime > 0) {
              startTime -= timings.duration + timings.delay;
            }

            ast.styles.forEach(function (tuple) {
              if (typeof tuple == 'string') return;
              Object.keys(tuple).forEach(function (prop) {
                if (!_this12._driver.validateStyleProperty(prop)) {
                  context.errors.push("The provided animation property \"".concat(prop, "\" is not a supported CSS property for animations"));
                  return;
                }

                var collectedStyles = context.collectedStyles[context.currentQuerySelector];
                var collectedEntry = collectedStyles[prop];
                var updateCollectedStyle = true;

                if (collectedEntry) {
                  if (startTime != endTime && startTime >= collectedEntry.startTime && endTime <= collectedEntry.endTime) {
                    context.errors.push("The CSS property \"".concat(prop, "\" that exists between the times of \"").concat(collectedEntry.startTime, "ms\" and \"").concat(collectedEntry.endTime, "ms\" is also being animated in a parallel animation between the times of \"").concat(startTime, "ms\" and \"").concat(endTime, "ms\""));
                    updateCollectedStyle = false;
                  } // we always choose the smaller start time value since we
                  // want to have a record of the entire animation window where
                  // the style property is being animated in between


                  startTime = collectedEntry.startTime;
                }

                if (updateCollectedStyle) {
                  collectedStyles[prop] = {
                    startTime: startTime,
                    endTime: endTime
                  };
                }

                if (context.options) {
                  validateStyleParams(tuple[prop], context.options, context.errors);
                }
              });
            });
          }
        }, {
          key: "visitKeyframes",
          value: function visitKeyframes(metadata, context) {
            var _this13 = this;

            var ast = {
              type: 5
              /* Keyframes */
              ,
              styles: [],
              options: null
            };

            if (!context.currentAnimateTimings) {
              context.errors.push("keyframes() must be placed inside of a call to animate()");
              return ast;
            }

            var MAX_KEYFRAME_OFFSET = 1;
            var totalKeyframesWithOffsets = 0;
            var offsets = [];
            var offsetsOutOfOrder = false;
            var keyframesOutOfRange = false;
            var previousOffset = 0;
            var keyframes = metadata.steps.map(function (styles) {
              var style = _this13._makeStyleAst(styles, context);

              var offsetVal = style.offset != null ? style.offset : consumeOffset(style.styles);
              var offset = 0;

              if (offsetVal != null) {
                totalKeyframesWithOffsets++;
                offset = style.offset = offsetVal;
              }

              keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;
              offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;
              previousOffset = offset;
              offsets.push(offset);
              return style;
            });

            if (keyframesOutOfRange) {
              context.errors.push("Please ensure that all keyframe offsets are between 0 and 1");
            }

            if (offsetsOutOfOrder) {
              context.errors.push("Please ensure that all keyframe offsets are in order");
            }

            var length = metadata.steps.length;
            var generatedOffset = 0;

            if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {
              context.errors.push("Not all style() steps within the declared keyframes() contain offsets");
            } else if (totalKeyframesWithOffsets == 0) {
              generatedOffset = MAX_KEYFRAME_OFFSET / (length - 1);
            }

            var limit = length - 1;
            var currentTime = context.currentTime;
            var currentAnimateTimings = context.currentAnimateTimings;
            var animateDuration = currentAnimateTimings.duration;
            keyframes.forEach(function (kf, i) {
              var offset = generatedOffset > 0 ? i == limit ? 1 : generatedOffset * i : offsets[i];
              var durationUpToThisFrame = offset * animateDuration;
              context.currentTime = currentTime + currentAnimateTimings.delay + durationUpToThisFrame;
              currentAnimateTimings.duration = durationUpToThisFrame;

              _this13._validateStyleAst(kf, context);

              kf.offset = offset;
              ast.styles.push(kf);
            });
            return ast;
          }
        }, {
          key: "visitReference",
          value: function visitReference(metadata, context) {
            return {
              type: 8
              /* Reference */
              ,
              animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
              options: normalizeAnimationOptions(metadata.options)
            };
          }
        }, {
          key: "visitAnimateChild",
          value: function visitAnimateChild(metadata, context) {
            context.depCount++;
            return {
              type: 9
              /* AnimateChild */
              ,
              options: normalizeAnimationOptions(metadata.options)
            };
          }
        }, {
          key: "visitAnimateRef",
          value: function visitAnimateRef(metadata, context) {
            return {
              type: 10
              /* AnimateRef */
              ,
              animation: this.visitReference(metadata.animation, context),
              options: normalizeAnimationOptions(metadata.options)
            };
          }
        }, {
          key: "visitQuery",
          value: function visitQuery(metadata, context) {
            var parentSelector = context.currentQuerySelector;
            var options = metadata.options || {};
            context.queryCount++;
            context.currentQuery = metadata;

            var _normalizeSelector = normalizeSelector(metadata.selector),
                _normalizeSelector2 = _slicedToArray(_normalizeSelector, 2),
                selector = _normalizeSelector2[0],
                includeSelf = _normalizeSelector2[1];

            context.currentQuerySelector = parentSelector.length ? parentSelector + ' ' + selector : selector;
            getOrSetAsInMap(context.collectedStyles, context.currentQuerySelector, {});
            var animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
            context.currentQuery = null;
            context.currentQuerySelector = parentSelector;
            return {
              type: 11
              /* Query */
              ,
              selector: selector,
              limit: options.limit || 0,
              optional: !!options.optional,
              includeSelf: includeSelf,
              animation: animation,
              originalSelector: metadata.selector,
              options: normalizeAnimationOptions(metadata.options)
            };
          }
        }, {
          key: "visitStagger",
          value: function visitStagger(metadata, context) {
            if (!context.currentQuery) {
              context.errors.push("stagger() can only be used inside of query()");
            }

            var timings = metadata.timings === 'full' ? {
              duration: 0,
              delay: 0,
              easing: 'full'
            } : resolveTiming(metadata.timings, context.errors, true);
            return {
              type: 12
              /* Stagger */
              ,
              animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
              timings: timings,
              options: null
            };
          }
        }]);

        return AnimationAstBuilderVisitor;
      }();

      function normalizeSelector(selector) {
        var hasAmpersand = selector.split(/\s*,\s*/).find(function (token) {
          return token == SELF_TOKEN;
        }) ? true : false;

        if (hasAmpersand) {
          selector = selector.replace(SELF_TOKEN_REGEX, '');
        } // the :enter and :leave selectors are filled in at runtime during timeline building


        selector = selector.replace(/@\*/g, NG_TRIGGER_SELECTOR).replace(/@\w+/g, function (match) {
          return NG_TRIGGER_SELECTOR + '-' + match.substr(1);
        }).replace(/:animating/g, NG_ANIMATING_SELECTOR);
        return [selector, hasAmpersand];
      }

      function normalizeParams(obj) {
        return obj ? copyObj(obj) : null;
      }

      var AnimationAstBuilderContext = function AnimationAstBuilderContext(errors) {
        _classCallCheck2(this, AnimationAstBuilderContext);

        this.errors = errors;
        this.queryCount = 0;
        this.depCount = 0;
        this.currentTransition = null;
        this.currentQuery = null;
        this.currentQuerySelector = null;
        this.currentAnimateTimings = null;
        this.currentTime = 0;
        this.collectedStyles = {};
        this.options = null;
      };

      function consumeOffset(styles) {
        if (typeof styles == 'string') return null;
        var offset = null;

        if (Array.isArray(styles)) {
          styles.forEach(function (styleTuple) {
            if (isObject(styleTuple) && styleTuple.hasOwnProperty('offset')) {
              var obj = styleTuple;
              offset = parseFloat(obj['offset']);
              delete obj['offset'];
            }
          });
        } else if (isObject(styles) && styles.hasOwnProperty('offset')) {
          var obj = styles;
          offset = parseFloat(obj['offset']);
          delete obj['offset'];
        }

        return offset;
      }

      function isObject(value) {
        return !Array.isArray(value) && typeof value == 'object';
      }

      function constructTimingAst(value, errors) {
        var timings = null;

        if (value.hasOwnProperty('duration')) {
          timings = value;
        } else if (typeof value == 'number') {
          var duration = resolveTiming(value, errors).duration;
          return makeTimingAst(duration, 0, '');
        }

        var strValue = value;
        var isDynamic = strValue.split(/\s+/).some(function (v) {
          return v.charAt(0) == '{' && v.charAt(1) == '{';
        });

        if (isDynamic) {
          var ast = makeTimingAst(0, 0, '');
          ast.dynamic = true;
          ast.strValue = strValue;
          return ast;
        }

        timings = timings || resolveTiming(strValue, errors);
        return makeTimingAst(timings.duration, timings.delay, timings.easing);
      }

      function normalizeAnimationOptions(options) {
        if (options) {
          options = copyObj(options);

          if (options['params']) {
            options['params'] = normalizeParams(options['params']);
          }
        } else {
          options = {};
        }

        return options;
      }

      function makeTimingAst(duration, delay, easing) {
        return {
          duration: duration,
          delay: delay,
          easing: easing
        };
      }

      function createTimelineInstruction(element, keyframes, preStyleProps, postStyleProps, duration, delay) {
        var easing = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
        var subTimeline = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;
        return {
          type: 1
          /* TimelineAnimation */
          ,
          element: element,
          keyframes: keyframes,
          preStyleProps: preStyleProps,
          postStyleProps: postStyleProps,
          duration: duration,
          delay: delay,
          totalTime: duration + delay,
          easing: easing,
          subTimeline: subTimeline
        };
      }

      var ElementInstructionMap = /*#__PURE__*/function () {
        function ElementInstructionMap() {
          _classCallCheck2(this, ElementInstructionMap);

          this._map = new Map();
        }

        _createClass2(ElementInstructionMap, [{
          key: "consume",
          value: function consume(element) {
            var instructions = this._map.get(element);

            if (instructions) {
              this._map["delete"](element);
            } else {
              instructions = [];
            }

            return instructions;
          }
        }, {
          key: "append",
          value: function append(element, instructions) {
            var _existingInstructions;

            var existingInstructions = this._map.get(element);

            if (!existingInstructions) {
              this._map.set(element, existingInstructions = []);
            }

            (_existingInstructions = existingInstructions).push.apply(_existingInstructions, _toConsumableArray(instructions));
          }
        }, {
          key: "has",
          value: function has(element) {
            return this._map.has(element);
          }
        }, {
          key: "clear",
          value: function clear() {
            this._map.clear();
          }
        }]);

        return ElementInstructionMap;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ONE_FRAME_IN_MILLISECONDS = 1;
      var ENTER_TOKEN = ':enter';
      var ENTER_TOKEN_REGEX = new RegExp(ENTER_TOKEN, 'g');
      var LEAVE_TOKEN = ':leave';
      var LEAVE_TOKEN_REGEX = new RegExp(LEAVE_TOKEN, 'g');
      /*
       * The code within this file aims to generate web-animations-compatible keyframes from Angular's
       * animation DSL code.
       *
       * The code below will be converted from:
       *
       * ```
       * sequence([
       *   style({ opacity: 0 }),
       *   animate(1000, style({ opacity: 0 }))
       * ])
       * ```
       *
       * To:
       * ```
       * keyframes = [{ opacity: 0, offset: 0 }, { opacity: 1, offset: 1 }]
       * duration = 1000
       * delay = 0
       * easing = ''
       * ```
       *
       * For this operation to cover the combination of animation verbs (style, animate, group, etc...) a
       * combination of prototypical inheritance, AST traversal and merge-sort-like algorithms are used.
       *
       * [AST Traversal]
       * Each of the animation verbs, when executed, will return an string-map object representing what
       * type of action it is (style, animate, group, etc...) and the data associated with it. This means
       * that when functional composition mix of these functions is evaluated (like in the example above)
       * then it will end up producing a tree of objects representing the animation itself.
       *
       * When this animation object tree is processed by the visitor code below it will visit each of the
       * verb statements within the visitor. And during each visit it will build the context of the
       * animation keyframes by interacting with the `TimelineBuilder`.
       *
       * [TimelineBuilder]
       * This class is responsible for tracking the styles and building a series of keyframe objects for a
       * timeline between a start and end time. The builder starts off with an initial timeline and each
       * time the AST comes across a `group()`, `keyframes()` or a combination of the two wihtin a
       * `sequence()` then it will generate a sub timeline for each step as well as a new one after
       * they are complete.
       *
       * As the AST is traversed, the timing state on each of the timelines will be incremented. If a sub
       * timeline was created (based on one of the cases above) then the parent timeline will attempt to
       * merge the styles used within the sub timelines into itself (only with group() this will happen).
       * This happens with a merge operation (much like how the merge works in mergesort) and it will only
       * copy the most recently used styles from the sub timelines into the parent timeline. This ensures
       * that if the styles are used later on in another phase of the animation then they will be the most
       * up-to-date values.
       *
       * [How Missing Styles Are Updated]
       * Each timeline has a `backFill` property which is responsible for filling in new styles into
       * already processed keyframes if a new style shows up later within the animation sequence.
       *
       * ```
       * sequence([
       *   style({ width: 0 }),
       *   animate(1000, style({ width: 100 })),
       *   animate(1000, style({ width: 200 })),
       *   animate(1000, style({ width: 300 }))
       *   animate(1000, style({ width: 400, height: 400 })) // notice how `height` doesn't exist anywhere
       * else
       * ])
       * ```
       *
       * What is happening here is that the `height` value is added later in the sequence, but is missing
       * from all previous animation steps. Therefore when a keyframe is created it would also be missing
       * from all previous keyframes up until where it is first used. For the timeline keyframe generation
       * to properly fill in the style it will place the previous value (the value from the parent
       * timeline) or a default value of `*` into the backFill object. Given that each of the keyframe
       * styles are objects that prototypically inhert from the backFill object, this means that if a
       * value is added into the backFill then it will automatically propagate any missing values to all
       * keyframes. Therefore the missing `height` value will be properly filled into the already
       * processed keyframes.
       *
       * When a sub-timeline is created it will have its own backFill property. This is done so that
       * styles present within the sub-timeline do not accidentally seep into the previous/future timeline
       * keyframes
       *
       * (For prototypically-inherited contents to be detected a `for(i in obj)` loop must be used.)
       *
       * [Validation]
       * The code in this file is not responsible for validation. That functionality happens with within
       * the `AnimationValidatorVisitor` code.
       */

      function buildAnimationTimelines(driver, rootElement, ast, enterClassName, leaveClassName) {
        var startingStyles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
        var finalStyles = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};
        var options = arguments.length > 7 ? arguments[7] : undefined;
        var subInstructions = arguments.length > 8 ? arguments[8] : undefined;
        var errors = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : [];
        return new AnimationTimelineBuilderVisitor().buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors);
      }

      var AnimationTimelineBuilderVisitor = /*#__PURE__*/function () {
        function AnimationTimelineBuilderVisitor() {
          _classCallCheck2(this, AnimationTimelineBuilderVisitor);
        }

        _createClass2(AnimationTimelineBuilderVisitor, [{
          key: "buildKeyframes",
          value: function buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions) {
            var errors = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : [];
            subInstructions = subInstructions || new ElementInstructionMap();
            var context = new AnimationTimelineContext(driver, rootElement, subInstructions, enterClassName, leaveClassName, errors, []);
            context.options = options;
            context.currentTimeline.setStyles([startingStyles], null, context.errors, options);
            visitDslNode(this, ast, context); // this checks to see if an actual animation happened

            var timelines = context.timelines.filter(function (timeline) {
              return timeline.containsAnimation();
            });

            if (timelines.length && Object.keys(finalStyles).length) {
              var tl = timelines[timelines.length - 1];

              if (!tl.allowOnlyTimelineStyles()) {
                tl.setStyles([finalStyles], null, context.errors, options);
              }
            }

            return timelines.length ? timelines.map(function (timeline) {
              return timeline.buildKeyframes();
            }) : [createTimelineInstruction(rootElement, [], [], [], 0, 0, '', false)];
          }
        }, {
          key: "visitTrigger",
          value: function visitTrigger(ast, context) {// these values are not visited in this AST
          }
        }, {
          key: "visitState",
          value: function visitState(ast, context) {// these values are not visited in this AST
          }
        }, {
          key: "visitTransition",
          value: function visitTransition(ast, context) {// these values are not visited in this AST
          }
        }, {
          key: "visitAnimateChild",
          value: function visitAnimateChild(ast, context) {
            var elementInstructions = context.subInstructions.consume(context.element);

            if (elementInstructions) {
              var innerContext = context.createSubContext(ast.options);
              var startTime = context.currentTimeline.currentTime;

              var endTime = this._visitSubInstructions(elementInstructions, innerContext, innerContext.options);

              if (startTime != endTime) {
                // we do this on the upper context because we created a sub context for
                // the sub child animations
                context.transformIntoNewTimeline(endTime);
              }
            }

            context.previousNode = ast;
          }
        }, {
          key: "visitAnimateRef",
          value: function visitAnimateRef(ast, context) {
            var innerContext = context.createSubContext(ast.options);
            innerContext.transformIntoNewTimeline();
            this.visitReference(ast.animation, innerContext);
            context.transformIntoNewTimeline(innerContext.currentTimeline.currentTime);
            context.previousNode = ast;
          }
        }, {
          key: "_visitSubInstructions",
          value: function _visitSubInstructions(instructions, context, options) {
            var startTime = context.currentTimeline.currentTime;
            var furthestTime = startTime; // this is a special-case for when a user wants to skip a sub
            // animation from being fired entirely.

            var duration = options.duration != null ? resolveTimingValue(options.duration) : null;
            var delay = options.delay != null ? resolveTimingValue(options.delay) : null;

            if (duration !== 0) {
              instructions.forEach(function (instruction) {
                var instructionTimings = context.appendInstructionToTimeline(instruction, duration, delay);
                furthestTime = Math.max(furthestTime, instructionTimings.duration + instructionTimings.delay);
              });
            }

            return furthestTime;
          }
        }, {
          key: "visitReference",
          value: function visitReference(ast, context) {
            context.updateOptions(ast.options, true);
            visitDslNode(this, ast.animation, context);
            context.previousNode = ast;
          }
        }, {
          key: "visitSequence",
          value: function visitSequence(ast, context) {
            var _this14 = this;

            var subContextCount = context.subContextCount;
            var ctx = context;
            var options = ast.options;

            if (options && (options.params || options.delay)) {
              ctx = context.createSubContext(options);
              ctx.transformIntoNewTimeline();

              if (options.delay != null) {
                if (ctx.previousNode.type == 6
                /* Style */
                ) {
                    ctx.currentTimeline.snapshotCurrentStyles();
                    ctx.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
                  }

                var delay = resolveTimingValue(options.delay);
                ctx.delayNextStep(delay);
              }
            }

            if (ast.steps.length) {
              ast.steps.forEach(function (s) {
                return visitDslNode(_this14, s, ctx);
              }); // this is here just incase the inner steps only contain or end with a style() call

              ctx.currentTimeline.applyStylesToKeyframe(); // this means that some animation function within the sequence
              // ended up creating a sub timeline (which means the current
              // timeline cannot overlap with the contents of the sequence)

              if (ctx.subContextCount > subContextCount) {
                ctx.transformIntoNewTimeline();
              }
            }

            context.previousNode = ast;
          }
        }, {
          key: "visitGroup",
          value: function visitGroup(ast, context) {
            var _this15 = this;

            var innerTimelines = [];
            var furthestTime = context.currentTimeline.currentTime;
            var delay = ast.options && ast.options.delay ? resolveTimingValue(ast.options.delay) : 0;
            ast.steps.forEach(function (s) {
              var innerContext = context.createSubContext(ast.options);

              if (delay) {
                innerContext.delayNextStep(delay);
              }

              visitDslNode(_this15, s, innerContext);
              furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);
              innerTimelines.push(innerContext.currentTimeline);
            }); // this operation is run after the AST loop because otherwise
            // if the parent timeline's collected styles were updated then
            // it would pass in invalid data into the new-to-be forked items

            innerTimelines.forEach(function (timeline) {
              return context.currentTimeline.mergeTimelineCollectedStyles(timeline);
            });
            context.transformIntoNewTimeline(furthestTime);
            context.previousNode = ast;
          }
        }, {
          key: "_visitTiming",
          value: function _visitTiming(ast, context) {
            if (ast.dynamic) {
              var strValue = ast.strValue;
              var timingValue = context.params ? interpolateParams(strValue, context.params, context.errors) : strValue;
              return resolveTiming(timingValue, context.errors);
            } else {
              return {
                duration: ast.duration,
                delay: ast.delay,
                easing: ast.easing
              };
            }
          }
        }, {
          key: "visitAnimate",
          value: function visitAnimate(ast, context) {
            var timings = context.currentAnimateTimings = this._visitTiming(ast.timings, context);

            var timeline = context.currentTimeline;

            if (timings.delay) {
              context.incrementTime(timings.delay);
              timeline.snapshotCurrentStyles();
            }

            var style = ast.style;

            if (style.type == 5
            /* Keyframes */
            ) {
                this.visitKeyframes(style, context);
              } else {
              context.incrementTime(timings.duration);
              this.visitStyle(style, context);
              timeline.applyStylesToKeyframe();
            }

            context.currentAnimateTimings = null;
            context.previousNode = ast;
          }
        }, {
          key: "visitStyle",
          value: function visitStyle(ast, context) {
            var timeline = context.currentTimeline;
            var timings = context.currentAnimateTimings; // this is a special case for when a style() call
            // directly follows  an animate() call (but not inside of an animate() call)

            if (!timings && timeline.getCurrentStyleProperties().length) {
              timeline.forwardFrame();
            }

            var easing = timings && timings.easing || ast.easing;

            if (ast.isEmptyStep) {
              timeline.applyEmptyStep(easing);
            } else {
              timeline.setStyles(ast.styles, easing, context.errors, context.options);
            }

            context.previousNode = ast;
          }
        }, {
          key: "visitKeyframes",
          value: function visitKeyframes(ast, context) {
            var currentAnimateTimings = context.currentAnimateTimings;
            var startTime = context.currentTimeline.duration;
            var duration = currentAnimateTimings.duration;
            var innerContext = context.createSubContext();
            var innerTimeline = innerContext.currentTimeline;
            innerTimeline.easing = currentAnimateTimings.easing;
            ast.styles.forEach(function (step) {
              var offset = step.offset || 0;
              innerTimeline.forwardTime(offset * duration);
              innerTimeline.setStyles(step.styles, step.easing, context.errors, context.options);
              innerTimeline.applyStylesToKeyframe();
            }); // this will ensure that the parent timeline gets all the styles from
            // the child even if the new timeline below is not used

            context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline); // we do this because the window between this timeline and the sub timeline
            // should ensure that the styles within are exactly the same as they were before

            context.transformIntoNewTimeline(startTime + duration);
            context.previousNode = ast;
          }
        }, {
          key: "visitQuery",
          value: function visitQuery(ast, context) {
            var _this16 = this;

            // in the event that the first step before this is a style step we need
            // to ensure the styles are applied before the children are animated
            var startTime = context.currentTimeline.currentTime;
            var options = ast.options || {};
            var delay = options.delay ? resolveTimingValue(options.delay) : 0;

            if (delay && (context.previousNode.type === 6
            /* Style */
            || startTime == 0 && context.currentTimeline.getCurrentStyleProperties().length)) {
              context.currentTimeline.snapshotCurrentStyles();
              context.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
            }

            var furthestTime = startTime;
            var elms = context.invokeQuery(ast.selector, ast.originalSelector, ast.limit, ast.includeSelf, options.optional ? true : false, context.errors);
            context.currentQueryTotal = elms.length;
            var sameElementTimeline = null;
            elms.forEach(function (element, i) {
              context.currentQueryIndex = i;
              var innerContext = context.createSubContext(ast.options, element);

              if (delay) {
                innerContext.delayNextStep(delay);
              }

              if (element === context.element) {
                sameElementTimeline = innerContext.currentTimeline;
              }

              visitDslNode(_this16, ast.animation, innerContext); // this is here just incase the inner steps only contain or end
              // with a style() call (which is here to signal that this is a preparatory
              // call to style an element before it is animated again)

              innerContext.currentTimeline.applyStylesToKeyframe();
              var endTime = innerContext.currentTimeline.currentTime;
              furthestTime = Math.max(furthestTime, endTime);
            });
            context.currentQueryIndex = 0;
            context.currentQueryTotal = 0;
            context.transformIntoNewTimeline(furthestTime);

            if (sameElementTimeline) {
              context.currentTimeline.mergeTimelineCollectedStyles(sameElementTimeline);
              context.currentTimeline.snapshotCurrentStyles();
            }

            context.previousNode = ast;
          }
        }, {
          key: "visitStagger",
          value: function visitStagger(ast, context) {
            var parentContext = context.parentContext;
            var tl = context.currentTimeline;
            var timings = ast.timings;
            var duration = Math.abs(timings.duration);
            var maxTime = duration * (context.currentQueryTotal - 1);
            var delay = duration * context.currentQueryIndex;
            var staggerTransformer = timings.duration < 0 ? 'reverse' : timings.easing;

            switch (staggerTransformer) {
              case 'reverse':
                delay = maxTime - delay;
                break;

              case 'full':
                delay = parentContext.currentStaggerTime;
                break;
            }

            var timeline = context.currentTimeline;

            if (delay) {
              timeline.delayNextStep(delay);
            }

            var startingTime = timeline.currentTime;
            visitDslNode(this, ast.animation, context);
            context.previousNode = ast; // time = duration + delay
            // the reason why this computation is so complex is because
            // the inner timeline may either have a delay value or a stretched
            // keyframe depending on if a subtimeline is not used or is used.

            parentContext.currentStaggerTime = tl.currentTime - startingTime + (tl.startTime - parentContext.currentTimeline.startTime);
          }
        }]);

        return AnimationTimelineBuilderVisitor;
      }();

      var DEFAULT_NOOP_PREVIOUS_NODE = {};

      var AnimationTimelineContext = /*#__PURE__*/function () {
        function AnimationTimelineContext(_driver, element, subInstructions, _enterClassName, _leaveClassName, errors, timelines, initialTimeline) {
          _classCallCheck2(this, AnimationTimelineContext);

          this._driver = _driver;
          this.element = element;
          this.subInstructions = subInstructions;
          this._enterClassName = _enterClassName;
          this._leaveClassName = _leaveClassName;
          this.errors = errors;
          this.timelines = timelines;
          this.parentContext = null;
          this.currentAnimateTimings = null;
          this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
          this.subContextCount = 0;
          this.options = {};
          this.currentQueryIndex = 0;
          this.currentQueryTotal = 0;
          this.currentStaggerTime = 0;
          this.currentTimeline = initialTimeline || new TimelineBuilder(this._driver, element, 0);
          timelines.push(this.currentTimeline);
        }

        _createClass2(AnimationTimelineContext, [{
          key: "params",
          get: function get() {
            return this.options.params;
          }
        }, {
          key: "updateOptions",
          value: function updateOptions(options, skipIfExists) {
            var _this17 = this;

            if (!options) return;
            var newOptions = options;
            var optionsToUpdate = this.options; // NOTE: this will get patched up when other animation methods support duration overrides

            if (newOptions.duration != null) {
              optionsToUpdate.duration = resolveTimingValue(newOptions.duration);
            }

            if (newOptions.delay != null) {
              optionsToUpdate.delay = resolveTimingValue(newOptions.delay);
            }

            var newParams = newOptions.params;

            if (newParams) {
              var paramsToUpdate = optionsToUpdate.params;

              if (!paramsToUpdate) {
                paramsToUpdate = this.options.params = {};
              }

              Object.keys(newParams).forEach(function (name) {
                if (!skipIfExists || !paramsToUpdate.hasOwnProperty(name)) {
                  paramsToUpdate[name] = interpolateParams(newParams[name], paramsToUpdate, _this17.errors);
                }
              });
            }
          }
        }, {
          key: "_copyOptions",
          value: function _copyOptions() {
            var options = {};

            if (this.options) {
              var oldParams = this.options.params;

              if (oldParams) {
                var params = options['params'] = {};
                Object.keys(oldParams).forEach(function (name) {
                  params[name] = oldParams[name];
                });
              }
            }

            return options;
          }
        }, {
          key: "createSubContext",
          value: function createSubContext() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var element = arguments.length > 1 ? arguments[1] : undefined;
            var newTime = arguments.length > 2 ? arguments[2] : undefined;
            var target = element || this.element;
            var context = new AnimationTimelineContext(this._driver, target, this.subInstructions, this._enterClassName, this._leaveClassName, this.errors, this.timelines, this.currentTimeline.fork(target, newTime || 0));
            context.previousNode = this.previousNode;
            context.currentAnimateTimings = this.currentAnimateTimings;
            context.options = this._copyOptions();
            context.updateOptions(options);
            context.currentQueryIndex = this.currentQueryIndex;
            context.currentQueryTotal = this.currentQueryTotal;
            context.parentContext = this;
            this.subContextCount++;
            return context;
          }
        }, {
          key: "transformIntoNewTimeline",
          value: function transformIntoNewTimeline(newTime) {
            this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
            this.currentTimeline = this.currentTimeline.fork(this.element, newTime);
            this.timelines.push(this.currentTimeline);
            return this.currentTimeline;
          }
        }, {
          key: "appendInstructionToTimeline",
          value: function appendInstructionToTimeline(instruction, duration, delay) {
            var updatedTimings = {
              duration: duration != null ? duration : instruction.duration,
              delay: this.currentTimeline.currentTime + (delay != null ? delay : 0) + instruction.delay,
              easing: ''
            };
            var builder = new SubTimelineBuilder(this._driver, instruction.element, instruction.keyframes, instruction.preStyleProps, instruction.postStyleProps, updatedTimings, instruction.stretchStartingKeyframe);
            this.timelines.push(builder);
            return updatedTimings;
          }
        }, {
          key: "incrementTime",
          value: function incrementTime(time) {
            this.currentTimeline.forwardTime(this.currentTimeline.duration + time);
          }
        }, {
          key: "delayNextStep",
          value: function delayNextStep(delay) {
            // negative delays are not yet supported
            if (delay > 0) {
              this.currentTimeline.delayNextStep(delay);
            }
          }
        }, {
          key: "invokeQuery",
          value: function invokeQuery(selector, originalSelector, limit, includeSelf, optional, errors) {
            var results = [];

            if (includeSelf) {
              results.push(this.element);
            }

            if (selector.length > 0) {
              // if :self is only used then the selector is empty
              selector = selector.replace(ENTER_TOKEN_REGEX, '.' + this._enterClassName);
              selector = selector.replace(LEAVE_TOKEN_REGEX, '.' + this._leaveClassName);
              var multi = limit != 1;

              var elements = this._driver.query(this.element, selector, multi);

              if (limit !== 0) {
                elements = limit < 0 ? elements.slice(elements.length + limit, elements.length) : elements.slice(0, limit);
              }

              results.push.apply(results, _toConsumableArray(elements));
            }

            if (!optional && results.length == 0) {
              errors.push("`query(\"".concat(originalSelector, "\")` returned zero elements. (Use `query(\"").concat(originalSelector, "\", { optional: true })` if you wish to allow this.)"));
            }

            return results;
          }
        }]);

        return AnimationTimelineContext;
      }();

      var TimelineBuilder = /*#__PURE__*/function () {
        function TimelineBuilder(_driver, element, startTime, _elementTimelineStylesLookup) {
          _classCallCheck2(this, TimelineBuilder);

          this._driver = _driver;
          this.element = element;
          this.startTime = startTime;
          this._elementTimelineStylesLookup = _elementTimelineStylesLookup;
          this.duration = 0;
          this._previousKeyframe = {};
          this._currentKeyframe = {};
          this._keyframes = new Map();
          this._styleSummary = {};
          this._pendingStyles = {};
          this._backFill = {};
          this._currentEmptyStepKeyframe = null;

          if (!this._elementTimelineStylesLookup) {
            this._elementTimelineStylesLookup = new Map();
          }

          this._localTimelineStyles = Object.create(this._backFill, {});
          this._globalTimelineStyles = this._elementTimelineStylesLookup.get(element);

          if (!this._globalTimelineStyles) {
            this._globalTimelineStyles = this._localTimelineStyles;

            this._elementTimelineStylesLookup.set(element, this._localTimelineStyles);
          }

          this._loadKeyframe();
        }

        _createClass2(TimelineBuilder, [{
          key: "containsAnimation",
          value: function containsAnimation() {
            switch (this._keyframes.size) {
              case 0:
                return false;

              case 1:
                return this.getCurrentStyleProperties().length > 0;

              default:
                return true;
            }
          }
        }, {
          key: "getCurrentStyleProperties",
          value: function getCurrentStyleProperties() {
            return Object.keys(this._currentKeyframe);
          }
        }, {
          key: "currentTime",
          get: function get() {
            return this.startTime + this.duration;
          }
        }, {
          key: "delayNextStep",
          value: function delayNextStep(delay) {
            // in the event that a style() step is placed right before a stagger()
            // and that style() step is the very first style() value in the animation
            // then we need to make a copy of the keyframe [0, copy, 1] so that the delay
            // properly applies the style() values to work with the stagger...
            var hasPreStyleStep = this._keyframes.size == 1 && Object.keys(this._pendingStyles).length;

            if (this.duration || hasPreStyleStep) {
              this.forwardTime(this.currentTime + delay);

              if (hasPreStyleStep) {
                this.snapshotCurrentStyles();
              }
            } else {
              this.startTime += delay;
            }
          }
        }, {
          key: "fork",
          value: function fork(element, currentTime) {
            this.applyStylesToKeyframe();
            return new TimelineBuilder(this._driver, element, currentTime || this.currentTime, this._elementTimelineStylesLookup);
          }
        }, {
          key: "_loadKeyframe",
          value: function _loadKeyframe() {
            if (this._currentKeyframe) {
              this._previousKeyframe = this._currentKeyframe;
            }

            this._currentKeyframe = this._keyframes.get(this.duration);

            if (!this._currentKeyframe) {
              this._currentKeyframe = Object.create(this._backFill, {});

              this._keyframes.set(this.duration, this._currentKeyframe);
            }
          }
        }, {
          key: "forwardFrame",
          value: function forwardFrame() {
            this.duration += ONE_FRAME_IN_MILLISECONDS;

            this._loadKeyframe();
          }
        }, {
          key: "forwardTime",
          value: function forwardTime(time) {
            this.applyStylesToKeyframe();
            this.duration = time;

            this._loadKeyframe();
          }
        }, {
          key: "_updateStyle",
          value: function _updateStyle(prop, value) {
            this._localTimelineStyles[prop] = value;
            this._globalTimelineStyles[prop] = value;
            this._styleSummary[prop] = {
              time: this.currentTime,
              value: value
            };
          }
        }, {
          key: "allowOnlyTimelineStyles",
          value: function allowOnlyTimelineStyles() {
            return this._currentEmptyStepKeyframe !== this._currentKeyframe;
          }
        }, {
          key: "applyEmptyStep",
          value: function applyEmptyStep(easing) {
            var _this18 = this;

            if (easing) {
              this._previousKeyframe['easing'] = easing;
            } // special case for animate(duration):
            // all missing styles are filled with a `*` value then
            // if any destination styles are filled in later on the same
            // keyframe then they will override the overridden styles
            // We use `_globalTimelineStyles` here because there may be
            // styles in previous keyframes that are not present in this timeline


            Object.keys(this._globalTimelineStyles).forEach(function (prop) {
              _this18._backFill[prop] = _this18._globalTimelineStyles[prop] || _angular_animations__WEBPACK_IMPORTED_MODULE_0__.AUTO_STYLE;
              _this18._currentKeyframe[prop] = _angular_animations__WEBPACK_IMPORTED_MODULE_0__.AUTO_STYLE;
            });
            this._currentEmptyStepKeyframe = this._currentKeyframe;
          }
        }, {
          key: "setStyles",
          value: function setStyles(input, easing, errors, options) {
            var _this19 = this;

            if (easing) {
              this._previousKeyframe['easing'] = easing;
            }

            var params = options && options.params || {};
            var styles = flattenStyles(input, this._globalTimelineStyles);
            Object.keys(styles).forEach(function (prop) {
              var val = interpolateParams(styles[prop], params, errors);
              _this19._pendingStyles[prop] = val;

              if (!_this19._localTimelineStyles.hasOwnProperty(prop)) {
                _this19._backFill[prop] = _this19._globalTimelineStyles.hasOwnProperty(prop) ? _this19._globalTimelineStyles[prop] : _angular_animations__WEBPACK_IMPORTED_MODULE_0__.AUTO_STYLE;
              }

              _this19._updateStyle(prop, val);
            });
          }
        }, {
          key: "applyStylesToKeyframe",
          value: function applyStylesToKeyframe() {
            var _this20 = this;

            var styles = this._pendingStyles;
            var props = Object.keys(styles);
            if (props.length == 0) return;
            this._pendingStyles = {};
            props.forEach(function (prop) {
              var val = styles[prop];
              _this20._currentKeyframe[prop] = val;
            });
            Object.keys(this._localTimelineStyles).forEach(function (prop) {
              if (!_this20._currentKeyframe.hasOwnProperty(prop)) {
                _this20._currentKeyframe[prop] = _this20._localTimelineStyles[prop];
              }
            });
          }
        }, {
          key: "snapshotCurrentStyles",
          value: function snapshotCurrentStyles() {
            var _this21 = this;

            Object.keys(this._localTimelineStyles).forEach(function (prop) {
              var val = _this21._localTimelineStyles[prop];
              _this21._pendingStyles[prop] = val;

              _this21._updateStyle(prop, val);
            });
          }
        }, {
          key: "getFinalKeyframe",
          value: function getFinalKeyframe() {
            return this._keyframes.get(this.duration);
          }
        }, {
          key: "properties",
          get: function get() {
            var properties = [];

            for (var prop in this._currentKeyframe) {
              properties.push(prop);
            }

            return properties;
          }
        }, {
          key: "mergeTimelineCollectedStyles",
          value: function mergeTimelineCollectedStyles(timeline) {
            var _this22 = this;

            Object.keys(timeline._styleSummary).forEach(function (prop) {
              var details0 = _this22._styleSummary[prop];
              var details1 = timeline._styleSummary[prop];

              if (!details0 || details1.time > details0.time) {
                _this22._updateStyle(prop, details1.value);
              }
            });
          }
        }, {
          key: "buildKeyframes",
          value: function buildKeyframes() {
            var _this23 = this;

            this.applyStylesToKeyframe();
            var preStyleProps = new Set();
            var postStyleProps = new Set();
            var isEmpty = this._keyframes.size === 1 && this.duration === 0;
            var finalKeyframes = [];

            this._keyframes.forEach(function (keyframe, time) {
              var finalKeyframe = copyStyles(keyframe, true);
              Object.keys(finalKeyframe).forEach(function (prop) {
                var value = finalKeyframe[prop];

                if (value == _angular_animations__WEBPACK_IMPORTED_MODULE_0__["ɵPRE_STYLE"]) {
                  preStyleProps.add(prop);
                } else if (value == _angular_animations__WEBPACK_IMPORTED_MODULE_0__.AUTO_STYLE) {
                  postStyleProps.add(prop);
                }
              });

              if (!isEmpty) {
                finalKeyframe['offset'] = time / _this23.duration;
              }

              finalKeyframes.push(finalKeyframe);
            });

            var preProps = preStyleProps.size ? iteratorToArray(preStyleProps.values()) : [];
            var postProps = postStyleProps.size ? iteratorToArray(postStyleProps.values()) : []; // special case for a 0-second animation (which is designed just to place styles onscreen)

            if (isEmpty) {
              var kf0 = finalKeyframes[0];
              var kf1 = copyObj(kf0);
              kf0['offset'] = 0;
              kf1['offset'] = 1;
              finalKeyframes = [kf0, kf1];
            }

            return createTimelineInstruction(this.element, finalKeyframes, preProps, postProps, this.duration, this.startTime, this.easing, false);
          }
        }]);

        return TimelineBuilder;
      }();

      var SubTimelineBuilder = /*#__PURE__*/function (_TimelineBuilder) {
        _inherits(SubTimelineBuilder, _TimelineBuilder);

        var _super = _createSuper(SubTimelineBuilder);

        function SubTimelineBuilder(driver, element, keyframes, preStyleProps, postStyleProps, timings) {
          var _this24;

          var _stretchStartingKeyframe = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;

          _classCallCheck2(this, SubTimelineBuilder);

          _this24 = _super.call(this, driver, element, timings.delay);
          _this24.element = element;
          _this24.keyframes = keyframes;
          _this24.preStyleProps = preStyleProps;
          _this24.postStyleProps = postStyleProps;
          _this24._stretchStartingKeyframe = _stretchStartingKeyframe;
          _this24.timings = {
            duration: timings.duration,
            delay: timings.delay,
            easing: timings.easing
          };
          return _this24;
        }

        _createClass2(SubTimelineBuilder, [{
          key: "containsAnimation",
          value: function containsAnimation() {
            return this.keyframes.length > 1;
          }
        }, {
          key: "buildKeyframes",
          value: function buildKeyframes() {
            var keyframes = this.keyframes;
            var _this$timings = this.timings,
                delay = _this$timings.delay,
                duration = _this$timings.duration,
                easing = _this$timings.easing;

            if (this._stretchStartingKeyframe && delay) {
              var newKeyframes = [];
              var totalTime = duration + delay;
              var startingGap = delay / totalTime; // the original starting keyframe now starts once the delay is done

              var newFirstKeyframe = copyStyles(keyframes[0], false);
              newFirstKeyframe['offset'] = 0;
              newKeyframes.push(newFirstKeyframe);
              var oldFirstKeyframe = copyStyles(keyframes[0], false);
              oldFirstKeyframe['offset'] = roundOffset(startingGap);
              newKeyframes.push(oldFirstKeyframe);
              /*
                When the keyframe is stretched then it means that the delay before the animation
                starts is gone. Instead the first keyframe is placed at the start of the animation
                and it is then copied to where it starts when the original delay is over. This basically
                means nothing animates during that delay, but the styles are still renderered. For this
                to work the original offset values that exist in the original keyframes must be "warped"
                so that they can take the new keyframe + delay into account.
                       delay=1000, duration=1000, keyframes = 0 .5 1
                       turns into
                       delay=0, duration=2000, keyframes = 0 .33 .66 1
               */
              // offsets between 1 ... n -1 are all warped by the keyframe stretch

              var limit = keyframes.length - 1;

              for (var i = 1; i <= limit; i++) {
                var kf = copyStyles(keyframes[i], false);
                var oldOffset = kf['offset'];
                var timeAtKeyframe = delay + oldOffset * duration;
                kf['offset'] = roundOffset(timeAtKeyframe / totalTime);
                newKeyframes.push(kf);
              } // the new starting keyframe should be added at the start


              duration = totalTime;
              delay = 0;
              easing = '';
              keyframes = newKeyframes;
            }

            return createTimelineInstruction(this.element, keyframes, this.preStyleProps, this.postStyleProps, duration, delay, easing, true);
          }
        }]);

        return SubTimelineBuilder;
      }(TimelineBuilder);

      function roundOffset(offset) {
        var decimalPoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
        var mult = Math.pow(10, decimalPoints - 1);
        return Math.round(offset * mult) / mult;
      }

      function flattenStyles(input, allStyles) {
        var styles = {};
        var allProperties;
        input.forEach(function (token) {
          if (token === '*') {
            allProperties = allProperties || Object.keys(allStyles);
            allProperties.forEach(function (prop) {
              styles[prop] = _angular_animations__WEBPACK_IMPORTED_MODULE_0__.AUTO_STYLE;
            });
          } else {
            copyStyles(token, false, styles);
          }
        });
        return styles;
      }

      var Animation = /*#__PURE__*/function () {
        function Animation(_driver, input) {
          _classCallCheck2(this, Animation);

          this._driver = _driver;
          var errors = [];
          var ast = buildAnimationAst(_driver, input, errors);

          if (errors.length) {
            var errorMessage = "animation validation failed:\n".concat(errors.join('\n'));
            throw new Error(errorMessage);
          }

          this._animationAst = ast;
        }

        _createClass2(Animation, [{
          key: "buildTimelines",
          value: function buildTimelines(element, startingStyles, destinationStyles, options, subInstructions) {
            var start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) : startingStyles;
            var dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) : destinationStyles;
            var errors = [];
            subInstructions = subInstructions || new ElementInstructionMap();
            var result = buildAnimationTimelines(this._driver, element, this._animationAst, ENTER_CLASSNAME, LEAVE_CLASSNAME, start, dest, options, subInstructions, errors);

            if (errors.length) {
              var errorMessage = "animation building failed:\n".concat(errors.join('\n'));
              throw new Error(errorMessage);
            }

            return result;
          }
        }]);

        return Animation;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @publicApi
       */


      var AnimationStyleNormalizer = function AnimationStyleNormalizer() {
        _classCallCheck2(this, AnimationStyleNormalizer);
      };
      /**
       * @publicApi
       */


      var NoopAnimationStyleNormalizer = /*#__PURE__*/function () {
        function NoopAnimationStyleNormalizer() {
          _classCallCheck2(this, NoopAnimationStyleNormalizer);
        }

        _createClass2(NoopAnimationStyleNormalizer, [{
          key: "normalizePropertyName",
          value: function normalizePropertyName(propertyName, errors) {
            return propertyName;
          }
        }, {
          key: "normalizeStyleValue",
          value: function normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {
            return value;
          }
        }]);

        return NoopAnimationStyleNormalizer;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var WebAnimationsStyleNormalizer = /*#__PURE__*/function (_AnimationStyleNormal) {
        _inherits(WebAnimationsStyleNormalizer, _AnimationStyleNormal);

        var _super2 = _createSuper(WebAnimationsStyleNormalizer);

        function WebAnimationsStyleNormalizer() {
          _classCallCheck2(this, WebAnimationsStyleNormalizer);

          return _super2.apply(this, arguments);
        }

        _createClass2(WebAnimationsStyleNormalizer, [{
          key: "normalizePropertyName",
          value: function normalizePropertyName(propertyName, errors) {
            return dashCaseToCamelCase(propertyName);
          }
        }, {
          key: "normalizeStyleValue",
          value: function normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {
            var unit = '';
            var strVal = value.toString().trim();

            if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {
              if (typeof value === 'number') {
                unit = 'px';
              } else {
                var valAndSuffixMatch = value.match(/^[+-]?[\d\.]+([a-z]*)$/);

                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
                  errors.push("Please provide a CSS unit value for ".concat(userProvidedProperty, ":").concat(value));
                }
              }
            }

            return strVal + unit;
          }
        }]);

        return WebAnimationsStyleNormalizer;
      }(AnimationStyleNormalizer);

      var ɵ0$1 = function ɵ0$1() {
        return makeBooleanMap('width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective'.split(','));
      };

      var DIMENSIONAL_PROP_MAP = ɵ0$1();

      function makeBooleanMap(keys) {
        var map = {};
        keys.forEach(function (key) {
          return map[key] = true;
        });
        return map;
      }

      function createTransitionInstruction(element, triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines, queriedElements, preStyleProps, postStyleProps, totalTime, errors) {
        return {
          type: 0
          /* TransitionAnimation */
          ,
          element: element,
          triggerName: triggerName,
          isRemovalTransition: isRemovalTransition,
          fromState: fromState,
          fromStyles: fromStyles,
          toState: toState,
          toStyles: toStyles,
          timelines: timelines,
          queriedElements: queriedElements,
          preStyleProps: preStyleProps,
          postStyleProps: postStyleProps,
          totalTime: totalTime,
          errors: errors
        };
      }

      var EMPTY_OBJECT = {};

      var AnimationTransitionFactory = /*#__PURE__*/function () {
        function AnimationTransitionFactory(_triggerName, ast, _stateStyles) {
          _classCallCheck2(this, AnimationTransitionFactory);

          this._triggerName = _triggerName;
          this.ast = ast;
          this._stateStyles = _stateStyles;
        }

        _createClass2(AnimationTransitionFactory, [{
          key: "match",
          value: function match(currentState, nextState, element, params) {
            return oneOrMoreTransitionsMatch(this.ast.matchers, currentState, nextState, element, params);
          }
        }, {
          key: "buildStyles",
          value: function buildStyles(stateName, params, errors) {
            var backupStateStyler = this._stateStyles['*'];
            var stateStyler = this._stateStyles[stateName];
            var backupStyles = backupStateStyler ? backupStateStyler.buildStyles(params, errors) : {};
            return stateStyler ? stateStyler.buildStyles(params, errors) : backupStyles;
          }
        }, {
          key: "build",
          value: function build(driver, element, currentState, nextState, enterClassName, leaveClassName, currentOptions, nextOptions, subInstructions, skipAstBuild) {
            var errors = [];
            var transitionAnimationParams = this.ast.options && this.ast.options.params || EMPTY_OBJECT;
            var currentAnimationParams = currentOptions && currentOptions.params || EMPTY_OBJECT;
            var currentStateStyles = this.buildStyles(currentState, currentAnimationParams, errors);
            var nextAnimationParams = nextOptions && nextOptions.params || EMPTY_OBJECT;
            var nextStateStyles = this.buildStyles(nextState, nextAnimationParams, errors);
            var queriedElements = new Set();
            var preStyleMap = new Map();
            var postStyleMap = new Map();
            var isRemoval = nextState === 'void';
            var animationOptions = {
              params: Object.assign(Object.assign({}, transitionAnimationParams), nextAnimationParams)
            };
            var timelines = skipAstBuild ? [] : buildAnimationTimelines(driver, element, this.ast.animation, enterClassName, leaveClassName, currentStateStyles, nextStateStyles, animationOptions, subInstructions, errors);
            var totalTime = 0;
            timelines.forEach(function (tl) {
              totalTime = Math.max(tl.duration + tl.delay, totalTime);
            });

            if (errors.length) {
              return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, [], [], preStyleMap, postStyleMap, totalTime, errors);
            }

            timelines.forEach(function (tl) {
              var elm = tl.element;
              var preProps = getOrSetAsInMap(preStyleMap, elm, {});
              tl.preStyleProps.forEach(function (prop) {
                return preProps[prop] = true;
              });
              var postProps = getOrSetAsInMap(postStyleMap, elm, {});
              tl.postStyleProps.forEach(function (prop) {
                return postProps[prop] = true;
              });

              if (elm !== element) {
                queriedElements.add(elm);
              }
            });
            var queriedElementsList = iteratorToArray(queriedElements.values());
            return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, timelines, queriedElementsList, preStyleMap, postStyleMap, totalTime);
          }
        }]);

        return AnimationTransitionFactory;
      }();

      function oneOrMoreTransitionsMatch(matchFns, currentState, nextState, element, params) {
        return matchFns.some(function (fn) {
          return fn(currentState, nextState, element, params);
        });
      }

      var AnimationStateStyles = /*#__PURE__*/function () {
        function AnimationStateStyles(styles, defaultParams) {
          _classCallCheck2(this, AnimationStateStyles);

          this.styles = styles;
          this.defaultParams = defaultParams;
        }

        _createClass2(AnimationStateStyles, [{
          key: "buildStyles",
          value: function buildStyles(params, errors) {
            var finalStyles = {};
            var combinedParams = copyObj(this.defaultParams);
            Object.keys(params).forEach(function (key) {
              var value = params[key];

              if (value != null) {
                combinedParams[key] = value;
              }
            });
            this.styles.styles.forEach(function (value) {
              if (typeof value !== 'string') {
                var styleObj = value;
                Object.keys(styleObj).forEach(function (prop) {
                  var val = styleObj[prop];

                  if (val.length > 1) {
                    val = interpolateParams(val, combinedParams, errors);
                  }

                  finalStyles[prop] = val;
                });
              }
            });
            return finalStyles;
          }
        }]);

        return AnimationStateStyles;
      }();
      /**
       * @publicApi
       */


      function buildTrigger(name, ast) {
        return new AnimationTrigger(name, ast);
      }
      /**
       * @publicApi
       */


      var AnimationTrigger = /*#__PURE__*/function () {
        function AnimationTrigger(name, ast) {
          var _this25 = this;

          _classCallCheck2(this, AnimationTrigger);

          this.name = name;
          this.ast = ast;
          this.transitionFactories = [];
          this.states = {};
          ast.states.forEach(function (ast) {
            var defaultParams = ast.options && ast.options.params || {};
            _this25.states[ast.name] = new AnimationStateStyles(ast.style, defaultParams);
          });
          balanceProperties(this.states, 'true', '1');
          balanceProperties(this.states, 'false', '0');
          ast.transitions.forEach(function (ast) {
            _this25.transitionFactories.push(new AnimationTransitionFactory(name, ast, _this25.states));
          });
          this.fallbackTransition = createFallbackTransition(name, this.states);
        }

        _createClass2(AnimationTrigger, [{
          key: "containsQueries",
          get: function get() {
            return this.ast.queryCount > 0;
          }
        }, {
          key: "matchTransition",
          value: function matchTransition(currentState, nextState, element, params) {
            var entry = this.transitionFactories.find(function (f) {
              return f.match(currentState, nextState, element, params);
            });
            return entry || null;
          }
        }, {
          key: "matchStyles",
          value: function matchStyles(currentState, params, errors) {
            return this.fallbackTransition.buildStyles(currentState, params, errors);
          }
        }]);

        return AnimationTrigger;
      }();

      function createFallbackTransition(triggerName, states) {
        var matchers = [function (fromState, toState) {
          return true;
        }];
        var animation = {
          type: 2
          /* Sequence */
          ,
          steps: [],
          options: null
        };
        var transition = {
          type: 1
          /* Transition */
          ,
          animation: animation,
          matchers: matchers,
          options: null,
          queryCount: 0,
          depCount: 0
        };
        return new AnimationTransitionFactory(triggerName, transition, states);
      }

      function balanceProperties(obj, key1, key2) {
        if (obj.hasOwnProperty(key1)) {
          if (!obj.hasOwnProperty(key2)) {
            obj[key2] = obj[key1];
          }
        } else if (obj.hasOwnProperty(key2)) {
          obj[key1] = obj[key2];
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var EMPTY_INSTRUCTION_MAP = new ElementInstructionMap();

      var TimelineAnimationEngine = /*#__PURE__*/function () {
        function TimelineAnimationEngine(bodyNode, _driver, _normalizer) {
          _classCallCheck2(this, TimelineAnimationEngine);

          this.bodyNode = bodyNode;
          this._driver = _driver;
          this._normalizer = _normalizer;
          this._animations = {};
          this._playersById = {};
          this.players = [];
        }

        _createClass2(TimelineAnimationEngine, [{
          key: "register",
          value: function register(id, metadata) {
            var errors = [];
            var ast = buildAnimationAst(this._driver, metadata, errors);

            if (errors.length) {
              throw new Error("Unable to build the animation due to the following errors: ".concat(errors.join('\n')));
            } else {
              this._animations[id] = ast;
            }
          }
        }, {
          key: "_buildPlayer",
          value: function _buildPlayer(i, preStyles, postStyles) {
            var element = i.element;
            var keyframes = normalizeKeyframes(this._driver, this._normalizer, element, i.keyframes, preStyles, postStyles);
            return this._driver.animate(element, keyframes, i.duration, i.delay, i.easing, [], true);
          }
        }, {
          key: "create",
          value: function create(id, element) {
            var _this26 = this;

            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var errors = [];
            var ast = this._animations[id];
            var instructions;
            var autoStylesMap = new Map();

            if (ast) {
              instructions = buildAnimationTimelines(this._driver, element, ast, ENTER_CLASSNAME, LEAVE_CLASSNAME, {}, {}, options, EMPTY_INSTRUCTION_MAP, errors);
              instructions.forEach(function (inst) {
                var styles = getOrSetAsInMap(autoStylesMap, inst.element, {});
                inst.postStyleProps.forEach(function (prop) {
                  return styles[prop] = null;
                });
              });
            } else {
              errors.push('The requested animation doesn\'t exist or has already been destroyed');
              instructions = [];
            }

            if (errors.length) {
              throw new Error("Unable to create the animation due to the following errors: ".concat(errors.join('\n')));
            }

            autoStylesMap.forEach(function (styles, element) {
              Object.keys(styles).forEach(function (prop) {
                styles[prop] = _this26._driver.computeStyle(element, prop, _angular_animations__WEBPACK_IMPORTED_MODULE_0__.AUTO_STYLE);
              });
            });
            var players = instructions.map(function (i) {
              var styles = autoStylesMap.get(i.element);
              return _this26._buildPlayer(i, {}, styles);
            });
            var player = optimizeGroupPlayer(players);
            this._playersById[id] = player;
            player.onDestroy(function () {
              return _this26.destroy(id);
            });
            this.players.push(player);
            return player;
          }
        }, {
          key: "destroy",
          value: function destroy(id) {
            var player = this._getPlayer(id);

            player.destroy();
            delete this._playersById[id];
            var index = this.players.indexOf(player);

            if (index >= 0) {
              this.players.splice(index, 1);
            }
          }
        }, {
          key: "_getPlayer",
          value: function _getPlayer(id) {
            var player = this._playersById[id];

            if (!player) {
              throw new Error("Unable to find the timeline player referenced by ".concat(id));
            }

            return player;
          }
        }, {
          key: "listen",
          value: function listen(id, element, eventName, callback) {
            // triggerName, fromState, toState are all ignored for timeline animations
            var baseEvent = makeAnimationEvent(element, '', '', '');
            listenOnPlayer(this._getPlayer(id), eventName, baseEvent, callback);
            return function () {};
          }
        }, {
          key: "command",
          value: function command(id, element, _command, args) {
            if (_command == 'register') {
              this.register(id, args[0]);
              return;
            }

            if (_command == 'create') {
              var options = args[0] || {};
              this.create(id, element, options);
              return;
            }

            var player = this._getPlayer(id);

            switch (_command) {
              case 'play':
                player.play();
                break;

              case 'pause':
                player.pause();
                break;

              case 'reset':
                player.reset();
                break;

              case 'restart':
                player.restart();
                break;

              case 'finish':
                player.finish();
                break;

              case 'init':
                player.init();
                break;

              case 'setPosition':
                player.setPosition(parseFloat(args[0]));
                break;

              case 'destroy':
                this.destroy(id);
                break;
            }
          }
        }]);

        return TimelineAnimationEngine;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var QUEUED_CLASSNAME = 'ng-animate-queued';
      var QUEUED_SELECTOR = '.ng-animate-queued';
      var DISABLED_CLASSNAME = 'ng-animate-disabled';
      var DISABLED_SELECTOR = '.ng-animate-disabled';
      var STAR_CLASSNAME = 'ng-star-inserted';
      var STAR_SELECTOR = '.ng-star-inserted';
      var EMPTY_PLAYER_ARRAY = [];
      var NULL_REMOVAL_STATE = {
        namespaceId: '',
        setForRemoval: false,
        setForMove: false,
        hasAnimation: false,
        removedBeforeQueried: false
      };
      var NULL_REMOVED_QUERIED_STATE = {
        namespaceId: '',
        setForMove: false,
        setForRemoval: false,
        hasAnimation: false,
        removedBeforeQueried: true
      };
      var REMOVAL_FLAG = '__ng_removed';

      var StateValue = /*#__PURE__*/function () {
        function StateValue(input) {
          var namespaceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

          _classCallCheck2(this, StateValue);

          this.namespaceId = namespaceId;
          var isObj = input && input.hasOwnProperty('value');
          var value = isObj ? input['value'] : input;
          this.value = normalizeTriggerValue(value);

          if (isObj) {
            var options = copyObj(input);
            delete options['value'];
            this.options = options;
          } else {
            this.options = {};
          }

          if (!this.options.params) {
            this.options.params = {};
          }
        }

        _createClass2(StateValue, [{
          key: "params",
          get: function get() {
            return this.options.params;
          }
        }, {
          key: "absorbOptions",
          value: function absorbOptions(options) {
            var newParams = options.params;

            if (newParams) {
              var oldParams = this.options.params;
              Object.keys(newParams).forEach(function (prop) {
                if (oldParams[prop] == null) {
                  oldParams[prop] = newParams[prop];
                }
              });
            }
          }
        }]);

        return StateValue;
      }();

      var VOID_VALUE = 'void';
      var DEFAULT_STATE_VALUE = new StateValue(VOID_VALUE);

      var AnimationTransitionNamespace = /*#__PURE__*/function () {
        function AnimationTransitionNamespace(id, hostElement, _engine) {
          _classCallCheck2(this, AnimationTransitionNamespace);

          this.id = id;
          this.hostElement = hostElement;
          this._engine = _engine;
          this.players = [];
          this._triggers = {};
          this._queue = [];
          this._elementListeners = new Map();
          this._hostClassName = 'ng-tns-' + id;
          addClass(hostElement, this._hostClassName);
        }

        _createClass2(AnimationTransitionNamespace, [{
          key: "listen",
          value: function listen(element, name, phase, callback) {
            var _this27 = this;

            if (!this._triggers.hasOwnProperty(name)) {
              throw new Error("Unable to listen on the animation trigger event \"".concat(phase, "\" because the animation trigger \"").concat(name, "\" doesn't exist!"));
            }

            if (phase == null || phase.length == 0) {
              throw new Error("Unable to listen on the animation trigger \"".concat(name, "\" because the provided event is undefined!"));
            }

            if (!isTriggerEventValid(phase)) {
              throw new Error("The provided animation trigger event \"".concat(phase, "\" for the animation trigger \"").concat(name, "\" is not supported!"));
            }

            var listeners = getOrSetAsInMap(this._elementListeners, element, []);
            var data = {
              name: name,
              phase: phase,
              callback: callback
            };
            listeners.push(data);
            var triggersWithStates = getOrSetAsInMap(this._engine.statesByElement, element, {});

            if (!triggersWithStates.hasOwnProperty(name)) {
              addClass(element, NG_TRIGGER_CLASSNAME);
              addClass(element, NG_TRIGGER_CLASSNAME + '-' + name);
              triggersWithStates[name] = DEFAULT_STATE_VALUE;
            }

            return function () {
              // the event listener is removed AFTER the flush has occurred such
              // that leave animations callbacks can fire (otherwise if the node
              // is removed in between then the listeners would be deregistered)
              _this27._engine.afterFlush(function () {
                var index = listeners.indexOf(data);

                if (index >= 0) {
                  listeners.splice(index, 1);
                }

                if (!_this27._triggers[name]) {
                  delete triggersWithStates[name];
                }
              });
            };
          }
        }, {
          key: "register",
          value: function register(name, ast) {
            if (this._triggers[name]) {
              // throw
              return false;
            } else {
              this._triggers[name] = ast;
              return true;
            }
          }
        }, {
          key: "_getTrigger",
          value: function _getTrigger(name) {
            var trigger = this._triggers[name];

            if (!trigger) {
              throw new Error("The provided animation trigger \"".concat(name, "\" has not been registered!"));
            }

            return trigger;
          }
        }, {
          key: "trigger",
          value: function trigger(element, triggerName, value) {
            var _this28 = this;

            var defaultToFallback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

            var trigger = this._getTrigger(triggerName);

            var player = new TransitionAnimationPlayer(this.id, triggerName, element);

            var triggersWithStates = this._engine.statesByElement.get(element);

            if (!triggersWithStates) {
              addClass(element, NG_TRIGGER_CLASSNAME);
              addClass(element, NG_TRIGGER_CLASSNAME + '-' + triggerName);

              this._engine.statesByElement.set(element, triggersWithStates = {});
            }

            var fromState = triggersWithStates[triggerName];
            var toState = new StateValue(value, this.id);
            var isObj = value && value.hasOwnProperty('value');

            if (!isObj && fromState) {
              toState.absorbOptions(fromState.options);
            }

            triggersWithStates[triggerName] = toState;

            if (!fromState) {
              fromState = DEFAULT_STATE_VALUE;
            }

            var isRemoval = toState.value === VOID_VALUE; // normally this isn't reached by here, however, if an object expression
            // is passed in then it may be a new object each time. Comparing the value
            // is important since that will stay the same despite there being a new object.
            // The removal arc here is special cased because the same element is triggered
            // twice in the event that it contains animations on the outer/inner portions
            // of the host container

            if (!isRemoval && fromState.value === toState.value) {
              // this means that despite the value not changing, some inner params
              // have changed which means that the animation final styles need to be applied
              if (!objEquals(fromState.params, toState.params)) {
                var errors = [];
                var fromStyles = trigger.matchStyles(fromState.value, fromState.params, errors);
                var toStyles = trigger.matchStyles(toState.value, toState.params, errors);

                if (errors.length) {
                  this._engine.reportError(errors);
                } else {
                  this._engine.afterFlush(function () {
                    eraseStyles(element, fromStyles);
                    setStyles(element, toStyles);
                  });
                }
              }

              return;
            }

            var playersOnElement = getOrSetAsInMap(this._engine.playersByElement, element, []);
            playersOnElement.forEach(function (player) {
              // only remove the player if it is queued on the EXACT same trigger/namespace
              // we only also deal with queued players here because if the animation has
              // started then we want to keep the player alive until the flush happens
              // (which is where the previousPlayers are passed into the new palyer)
              if (player.namespaceId == _this28.id && player.triggerName == triggerName && player.queued) {
                player.destroy();
              }
            });
            var transition = trigger.matchTransition(fromState.value, toState.value, element, toState.params);
            var isFallbackTransition = false;

            if (!transition) {
              if (!defaultToFallback) return;
              transition = trigger.fallbackTransition;
              isFallbackTransition = true;
            }

            this._engine.totalQueuedPlayers++;

            this._queue.push({
              element: element,
              triggerName: triggerName,
              transition: transition,
              fromState: fromState,
              toState: toState,
              player: player,
              isFallbackTransition: isFallbackTransition
            });

            if (!isFallbackTransition) {
              addClass(element, QUEUED_CLASSNAME);
              player.onStart(function () {
                removeClass(element, QUEUED_CLASSNAME);
              });
            }

            player.onDone(function () {
              var index = _this28.players.indexOf(player);

              if (index >= 0) {
                _this28.players.splice(index, 1);
              }

              var players = _this28._engine.playersByElement.get(element);

              if (players) {
                var _index2 = players.indexOf(player);

                if (_index2 >= 0) {
                  players.splice(_index2, 1);
                }
              }
            });
            this.players.push(player);
            playersOnElement.push(player);
            return player;
          }
        }, {
          key: "deregister",
          value: function deregister(name) {
            var _this29 = this;

            delete this._triggers[name];

            this._engine.statesByElement.forEach(function (stateMap, element) {
              delete stateMap[name];
            });

            this._elementListeners.forEach(function (listeners, element) {
              _this29._elementListeners.set(element, listeners.filter(function (entry) {
                return entry.name != name;
              }));
            });
          }
        }, {
          key: "clearElementCache",
          value: function clearElementCache(element) {
            this._engine.statesByElement["delete"](element);

            this._elementListeners["delete"](element);

            var elementPlayers = this._engine.playersByElement.get(element);

            if (elementPlayers) {
              elementPlayers.forEach(function (player) {
                return player.destroy();
              });

              this._engine.playersByElement["delete"](element);
            }
          }
        }, {
          key: "_signalRemovalForInnerTriggers",
          value: function _signalRemovalForInnerTriggers(rootElement, context) {
            var _this30 = this;

            var elements = this._engine.driver.query(rootElement, NG_TRIGGER_SELECTOR, true); // emulate a leave animation for all inner nodes within this node.
            // If there are no animations found for any of the nodes then clear the cache
            // for the element.


            elements.forEach(function (elm) {
              // this means that an inner remove() operation has already kicked off
              // the animation on this element...
              if (elm[REMOVAL_FLAG]) return;

              var namespaces = _this30._engine.fetchNamespacesByElement(elm);

              if (namespaces.size) {
                namespaces.forEach(function (ns) {
                  return ns.triggerLeaveAnimation(elm, context, false, true);
                });
              } else {
                _this30.clearElementCache(elm);
              }
            }); // If the child elements were removed along with the parent, their animations might not
            // have completed. Clear all the elements from the cache so we don't end up with a memory leak.

            this._engine.afterFlushAnimationsDone(function () {
              return elements.forEach(function (elm) {
                return _this30.clearElementCache(elm);
              });
            });
          }
        }, {
          key: "triggerLeaveAnimation",
          value: function triggerLeaveAnimation(element, context, destroyAfterComplete, defaultToFallback) {
            var _this31 = this;

            var triggerStates = this._engine.statesByElement.get(element);

            if (triggerStates) {
              var players = [];
              Object.keys(triggerStates).forEach(function (triggerName) {
                // this check is here in the event that an element is removed
                // twice (both on the host level and the component level)
                if (_this31._triggers[triggerName]) {
                  var player = _this31.trigger(element, triggerName, VOID_VALUE, defaultToFallback);

                  if (player) {
                    players.push(player);
                  }
                }
              });

              if (players.length) {
                this._engine.markElementAsRemoved(this.id, element, true, context);

                if (destroyAfterComplete) {
                  optimizeGroupPlayer(players).onDone(function () {
                    return _this31._engine.processLeaveNode(element);
                  });
                }

                return true;
              }
            }

            return false;
          }
        }, {
          key: "prepareLeaveAnimationListeners",
          value: function prepareLeaveAnimationListeners(element) {
            var _this32 = this;

            var listeners = this._elementListeners.get(element);

            var elementStates = this._engine.statesByElement.get(element); // if this statement fails then it means that the element was picked up
            // by an earlier flush (or there are no listeners at all to track the leave).


            if (listeners && elementStates) {
              var visitedTriggers = new Set();
              listeners.forEach(function (listener) {
                var triggerName = listener.name;
                if (visitedTriggers.has(triggerName)) return;
                visitedTriggers.add(triggerName);
                var trigger = _this32._triggers[triggerName];
                var transition = trigger.fallbackTransition;
                var fromState = elementStates[triggerName] || DEFAULT_STATE_VALUE;
                var toState = new StateValue(VOID_VALUE);
                var player = new TransitionAnimationPlayer(_this32.id, triggerName, element);
                _this32._engine.totalQueuedPlayers++;

                _this32._queue.push({
                  element: element,
                  triggerName: triggerName,
                  transition: transition,
                  fromState: fromState,
                  toState: toState,
                  player: player,
                  isFallbackTransition: true
                });
              });
            }
          }
        }, {
          key: "removeNode",
          value: function removeNode(element, context) {
            var _this33 = this;

            var engine = this._engine;

            if (element.childElementCount) {
              this._signalRemovalForInnerTriggers(element, context);
            } // this means that a * => VOID animation was detected and kicked off


            if (this.triggerLeaveAnimation(element, context, true)) return; // find the player that is animating and make sure that the
            // removal is delayed until that player has completed

            var containsPotentialParentTransition = false;

            if (engine.totalAnimations) {
              var currentPlayers = engine.players.length ? engine.playersByQueriedElement.get(element) : []; // when this `if statement` does not continue forward it means that
              // a previous animation query has selected the current element and
              // is animating it. In this situation want to continue forwards and
              // allow the element to be queued up for animation later.

              if (currentPlayers && currentPlayers.length) {
                containsPotentialParentTransition = true;
              } else {
                var parent = element;

                while (parent = parent.parentNode) {
                  var triggers = engine.statesByElement.get(parent);

                  if (triggers) {
                    containsPotentialParentTransition = true;
                    break;
                  }
                }
              }
            } // at this stage we know that the element will either get removed
            // during flush or will be picked up by a parent query. Either way
            // we need to fire the listeners for this element when it DOES get
            // removed (once the query parent animation is done or after flush)


            this.prepareLeaveAnimationListeners(element); // whether or not a parent has an animation we need to delay the deferral of the leave
            // operation until we have more information (which we do after flush() has been called)

            if (containsPotentialParentTransition) {
              engine.markElementAsRemoved(this.id, element, false, context);
            } else {
              var removalFlag = element[REMOVAL_FLAG];

              if (!removalFlag || removalFlag === NULL_REMOVAL_STATE) {
                // we do this after the flush has occurred such
                // that the callbacks can be fired
                engine.afterFlush(function () {
                  return _this33.clearElementCache(element);
                });
                engine.destroyInnerAnimations(element);

                engine._onRemovalComplete(element, context);
              }
            }
          }
        }, {
          key: "insertNode",
          value: function insertNode(element, parent) {
            addClass(element, this._hostClassName);
          }
        }, {
          key: "drainQueuedTransitions",
          value: function drainQueuedTransitions(microtaskId) {
            var _this34 = this;

            var instructions = [];

            this._queue.forEach(function (entry) {
              var player = entry.player;
              if (player.destroyed) return;
              var element = entry.element;

              var listeners = _this34._elementListeners.get(element);

              if (listeners) {
                listeners.forEach(function (listener) {
                  if (listener.name == entry.triggerName) {
                    var baseEvent = makeAnimationEvent(element, entry.triggerName, entry.fromState.value, entry.toState.value);
                    baseEvent['_data'] = microtaskId;
                    listenOnPlayer(entry.player, listener.phase, baseEvent, listener.callback);
                  }
                });
              }

              if (player.markedForDestroy) {
                _this34._engine.afterFlush(function () {
                  // now we can destroy the element properly since the event listeners have
                  // been bound to the player
                  player.destroy();
                });
              } else {
                instructions.push(entry);
              }
            });

            this._queue = [];
            return instructions.sort(function (a, b) {
              // if depCount == 0 them move to front
              // otherwise if a contains b then move back
              var d0 = a.transition.ast.depCount;
              var d1 = b.transition.ast.depCount;

              if (d0 == 0 || d1 == 0) {
                return d0 - d1;
              }

              return _this34._engine.driver.containsElement(a.element, b.element) ? 1 : -1;
            });
          }
        }, {
          key: "destroy",
          value: function destroy(context) {
            this.players.forEach(function (p) {
              return p.destroy();
            });

            this._signalRemovalForInnerTriggers(this.hostElement, context);
          }
        }, {
          key: "elementContainsData",
          value: function elementContainsData(element) {
            var containsData = false;
            if (this._elementListeners.has(element)) containsData = true;
            containsData = (this._queue.find(function (entry) {
              return entry.element === element;
            }) ? true : false) || containsData;
            return containsData;
          }
        }]);

        return AnimationTransitionNamespace;
      }();

      var TransitionAnimationEngine = /*#__PURE__*/function () {
        function TransitionAnimationEngine(bodyNode, driver, _normalizer) {
          _classCallCheck2(this, TransitionAnimationEngine);

          this.bodyNode = bodyNode;
          this.driver = driver;
          this._normalizer = _normalizer;
          this.players = [];
          this.newHostElements = new Map();
          this.playersByElement = new Map();
          this.playersByQueriedElement = new Map();
          this.statesByElement = new Map();
          this.disabledNodes = new Set();
          this.totalAnimations = 0;
          this.totalQueuedPlayers = 0;
          this._namespaceLookup = {};
          this._namespaceList = [];
          this._flushFns = [];
          this._whenQuietFns = [];
          this.namespacesByHostElement = new Map();
          this.collectedEnterElements = [];
          this.collectedLeaveElements = []; // this method is designed to be overridden by the code that uses this engine

          this.onRemovalComplete = function (element, context) {};
        }
        /** @internal */


        _createClass2(TransitionAnimationEngine, [{
          key: "_onRemovalComplete",
          value: function _onRemovalComplete(element, context) {
            this.onRemovalComplete(element, context);
          }
        }, {
          key: "queuedPlayers",
          get: function get() {
            var players = [];

            this._namespaceList.forEach(function (ns) {
              ns.players.forEach(function (player) {
                if (player.queued) {
                  players.push(player);
                }
              });
            });

            return players;
          }
        }, {
          key: "createNamespace",
          value: function createNamespace(namespaceId, hostElement) {
            var ns = new AnimationTransitionNamespace(namespaceId, hostElement, this);

            if (this.bodyNode && this.driver.containsElement(this.bodyNode, hostElement)) {
              this._balanceNamespaceList(ns, hostElement);
            } else {
              // defer this later until flush during when the host element has
              // been inserted so that we know exactly where to place it in
              // the namespace list
              this.newHostElements.set(hostElement, ns); // given that this host element is apart of the animation code, it
              // may or may not be inserted by a parent node that is of an
              // animation renderer type. If this happens then we can still have
              // access to this item when we query for :enter nodes. If the parent
              // is a renderer then the set data-structure will normalize the entry

              this.collectEnterElement(hostElement);
            }

            return this._namespaceLookup[namespaceId] = ns;
          }
        }, {
          key: "_balanceNamespaceList",
          value: function _balanceNamespaceList(ns, hostElement) {
            var limit = this._namespaceList.length - 1;

            if (limit >= 0) {
              var found = false;

              for (var i = limit; i >= 0; i--) {
                var nextNamespace = this._namespaceList[i];

                if (this.driver.containsElement(nextNamespace.hostElement, hostElement)) {
                  this._namespaceList.splice(i + 1, 0, ns);

                  found = true;
                  break;
                }
              }

              if (!found) {
                this._namespaceList.splice(0, 0, ns);
              }
            } else {
              this._namespaceList.push(ns);
            }

            this.namespacesByHostElement.set(hostElement, ns);
            return ns;
          }
        }, {
          key: "register",
          value: function register(namespaceId, hostElement) {
            var ns = this._namespaceLookup[namespaceId];

            if (!ns) {
              ns = this.createNamespace(namespaceId, hostElement);
            }

            return ns;
          }
        }, {
          key: "registerTrigger",
          value: function registerTrigger(namespaceId, name, trigger) {
            var ns = this._namespaceLookup[namespaceId];

            if (ns && ns.register(name, trigger)) {
              this.totalAnimations++;
            }
          }
        }, {
          key: "destroy",
          value: function destroy(namespaceId, context) {
            var _this35 = this;

            if (!namespaceId) return;

            var ns = this._fetchNamespace(namespaceId);

            this.afterFlush(function () {
              _this35.namespacesByHostElement["delete"](ns.hostElement);

              delete _this35._namespaceLookup[namespaceId];

              var index = _this35._namespaceList.indexOf(ns);

              if (index >= 0) {
                _this35._namespaceList.splice(index, 1);
              }
            });
            this.afterFlushAnimationsDone(function () {
              return ns.destroy(context);
            });
          }
        }, {
          key: "_fetchNamespace",
          value: function _fetchNamespace(id) {
            return this._namespaceLookup[id];
          }
        }, {
          key: "fetchNamespacesByElement",
          value: function fetchNamespacesByElement(element) {
            // normally there should only be one namespace per element, however
            // if @triggers are placed on both the component element and then
            // its host element (within the component code) then there will be
            // two namespaces returned. We use a set here to simply the dedupe
            // of namespaces incase there are multiple triggers both the elm and host
            var namespaces = new Set();
            var elementStates = this.statesByElement.get(element);

            if (elementStates) {
              var keys = Object.keys(elementStates);

              for (var i = 0; i < keys.length; i++) {
                var nsId = elementStates[keys[i]].namespaceId;

                if (nsId) {
                  var ns = this._fetchNamespace(nsId);

                  if (ns) {
                    namespaces.add(ns);
                  }
                }
              }
            }

            return namespaces;
          }
        }, {
          key: "trigger",
          value: function trigger(namespaceId, element, name, value) {
            if (isElementNode(element)) {
              var ns = this._fetchNamespace(namespaceId);

              if (ns) {
                ns.trigger(element, name, value);
                return true;
              }
            }

            return false;
          }
        }, {
          key: "insertNode",
          value: function insertNode(namespaceId, element, parent, insertBefore) {
            if (!isElementNode(element)) return; // special case for when an element is removed and reinserted (move operation)
            // when this occurs we do not want to use the element for deletion later

            var details = element[REMOVAL_FLAG];

            if (details && details.setForRemoval) {
              details.setForRemoval = false;
              details.setForMove = true;
              var index = this.collectedLeaveElements.indexOf(element);

              if (index >= 0) {
                this.collectedLeaveElements.splice(index, 1);
              }
            } // in the event that the namespaceId is blank then the caller
            // code does not contain any animation code in it, but it is
            // just being called so that the node is marked as being inserted


            if (namespaceId) {
              var ns = this._fetchNamespace(namespaceId); // This if-statement is a workaround for router issue #21947.
              // The router sometimes hits a race condition where while a route
              // is being instantiated a new navigation arrives, triggering leave
              // animation of DOM that has not been fully initialized, until this
              // is resolved, we need to handle the scenario when DOM is not in a
              // consistent state during the animation.


              if (ns) {
                ns.insertNode(element, parent);
              }
            } // only *directives and host elements are inserted before


            if (insertBefore) {
              this.collectEnterElement(element);
            }
          }
        }, {
          key: "collectEnterElement",
          value: function collectEnterElement(element) {
            this.collectedEnterElements.push(element);
          }
        }, {
          key: "markElementAsDisabled",
          value: function markElementAsDisabled(element, value) {
            if (value) {
              if (!this.disabledNodes.has(element)) {
                this.disabledNodes.add(element);
                addClass(element, DISABLED_CLASSNAME);
              }
            } else if (this.disabledNodes.has(element)) {
              this.disabledNodes["delete"](element);
              removeClass(element, DISABLED_CLASSNAME);
            }
          }
        }, {
          key: "removeNode",
          value: function removeNode(namespaceId, element, isHostElement, context) {
            if (isElementNode(element)) {
              var ns = namespaceId ? this._fetchNamespace(namespaceId) : null;

              if (ns) {
                ns.removeNode(element, context);
              } else {
                this.markElementAsRemoved(namespaceId, element, false, context);
              }

              if (isHostElement) {
                var hostNS = this.namespacesByHostElement.get(element);

                if (hostNS && hostNS.id !== namespaceId) {
                  hostNS.removeNode(element, context);
                }
              }
            } else {
              this._onRemovalComplete(element, context);
            }
          }
        }, {
          key: "markElementAsRemoved",
          value: function markElementAsRemoved(namespaceId, element, hasAnimation, context) {
            this.collectedLeaveElements.push(element);
            element[REMOVAL_FLAG] = {
              namespaceId: namespaceId,
              setForRemoval: context,
              hasAnimation: hasAnimation,
              removedBeforeQueried: false
            };
          }
        }, {
          key: "listen",
          value: function listen(namespaceId, element, name, phase, callback) {
            if (isElementNode(element)) {
              return this._fetchNamespace(namespaceId).listen(element, name, phase, callback);
            }

            return function () {};
          }
        }, {
          key: "_buildInstruction",
          value: function _buildInstruction(entry, subTimelines, enterClassName, leaveClassName, skipBuildAst) {
            return entry.transition.build(this.driver, entry.element, entry.fromState.value, entry.toState.value, enterClassName, leaveClassName, entry.fromState.options, entry.toState.options, subTimelines, skipBuildAst);
          }
        }, {
          key: "destroyInnerAnimations",
          value: function destroyInnerAnimations(containerElement) {
            var _this36 = this;

            var elements = this.driver.query(containerElement, NG_TRIGGER_SELECTOR, true);
            elements.forEach(function (element) {
              return _this36.destroyActiveAnimationsForElement(element);
            });
            if (this.playersByQueriedElement.size == 0) return;
            elements = this.driver.query(containerElement, NG_ANIMATING_SELECTOR, true);
            elements.forEach(function (element) {
              return _this36.finishActiveQueriedAnimationOnElement(element);
            });
          }
        }, {
          key: "destroyActiveAnimationsForElement",
          value: function destroyActiveAnimationsForElement(element) {
            var players = this.playersByElement.get(element);

            if (players) {
              players.forEach(function (player) {
                // special case for when an element is set for destruction, but hasn't started.
                // in this situation we want to delay the destruction until the flush occurs
                // so that any event listeners attached to the player are triggered.
                if (player.queued) {
                  player.markedForDestroy = true;
                } else {
                  player.destroy();
                }
              });
            }
          }
        }, {
          key: "finishActiveQueriedAnimationOnElement",
          value: function finishActiveQueriedAnimationOnElement(element) {
            var players = this.playersByQueriedElement.get(element);

            if (players) {
              players.forEach(function (player) {
                return player.finish();
              });
            }
          }
        }, {
          key: "whenRenderingDone",
          value: function whenRenderingDone() {
            var _this37 = this;

            return new Promise(function (resolve) {
              if (_this37.players.length) {
                return optimizeGroupPlayer(_this37.players).onDone(function () {
                  return resolve();
                });
              } else {
                resolve();
              }
            });
          }
        }, {
          key: "processLeaveNode",
          value: function processLeaveNode(element) {
            var _this38 = this;

            var details = element[REMOVAL_FLAG];

            if (details && details.setForRemoval) {
              // this will prevent it from removing it twice
              element[REMOVAL_FLAG] = NULL_REMOVAL_STATE;

              if (details.namespaceId) {
                this.destroyInnerAnimations(element);

                var ns = this._fetchNamespace(details.namespaceId);

                if (ns) {
                  ns.clearElementCache(element);
                }
              }

              this._onRemovalComplete(element, details.setForRemoval);
            }

            if (this.driver.matchesElement(element, DISABLED_SELECTOR)) {
              this.markElementAsDisabled(element, false);
            }

            this.driver.query(element, DISABLED_SELECTOR, true).forEach(function (node) {
              _this38.markElementAsDisabled(node, false);
            });
          }
        }, {
          key: "flush",
          value: function flush() {
            var _this39 = this;

            var microtaskId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
            var players = [];

            if (this.newHostElements.size) {
              this.newHostElements.forEach(function (ns, element) {
                return _this39._balanceNamespaceList(ns, element);
              });
              this.newHostElements.clear();
            }

            if (this.totalAnimations && this.collectedEnterElements.length) {
              for (var i = 0; i < this.collectedEnterElements.length; i++) {
                var elm = this.collectedEnterElements[i];
                addClass(elm, STAR_CLASSNAME);
              }
            }

            if (this._namespaceList.length && (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {
              var cleanupFns = [];

              try {
                players = this._flushAnimations(cleanupFns, microtaskId);
              } finally {
                for (var _i2 = 0; _i2 < cleanupFns.length; _i2++) {
                  cleanupFns[_i2]();
                }
              }
            } else {
              for (var _i3 = 0; _i3 < this.collectedLeaveElements.length; _i3++) {
                var element = this.collectedLeaveElements[_i3];
                this.processLeaveNode(element);
              }
            }

            this.totalQueuedPlayers = 0;
            this.collectedEnterElements.length = 0;
            this.collectedLeaveElements.length = 0;

            this._flushFns.forEach(function (fn) {
              return fn();
            });

            this._flushFns = [];

            if (this._whenQuietFns.length) {
              // we move these over to a variable so that
              // if any new callbacks are registered in another
              // flush they do not populate the existing set
              var quietFns = this._whenQuietFns;
              this._whenQuietFns = [];

              if (players.length) {
                optimizeGroupPlayer(players).onDone(function () {
                  quietFns.forEach(function (fn) {
                    return fn();
                  });
                });
              } else {
                quietFns.forEach(function (fn) {
                  return fn();
                });
              }
            }
          }
        }, {
          key: "reportError",
          value: function reportError(errors) {
            throw new Error("Unable to process animations due to the following failed trigger transitions\n ".concat(errors.join('\n')));
          }
        }, {
          key: "_flushAnimations",
          value: function _flushAnimations(cleanupFns, microtaskId) {
            var _this40 = this;

            var subTimelines = new ElementInstructionMap();
            var skippedPlayers = [];
            var skippedPlayersMap = new Map();
            var queuedInstructions = [];
            var queriedElements = new Map();
            var allPreStyleElements = new Map();
            var allPostStyleElements = new Map();
            var disabledElementsSet = new Set();
            this.disabledNodes.forEach(function (node) {
              disabledElementsSet.add(node);

              var nodesThatAreDisabled = _this40.driver.query(node, QUEUED_SELECTOR, true);

              for (var _i4 = 0; _i4 < nodesThatAreDisabled.length; _i4++) {
                disabledElementsSet.add(nodesThatAreDisabled[_i4]);
              }
            });
            var bodyNode = this.bodyNode;
            var allTriggerElements = Array.from(this.statesByElement.keys());
            var enterNodeMap = buildRootMap(allTriggerElements, this.collectedEnterElements); // this must occur before the instructions are built below such that
            // the :enter queries match the elements (since the timeline queries
            // are fired during instruction building).

            var enterNodeMapIds = new Map();
            var i = 0;
            enterNodeMap.forEach(function (nodes, root) {
              var className = ENTER_CLASSNAME + i++;
              enterNodeMapIds.set(root, className);
              nodes.forEach(function (node) {
                return addClass(node, className);
              });
            });
            var allLeaveNodes = [];
            var mergedLeaveNodes = new Set();
            var leaveNodesWithoutAnimations = new Set();

            for (var _i5 = 0; _i5 < this.collectedLeaveElements.length; _i5++) {
              var element = this.collectedLeaveElements[_i5];
              var details = element[REMOVAL_FLAG];

              if (details && details.setForRemoval) {
                allLeaveNodes.push(element);
                mergedLeaveNodes.add(element);

                if (details.hasAnimation) {
                  this.driver.query(element, STAR_SELECTOR, true).forEach(function (elm) {
                    return mergedLeaveNodes.add(elm);
                  });
                } else {
                  leaveNodesWithoutAnimations.add(element);
                }
              }
            }

            var leaveNodeMapIds = new Map();
            var leaveNodeMap = buildRootMap(allTriggerElements, Array.from(mergedLeaveNodes));
            leaveNodeMap.forEach(function (nodes, root) {
              var className = LEAVE_CLASSNAME + i++;
              leaveNodeMapIds.set(root, className);
              nodes.forEach(function (node) {
                return addClass(node, className);
              });
            });
            cleanupFns.push(function () {
              enterNodeMap.forEach(function (nodes, root) {
                var className = enterNodeMapIds.get(root);
                nodes.forEach(function (node) {
                  return removeClass(node, className);
                });
              });
              leaveNodeMap.forEach(function (nodes, root) {
                var className = leaveNodeMapIds.get(root);
                nodes.forEach(function (node) {
                  return removeClass(node, className);
                });
              });
              allLeaveNodes.forEach(function (element) {
                _this40.processLeaveNode(element);
              });
            });
            var allPlayers = [];
            var erroneousTransitions = [];

            for (var _i6 = this._namespaceList.length - 1; _i6 >= 0; _i6--) {
              var ns = this._namespaceList[_i6];
              ns.drainQueuedTransitions(microtaskId).forEach(function (entry) {
                var player = entry.player;
                var element = entry.element;
                allPlayers.push(player);

                if (_this40.collectedEnterElements.length) {
                  var _details = element[REMOVAL_FLAG]; // move animations are currently not supported...

                  if (_details && _details.setForMove) {
                    player.destroy();
                    return;
                  }
                }

                var nodeIsOrphaned = !bodyNode || !_this40.driver.containsElement(bodyNode, element);
                var leaveClassName = leaveNodeMapIds.get(element);
                var enterClassName = enterNodeMapIds.get(element);

                var instruction = _this40._buildInstruction(entry, subTimelines, enterClassName, leaveClassName, nodeIsOrphaned);

                if (instruction.errors && instruction.errors.length) {
                  erroneousTransitions.push(instruction);
                  return;
                } // even though the element may not be apart of the DOM, it may
                // still be added at a later point (due to the mechanics of content
                // projection and/or dynamic component insertion) therefore it's
                // important we still style the element.


                if (nodeIsOrphaned) {
                  player.onStart(function () {
                    return eraseStyles(element, instruction.fromStyles);
                  });
                  player.onDestroy(function () {
                    return setStyles(element, instruction.toStyles);
                  });
                  skippedPlayers.push(player);
                  return;
                } // if a unmatched transition is queued to go then it SHOULD NOT render
                // an animation and cancel the previously running animations.


                if (entry.isFallbackTransition) {
                  player.onStart(function () {
                    return eraseStyles(element, instruction.fromStyles);
                  });
                  player.onDestroy(function () {
                    return setStyles(element, instruction.toStyles);
                  });
                  skippedPlayers.push(player);
                  return;
                } // this means that if a parent animation uses this animation as a sub trigger
                // then it will instruct the timeline builder to not add a player delay, but
                // instead stretch the first keyframe gap up until the animation starts. The
                // reason this is important is to prevent extra initialization styles from being
                // required by the user in the animation.


                instruction.timelines.forEach(function (tl) {
                  return tl.stretchStartingKeyframe = true;
                });
                subTimelines.append(element, instruction.timelines);
                var tuple = {
                  instruction: instruction,
                  player: player,
                  element: element
                };
                queuedInstructions.push(tuple);
                instruction.queriedElements.forEach(function (element) {
                  return getOrSetAsInMap(queriedElements, element, []).push(player);
                });
                instruction.preStyleProps.forEach(function (stringMap, element) {
                  var props = Object.keys(stringMap);

                  if (props.length) {
                    var setVal = allPreStyleElements.get(element);

                    if (!setVal) {
                      allPreStyleElements.set(element, setVal = new Set());
                    }

                    props.forEach(function (prop) {
                      return setVal.add(prop);
                    });
                  }
                });
                instruction.postStyleProps.forEach(function (stringMap, element) {
                  var props = Object.keys(stringMap);
                  var setVal = allPostStyleElements.get(element);

                  if (!setVal) {
                    allPostStyleElements.set(element, setVal = new Set());
                  }

                  props.forEach(function (prop) {
                    return setVal.add(prop);
                  });
                });
              });
            }

            if (erroneousTransitions.length) {
              var errors = [];
              erroneousTransitions.forEach(function (instruction) {
                errors.push("@".concat(instruction.triggerName, " has failed due to:\n"));
                instruction.errors.forEach(function (error) {
                  return errors.push("- ".concat(error, "\n"));
                });
              });
              allPlayers.forEach(function (player) {
                return player.destroy();
              });
              this.reportError(errors);
            }

            var allPreviousPlayersMap = new Map(); // this map works to tell which element in the DOM tree is contained by
            // which animation. Further down below this map will get populated once
            // the players are built and in doing so it can efficiently figure out
            // if a sub player is skipped due to a parent player having priority.

            var animationElementMap = new Map();
            queuedInstructions.forEach(function (entry) {
              var element = entry.element;

              if (subTimelines.has(element)) {
                animationElementMap.set(element, element);

                _this40._beforeAnimationBuild(entry.player.namespaceId, entry.instruction, allPreviousPlayersMap);
              }
            });
            skippedPlayers.forEach(function (player) {
              var element = player.element;

              var previousPlayers = _this40._getPreviousPlayers(element, false, player.namespaceId, player.triggerName, null);

              previousPlayers.forEach(function (prevPlayer) {
                getOrSetAsInMap(allPreviousPlayersMap, element, []).push(prevPlayer);
                prevPlayer.destroy();
              });
            }); // this is a special case for nodes that will be removed (either by)
            // having their own leave animations or by being queried in a container
            // that will be removed once a parent animation is complete. The idea
            // here is that * styles must be identical to ! styles because of
            // backwards compatibility (* is also filled in by default in many places).
            // Otherwise * styles will return an empty value or auto since the element
            // that is being getComputedStyle'd will not be visible (since * = destination)

            var replaceNodes = allLeaveNodes.filter(function (node) {
              return replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements);
            }); // POST STAGE: fill the * styles

            var postStylesMap = new Map();
            var allLeaveQueriedNodes = cloakAndComputeStyles(postStylesMap, this.driver, leaveNodesWithoutAnimations, allPostStyleElements, _angular_animations__WEBPACK_IMPORTED_MODULE_0__.AUTO_STYLE);
            allLeaveQueriedNodes.forEach(function (node) {
              if (replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements)) {
                replaceNodes.push(node);
              }
            }); // PRE STAGE: fill the ! styles

            var preStylesMap = new Map();
            enterNodeMap.forEach(function (nodes, root) {
              cloakAndComputeStyles(preStylesMap, _this40.driver, new Set(nodes), allPreStyleElements, _angular_animations__WEBPACK_IMPORTED_MODULE_0__["ɵPRE_STYLE"]);
            });
            replaceNodes.forEach(function (node) {
              var post = postStylesMap.get(node);
              var pre = preStylesMap.get(node);
              postStylesMap.set(node, Object.assign(Object.assign({}, post), pre));
            });
            var rootPlayers = [];
            var subPlayers = [];
            var NO_PARENT_ANIMATION_ELEMENT_DETECTED = {};
            queuedInstructions.forEach(function (entry) {
              var element = entry.element,
                  player = entry.player,
                  instruction = entry.instruction; // this means that it was never consumed by a parent animation which
              // means that it is independent and therefore should be set for animation

              if (subTimelines.has(element)) {
                if (disabledElementsSet.has(element)) {
                  player.onDestroy(function () {
                    return setStyles(element, instruction.toStyles);
                  });
                  player.disabled = true;
                  player.overrideTotalTime(instruction.totalTime);
                  skippedPlayers.push(player);
                  return;
                } // this will flow up the DOM and query the map to figure out
                // if a parent animation has priority over it. In the situation
                // that a parent is detected then it will cancel the loop. If
                // nothing is detected, or it takes a few hops to find a parent,
                // then it will fill in the missing nodes and signal them as having
                // a detected parent (or a NO_PARENT value via a special constant).


                var parentWithAnimation = NO_PARENT_ANIMATION_ELEMENT_DETECTED;

                if (animationElementMap.size > 1) {
                  var elm = element;
                  var parentsToAdd = [];

                  while (elm = elm.parentNode) {
                    var detectedParent = animationElementMap.get(elm);

                    if (detectedParent) {
                      parentWithAnimation = detectedParent;
                      break;
                    }

                    parentsToAdd.push(elm);
                  }

                  parentsToAdd.forEach(function (parent) {
                    return animationElementMap.set(parent, parentWithAnimation);
                  });
                }

                var innerPlayer = _this40._buildAnimation(player.namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap);

                player.setRealPlayer(innerPlayer);

                if (parentWithAnimation === NO_PARENT_ANIMATION_ELEMENT_DETECTED) {
                  rootPlayers.push(player);
                } else {
                  var parentPlayers = _this40.playersByElement.get(parentWithAnimation);

                  if (parentPlayers && parentPlayers.length) {
                    player.parentPlayer = optimizeGroupPlayer(parentPlayers);
                  }

                  skippedPlayers.push(player);
                }
              } else {
                eraseStyles(element, instruction.fromStyles);
                player.onDestroy(function () {
                  return setStyles(element, instruction.toStyles);
                }); // there still might be a ancestor player animating this
                // element therefore we will still add it as a sub player
                // even if its animation may be disabled

                subPlayers.push(player);

                if (disabledElementsSet.has(element)) {
                  skippedPlayers.push(player);
                }
              }
            }); // find all of the sub players' corresponding inner animation player

            subPlayers.forEach(function (player) {
              // even if any players are not found for a sub animation then it
              // will still complete itself after the next tick since it's Noop
              var playersForElement = skippedPlayersMap.get(player.element);

              if (playersForElement && playersForElement.length) {
                var innerPlayer = optimizeGroupPlayer(playersForElement);
                player.setRealPlayer(innerPlayer);
              }
            }); // the reason why we don't actually play the animation is
            // because all that a skipped player is designed to do is to
            // fire the start/done transition callback events

            skippedPlayers.forEach(function (player) {
              if (player.parentPlayer) {
                player.syncPlayerEvents(player.parentPlayer);
              } else {
                player.destroy();
              }
            }); // run through all of the queued removals and see if they
            // were picked up by a query. If not then perform the removal
            // operation right away unless a parent animation is ongoing.

            for (var _i7 = 0; _i7 < allLeaveNodes.length; _i7++) {
              var _element2 = allLeaveNodes[_i7];
              var _details2 = _element2[REMOVAL_FLAG];
              removeClass(_element2, LEAVE_CLASSNAME); // this means the element has a removal animation that is being
              // taken care of and therefore the inner elements will hang around
              // until that animation is over (or the parent queried animation)

              if (_details2 && _details2.hasAnimation) continue;
              var players = []; // if this element is queried or if it contains queried children
              // then we want for the element not to be removed from the page
              // until the queried animations have finished

              if (queriedElements.size) {
                var queriedPlayerResults = queriedElements.get(_element2);

                if (queriedPlayerResults && queriedPlayerResults.length) {
                  players.push.apply(players, _toConsumableArray(queriedPlayerResults));
                }

                var queriedInnerElements = this.driver.query(_element2, NG_ANIMATING_SELECTOR, true);

                for (var j = 0; j < queriedInnerElements.length; j++) {
                  var queriedPlayers = queriedElements.get(queriedInnerElements[j]);

                  if (queriedPlayers && queriedPlayers.length) {
                    players.push.apply(players, _toConsumableArray(queriedPlayers));
                  }
                }
              }

              var activePlayers = players.filter(function (p) {
                return !p.destroyed;
              });

              if (activePlayers.length) {
                removeNodesAfterAnimationDone(this, _element2, activePlayers);
              } else {
                this.processLeaveNode(_element2);
              }
            } // this is required so the cleanup method doesn't remove them


            allLeaveNodes.length = 0;
            rootPlayers.forEach(function (player) {
              _this40.players.push(player);

              player.onDone(function () {
                player.destroy();

                var index = _this40.players.indexOf(player);

                _this40.players.splice(index, 1);
              });
              player.play();
            });
            return rootPlayers;
          }
        }, {
          key: "elementContainsData",
          value: function elementContainsData(namespaceId, element) {
            var containsData = false;
            var details = element[REMOVAL_FLAG];
            if (details && details.setForRemoval) containsData = true;
            if (this.playersByElement.has(element)) containsData = true;
            if (this.playersByQueriedElement.has(element)) containsData = true;
            if (this.statesByElement.has(element)) containsData = true;
            return this._fetchNamespace(namespaceId).elementContainsData(element) || containsData;
          }
        }, {
          key: "afterFlush",
          value: function afterFlush(callback) {
            this._flushFns.push(callback);
          }
        }, {
          key: "afterFlushAnimationsDone",
          value: function afterFlushAnimationsDone(callback) {
            this._whenQuietFns.push(callback);
          }
        }, {
          key: "_getPreviousPlayers",
          value: function _getPreviousPlayers(element, isQueriedElement, namespaceId, triggerName, toStateValue) {
            var players = [];

            if (isQueriedElement) {
              var queriedElementPlayers = this.playersByQueriedElement.get(element);

              if (queriedElementPlayers) {
                players = queriedElementPlayers;
              }
            } else {
              var elementPlayers = this.playersByElement.get(element);

              if (elementPlayers) {
                var isRemovalAnimation = !toStateValue || toStateValue == VOID_VALUE;
                elementPlayers.forEach(function (player) {
                  if (player.queued) return;
                  if (!isRemovalAnimation && player.triggerName != triggerName) return;
                  players.push(player);
                });
              }
            }

            if (namespaceId || triggerName) {
              players = players.filter(function (player) {
                if (namespaceId && namespaceId != player.namespaceId) return false;
                if (triggerName && triggerName != player.triggerName) return false;
                return true;
              });
            }

            return players;
          }
        }, {
          key: "_beforeAnimationBuild",
          value: function _beforeAnimationBuild(namespaceId, instruction, allPreviousPlayersMap) {
            var _this41 = this;

            var triggerName = instruction.triggerName;
            var rootElement = instruction.element; // when a removal animation occurs, ALL previous players are collected
            // and destroyed (even if they are outside of the current namespace)

            var targetNameSpaceId = instruction.isRemovalTransition ? undefined : namespaceId;
            var targetTriggerName = instruction.isRemovalTransition ? undefined : triggerName;

            var _iterator = _createForOfIteratorHelper(instruction.timelines),
                _step;

            try {
              var _loop2 = function _loop2() {
                var timelineInstruction = _step.value;
                var element = timelineInstruction.element;
                var isQueriedElement = element !== rootElement;
                var players = getOrSetAsInMap(allPreviousPlayersMap, element, []);

                var previousPlayers = _this41._getPreviousPlayers(element, isQueriedElement, targetNameSpaceId, targetTriggerName, instruction.toState);

                previousPlayers.forEach(function (player) {
                  var realPlayer = player.getRealPlayer();

                  if (realPlayer.beforeDestroy) {
                    realPlayer.beforeDestroy();
                  }

                  player.destroy();
                  players.push(player);
                });
              };

              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                _loop2();
              } // this needs to be done so that the PRE/POST styles can be
              // computed properly without interfering with the previous animation

            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            eraseStyles(rootElement, instruction.fromStyles);
          }
        }, {
          key: "_buildAnimation",
          value: function _buildAnimation(namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap) {
            var _this42 = this;

            var triggerName = instruction.triggerName;
            var rootElement = instruction.element; // we first run this so that the previous animation player
            // data can be passed into the successive animation players

            var allQueriedPlayers = [];
            var allConsumedElements = new Set();
            var allSubElements = new Set();
            var allNewPlayers = instruction.timelines.map(function (timelineInstruction) {
              var element = timelineInstruction.element;
              allConsumedElements.add(element); // FIXME (matsko): make sure to-be-removed animations are removed properly

              var details = element[REMOVAL_FLAG];
              if (details && details.removedBeforeQueried) return new _angular_animations__WEBPACK_IMPORTED_MODULE_0__.NoopAnimationPlayer(timelineInstruction.duration, timelineInstruction.delay);
              var isQueriedElement = element !== rootElement;
              var previousPlayers = flattenGroupPlayers((allPreviousPlayersMap.get(element) || EMPTY_PLAYER_ARRAY).map(function (p) {
                return p.getRealPlayer();
              })).filter(function (p) {
                // the `element` is not apart of the AnimationPlayer definition, but
                // Mock/WebAnimations
                // use the element within their implementation. This will be added in Angular5 to
                // AnimationPlayer
                var pp = p;
                return pp.element ? pp.element === element : false;
              });
              var preStyles = preStylesMap.get(element);
              var postStyles = postStylesMap.get(element);
              var keyframes = normalizeKeyframes(_this42.driver, _this42._normalizer, element, timelineInstruction.keyframes, preStyles, postStyles);

              var player = _this42._buildPlayer(timelineInstruction, keyframes, previousPlayers); // this means that this particular player belongs to a sub trigger. It is
              // important that we match this player up with the corresponding (@trigger.listener)


              if (timelineInstruction.subTimeline && skippedPlayersMap) {
                allSubElements.add(element);
              }

              if (isQueriedElement) {
                var wrappedPlayer = new TransitionAnimationPlayer(namespaceId, triggerName, element);
                wrappedPlayer.setRealPlayer(player);
                allQueriedPlayers.push(wrappedPlayer);
              }

              return player;
            });
            allQueriedPlayers.forEach(function (player) {
              getOrSetAsInMap(_this42.playersByQueriedElement, player.element, []).push(player);
              player.onDone(function () {
                return deleteOrUnsetInMap(_this42.playersByQueriedElement, player.element, player);
              });
            });
            allConsumedElements.forEach(function (element) {
              return addClass(element, NG_ANIMATING_CLASSNAME);
            });
            var player = optimizeGroupPlayer(allNewPlayers);
            player.onDestroy(function () {
              allConsumedElements.forEach(function (element) {
                return removeClass(element, NG_ANIMATING_CLASSNAME);
              });
              setStyles(rootElement, instruction.toStyles);
            }); // this basically makes all of the callbacks for sub element animations
            // be dependent on the upper players for when they finish

            allSubElements.forEach(function (element) {
              getOrSetAsInMap(skippedPlayersMap, element, []).push(player);
            });
            return player;
          }
        }, {
          key: "_buildPlayer",
          value: function _buildPlayer(instruction, keyframes, previousPlayers) {
            if (keyframes.length > 0) {
              return this.driver.animate(instruction.element, keyframes, instruction.duration, instruction.delay, instruction.easing, previousPlayers);
            } // special case for when an empty transition|definition is provided
            // ... there is no point in rendering an empty animation


            return new _angular_animations__WEBPACK_IMPORTED_MODULE_0__.NoopAnimationPlayer(instruction.duration, instruction.delay);
          }
        }]);

        return TransitionAnimationEngine;
      }();

      var TransitionAnimationPlayer = /*#__PURE__*/function () {
        function TransitionAnimationPlayer(namespaceId, triggerName, element) {
          _classCallCheck2(this, TransitionAnimationPlayer);

          this.namespaceId = namespaceId;
          this.triggerName = triggerName;
          this.element = element;
          this._player = new _angular_animations__WEBPACK_IMPORTED_MODULE_0__.NoopAnimationPlayer();
          this._containsRealPlayer = false;
          this._queuedCallbacks = {};
          this.destroyed = false;
          this.markedForDestroy = false;
          this.disabled = false;
          this.queued = true;
          this.totalTime = 0;
        }

        _createClass2(TransitionAnimationPlayer, [{
          key: "setRealPlayer",
          value: function setRealPlayer(player) {
            var _this43 = this;

            if (this._containsRealPlayer) return;
            this._player = player;
            Object.keys(this._queuedCallbacks).forEach(function (phase) {
              _this43._queuedCallbacks[phase].forEach(function (callback) {
                return listenOnPlayer(player, phase, undefined, callback);
              });
            });
            this._queuedCallbacks = {};
            this._containsRealPlayer = true;
            this.overrideTotalTime(player.totalTime);
            this.queued = false;
          }
        }, {
          key: "getRealPlayer",
          value: function getRealPlayer() {
            return this._player;
          }
        }, {
          key: "overrideTotalTime",
          value: function overrideTotalTime(totalTime) {
            this.totalTime = totalTime;
          }
        }, {
          key: "syncPlayerEvents",
          value: function syncPlayerEvents(player) {
            var _this44 = this;

            var p = this._player;

            if (p.triggerCallback) {
              player.onStart(function () {
                return p.triggerCallback('start');
              });
            }

            player.onDone(function () {
              return _this44.finish();
            });
            player.onDestroy(function () {
              return _this44.destroy();
            });
          }
        }, {
          key: "_queueEvent",
          value: function _queueEvent(name, callback) {
            getOrSetAsInMap(this._queuedCallbacks, name, []).push(callback);
          }
        }, {
          key: "onDone",
          value: function onDone(fn) {
            if (this.queued) {
              this._queueEvent('done', fn);
            }

            this._player.onDone(fn);
          }
        }, {
          key: "onStart",
          value: function onStart(fn) {
            if (this.queued) {
              this._queueEvent('start', fn);
            }

            this._player.onStart(fn);
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(fn) {
            if (this.queued) {
              this._queueEvent('destroy', fn);
            }

            this._player.onDestroy(fn);
          }
        }, {
          key: "init",
          value: function init() {
            this._player.init();
          }
        }, {
          key: "hasStarted",
          value: function hasStarted() {
            return this.queued ? false : this._player.hasStarted();
          }
        }, {
          key: "play",
          value: function play() {
            !this.queued && this._player.play();
          }
        }, {
          key: "pause",
          value: function pause() {
            !this.queued && this._player.pause();
          }
        }, {
          key: "restart",
          value: function restart() {
            !this.queued && this._player.restart();
          }
        }, {
          key: "finish",
          value: function finish() {
            this._player.finish();
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.destroyed = true;

            this._player.destroy();
          }
        }, {
          key: "reset",
          value: function reset() {
            !this.queued && this._player.reset();
          }
        }, {
          key: "setPosition",
          value: function setPosition(p) {
            if (!this.queued) {
              this._player.setPosition(p);
            }
          }
        }, {
          key: "getPosition",
          value: function getPosition() {
            return this.queued ? 0 : this._player.getPosition();
          }
          /** @internal */

        }, {
          key: "triggerCallback",
          value: function triggerCallback(phaseName) {
            var p = this._player;

            if (p.triggerCallback) {
              p.triggerCallback(phaseName);
            }
          }
        }]);

        return TransitionAnimationPlayer;
      }();

      function deleteOrUnsetInMap(map, key, value) {
        var currentValues;

        if (map instanceof Map) {
          currentValues = map.get(key);

          if (currentValues) {
            if (currentValues.length) {
              var index = currentValues.indexOf(value);
              currentValues.splice(index, 1);
            }

            if (currentValues.length == 0) {
              map["delete"](key);
            }
          }
        } else {
          currentValues = map[key];

          if (currentValues) {
            if (currentValues.length) {
              var _index3 = currentValues.indexOf(value);

              currentValues.splice(_index3, 1);
            }

            if (currentValues.length == 0) {
              delete map[key];
            }
          }
        }

        return currentValues;
      }

      function normalizeTriggerValue(value) {
        // we use `!= null` here because it's the most simple
        // way to test against a "falsy" value without mixing
        // in empty strings or a zero value. DO NOT OPTIMIZE.
        return value != null ? value : null;
      }

      function isElementNode(node) {
        return node && node['nodeType'] === 1;
      }

      function isTriggerEventValid(eventName) {
        return eventName == 'start' || eventName == 'done';
      }

      function cloakElement(element, value) {
        var oldValue = element.style.display;
        element.style.display = value != null ? value : 'none';
        return oldValue;
      }

      function cloakAndComputeStyles(valuesMap, driver, elements, elementPropsMap, defaultStyle) {
        var cloakVals = [];
        elements.forEach(function (element) {
          return cloakVals.push(cloakElement(element));
        });
        var failedElements = [];
        elementPropsMap.forEach(function (props, element) {
          var styles = {};
          props.forEach(function (prop) {
            var value = styles[prop] = driver.computeStyle(element, prop, defaultStyle); // there is no easy way to detect this because a sub element could be removed
            // by a parent animation element being detached.

            if (!value || value.length == 0) {
              element[REMOVAL_FLAG] = NULL_REMOVED_QUERIED_STATE;
              failedElements.push(element);
            }
          });
          valuesMap.set(element, styles);
        }); // we use a index variable here since Set.forEach(a, i) does not return
        // an index value for the closure (but instead just the value)

        var i = 0;
        elements.forEach(function (element) {
          return cloakElement(element, cloakVals[i++]);
        });
        return failedElements;
      }
      /*
      Since the Angular renderer code will return a collection of inserted
      nodes in all areas of a DOM tree, it's up to this algorithm to figure
      out which nodes are roots for each animation @trigger.
      
      By placing each inserted node into a Set and traversing upwards, it
      is possible to find the @trigger elements and well any direct *star
      insertion nodes, if a @trigger root is found then the enter element
      is placed into the Map[@trigger] spot.
       */


      function buildRootMap(roots, nodes) {
        var rootMap = new Map();
        roots.forEach(function (root) {
          return rootMap.set(root, []);
        });
        if (nodes.length == 0) return rootMap;
        var NULL_NODE = 1;
        var nodeSet = new Set(nodes);
        var localRootMap = new Map();

        function getRoot(node) {
          if (!node) return NULL_NODE;
          var root = localRootMap.get(node);
          if (root) return root;
          var parent = node.parentNode;

          if (rootMap.has(parent)) {
            // ngIf inside @trigger
            root = parent;
          } else if (nodeSet.has(parent)) {
            // ngIf inside ngIf
            root = NULL_NODE;
          } else {
            // recurse upwards
            root = getRoot(parent);
          }

          localRootMap.set(node, root);
          return root;
        }

        nodes.forEach(function (node) {
          var root = getRoot(node);

          if (root !== NULL_NODE) {
            rootMap.get(root).push(node);
          }
        });
        return rootMap;
      }

      var CLASSES_CACHE_KEY = '$$classes';

      function containsClass(element, className) {
        if (element.classList) {
          return element.classList.contains(className);
        } else {
          var classes = element[CLASSES_CACHE_KEY];
          return classes && classes[className];
        }
      }

      function addClass(element, className) {
        if (element.classList) {
          element.classList.add(className);
        } else {
          var classes = element[CLASSES_CACHE_KEY];

          if (!classes) {
            classes = element[CLASSES_CACHE_KEY] = {};
          }

          classes[className] = true;
        }
      }

      function removeClass(element, className) {
        if (element.classList) {
          element.classList.remove(className);
        } else {
          var classes = element[CLASSES_CACHE_KEY];

          if (classes) {
            delete classes[className];
          }
        }
      }

      function removeNodesAfterAnimationDone(engine, element, players) {
        optimizeGroupPlayer(players).onDone(function () {
          return engine.processLeaveNode(element);
        });
      }

      function flattenGroupPlayers(players) {
        var finalPlayers = [];

        _flattenGroupPlayersRecur(players, finalPlayers);

        return finalPlayers;
      }

      function _flattenGroupPlayersRecur(players, finalPlayers) {
        for (var i = 0; i < players.length; i++) {
          var player = players[i];

          if (player instanceof _angular_animations__WEBPACK_IMPORTED_MODULE_0__["ɵAnimationGroupPlayer"]) {
            _flattenGroupPlayersRecur(player.players, finalPlayers);
          } else {
            finalPlayers.push(player);
          }
        }
      }

      function objEquals(a, b) {
        var k1 = Object.keys(a);
        var k2 = Object.keys(b);
        if (k1.length != k2.length) return false;

        for (var i = 0; i < k1.length; i++) {
          var prop = k1[i];
          if (!b.hasOwnProperty(prop) || a[prop] !== b[prop]) return false;
        }

        return true;
      }

      function replacePostStylesAsPre(element, allPreStyleElements, allPostStyleElements) {
        var postEntry = allPostStyleElements.get(element);
        if (!postEntry) return false;
        var preEntry = allPreStyleElements.get(element);

        if (preEntry) {
          postEntry.forEach(function (data) {
            return preEntry.add(data);
          });
        } else {
          allPreStyleElements.set(element, postEntry);
        }

        allPostStyleElements["delete"](element);
        return true;
      }

      var AnimationEngine = /*#__PURE__*/function () {
        function AnimationEngine(bodyNode, _driver, normalizer) {
          var _this45 = this;

          _classCallCheck2(this, AnimationEngine);

          this.bodyNode = bodyNode;
          this._driver = _driver;
          this._triggerCache = {}; // this method is designed to be overridden by the code that uses this engine

          this.onRemovalComplete = function (element, context) {};

          this._transitionEngine = new TransitionAnimationEngine(bodyNode, _driver, normalizer);
          this._timelineEngine = new TimelineAnimationEngine(bodyNode, _driver, normalizer);

          this._transitionEngine.onRemovalComplete = function (element, context) {
            return _this45.onRemovalComplete(element, context);
          };
        }

        _createClass2(AnimationEngine, [{
          key: "registerTrigger",
          value: function registerTrigger(componentId, namespaceId, hostElement, name, metadata) {
            var cacheKey = componentId + '-' + name;
            var trigger = this._triggerCache[cacheKey];

            if (!trigger) {
              var errors = [];
              var ast = buildAnimationAst(this._driver, metadata, errors);

              if (errors.length) {
                throw new Error("The animation trigger \"".concat(name, "\" has failed to build due to the following errors:\n - ").concat(errors.join('\n - ')));
              }

              trigger = buildTrigger(name, ast);
              this._triggerCache[cacheKey] = trigger;
            }

            this._transitionEngine.registerTrigger(namespaceId, name, trigger);
          }
        }, {
          key: "register",
          value: function register(namespaceId, hostElement) {
            this._transitionEngine.register(namespaceId, hostElement);
          }
        }, {
          key: "destroy",
          value: function destroy(namespaceId, context) {
            this._transitionEngine.destroy(namespaceId, context);
          }
        }, {
          key: "onInsert",
          value: function onInsert(namespaceId, element, parent, insertBefore) {
            this._transitionEngine.insertNode(namespaceId, element, parent, insertBefore);
          }
        }, {
          key: "onRemove",
          value: function onRemove(namespaceId, element, context, isHostElement) {
            this._transitionEngine.removeNode(namespaceId, element, isHostElement || false, context);
          }
        }, {
          key: "disableAnimations",
          value: function disableAnimations(element, disable) {
            this._transitionEngine.markElementAsDisabled(element, disable);
          }
        }, {
          key: "process",
          value: function process(namespaceId, element, property, value) {
            if (property.charAt(0) == '@') {
              var _parseTimelineCommand = parseTimelineCommand(property),
                  _parseTimelineCommand2 = _slicedToArray(_parseTimelineCommand, 2),
                  id = _parseTimelineCommand2[0],
                  action = _parseTimelineCommand2[1];

              var args = value;

              this._timelineEngine.command(id, element, action, args);
            } else {
              this._transitionEngine.trigger(namespaceId, element, property, value);
            }
          }
        }, {
          key: "listen",
          value: function listen(namespaceId, element, eventName, eventPhase, callback) {
            // @@listen
            if (eventName.charAt(0) == '@') {
              var _parseTimelineCommand3 = parseTimelineCommand(eventName),
                  _parseTimelineCommand4 = _slicedToArray(_parseTimelineCommand3, 2),
                  id = _parseTimelineCommand4[0],
                  action = _parseTimelineCommand4[1];

              return this._timelineEngine.listen(id, element, action, callback);
            }

            return this._transitionEngine.listen(namespaceId, element, eventName, eventPhase, callback);
          }
        }, {
          key: "flush",
          value: function flush() {
            var microtaskId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;

            this._transitionEngine.flush(microtaskId);
          }
        }, {
          key: "players",
          get: function get() {
            return this._transitionEngine.players.concat(this._timelineEngine.players);
          }
        }, {
          key: "whenRenderingDone",
          value: function whenRenderingDone() {
            return this._transitionEngine.whenRenderingDone();
          }
        }]);

        return AnimationEngine;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Returns an instance of `SpecialCasedStyles` if and when any special (non animateable) styles are
       * detected.
       *
       * In CSS there exist properties that cannot be animated within a keyframe animation
       * (whether it be via CSS keyframes or web-animations) and the animation implementation
       * will ignore them. This function is designed to detect those special cased styles and
       * return a container that will be executed at the start and end of the animation.
       *
       * @returns an instance of `SpecialCasedStyles` if any special styles are detected otherwise `null`
       */


      function packageNonAnimatableStyles(element, styles) {
        var startStyles = null;
        var endStyles = null;

        if (Array.isArray(styles) && styles.length) {
          startStyles = filterNonAnimatableStyles(styles[0]);

          if (styles.length > 1) {
            endStyles = filterNonAnimatableStyles(styles[styles.length - 1]);
          }
        } else if (styles) {
          startStyles = filterNonAnimatableStyles(styles);
        }

        return startStyles || endStyles ? new SpecialCasedStyles(element, startStyles, endStyles) : null;
      }
      /**
       * Designed to be executed during a keyframe-based animation to apply any special-cased styles.
       *
       * When started (when the `start()` method is run) then the provided `startStyles`
       * will be applied. When finished (when the `finish()` method is called) the
       * `endStyles` will be applied as well any any starting styles. Finally when
       * `destroy()` is called then all styles will be removed.
       */


      var SpecialCasedStyles = /*#__PURE__*/function () {
        function SpecialCasedStyles(_element, _startStyles, _endStyles) {
          _classCallCheck2(this, SpecialCasedStyles);

          this._element = _element;
          this._startStyles = _startStyles;
          this._endStyles = _endStyles;
          this._state = 0
          /* Pending */
          ;
          var initialStyles = SpecialCasedStyles.initialStylesByElement.get(_element);

          if (!initialStyles) {
            SpecialCasedStyles.initialStylesByElement.set(_element, initialStyles = {});
          }

          this._initialStyles = initialStyles;
        }

        _createClass2(SpecialCasedStyles, [{
          key: "start",
          value: function start() {
            if (this._state < 1
            /* Started */
            ) {
                if (this._startStyles) {
                  setStyles(this._element, this._startStyles, this._initialStyles);
                }

                this._state = 1
                /* Started */
                ;
              }
          }
        }, {
          key: "finish",
          value: function finish() {
            this.start();

            if (this._state < 2
            /* Finished */
            ) {
                setStyles(this._element, this._initialStyles);

                if (this._endStyles) {
                  setStyles(this._element, this._endStyles);
                  this._endStyles = null;
                }

                this._state = 1
                /* Started */
                ;
              }
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.finish();

            if (this._state < 3
            /* Destroyed */
            ) {
                SpecialCasedStyles.initialStylesByElement["delete"](this._element);

                if (this._startStyles) {
                  eraseStyles(this._element, this._startStyles);
                  this._endStyles = null;
                }

                if (this._endStyles) {
                  eraseStyles(this._element, this._endStyles);
                  this._endStyles = null;
                }

                setStyles(this._element, this._initialStyles);
                this._state = 3
                /* Destroyed */
                ;
              }
          }
        }]);

        return SpecialCasedStyles;
      }();

      SpecialCasedStyles.initialStylesByElement = new WeakMap();

      function filterNonAnimatableStyles(styles) {
        var result = null;
        var props = Object.keys(styles);

        for (var i = 0; i < props.length; i++) {
          var prop = props[i];

          if (isNonAnimatableStyle(prop)) {
            result = result || {};
            result[prop] = styles[prop];
          }
        }

        return result;
      }

      function isNonAnimatableStyle(prop) {
        return prop === 'display' || prop === 'position';
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
      var ANIMATION_PROP = 'animation';
      var ANIMATIONEND_EVENT = 'animationend';
      var ONE_SECOND$1 = 1000;

      var ElementAnimationStyleHandler = /*#__PURE__*/function () {
        function ElementAnimationStyleHandler(_element, _name, _duration, _delay, _easing, _fillMode, _onDoneFn) {
          var _this46 = this;

          _classCallCheck2(this, ElementAnimationStyleHandler);

          this._element = _element;
          this._name = _name;
          this._duration = _duration;
          this._delay = _delay;
          this._easing = _easing;
          this._fillMode = _fillMode;
          this._onDoneFn = _onDoneFn;
          this._finished = false;
          this._destroyed = false;
          this._startTime = 0;
          this._position = 0;

          this._eventFn = function (e) {
            return _this46._handleCallback(e);
          };
        }

        _createClass2(ElementAnimationStyleHandler, [{
          key: "apply",
          value: function apply() {
            applyKeyframeAnimation(this._element, "".concat(this._duration, "ms ").concat(this._easing, " ").concat(this._delay, "ms 1 normal ").concat(this._fillMode, " ").concat(this._name));
            addRemoveAnimationEvent(this._element, this._eventFn, false);
            this._startTime = Date.now();
          }
        }, {
          key: "pause",
          value: function pause() {
            playPauseAnimation(this._element, this._name, 'paused');
          }
        }, {
          key: "resume",
          value: function resume() {
            playPauseAnimation(this._element, this._name, 'running');
          }
        }, {
          key: "setPosition",
          value: function setPosition(position) {
            var index = findIndexForAnimation(this._element, this._name);
            this._position = position * this._duration;
            setAnimationStyle(this._element, 'Delay', "-".concat(this._position, "ms"), index);
          }
        }, {
          key: "getPosition",
          value: function getPosition() {
            return this._position;
          }
        }, {
          key: "_handleCallback",
          value: function _handleCallback(event) {
            var timestamp = event._ngTestManualTimestamp || Date.now();
            var elapsedTime = parseFloat(event.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES)) * ONE_SECOND$1;

            if (event.animationName == this._name && Math.max(timestamp - this._startTime, 0) >= this._delay && elapsedTime >= this._duration) {
              this.finish();
            }
          }
        }, {
          key: "finish",
          value: function finish() {
            if (this._finished) return;
            this._finished = true;

            this._onDoneFn();

            addRemoveAnimationEvent(this._element, this._eventFn, true);
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (this._destroyed) return;
            this._destroyed = true;
            this.finish();
            removeKeyframeAnimation(this._element, this._name);
          }
        }]);

        return ElementAnimationStyleHandler;
      }();

      function playPauseAnimation(element, name, status) {
        var index = findIndexForAnimation(element, name);
        setAnimationStyle(element, 'PlayState', status, index);
      }

      function applyKeyframeAnimation(element, value) {
        var anim = getAnimationStyle(element, '').trim();
        var index = 0;

        if (anim.length) {
          index = countChars(anim, ',') + 1;
          value = "".concat(anim, ", ").concat(value);
        }

        setAnimationStyle(element, '', value);
        return index;
      }

      function removeKeyframeAnimation(element, name) {
        var anim = getAnimationStyle(element, '');
        var tokens = anim.split(',');
        var index = findMatchingTokenIndex(tokens, name);

        if (index >= 0) {
          tokens.splice(index, 1);
          var newValue = tokens.join(',');
          setAnimationStyle(element, '', newValue);
        }
      }

      function findIndexForAnimation(element, value) {
        var anim = getAnimationStyle(element, '');

        if (anim.indexOf(',') > 0) {
          var tokens = anim.split(',');
          return findMatchingTokenIndex(tokens, value);
        }

        return findMatchingTokenIndex([anim], value);
      }

      function findMatchingTokenIndex(tokens, searchToken) {
        for (var i = 0; i < tokens.length; i++) {
          if (tokens[i].indexOf(searchToken) >= 0) {
            return i;
          }
        }

        return -1;
      }

      function addRemoveAnimationEvent(element, fn, doRemove) {
        doRemove ? element.removeEventListener(ANIMATIONEND_EVENT, fn) : element.addEventListener(ANIMATIONEND_EVENT, fn);
      }

      function setAnimationStyle(element, name, value, index) {
        var prop = ANIMATION_PROP + name;

        if (index != null) {
          var oldValue = element.style[prop];

          if (oldValue.length) {
            var tokens = oldValue.split(',');
            tokens[index] = value;
            value = tokens.join(',');
          }
        }

        element.style[prop] = value;
      }

      function getAnimationStyle(element, name) {
        return element.style[ANIMATION_PROP + name] || '';
      }

      function countChars(value, _char) {
        var count = 0;

        for (var i = 0; i < value.length; i++) {
          var c = value.charAt(i);
          if (c === _char) count++;
        }

        return count;
      }

      var DEFAULT_FILL_MODE = 'forwards';
      var DEFAULT_EASING = 'linear';

      var CssKeyframesPlayer = /*#__PURE__*/function () {
        function CssKeyframesPlayer(element, keyframes, animationName, _duration, _delay, easing, _finalStyles, _specialStyles) {
          _classCallCheck2(this, CssKeyframesPlayer);

          this.element = element;
          this.keyframes = keyframes;
          this.animationName = animationName;
          this._duration = _duration;
          this._delay = _delay;
          this._finalStyles = _finalStyles;
          this._specialStyles = _specialStyles;
          this._onDoneFns = [];
          this._onStartFns = [];
          this._onDestroyFns = [];
          this.currentSnapshot = {};
          this._state = 0;
          this.easing = easing || DEFAULT_EASING;
          this.totalTime = _duration + _delay;

          this._buildStyler();
        }

        _createClass2(CssKeyframesPlayer, [{
          key: "onStart",
          value: function onStart(fn) {
            this._onStartFns.push(fn);
          }
        }, {
          key: "onDone",
          value: function onDone(fn) {
            this._onDoneFns.push(fn);
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(fn) {
            this._onDestroyFns.push(fn);
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.init();
            if (this._state >= 4
            /* DESTROYED */
            ) return;
            this._state = 4
            /* DESTROYED */
            ;

            this._styler.destroy();

            this._flushStartFns();

            this._flushDoneFns();

            if (this._specialStyles) {
              this._specialStyles.destroy();
            }

            this._onDestroyFns.forEach(function (fn) {
              return fn();
            });

            this._onDestroyFns = [];
          }
        }, {
          key: "_flushDoneFns",
          value: function _flushDoneFns() {
            this._onDoneFns.forEach(function (fn) {
              return fn();
            });

            this._onDoneFns = [];
          }
        }, {
          key: "_flushStartFns",
          value: function _flushStartFns() {
            this._onStartFns.forEach(function (fn) {
              return fn();
            });

            this._onStartFns = [];
          }
        }, {
          key: "finish",
          value: function finish() {
            this.init();
            if (this._state >= 3
            /* FINISHED */
            ) return;
            this._state = 3
            /* FINISHED */
            ;

            this._styler.finish();

            this._flushStartFns();

            if (this._specialStyles) {
              this._specialStyles.finish();
            }

            this._flushDoneFns();
          }
        }, {
          key: "setPosition",
          value: function setPosition(value) {
            this._styler.setPosition(value);
          }
        }, {
          key: "getPosition",
          value: function getPosition() {
            return this._styler.getPosition();
          }
        }, {
          key: "hasStarted",
          value: function hasStarted() {
            return this._state >= 2
            /* STARTED */
            ;
          }
        }, {
          key: "init",
          value: function init() {
            if (this._state >= 1
            /* INITIALIZED */
            ) return;
            this._state = 1
            /* INITIALIZED */
            ;
            var elm = this.element;

            this._styler.apply();

            if (this._delay) {
              this._styler.pause();
            }
          }
        }, {
          key: "play",
          value: function play() {
            this.init();

            if (!this.hasStarted()) {
              this._flushStartFns();

              this._state = 2
              /* STARTED */
              ;

              if (this._specialStyles) {
                this._specialStyles.start();
              }
            }

            this._styler.resume();
          }
        }, {
          key: "pause",
          value: function pause() {
            this.init();

            this._styler.pause();
          }
        }, {
          key: "restart",
          value: function restart() {
            this.reset();
            this.play();
          }
        }, {
          key: "reset",
          value: function reset() {
            this._state = 0
            /* RESET */
            ;

            this._styler.destroy();

            this._buildStyler();

            this._styler.apply();
          }
        }, {
          key: "_buildStyler",
          value: function _buildStyler() {
            var _this47 = this;

            this._styler = new ElementAnimationStyleHandler(this.element, this.animationName, this._duration, this._delay, this.easing, DEFAULT_FILL_MODE, function () {
              return _this47.finish();
            });
          }
          /** @internal */

        }, {
          key: "triggerCallback",
          value: function triggerCallback(phaseName) {
            var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
            methods.forEach(function (fn) {
              return fn();
            });
            methods.length = 0;
          }
        }, {
          key: "beforeDestroy",
          value: function beforeDestroy() {
            var _this48 = this;

            this.init();
            var styles = {};

            if (this.hasStarted()) {
              var finished = this._state >= 3
              /* FINISHED */
              ;
              Object.keys(this._finalStyles).forEach(function (prop) {
                if (prop != 'offset') {
                  styles[prop] = finished ? _this48._finalStyles[prop] : computeStyle(_this48.element, prop);
                }
              });
            }

            this.currentSnapshot = styles;
          }
        }]);

        return CssKeyframesPlayer;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var DirectStylePlayer = /*#__PURE__*/function (_angular_animations__) {
        _inherits(DirectStylePlayer, _angular_animations__);

        var _super3 = _createSuper(DirectStylePlayer);

        function DirectStylePlayer(element, styles) {
          var _this49;

          _classCallCheck2(this, DirectStylePlayer);

          _this49 = _super3.call(this);
          _this49.element = element;
          _this49._startingStyles = {};
          _this49.__initialized = false;
          _this49._styles = hypenatePropsObject(styles);
          return _this49;
        }

        _createClass2(DirectStylePlayer, [{
          key: "init",
          value: function init() {
            var _this50 = this;

            if (this.__initialized || !this._startingStyles) return;
            this.__initialized = true;
            Object.keys(this._styles).forEach(function (prop) {
              _this50._startingStyles[prop] = _this50.element.style[prop];
            });

            _get(_getPrototypeOf(DirectStylePlayer.prototype), "init", this).call(this);
          }
        }, {
          key: "play",
          value: function play() {
            var _this51 = this;

            if (!this._startingStyles) return;
            this.init();
            Object.keys(this._styles).forEach(function (prop) {
              return _this51.element.style.setProperty(prop, _this51._styles[prop]);
            });

            _get(_getPrototypeOf(DirectStylePlayer.prototype), "play", this).call(this);
          }
        }, {
          key: "destroy",
          value: function destroy() {
            var _this52 = this;

            if (!this._startingStyles) return;
            Object.keys(this._startingStyles).forEach(function (prop) {
              var value = _this52._startingStyles[prop];

              if (value) {
                _this52.element.style.setProperty(prop, value);
              } else {
                _this52.element.style.removeProperty(prop);
              }
            });
            this._startingStyles = null;

            _get(_getPrototypeOf(DirectStylePlayer.prototype), "destroy", this).call(this);
          }
        }]);

        return DirectStylePlayer;
      }(_angular_animations__WEBPACK_IMPORTED_MODULE_0__.NoopAnimationPlayer);

      var KEYFRAMES_NAME_PREFIX = 'gen_css_kf_';
      var TAB_SPACE = ' ';

      var CssKeyframesDriver = /*#__PURE__*/function () {
        function CssKeyframesDriver() {
          _classCallCheck2(this, CssKeyframesDriver);

          this._count = 0;
        }

        _createClass2(CssKeyframesDriver, [{
          key: "validateStyleProperty",
          value: function validateStyleProperty(prop) {
            return _validateStyleProperty(prop);
          }
        }, {
          key: "matchesElement",
          value: function matchesElement(element, selector) {
            return _matchesElement(element, selector);
          }
        }, {
          key: "containsElement",
          value: function containsElement(elm1, elm2) {
            return _containsElement(elm1, elm2);
          }
        }, {
          key: "query",
          value: function query(element, selector, multi) {
            return invokeQuery(element, selector, multi);
          }
        }, {
          key: "computeStyle",
          value: function computeStyle(element, prop, defaultValue) {
            return window.getComputedStyle(element)[prop];
          }
        }, {
          key: "buildKeyframeElement",
          value: function buildKeyframeElement(element, name, keyframes) {
            keyframes = keyframes.map(function (kf) {
              return hypenatePropsObject(kf);
            });
            var keyframeStr = "@keyframes ".concat(name, " {\n");
            var tab = '';
            keyframes.forEach(function (kf) {
              tab = TAB_SPACE;
              var offset = parseFloat(kf['offset']);
              keyframeStr += "".concat(tab).concat(offset * 100, "% {\n");
              tab += TAB_SPACE;
              Object.keys(kf).forEach(function (prop) {
                var value = kf[prop];

                switch (prop) {
                  case 'offset':
                    return;

                  case 'easing':
                    if (value) {
                      keyframeStr += "".concat(tab, "animation-timing-function: ").concat(value, ";\n");
                    }

                    return;

                  default:
                    keyframeStr += "".concat(tab).concat(prop, ": ").concat(value, ";\n");
                    return;
                }
              });
              keyframeStr += "".concat(tab, "}\n");
            });
            keyframeStr += "}\n";
            var kfElm = document.createElement('style');
            kfElm.textContent = keyframeStr;
            return kfElm;
          }
        }, {
          key: "animate",
          value: function animate(element, keyframes, duration, delay, easing) {
            var previousPlayers = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
            var scrubberAccessRequested = arguments.length > 6 ? arguments[6] : undefined;

            if ((typeof ngDevMode === 'undefined' || ngDevMode) && scrubberAccessRequested) {
              notifyFaultyScrubber();
            }

            var previousCssKeyframePlayers = previousPlayers.filter(function (player) {
              return player instanceof CssKeyframesPlayer;
            });
            var previousStyles = {};

            if (allowPreviousPlayerStylesMerge(duration, delay)) {
              previousCssKeyframePlayers.forEach(function (player) {
                var styles = player.currentSnapshot;
                Object.keys(styles).forEach(function (prop) {
                  return previousStyles[prop] = styles[prop];
                });
              });
            }

            keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);
            var finalStyles = flattenKeyframesIntoStyles(keyframes); // if there is no animation then there is no point in applying
            // styles and waiting for an event to get fired. This causes lag.
            // It's better to just directly apply the styles to the element
            // via the direct styling animation player.

            if (duration == 0) {
              return new DirectStylePlayer(element, finalStyles);
            }

            var animationName = "".concat(KEYFRAMES_NAME_PREFIX).concat(this._count++);
            var kfElm = this.buildKeyframeElement(element, animationName, keyframes);
            var nodeToAppendKfElm = findNodeToAppendKeyframeElement(element);
            nodeToAppendKfElm.appendChild(kfElm);
            var specialStyles = packageNonAnimatableStyles(element, keyframes);
            var player = new CssKeyframesPlayer(element, keyframes, animationName, duration, delay, easing, finalStyles, specialStyles);
            player.onDestroy(function () {
              return removeElement(kfElm);
            });
            return player;
          }
        }]);

        return CssKeyframesDriver;
      }();

      function findNodeToAppendKeyframeElement(element) {
        var _a;

        var rootNode = (_a = element.getRootNode) === null || _a === void 0 ? void 0 : _a.call(element);

        if (typeof ShadowRoot !== 'undefined' && rootNode instanceof ShadowRoot) {
          return rootNode;
        }

        return document.head;
      }

      function flattenKeyframesIntoStyles(keyframes) {
        var flatKeyframes = {};

        if (keyframes) {
          var kfs = Array.isArray(keyframes) ? keyframes : [keyframes];
          kfs.forEach(function (kf) {
            Object.keys(kf).forEach(function (prop) {
              if (prop == 'offset' || prop == 'easing') return;
              flatKeyframes[prop] = kf[prop];
            });
          });
        }

        return flatKeyframes;
      }

      function removeElement(node) {
        node.parentNode.removeChild(node);
      }

      var warningIssued = false;

      function notifyFaultyScrubber() {
        if (warningIssued) return;
        console.warn('@angular/animations: please load the web-animations.js polyfill to allow programmatic access...\n', '  visit https://bit.ly/IWukam to learn more about using the web-animation-js polyfill.');
        warningIssued = true;
      }

      var WebAnimationsPlayer = /*#__PURE__*/function () {
        function WebAnimationsPlayer(element, keyframes, options, _specialStyles) {
          _classCallCheck2(this, WebAnimationsPlayer);

          this.element = element;
          this.keyframes = keyframes;
          this.options = options;
          this._specialStyles = _specialStyles;
          this._onDoneFns = [];
          this._onStartFns = [];
          this._onDestroyFns = [];
          this._initialized = false;
          this._finished = false;
          this._started = false;
          this._destroyed = false;
          this.time = 0;
          this.parentPlayer = null;
          this.currentSnapshot = {};
          this._duration = options['duration'];
          this._delay = options['delay'] || 0;
          this.time = this._duration + this._delay;
        }

        _createClass2(WebAnimationsPlayer, [{
          key: "_onFinish",
          value: function _onFinish() {
            if (!this._finished) {
              this._finished = true;

              this._onDoneFns.forEach(function (fn) {
                return fn();
              });

              this._onDoneFns = [];
            }
          }
        }, {
          key: "init",
          value: function init() {
            this._buildPlayer();

            this._preparePlayerBeforeStart();
          }
        }, {
          key: "_buildPlayer",
          value: function _buildPlayer() {
            var _this53 = this;

            if (this._initialized) return;
            this._initialized = true;
            var keyframes = this.keyframes;
            this.domPlayer = this._triggerWebAnimation(this.element, keyframes, this.options);
            this._finalKeyframe = keyframes.length ? keyframes[keyframes.length - 1] : {};
            this.domPlayer.addEventListener('finish', function () {
              return _this53._onFinish();
            });
          }
        }, {
          key: "_preparePlayerBeforeStart",
          value: function _preparePlayerBeforeStart() {
            // this is required so that the player doesn't start to animate right away
            if (this._delay) {
              this._resetDomPlayerState();
            } else {
              this.domPlayer.pause();
            }
          }
          /** @internal */

        }, {
          key: "_triggerWebAnimation",
          value: function _triggerWebAnimation(element, keyframes, options) {
            // jscompiler doesn't seem to know animate is a native property because it's not fully
            // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]
            return element['animate'](keyframes, options);
          }
        }, {
          key: "onStart",
          value: function onStart(fn) {
            this._onStartFns.push(fn);
          }
        }, {
          key: "onDone",
          value: function onDone(fn) {
            this._onDoneFns.push(fn);
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(fn) {
            this._onDestroyFns.push(fn);
          }
        }, {
          key: "play",
          value: function play() {
            this._buildPlayer();

            if (!this.hasStarted()) {
              this._onStartFns.forEach(function (fn) {
                return fn();
              });

              this._onStartFns = [];
              this._started = true;

              if (this._specialStyles) {
                this._specialStyles.start();
              }
            }

            this.domPlayer.play();
          }
        }, {
          key: "pause",
          value: function pause() {
            this.init();
            this.domPlayer.pause();
          }
        }, {
          key: "finish",
          value: function finish() {
            this.init();

            if (this._specialStyles) {
              this._specialStyles.finish();
            }

            this._onFinish();

            this.domPlayer.finish();
          }
        }, {
          key: "reset",
          value: function reset() {
            this._resetDomPlayerState();

            this._destroyed = false;
            this._finished = false;
            this._started = false;
          }
        }, {
          key: "_resetDomPlayerState",
          value: function _resetDomPlayerState() {
            if (this.domPlayer) {
              this.domPlayer.cancel();
            }
          }
        }, {
          key: "restart",
          value: function restart() {
            this.reset();
            this.play();
          }
        }, {
          key: "hasStarted",
          value: function hasStarted() {
            return this._started;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (!this._destroyed) {
              this._destroyed = true;

              this._resetDomPlayerState();

              this._onFinish();

              if (this._specialStyles) {
                this._specialStyles.destroy();
              }

              this._onDestroyFns.forEach(function (fn) {
                return fn();
              });

              this._onDestroyFns = [];
            }
          }
        }, {
          key: "setPosition",
          value: function setPosition(p) {
            if (this.domPlayer === undefined) {
              this.init();
            }

            this.domPlayer.currentTime = p * this.time;
          }
        }, {
          key: "getPosition",
          value: function getPosition() {
            return this.domPlayer.currentTime / this.time;
          }
        }, {
          key: "totalTime",
          get: function get() {
            return this._delay + this._duration;
          }
        }, {
          key: "beforeDestroy",
          value: function beforeDestroy() {
            var _this54 = this;

            var styles = {};

            if (this.hasStarted()) {
              Object.keys(this._finalKeyframe).forEach(function (prop) {
                if (prop != 'offset') {
                  styles[prop] = _this54._finished ? _this54._finalKeyframe[prop] : computeStyle(_this54.element, prop);
                }
              });
            }

            this.currentSnapshot = styles;
          }
          /** @internal */

        }, {
          key: "triggerCallback",
          value: function triggerCallback(phaseName) {
            var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
            methods.forEach(function (fn) {
              return fn();
            });
            methods.length = 0;
          }
        }]);

        return WebAnimationsPlayer;
      }();

      var WebAnimationsDriver = /*#__PURE__*/function () {
        function WebAnimationsDriver() {
          _classCallCheck2(this, WebAnimationsDriver);

          this._isNativeImpl = /\{\s*\[native\s+code\]\s*\}/.test(getElementAnimateFn().toString());
          this._cssKeyframesDriver = new CssKeyframesDriver();
        }

        _createClass2(WebAnimationsDriver, [{
          key: "validateStyleProperty",
          value: function validateStyleProperty(prop) {
            return _validateStyleProperty(prop);
          }
        }, {
          key: "matchesElement",
          value: function matchesElement(element, selector) {
            return _matchesElement(element, selector);
          }
        }, {
          key: "containsElement",
          value: function containsElement(elm1, elm2) {
            return _containsElement(elm1, elm2);
          }
        }, {
          key: "query",
          value: function query(element, selector, multi) {
            return invokeQuery(element, selector, multi);
          }
        }, {
          key: "computeStyle",
          value: function computeStyle(element, prop, defaultValue) {
            return window.getComputedStyle(element)[prop];
          }
        }, {
          key: "overrideWebAnimationsSupport",
          value: function overrideWebAnimationsSupport(supported) {
            this._isNativeImpl = supported;
          }
        }, {
          key: "animate",
          value: function animate(element, keyframes, duration, delay, easing) {
            var previousPlayers = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
            var scrubberAccessRequested = arguments.length > 6 ? arguments[6] : undefined;
            var useKeyframes = !scrubberAccessRequested && !this._isNativeImpl;

            if (useKeyframes) {
              return this._cssKeyframesDriver.animate(element, keyframes, duration, delay, easing, previousPlayers);
            }

            var fill = delay == 0 ? 'both' : 'forwards';
            var playerOptions = {
              duration: duration,
              delay: delay,
              fill: fill
            }; // we check for this to avoid having a null|undefined value be present
            // for the easing (which results in an error for certain browsers #9752)

            if (easing) {
              playerOptions['easing'] = easing;
            }

            var previousStyles = {};
            var previousWebAnimationPlayers = previousPlayers.filter(function (player) {
              return player instanceof WebAnimationsPlayer;
            });

            if (allowPreviousPlayerStylesMerge(duration, delay)) {
              previousWebAnimationPlayers.forEach(function (player) {
                var styles = player.currentSnapshot;
                Object.keys(styles).forEach(function (prop) {
                  return previousStyles[prop] = styles[prop];
                });
              });
            }

            keyframes = keyframes.map(function (styles) {
              return copyStyles(styles, false);
            });
            keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);
            var specialStyles = packageNonAnimatableStyles(element, keyframes);
            return new WebAnimationsPlayer(element, keyframes, playerOptions, specialStyles);
          }
        }]);

        return WebAnimationsDriver;
      }();

      function supportsWebAnimations() {
        return typeof getElementAnimateFn() === 'function';
      }

      function getElementAnimateFn() {
        return isBrowser() && Element.prototype['animate'] || {};
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=browser.js.map

      /***/

    },

    /***/
    38583:
    /*!**********************************************************************!*\
      !*** ./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js ***!
      \**********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "APP_BASE_HREF": function APP_BASE_HREF() {
          return (
            /* binding */
            _APP_BASE_HREF
          );
        },

        /* harmony export */
        "AsyncPipe": function AsyncPipe() {
          return (
            /* binding */
            _AsyncPipe
          );
        },

        /* harmony export */
        "CommonModule": function CommonModule() {
          return (
            /* binding */
            _CommonModule
          );
        },

        /* harmony export */
        "CurrencyPipe": function CurrencyPipe() {
          return (
            /* binding */
            _CurrencyPipe
          );
        },

        /* harmony export */
        "DOCUMENT": function DOCUMENT() {
          return (
            /* binding */
            _DOCUMENT
          );
        },

        /* harmony export */
        "DatePipe": function DatePipe() {
          return (
            /* binding */
            _DatePipe
          );
        },

        /* harmony export */
        "DecimalPipe": function DecimalPipe() {
          return (
            /* binding */
            _DecimalPipe
          );
        },

        /* harmony export */
        "FormStyle": function FormStyle() {
          return (
            /* binding */
            _FormStyle
          );
        },

        /* harmony export */
        "FormatWidth": function FormatWidth() {
          return (
            /* binding */
            _FormatWidth
          );
        },

        /* harmony export */
        "HashLocationStrategy": function HashLocationStrategy() {
          return (
            /* binding */
            _HashLocationStrategy
          );
        },

        /* harmony export */
        "I18nPluralPipe": function I18nPluralPipe() {
          return (
            /* binding */
            _I18nPluralPipe
          );
        },

        /* harmony export */
        "I18nSelectPipe": function I18nSelectPipe() {
          return (
            /* binding */
            _I18nSelectPipe
          );
        },

        /* harmony export */
        "JsonPipe": function JsonPipe() {
          return (
            /* binding */
            _JsonPipe
          );
        },

        /* harmony export */
        "KeyValuePipe": function KeyValuePipe() {
          return (
            /* binding */
            _KeyValuePipe
          );
        },

        /* harmony export */
        "LOCATION_INITIALIZED": function LOCATION_INITIALIZED() {
          return (
            /* binding */
            _LOCATION_INITIALIZED
          );
        },

        /* harmony export */
        "Location": function Location() {
          return (
            /* binding */
            _Location
          );
        },

        /* harmony export */
        "LocationStrategy": function LocationStrategy() {
          return (
            /* binding */
            _LocationStrategy
          );
        },

        /* harmony export */
        "LowerCasePipe": function LowerCasePipe() {
          return (
            /* binding */
            _LowerCasePipe
          );
        },

        /* harmony export */
        "NgClass": function NgClass() {
          return (
            /* binding */
            _NgClass
          );
        },

        /* harmony export */
        "NgComponentOutlet": function NgComponentOutlet() {
          return (
            /* binding */
            _NgComponentOutlet
          );
        },

        /* harmony export */
        "NgForOf": function NgForOf() {
          return (
            /* binding */
            _NgForOf
          );
        },

        /* harmony export */
        "NgForOfContext": function NgForOfContext() {
          return (
            /* binding */
            _NgForOfContext
          );
        },

        /* harmony export */
        "NgIf": function NgIf() {
          return (
            /* binding */
            _NgIf
          );
        },

        /* harmony export */
        "NgIfContext": function NgIfContext() {
          return (
            /* binding */
            _NgIfContext
          );
        },

        /* harmony export */
        "NgLocaleLocalization": function NgLocaleLocalization() {
          return (
            /* binding */
            _NgLocaleLocalization
          );
        },

        /* harmony export */
        "NgLocalization": function NgLocalization() {
          return (
            /* binding */
            _NgLocalization
          );
        },

        /* harmony export */
        "NgPlural": function NgPlural() {
          return (
            /* binding */
            _NgPlural
          );
        },

        /* harmony export */
        "NgPluralCase": function NgPluralCase() {
          return (
            /* binding */
            _NgPluralCase
          );
        },

        /* harmony export */
        "NgStyle": function NgStyle() {
          return (
            /* binding */
            _NgStyle
          );
        },

        /* harmony export */
        "NgSwitch": function NgSwitch() {
          return (
            /* binding */
            _NgSwitch
          );
        },

        /* harmony export */
        "NgSwitchCase": function NgSwitchCase() {
          return (
            /* binding */
            _NgSwitchCase
          );
        },

        /* harmony export */
        "NgSwitchDefault": function NgSwitchDefault() {
          return (
            /* binding */
            _NgSwitchDefault
          );
        },

        /* harmony export */
        "NgTemplateOutlet": function NgTemplateOutlet() {
          return (
            /* binding */
            _NgTemplateOutlet
          );
        },

        /* harmony export */
        "NumberFormatStyle": function NumberFormatStyle() {
          return (
            /* binding */
            _NumberFormatStyle
          );
        },

        /* harmony export */
        "NumberSymbol": function NumberSymbol() {
          return (
            /* binding */
            _NumberSymbol
          );
        },

        /* harmony export */
        "PathLocationStrategy": function PathLocationStrategy() {
          return (
            /* binding */
            _PathLocationStrategy
          );
        },

        /* harmony export */
        "PercentPipe": function PercentPipe() {
          return (
            /* binding */
            _PercentPipe
          );
        },

        /* harmony export */
        "PlatformLocation": function PlatformLocation() {
          return (
            /* binding */
            _PlatformLocation
          );
        },

        /* harmony export */
        "Plural": function Plural() {
          return (
            /* binding */
            _Plural
          );
        },

        /* harmony export */
        "SlicePipe": function SlicePipe() {
          return (
            /* binding */
            _SlicePipe
          );
        },

        /* harmony export */
        "TitleCasePipe": function TitleCasePipe() {
          return (
            /* binding */
            _TitleCasePipe
          );
        },

        /* harmony export */
        "TranslationWidth": function TranslationWidth() {
          return (
            /* binding */
            _TranslationWidth
          );
        },

        /* harmony export */
        "UpperCasePipe": function UpperCasePipe() {
          return (
            /* binding */
            _UpperCasePipe
          );
        },

        /* harmony export */
        "VERSION": function VERSION() {
          return (
            /* binding */
            _VERSION
          );
        },

        /* harmony export */
        "ViewportScroller": function ViewportScroller() {
          return (
            /* binding */
            _ViewportScroller
          );
        },

        /* harmony export */
        "WeekDay": function WeekDay() {
          return (
            /* binding */
            _WeekDay
          );
        },

        /* harmony export */
        "XhrFactory": function XhrFactory() {
          return (
            /* binding */
            _XhrFactory
          );
        },

        /* harmony export */
        "formatCurrency": function formatCurrency() {
          return (
            /* binding */
            _formatCurrency
          );
        },

        /* harmony export */
        "formatDate": function formatDate() {
          return (
            /* binding */
            _formatDate
          );
        },

        /* harmony export */
        "formatNumber": function formatNumber() {
          return (
            /* binding */
            _formatNumber
          );
        },

        /* harmony export */
        "formatPercent": function formatPercent() {
          return (
            /* binding */
            _formatPercent
          );
        },

        /* harmony export */
        "getCurrencySymbol": function getCurrencySymbol() {
          return (
            /* binding */
            _getCurrencySymbol
          );
        },

        /* harmony export */
        "getLocaleCurrencyCode": function getLocaleCurrencyCode() {
          return (
            /* binding */
            _getLocaleCurrencyCode
          );
        },

        /* harmony export */
        "getLocaleCurrencyName": function getLocaleCurrencyName() {
          return (
            /* binding */
            _getLocaleCurrencyName
          );
        },

        /* harmony export */
        "getLocaleCurrencySymbol": function getLocaleCurrencySymbol() {
          return (
            /* binding */
            _getLocaleCurrencySymbol
          );
        },

        /* harmony export */
        "getLocaleDateFormat": function getLocaleDateFormat() {
          return (
            /* binding */
            _getLocaleDateFormat
          );
        },

        /* harmony export */
        "getLocaleDateTimeFormat": function getLocaleDateTimeFormat() {
          return (
            /* binding */
            _getLocaleDateTimeFormat
          );
        },

        /* harmony export */
        "getLocaleDayNames": function getLocaleDayNames() {
          return (
            /* binding */
            _getLocaleDayNames
          );
        },

        /* harmony export */
        "getLocaleDayPeriods": function getLocaleDayPeriods() {
          return (
            /* binding */
            _getLocaleDayPeriods
          );
        },

        /* harmony export */
        "getLocaleDirection": function getLocaleDirection() {
          return (
            /* binding */
            _getLocaleDirection
          );
        },

        /* harmony export */
        "getLocaleEraNames": function getLocaleEraNames() {
          return (
            /* binding */
            _getLocaleEraNames
          );
        },

        /* harmony export */
        "getLocaleExtraDayPeriodRules": function getLocaleExtraDayPeriodRules() {
          return (
            /* binding */
            _getLocaleExtraDayPeriodRules
          );
        },

        /* harmony export */
        "getLocaleExtraDayPeriods": function getLocaleExtraDayPeriods() {
          return (
            /* binding */
            _getLocaleExtraDayPeriods
          );
        },

        /* harmony export */
        "getLocaleFirstDayOfWeek": function getLocaleFirstDayOfWeek() {
          return (
            /* binding */
            _getLocaleFirstDayOfWeek
          );
        },

        /* harmony export */
        "getLocaleId": function getLocaleId() {
          return (
            /* binding */
            _getLocaleId
          );
        },

        /* harmony export */
        "getLocaleMonthNames": function getLocaleMonthNames() {
          return (
            /* binding */
            _getLocaleMonthNames
          );
        },

        /* harmony export */
        "getLocaleNumberFormat": function getLocaleNumberFormat() {
          return (
            /* binding */
            _getLocaleNumberFormat
          );
        },

        /* harmony export */
        "getLocaleNumberSymbol": function getLocaleNumberSymbol() {
          return (
            /* binding */
            _getLocaleNumberSymbol
          );
        },

        /* harmony export */
        "getLocalePluralCase": function getLocalePluralCase() {
          return (
            /* binding */
            _getLocalePluralCase
          );
        },

        /* harmony export */
        "getLocaleTimeFormat": function getLocaleTimeFormat() {
          return (
            /* binding */
            _getLocaleTimeFormat
          );
        },

        /* harmony export */
        "getLocaleWeekEndRange": function getLocaleWeekEndRange() {
          return (
            /* binding */
            _getLocaleWeekEndRange
          );
        },

        /* harmony export */
        "getNumberOfCurrencyDigits": function getNumberOfCurrencyDigits() {
          return (
            /* binding */
            _getNumberOfCurrencyDigits
          );
        },

        /* harmony export */
        "isPlatformBrowser": function isPlatformBrowser() {
          return (
            /* binding */
            _isPlatformBrowser
          );
        },

        /* harmony export */
        "isPlatformServer": function isPlatformServer() {
          return (
            /* binding */
            _isPlatformServer
          );
        },

        /* harmony export */
        "isPlatformWorkerApp": function isPlatformWorkerApp() {
          return (
            /* binding */
            _isPlatformWorkerApp
          );
        },

        /* harmony export */
        "isPlatformWorkerUi": function isPlatformWorkerUi() {
          return (
            /* binding */
            _isPlatformWorkerUi
          );
        },

        /* harmony export */
        "registerLocaleData": function registerLocaleData() {
          return (
            /* binding */
            _registerLocaleData
          );
        },

        /* harmony export */
        "ɵBrowserPlatformLocation": function ɵBrowserPlatformLocation() {
          return (
            /* binding */
            BrowserPlatformLocation
          );
        },

        /* harmony export */
        "ɵDomAdapter": function ɵDomAdapter() {
          return (
            /* binding */
            DomAdapter
          );
        },

        /* harmony export */
        "ɵNullViewportScroller": function ɵNullViewportScroller() {
          return (
            /* binding */
            NullViewportScroller
          );
        },

        /* harmony export */
        "ɵPLATFORM_BROWSER_ID": function ɵPLATFORM_BROWSER_ID() {
          return (
            /* binding */
            PLATFORM_BROWSER_ID
          );
        },

        /* harmony export */
        "ɵPLATFORM_SERVER_ID": function ɵPLATFORM_SERVER_ID() {
          return (
            /* binding */
            PLATFORM_SERVER_ID
          );
        },

        /* harmony export */
        "ɵPLATFORM_WORKER_APP_ID": function ɵPLATFORM_WORKER_APP_ID() {
          return (
            /* binding */
            PLATFORM_WORKER_APP_ID
          );
        },

        /* harmony export */
        "ɵPLATFORM_WORKER_UI_ID": function ɵPLATFORM_WORKER_UI_ID() {
          return (
            /* binding */
            PLATFORM_WORKER_UI_ID
          );
        },

        /* harmony export */
        "ɵangular_packages_common_common_a": function ɵangular_packages_common_common_a() {
          return (
            /* binding */
            useBrowserPlatformLocation
          );
        },

        /* harmony export */
        "ɵangular_packages_common_common_b": function ɵangular_packages_common_common_b() {
          return (
            /* binding */
            createBrowserPlatformLocation
          );
        },

        /* harmony export */
        "ɵangular_packages_common_common_c": function ɵangular_packages_common_common_c() {
          return (
            /* binding */
            createLocation
          );
        },

        /* harmony export */
        "ɵangular_packages_common_common_d": function ɵangular_packages_common_common_d() {
          return (
            /* binding */
            provideLocationStrategy
          );
        },

        /* harmony export */
        "ɵangular_packages_common_common_e": function ɵangular_packages_common_common_e() {
          return (
            /* binding */
            COMMON_DIRECTIVES
          );
        },

        /* harmony export */
        "ɵangular_packages_common_common_f": function ɵangular_packages_common_common_f() {
          return (
            /* binding */
            COMMON_PIPES
          );
        },

        /* harmony export */
        "ɵgetDOM": function ɵgetDOM() {
          return (
            /* binding */
            getDOM
          );
        },

        /* harmony export */
        "ɵparseCookieValue": function ɵparseCookieValue() {
          return (
            /* binding */
            parseCookieValue
          );
        },

        /* harmony export */
        "ɵsetRootDomAdapter": function ɵsetRootDomAdapter() {
          return (
            /* binding */
            setRootDomAdapter
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      37716);
      /**
       * @license Angular v12.0.3
       * (c) 2010-2021 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _DOM = null;

      function getDOM() {
        return _DOM;
      }

      function setDOM(adapter) {
        _DOM = adapter;
      }

      function setRootDomAdapter(adapter) {
        if (!_DOM) {
          _DOM = adapter;
        }
      }
      /* tslint:disable:requireParameterType */

      /**
       * Provides DOM operations in an environment-agnostic way.
       *
       * @security Tread carefully! Interacting with the DOM directly is dangerous and
       * can introduce XSS risks.
       */


      var DomAdapter = function DomAdapter() {
        _classCallCheck2(this, DomAdapter);
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A DI Token representing the main rendering context. In a browser this is the DOM Document.
       *
       * Note: Document might not be available in the Application Context when Application and Rendering
       * Contexts are not the same (e.g. when running the application in a Web Worker).
       *
       * @publicApi
       */


      var _DOCUMENT = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('DocumentToken');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * This class should not be used directly by an application developer. Instead, use
       * {@link Location}.
       *
       * `PlatformLocation` encapsulates all calls to DOM APIs, which allows the Router to be
       * platform-agnostic.
       * This means that we can have different implementation of `PlatformLocation` for the different
       * platforms that Angular supports. For example, `@angular/platform-browser` provides an
       * implementation specific to the browser environment, while `@angular/platform-server` provides
       * one suitable for use with server-side rendering.
       *
       * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}
       * when they need to interact with the DOM APIs like pushState, popState, etc.
       *
       * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly
       * by the {@link Router} in order to navigate between routes. Since all interactions between {@link
       * Router} /
       * {@link Location} / {@link LocationStrategy} and DOM APIs flow through the `PlatformLocation`
       * class, they are all platform-agnostic.
       *
       * @publicApi
       */


      var _PlatformLocation = /*#__PURE__*/function () {
        function _PlatformLocation() {
          _classCallCheck2(this, _PlatformLocation);
        }

        _createClass2(_PlatformLocation, [{
          key: "historyGo",
          value: function historyGo(relativePosition) {
            throw new Error('Not implemented');
          }
        }]);

        return _PlatformLocation;
      }();

      _PlatformLocation.ɵfac = function PlatformLocation_Factory(t) {
        return new (t || _PlatformLocation)();
      };

      _PlatformLocation.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: useBrowserPlatformLocation,
        token: _PlatformLocation,
        providedIn: "platform"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_PlatformLocation, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'platform',
            // See #23917
            useFactory: useBrowserPlatformLocation
          }]
        }], null, null);
      })();

      function useBrowserPlatformLocation() {
        return (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BrowserPlatformLocation);
      }
      /**
       * @description
       * Indicates when a location is initialized.
       *
       * @publicApi
       */


      var _LOCATION_INITIALIZED = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('Location Initialized');
      /**
       * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
       * This class should not be used directly by an application developer. Instead, use
       * {@link Location}.
       */


      var BrowserPlatformLocation = /*#__PURE__*/function (_PlatformLocation2) {
        _inherits(BrowserPlatformLocation, _PlatformLocation2);

        var _super4 = _createSuper(BrowserPlatformLocation);

        function BrowserPlatformLocation(_doc) {
          var _this55;

          _classCallCheck2(this, BrowserPlatformLocation);

          _this55 = _super4.call(this);
          _this55._doc = _doc;

          _this55._init();

          return _this55;
        } // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it

        /** @internal */


        _createClass2(BrowserPlatformLocation, [{
          key: "_init",
          value: function _init() {
            this.location = window.location;
            this._history = window.history;
          }
        }, {
          key: "getBaseHrefFromDOM",
          value: function getBaseHrefFromDOM() {
            return getDOM().getBaseHref(this._doc);
          }
        }, {
          key: "onPopState",
          value: function onPopState(fn) {
            var window = getDOM().getGlobalEventTarget(this._doc, 'window');
            window.addEventListener('popstate', fn, false);
            return function () {
              return window.removeEventListener('popstate', fn);
            };
          }
        }, {
          key: "onHashChange",
          value: function onHashChange(fn) {
            var window = getDOM().getGlobalEventTarget(this._doc, 'window');
            window.addEventListener('hashchange', fn, false);
            return function () {
              return window.removeEventListener('hashchange', fn);
            };
          }
        }, {
          key: "href",
          get: function get() {
            return this.location.href;
          }
        }, {
          key: "protocol",
          get: function get() {
            return this.location.protocol;
          }
        }, {
          key: "hostname",
          get: function get() {
            return this.location.hostname;
          }
        }, {
          key: "port",
          get: function get() {
            return this.location.port;
          }
        }, {
          key: "pathname",
          get: function get() {
            return this.location.pathname;
          },
          set: function set(newPath) {
            this.location.pathname = newPath;
          }
        }, {
          key: "search",
          get: function get() {
            return this.location.search;
          }
        }, {
          key: "hash",
          get: function get() {
            return this.location.hash;
          }
        }, {
          key: "pushState",
          value: function pushState(state, title, url) {
            if (supportsState()) {
              this._history.pushState(state, title, url);
            } else {
              this.location.hash = url;
            }
          }
        }, {
          key: "replaceState",
          value: function replaceState(state, title, url) {
            if (supportsState()) {
              this._history.replaceState(state, title, url);
            } else {
              this.location.hash = url;
            }
          }
        }, {
          key: "forward",
          value: function forward() {
            this._history.forward();
          }
        }, {
          key: "back",
          value: function back() {
            this._history.back();
          }
        }, {
          key: "historyGo",
          value: function historyGo() {
            var relativePosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            this._history.go(relativePosition);
          }
        }, {
          key: "getState",
          value: function getState() {
            return this._history.state;
          }
        }]);

        return BrowserPlatformLocation;
      }(_PlatformLocation);

      BrowserPlatformLocation.ɵfac = function BrowserPlatformLocation_Factory(t) {
        return new (t || BrowserPlatformLocation)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_DOCUMENT));
      };

      BrowserPlatformLocation.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: createBrowserPlatformLocation,
        token: BrowserPlatformLocation,
        providedIn: "platform"
      });

      BrowserPlatformLocation.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_DOCUMENT]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](BrowserPlatformLocation, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'platform',
            // See #23917
            useFactory: createBrowserPlatformLocation
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_DOCUMENT]
            }]
          }];
        }, null);
      })();

      function supportsState() {
        return !!window.history.pushState;
      }

      function createBrowserPlatformLocation() {
        return new BrowserPlatformLocation((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_DOCUMENT));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Joins two parts of a URL with a slash if needed.
       *
       * @param start  URL string
       * @param end    URL string
       *
       *
       * @returns The joined URL string.
       */


      function joinWithSlash(start, end) {
        if (start.length == 0) {
          return end;
        }

        if (end.length == 0) {
          return start;
        }

        var slashes = 0;

        if (start.endsWith('/')) {
          slashes++;
        }

        if (end.startsWith('/')) {
          slashes++;
        }

        if (slashes == 2) {
          return start + end.substring(1);
        }

        if (slashes == 1) {
          return start + end;
        }

        return start + '/' + end;
      }
      /**
       * Removes a trailing slash from a URL string if needed.
       * Looks for the first occurrence of either `#`, `?`, or the end of the
       * line as `/` characters and removes the trailing slash if one exists.
       *
       * @param url URL string.
       *
       * @returns The URL string, modified if needed.
       */


      function stripTrailingSlash(url) {
        var match = url.match(/#|\?|$/);
        var pathEndIdx = match && match.index || url.length;
        var droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);
        return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);
      }
      /**
       * Normalizes URL parameters by prepending with `?` if needed.
       *
       * @param  params String of URL parameters.
       *
       * @returns The normalized URL parameters string.
       */


      function normalizeQueryParams(params) {
        return params && params[0] !== '?' ? '?' + params : params;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Enables the `Location` service to read route state from the browser's URL.
       * Angular provides two strategies:
       * `HashLocationStrategy` and `PathLocationStrategy`.
       *
       * Applications should use the `Router` or `Location` services to
       * interact with application route state.
       *
       * For instance, `HashLocationStrategy` produces URLs like
       * <code class="no-auto-link">http://example.com#/foo</code>,
       * and `PathLocationStrategy` produces
       * <code class="no-auto-link">http://example.com/foo</code> as an equivalent URL.
       *
       * See these two classes for more.
       *
       * @publicApi
       */


      var _LocationStrategy = /*#__PURE__*/function () {
        function _LocationStrategy() {
          _classCallCheck2(this, _LocationStrategy);
        }

        _createClass2(_LocationStrategy, [{
          key: "historyGo",
          value: function historyGo(relativePosition) {
            throw new Error('Not implemented');
          }
        }]);

        return _LocationStrategy;
      }();

      _LocationStrategy.ɵfac = function LocationStrategy_Factory(t) {
        return new (t || _LocationStrategy)();
      };

      _LocationStrategy.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: provideLocationStrategy,
        token: _LocationStrategy,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_LocationStrategy, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root',
            useFactory: provideLocationStrategy
          }]
        }], null, null);
      })();

      function provideLocationStrategy(platformLocation) {
        // See #23917
        var location = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_DOCUMENT).location;
        return new _PathLocationStrategy((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_PlatformLocation), location && location.origin || '');
      }
      /**
       * A predefined [DI token](guide/glossary#di-token) for the base href
       * to be used with the `PathLocationStrategy`.
       * The base href is the URL prefix that should be preserved when generating
       * and recognizing URLs.
       *
       * @usageNotes
       *
       * The following example shows how to use this token to configure the root app injector
       * with a base href value, so that the DI framework can supply the dependency anywhere in the app.
       *
       * ```typescript
       * import {Component, NgModule} from '@angular/core';
       * import {APP_BASE_HREF} from '@angular/common';
       *
       * @NgModule({
       *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
       * })
       * class AppModule {}
       * ```
       *
       * @publicApi
       */


      var _APP_BASE_HREF = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('appBaseHref');
      /**
       * @description
       * A {@link LocationStrategy} used to configure the {@link Location} service to
       * represent its state in the
       * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
       * browser's URL.
       *
       * If you're using `PathLocationStrategy`, you must provide a {@link APP_BASE_HREF}
       * or add a `<base href>` element to the document.
       *
       * For instance, if you provide an `APP_BASE_HREF` of `'/my/app/'` and call
       * `location.go('/foo')`, the browser's URL will become
       * `example.com/my/app/foo`. To ensure all relative URIs resolve correctly,
       * the `<base href>` and/or `APP_BASE_HREF` should end with a `/`.
       *
       * Similarly, if you add `<base href='/my/app/'/>` to the document and call
       * `location.go('/foo')`, the browser's URL will become
       * `example.com/my/app/foo`.
       *
       * Note that when using `PathLocationStrategy`, neither the query nor
       * the fragment in the `<base href>` will be preserved, as outlined
       * by the [RFC](https://tools.ietf.org/html/rfc3986#section-5.2.2).
       *
       * @usageNotes
       *
       * ### Example
       *
       * {@example common/location/ts/path_location_component.ts region='LocationComponent'}
       *
       * @publicApi
       */


      var _PathLocationStrategy = /*#__PURE__*/function (_LocationStrategy2) {
        _inherits(_PathLocationStrategy, _LocationStrategy2);

        var _super5 = _createSuper(_PathLocationStrategy);

        function _PathLocationStrategy(_platformLocation, href) {
          var _this56;

          _classCallCheck2(this, _PathLocationStrategy);

          _this56 = _super5.call(this);
          _this56._platformLocation = _platformLocation;
          _this56._removeListenerFns = [];

          if (href == null) {
            href = _this56._platformLocation.getBaseHrefFromDOM();
          }

          if (href == null) {
            throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
          }

          _this56._baseHref = href;
          return _this56;
        }

        _createClass2(_PathLocationStrategy, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            while (this._removeListenerFns.length) {
              this._removeListenerFns.pop()();
            }
          }
        }, {
          key: "onPopState",
          value: function onPopState(fn) {
            this._removeListenerFns.push(this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn));
          }
        }, {
          key: "getBaseHref",
          value: function getBaseHref() {
            return this._baseHref;
          }
        }, {
          key: "prepareExternalUrl",
          value: function prepareExternalUrl(internal) {
            return joinWithSlash(this._baseHref, internal);
          }
        }, {
          key: "path",
          value: function path() {
            var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            var pathname = this._platformLocation.pathname + normalizeQueryParams(this._platformLocation.search);
            var hash = this._platformLocation.hash;
            return hash && includeHash ? "".concat(pathname).concat(hash) : pathname;
          }
        }, {
          key: "pushState",
          value: function pushState(state, title, url, queryParams) {
            var externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));

            this._platformLocation.pushState(state, title, externalUrl);
          }
        }, {
          key: "replaceState",
          value: function replaceState(state, title, url, queryParams) {
            var externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));

            this._platformLocation.replaceState(state, title, externalUrl);
          }
        }, {
          key: "forward",
          value: function forward() {
            this._platformLocation.forward();
          }
        }, {
          key: "back",
          value: function back() {
            this._platformLocation.back();
          }
        }, {
          key: "historyGo",
          value: function historyGo() {
            var relativePosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            var _a, _b;

            (_b = (_a = this._platformLocation).historyGo) === null || _b === void 0 ? void 0 : _b.call(_a, relativePosition);
          }
        }]);

        return _PathLocationStrategy;
      }(_LocationStrategy);

      _PathLocationStrategy.ɵfac = function PathLocationStrategy_Factory(t) {
        return new (t || _PathLocationStrategy)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_PlatformLocation), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_APP_BASE_HREF, 8));
      };

      _PathLocationStrategy.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: _PathLocationStrategy,
        factory: _PathLocationStrategy.ɵfac
      });

      _PathLocationStrategy.ctorParameters = function () {
        return [{
          type: _PlatformLocation
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_APP_BASE_HREF]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_PathLocationStrategy, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: _PlatformLocation
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_APP_BASE_HREF]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description
       * A {@link LocationStrategy} used to configure the {@link Location} service to
       * represent its state in the
       * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
       * of the browser's URL.
       *
       * For instance, if you call `location.go('/foo')`, the browser's URL will become
       * `example.com#/foo`.
       *
       * @usageNotes
       *
       * ### Example
       *
       * {@example common/location/ts/hash_location_component.ts region='LocationComponent'}
       *
       * @publicApi
       */


      var _HashLocationStrategy = /*#__PURE__*/function (_LocationStrategy3) {
        _inherits(_HashLocationStrategy, _LocationStrategy3);

        var _super6 = _createSuper(_HashLocationStrategy);

        function _HashLocationStrategy(_platformLocation, _baseHref) {
          var _this57;

          _classCallCheck2(this, _HashLocationStrategy);

          _this57 = _super6.call(this);
          _this57._platformLocation = _platformLocation;
          _this57._baseHref = '';
          _this57._removeListenerFns = [];

          if (_baseHref != null) {
            _this57._baseHref = _baseHref;
          }

          return _this57;
        }

        _createClass2(_HashLocationStrategy, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            while (this._removeListenerFns.length) {
              this._removeListenerFns.pop()();
            }
          }
        }, {
          key: "onPopState",
          value: function onPopState(fn) {
            this._removeListenerFns.push(this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn));
          }
        }, {
          key: "getBaseHref",
          value: function getBaseHref() {
            return this._baseHref;
          }
        }, {
          key: "path",
          value: function path() {
            var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            // the hash value is always prefixed with a `#`
            // and if it is empty then it will stay empty
            var path = this._platformLocation.hash;
            if (path == null) path = '#';
            return path.length > 0 ? path.substring(1) : path;
          }
        }, {
          key: "prepareExternalUrl",
          value: function prepareExternalUrl(internal) {
            var url = joinWithSlash(this._baseHref, internal);
            return url.length > 0 ? '#' + url : url;
          }
        }, {
          key: "pushState",
          value: function pushState(state, title, path, queryParams) {
            var url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));

            if (url.length == 0) {
              url = this._platformLocation.pathname;
            }

            this._platformLocation.pushState(state, title, url);
          }
        }, {
          key: "replaceState",
          value: function replaceState(state, title, path, queryParams) {
            var url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));

            if (url.length == 0) {
              url = this._platformLocation.pathname;
            }

            this._platformLocation.replaceState(state, title, url);
          }
        }, {
          key: "forward",
          value: function forward() {
            this._platformLocation.forward();
          }
        }, {
          key: "back",
          value: function back() {
            this._platformLocation.back();
          }
        }, {
          key: "historyGo",
          value: function historyGo() {
            var relativePosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            var _a, _b;

            (_b = (_a = this._platformLocation).historyGo) === null || _b === void 0 ? void 0 : _b.call(_a, relativePosition);
          }
        }]);

        return _HashLocationStrategy;
      }(_LocationStrategy);

      _HashLocationStrategy.ɵfac = function HashLocationStrategy_Factory(t) {
        return new (t || _HashLocationStrategy)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_PlatformLocation), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_APP_BASE_HREF, 8));
      };

      _HashLocationStrategy.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: _HashLocationStrategy,
        factory: _HashLocationStrategy.ɵfac
      });

      _HashLocationStrategy.ctorParameters = function () {
        return [{
          type: _PlatformLocation
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_APP_BASE_HREF]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_HashLocationStrategy, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: _PlatformLocation
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_APP_BASE_HREF]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description
       *
       * A service that applications can use to interact with a browser's URL.
       *
       * Depending on the `LocationStrategy` used, `Location` persists
       * to the URL's path or the URL's hash segment.
       *
       * @usageNotes
       *
       * It's better to use the `Router.navigate()` service to trigger route changes. Use
       * `Location` only if you need to interact with or create normalized URLs outside of
       * routing.
       *
       * `Location` is responsible for normalizing the URL against the application's base href.
       * A normalized URL is absolute from the URL host, includes the application's base href, and has no
       * trailing slash:
       * - `/my/app/user/123` is normalized
       * - `my/app/user/123` **is not** normalized
       * - `/my/app/user/123/` **is not** normalized
       *
       * ### Example
       *
       * <code-example path='common/location/ts/path_location_component.ts'
       * region='LocationComponent'></code-example>
       *
       * @publicApi
       */


      var _Location = /*#__PURE__*/function () {
        function _Location(platformStrategy, platformLocation) {
          var _this58 = this;

          _classCallCheck2(this, _Location);

          /** @internal */
          this._subject = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
          /** @internal */

          this._urlChangeListeners = [];
          this._platformStrategy = platformStrategy;

          var browserBaseHref = this._platformStrategy.getBaseHref();

          this._platformLocation = platformLocation;
          this._baseHref = stripTrailingSlash(_stripIndexHtml(browserBaseHref));

          this._platformStrategy.onPopState(function (ev) {
            _this58._subject.emit({
              'url': _this58.path(true),
              'pop': true,
              'state': ev.state,
              'type': ev.type
            });
          });
        }
        /**
         * Normalizes the URL path for this location.
         *
         * @param includeHash True to include an anchor fragment in the path.
         *
         * @returns The normalized URL path.
         */
        // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is
        // removed.


        _createClass2(_Location, [{
          key: "path",
          value: function path() {
            var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            return this.normalize(this._platformStrategy.path(includeHash));
          }
          /**
           * Reports the current state of the location history.
           * @returns The current value of the `history.state` object.
           */

        }, {
          key: "getState",
          value: function getState() {
            return this._platformLocation.getState();
          }
          /**
           * Normalizes the given path and compares to the current normalized path.
           *
           * @param path The given URL path.
           * @param query Query parameters.
           *
           * @returns True if the given URL path is equal to the current normalized path, false
           * otherwise.
           */

        }, {
          key: "isCurrentPathEqualTo",
          value: function isCurrentPathEqualTo(path) {
            var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            return this.path() == this.normalize(path + normalizeQueryParams(query));
          }
          /**
           * Normalizes a URL path by stripping any trailing slashes.
           *
           * @param url String representing a URL.
           *
           * @returns The normalized URL string.
           */

        }, {
          key: "normalize",
          value: function normalize(url) {
            return _Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
          }
          /**
           * Normalizes an external URL path.
           * If the given URL doesn't begin with a leading slash (`'/'`), adds one
           * before normalizing. Adds a hash if `HashLocationStrategy` is
           * in use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
           *
           * @param url String representing a URL.
           *
           * @returns  A normalized platform-specific URL.
           */

        }, {
          key: "prepareExternalUrl",
          value: function prepareExternalUrl(url) {
            if (url && url[0] !== '/') {
              url = '/' + url;
            }

            return this._platformStrategy.prepareExternalUrl(url);
          } // TODO: rename this method to pushState

          /**
           * Changes the browser's URL to a normalized version of a given URL, and pushes a
           * new item onto the platform's history.
           *
           * @param path  URL path to normalize.
           * @param query Query parameters.
           * @param state Location history state.
           *
           */

        }, {
          key: "go",
          value: function go(path) {
            var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            this._platformStrategy.pushState(state, '', path, query);

            this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
          }
          /**
           * Changes the browser's URL to a normalized version of the given URL, and replaces
           * the top item on the platform's history stack.
           *
           * @param path  URL path to normalize.
           * @param query Query parameters.
           * @param state Location history state.
           */

        }, {
          key: "replaceState",
          value: function replaceState(path) {
            var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            this._platformStrategy.replaceState(state, '', path, query);

            this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
          }
          /**
           * Navigates forward in the platform's history.
           */

        }, {
          key: "forward",
          value: function forward() {
            this._platformStrategy.forward();
          }
          /**
           * Navigates back in the platform's history.
           */

        }, {
          key: "back",
          value: function back() {
            this._platformStrategy.back();
          }
          /**
           * Navigate to a specific page from session history, identified by its relative position to the
           * current page.
           *
           * @param relativePosition  Position of the target page in the history relative to the current
           *     page.
           * A negative value moves backwards, a positive value moves forwards, e.g. `location.historyGo(2)`
           * moves forward two pages and `location.historyGo(-2)` moves back two pages. When we try to go
           * beyond what's stored in the history session, we stay in the current page. Same behaviour occurs
           * when `relativePosition` equals 0.
           * @see https://developer.mozilla.org/en-US/docs/Web/API/History_API#Moving_to_a_specific_point_in_history
           */

        }, {
          key: "historyGo",
          value: function historyGo() {
            var relativePosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            var _a, _b;

            (_b = (_a = this._platformStrategy).historyGo) === null || _b === void 0 ? void 0 : _b.call(_a, relativePosition);
          }
          /**
           * Registers a URL change listener. Use to catch updates performed by the Angular
           * framework that are not detectible through "popstate" or "hashchange" events.
           *
           * @param fn The change handler function, which take a URL and a location history state.
           */

        }, {
          key: "onUrlChange",
          value: function onUrlChange(fn) {
            var _this59 = this;

            this._urlChangeListeners.push(fn);

            if (!this._urlChangeSubscription) {
              this._urlChangeSubscription = this.subscribe(function (v) {
                _this59._notifyUrlChangeListeners(v.url, v.state);
              });
            }
          }
          /** @internal */

        }, {
          key: "_notifyUrlChangeListeners",
          value: function _notifyUrlChangeListeners() {
            var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
            var state = arguments.length > 1 ? arguments[1] : undefined;

            this._urlChangeListeners.forEach(function (fn) {
              return fn(url, state);
            });
          }
          /**
           * Subscribes to the platform's `popState` events.
           *
           * Note: `Location.go()` does not trigger the `popState` event in the browser. Use
           * `Location.onUrlChange()` to subscribe to URL changes instead.
           *
           * @param value Event that is triggered when the state history changes.
           * @param exception The exception to throw.
           *
           * @see [onpopstate](https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate)
           *
           * @returns Subscribed events.
           */

        }, {
          key: "subscribe",
          value: function subscribe(onNext, onThrow, onReturn) {
            return this._subject.subscribe({
              next: onNext,
              error: onThrow,
              complete: onReturn
            });
          }
        }]);

        return _Location;
      }();

      _Location.ɵfac = function Location_Factory(t) {
        return new (t || _Location)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_LocationStrategy), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_PlatformLocation));
      };
      /**
       * Normalizes URL parameters by prepending with `?` if needed.
       *
       * @param  params String of URL parameters.
       *
       * @returns The normalized URL parameters string.
       */


      _Location.normalizeQueryParams = normalizeQueryParams;
      /**
       * Joins two parts of a URL with a slash if needed.
       *
       * @param start  URL string
       * @param end    URL string
       *
       *
       * @returns The joined URL string.
       */

      _Location.joinWithSlash = joinWithSlash;
      /**
       * Removes a trailing slash from a URL string if needed.
       * Looks for the first occurrence of either `#`, `?`, or the end of the
       * line as `/` characters and removes the trailing slash if one exists.
       *
       * @param url URL string.
       *
       * @returns The URL string, modified if needed.
       */

      _Location.stripTrailingSlash = stripTrailingSlash;
      _Location.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: createLocation,
        token: _Location,
        providedIn: "root"
      });

      _Location.ctorParameters = function () {
        return [{
          type: _LocationStrategy
        }, {
          type: _PlatformLocation
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_Location, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
          args: [{
            providedIn: 'root',
            // See #23917
            useFactory: createLocation
          }]
        }], function () {
          return [{
            type: _LocationStrategy
          }, {
            type: _PlatformLocation
          }];
        }, null);
      })();

      function createLocation() {
        return new _Location((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_LocationStrategy), (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_PlatformLocation));
      }

      function _stripBaseHref(baseHref, url) {
        return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
      }

      function _stripIndexHtml(url) {
        return url.replace(/\/index.html$/, '');
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** @internal */


      var CURRENCIES_EN = {
        'ADP': [undefined, undefined, 0],
        'AFN': [undefined, undefined, 0],
        'ALL': [undefined, undefined, 0],
        'AMD': [undefined, undefined, 2],
        'AOA': [undefined, 'Kz'],
        'ARS': [undefined, '$'],
        'AUD': ['A$', '$'],
        'BAM': [undefined, 'KM'],
        'BBD': [undefined, '$'],
        'BDT': [undefined, '৳'],
        'BHD': [undefined, undefined, 3],
        'BIF': [undefined, undefined, 0],
        'BMD': [undefined, '$'],
        'BND': [undefined, '$'],
        'BOB': [undefined, 'Bs'],
        'BRL': ['R$'],
        'BSD': [undefined, '$'],
        'BWP': [undefined, 'P'],
        'BYN': [undefined, 'р.', 2],
        'BYR': [undefined, undefined, 0],
        'BZD': [undefined, '$'],
        'CAD': ['CA$', '$', 2],
        'CHF': [undefined, undefined, 2],
        'CLF': [undefined, undefined, 4],
        'CLP': [undefined, '$', 0],
        'CNY': ['CN¥', '¥'],
        'COP': [undefined, '$', 2],
        'CRC': [undefined, '₡', 2],
        'CUC': [undefined, '$'],
        'CUP': [undefined, '$'],
        'CZK': [undefined, 'Kč', 2],
        'DJF': [undefined, undefined, 0],
        'DKK': [undefined, 'kr', 2],
        'DOP': [undefined, '$'],
        'EGP': [undefined, 'E£'],
        'ESP': [undefined, '₧', 0],
        'EUR': ['€'],
        'FJD': [undefined, '$'],
        'FKP': [undefined, '£'],
        'GBP': ['£'],
        'GEL': [undefined, '₾'],
        'GIP': [undefined, '£'],
        'GNF': [undefined, 'FG', 0],
        'GTQ': [undefined, 'Q'],
        'GYD': [undefined, '$', 2],
        'HKD': ['HK$', '$'],
        'HNL': [undefined, 'L'],
        'HRK': [undefined, 'kn'],
        'HUF': [undefined, 'Ft', 2],
        'IDR': [undefined, 'Rp', 2],
        'ILS': ['₪'],
        'INR': ['₹'],
        'IQD': [undefined, undefined, 0],
        'IRR': [undefined, undefined, 0],
        'ISK': [undefined, 'kr', 0],
        'ITL': [undefined, undefined, 0],
        'JMD': [undefined, '$'],
        'JOD': [undefined, undefined, 3],
        'JPY': ['¥', undefined, 0],
        'KHR': [undefined, '៛'],
        'KMF': [undefined, 'CF', 0],
        'KPW': [undefined, '₩', 0],
        'KRW': ['₩', undefined, 0],
        'KWD': [undefined, undefined, 3],
        'KYD': [undefined, '$'],
        'KZT': [undefined, '₸'],
        'LAK': [undefined, '₭', 0],
        'LBP': [undefined, 'L£', 0],
        'LKR': [undefined, 'Rs'],
        'LRD': [undefined, '$'],
        'LTL': [undefined, 'Lt'],
        'LUF': [undefined, undefined, 0],
        'LVL': [undefined, 'Ls'],
        'LYD': [undefined, undefined, 3],
        'MGA': [undefined, 'Ar', 0],
        'MGF': [undefined, undefined, 0],
        'MMK': [undefined, 'K', 0],
        'MNT': [undefined, '₮', 2],
        'MRO': [undefined, undefined, 0],
        'MUR': [undefined, 'Rs', 2],
        'MXN': ['MX$', '$'],
        'MYR': [undefined, 'RM'],
        'NAD': [undefined, '$'],
        'NGN': [undefined, '₦'],
        'NIO': [undefined, 'C$'],
        'NOK': [undefined, 'kr', 2],
        'NPR': [undefined, 'Rs'],
        'NZD': ['NZ$', '$'],
        'OMR': [undefined, undefined, 3],
        'PHP': [undefined, '₱'],
        'PKR': [undefined, 'Rs', 2],
        'PLN': [undefined, 'zł'],
        'PYG': [undefined, '₲', 0],
        'RON': [undefined, 'lei'],
        'RSD': [undefined, undefined, 0],
        'RUB': [undefined, '₽'],
        'RUR': [undefined, 'р.'],
        'RWF': [undefined, 'RF', 0],
        'SBD': [undefined, '$'],
        'SEK': [undefined, 'kr', 2],
        'SGD': [undefined, '$'],
        'SHP': [undefined, '£'],
        'SLL': [undefined, undefined, 0],
        'SOS': [undefined, undefined, 0],
        'SRD': [undefined, '$'],
        'SSP': [undefined, '£'],
        'STD': [undefined, undefined, 0],
        'STN': [undefined, 'Db'],
        'SYP': [undefined, '£', 0],
        'THB': [undefined, '฿'],
        'TMM': [undefined, undefined, 0],
        'TND': [undefined, undefined, 3],
        'TOP': [undefined, 'T$'],
        'TRL': [undefined, undefined, 0],
        'TRY': [undefined, '₺'],
        'TTD': [undefined, '$'],
        'TWD': ['NT$', '$', 2],
        'TZS': [undefined, undefined, 2],
        'UAH': [undefined, '₴'],
        'UGX': [undefined, undefined, 0],
        'USD': ['$'],
        'UYI': [undefined, undefined, 0],
        'UYU': [undefined, '$'],
        'UYW': [undefined, undefined, 4],
        'UZS': [undefined, undefined, 2],
        'VEF': [undefined, 'Bs', 2],
        'VND': ['₫', undefined, 0],
        'VUV': [undefined, undefined, 0],
        'XAF': ['FCFA', undefined, 0],
        'XCD': ['EC$', '$'],
        'XOF': ['CFA', undefined, 0],
        'XPF': ['CFPF', undefined, 0],
        'XXX': ['¤'],
        'YER': [undefined, undefined, 0],
        'ZAR': [undefined, 'R'],
        'ZMK': [undefined, undefined, 0],
        'ZMW': [undefined, 'ZK'],
        'ZWD': [undefined, undefined, 0]
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Format styles that can be used to represent numbers.
       * @see `getLocaleNumberFormat()`.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */

      var _NumberFormatStyle;

      (function (NumberFormatStyle) {
        NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
        NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
        NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
        NumberFormatStyle[NumberFormatStyle["Scientific"] = 3] = "Scientific";
      })(_NumberFormatStyle || (_NumberFormatStyle = {}));
      /**
       * Plurality cases used for translating plurals to different languages.
       *
       * @see `NgPlural`
       * @see `NgPluralCase`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      var _Plural;

      (function (Plural) {
        Plural[Plural["Zero"] = 0] = "Zero";
        Plural[Plural["One"] = 1] = "One";
        Plural[Plural["Two"] = 2] = "Two";
        Plural[Plural["Few"] = 3] = "Few";
        Plural[Plural["Many"] = 4] = "Many";
        Plural[Plural["Other"] = 5] = "Other";
      })(_Plural || (_Plural = {}));
      /**
       * Context-dependant translation forms for strings.
       * Typically the standalone version is for the nominative form of the word,
       * and the format version is used for the genitive case.
       * @see [CLDR website](http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles)
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      var _FormStyle;

      (function (FormStyle) {
        FormStyle[FormStyle["Format"] = 0] = "Format";
        FormStyle[FormStyle["Standalone"] = 1] = "Standalone";
      })(_FormStyle || (_FormStyle = {}));
      /**
       * String widths available for translations.
       * The specific character widths are locale-specific.
       * Examples are given for the word "Sunday" in English.
       *
       * @publicApi
       */


      var _TranslationWidth;

      (function (TranslationWidth) {
        /** 1 character for `en-US`. For example: 'S' */
        TranslationWidth[TranslationWidth["Narrow"] = 0] = "Narrow";
        /** 3 characters for `en-US`. For example: 'Sun' */

        TranslationWidth[TranslationWidth["Abbreviated"] = 1] = "Abbreviated";
        /** Full length for `en-US`. For example: "Sunday" */

        TranslationWidth[TranslationWidth["Wide"] = 2] = "Wide";
        /** 2 characters for `en-US`, For example: "Su" */

        TranslationWidth[TranslationWidth["Short"] = 3] = "Short";
      })(_TranslationWidth || (_TranslationWidth = {}));
      /**
       * String widths available for date-time formats.
       * The specific character widths are locale-specific.
       * Examples are given for `en-US`.
       *
       * @see `getLocaleDateFormat()`
       * @see `getLocaleTimeFormat()`
       * @see `getLocaleDateTimeFormat()`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       * @publicApi
       */


      var _FormatWidth;

      (function (FormatWidth) {
        /**
         * For `en-US`, 'M/d/yy, h:mm a'`
         * (Example: `6/15/15, 9:03 AM`)
         */
        FormatWidth[FormatWidth["Short"] = 0] = "Short";
        /**
         * For `en-US`, `'MMM d, y, h:mm:ss a'`
         * (Example: `Jun 15, 2015, 9:03:01 AM`)
         */

        FormatWidth[FormatWidth["Medium"] = 1] = "Medium";
        /**
         * For `en-US`, `'MMMM d, y, h:mm:ss a z'`
         * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)
         */

        FormatWidth[FormatWidth["Long"] = 2] = "Long";
        /**
         * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`
         * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)
         */

        FormatWidth[FormatWidth["Full"] = 3] = "Full";
      })(_FormatWidth || (_FormatWidth = {}));
      /**
       * Symbols that can be used to replace placeholders in number patterns.
       * Examples are based on `en-US` values.
       *
       * @see `getLocaleNumberSymbol()`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      var _NumberSymbol;

      (function (NumberSymbol) {
        /**
         * Decimal separator.
         * For `en-US`, the dot character.
         * Example: 2,345`.`67
         */
        NumberSymbol[NumberSymbol["Decimal"] = 0] = "Decimal";
        /**
         * Grouping separator, typically for thousands.
         * For `en-US`, the comma character.
         * Example: 2`,`345.67
         */

        NumberSymbol[NumberSymbol["Group"] = 1] = "Group";
        /**
         * List-item separator.
         * Example: "one, two, and three"
         */

        NumberSymbol[NumberSymbol["List"] = 2] = "List";
        /**
         * Sign for percentage (out of 100).
         * Example: 23.4%
         */

        NumberSymbol[NumberSymbol["PercentSign"] = 3] = "PercentSign";
        /**
         * Sign for positive numbers.
         * Example: +23
         */

        NumberSymbol[NumberSymbol["PlusSign"] = 4] = "PlusSign";
        /**
         * Sign for negative numbers.
         * Example: -23
         */

        NumberSymbol[NumberSymbol["MinusSign"] = 5] = "MinusSign";
        /**
         * Computer notation for exponential value (n times a power of 10).
         * Example: 1.2E3
         */

        NumberSymbol[NumberSymbol["Exponential"] = 6] = "Exponential";
        /**
         * Human-readable format of exponential.
         * Example: 1.2x103
         */

        NumberSymbol[NumberSymbol["SuperscriptingExponent"] = 7] = "SuperscriptingExponent";
        /**
         * Sign for permille (out of 1000).
         * Example: 23.4‰
         */

        NumberSymbol[NumberSymbol["PerMille"] = 8] = "PerMille";
        /**
         * Infinity, can be used with plus and minus.
         * Example: ∞, +∞, -∞
         */

        NumberSymbol[NumberSymbol["Infinity"] = 9] = "Infinity";
        /**
         * Not a number.
         * Example: NaN
         */

        NumberSymbol[NumberSymbol["NaN"] = 10] = "NaN";
        /**
         * Symbol used between time units.
         * Example: 10:52
         */

        NumberSymbol[NumberSymbol["TimeSeparator"] = 11] = "TimeSeparator";
        /**
         * Decimal separator for currency values (fallback to `Decimal`).
         * Example: $2,345.67
         */

        NumberSymbol[NumberSymbol["CurrencyDecimal"] = 12] = "CurrencyDecimal";
        /**
         * Group separator for currency values (fallback to `Group`).
         * Example: $2,345.67
         */

        NumberSymbol[NumberSymbol["CurrencyGroup"] = 13] = "CurrencyGroup";
      })(_NumberSymbol || (_NumberSymbol = {}));
      /**
       * The value for each day of the week, based on the `en-US` locale
       *
       * @publicApi
       */


      var _WeekDay;

      (function (WeekDay) {
        WeekDay[WeekDay["Sunday"] = 0] = "Sunday";
        WeekDay[WeekDay["Monday"] = 1] = "Monday";
        WeekDay[WeekDay["Tuesday"] = 2] = "Tuesday";
        WeekDay[WeekDay["Wednesday"] = 3] = "Wednesday";
        WeekDay[WeekDay["Thursday"] = 4] = "Thursday";
        WeekDay[WeekDay["Friday"] = 5] = "Friday";
        WeekDay[WeekDay["Saturday"] = 6] = "Saturday";
      })(_WeekDay || (_WeekDay = {}));
      /**
       * Retrieves the locale ID from the currently loaded locale.
       * The loaded locale could be, for example, a global one rather than a regional one.
       * @param locale A locale code, such as `fr-FR`.
       * @returns The locale code. For example, `fr`.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _getLocaleId(locale) {
        return (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale)[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].LocaleId];
      }
      /**
       * Retrieves day period strings for the given locale.
       *
       * @param locale A locale code for the locale format rules to use.
       * @param formStyle The required grammatical form.
       * @param width The required character width.
       * @returns An array of localized period strings. For example, `[AM, PM]` for `en-US`.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _getLocaleDayPeriods(locale, formStyle, width) {
        var data = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        var amPmData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DayPeriodsFormat], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DayPeriodsStandalone]];
        var amPm = getLastDefinedValue(amPmData, formStyle);
        return getLastDefinedValue(amPm, width);
      }
      /**
       * Retrieves days of the week for the given locale, using the Gregorian calendar.
       *
       * @param locale A locale code for the locale format rules to use.
       * @param formStyle The required grammatical form.
       * @param width The required character width.
       * @returns An array of localized name strings.
       * For example,`[Sunday, Monday, ... Saturday]` for `en-US`.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _getLocaleDayNames(locale, formStyle, width) {
        var data = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        var daysData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DaysFormat], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DaysStandalone]];
        var days = getLastDefinedValue(daysData, formStyle);
        return getLastDefinedValue(days, width);
      }
      /**
       * Retrieves months of the year for the given locale, using the Gregorian calendar.
       *
       * @param locale A locale code for the locale format rules to use.
       * @param formStyle The required grammatical form.
       * @param width The required character width.
       * @returns An array of localized name strings.
       * For example,  `[January, February, ...]` for `en-US`.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _getLocaleMonthNames(locale, formStyle, width) {
        var data = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        var monthsData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].MonthsFormat], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].MonthsStandalone]];
        var months = getLastDefinedValue(monthsData, formStyle);
        return getLastDefinedValue(months, width);
      }
      /**
       * Retrieves Gregorian-calendar eras for the given locale.
       * @param locale A locale code for the locale format rules to use.
       * @param width The required character width.
      
       * @returns An array of localized era strings.
       * For example, `[AD, BC]` for `en-US`.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _getLocaleEraNames(locale, width) {
        var data = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        var erasData = data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].Eras];
        return getLastDefinedValue(erasData, width);
      }
      /**
       * Retrieves the first day of the week for the given locale.
       *
       * @param locale A locale code for the locale format rules to use.
       * @returns A day index number, using the 0-based week-day index for `en-US`
       * (Sunday = 0, Monday = 1, ...).
       * For example, for `fr-FR`, returns 1 to indicate that the first day is Monday.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _getLocaleFirstDayOfWeek(locale) {
        var data = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].FirstDayOfWeek];
      }
      /**
       * Range of week days that are considered the week-end for the given locale.
       *
       * @param locale A locale code for the locale format rules to use.
       * @returns The range of day values, `[startDay, endDay]`.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _getLocaleWeekEndRange(locale) {
        var data = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].WeekendRange];
      }
      /**
       * Retrieves a localized date-value formating string.
       *
       * @param locale A locale code for the locale format rules to use.
       * @param width The format type.
       * @returns The localized formating string.
       * @see `FormatWidth`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _getLocaleDateFormat(locale, width) {
        var data = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        return getLastDefinedValue(data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DateFormat], width);
      }
      /**
       * Retrieves a localized time-value formatting string.
       *
       * @param locale A locale code for the locale format rules to use.
       * @param width The format type.
       * @returns The localized formatting string.
       * @see `FormatWidth`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
      
       * @publicApi
       */


      function _getLocaleTimeFormat(locale, width) {
        var data = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        return getLastDefinedValue(data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].TimeFormat], width);
      }
      /**
       * Retrieves a localized date-time formatting string.
       *
       * @param locale A locale code for the locale format rules to use.
       * @param width The format type.
       * @returns The localized formatting string.
       * @see `FormatWidth`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _getLocaleDateTimeFormat(locale, width) {
        var data = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        var dateTimeFormatData = data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DateTimeFormat];
        return getLastDefinedValue(dateTimeFormatData, width);
      }
      /**
       * Retrieves a localized number symbol that can be used to replace placeholders in number formats.
       * @param locale The locale code.
       * @param symbol The symbol to localize.
       * @returns The character for the localized symbol.
       * @see `NumberSymbol`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _getLocaleNumberSymbol(locale, symbol) {
        var data = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        var res = data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberSymbols][symbol];

        if (typeof res === 'undefined') {
          if (symbol === _NumberSymbol.CurrencyDecimal) {
            return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberSymbols][_NumberSymbol.Decimal];
          } else if (symbol === _NumberSymbol.CurrencyGroup) {
            return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberSymbols][_NumberSymbol.Group];
          }
        }

        return res;
      }
      /**
       * Retrieves a number format for a given locale.
       *
       * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`
       * when used to format the number 12345.678 could result in "12'345,678". That would happen if the
       * grouping separator for your language is an apostrophe, and the decimal separator is a comma.
       *
       * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders
       * that stand for the decimal separator, and so on, and are NOT real characters.
       * You must NOT "translate" the placeholders. For example, don't change `.` to `,` even though in
       * your language the decimal point is written with a comma. The symbols should be replaced by the
       * local equivalents, using the appropriate `NumberSymbol` for your language.
       *
       * Here are the special characters used in number patterns:
       *
       * | Symbol | Meaning |
       * |--------|---------|
       * | . | Replaced automatically by the character used for the decimal point. |
       * | , | Replaced by the "grouping" (thousands) separator. |
       * | 0 | Replaced by a digit (or zero if there aren't enough digits). |
       * | # | Replaced by a digit (or nothing if there aren't enough). |
       * | ¤ | Replaced by a currency symbol, such as $ or USD. |
       * | % | Marks a percent format. The % symbol may change position, but must be retained. |
       * | E | Marks a scientific format. The E symbol may change position, but must be retained. |
       * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |
       *
       * @param locale A locale code for the locale format rules to use.
       * @param type The type of numeric value to be formatted (such as `Decimal` or `Currency`.)
       * @returns The localized format string.
       * @see `NumberFormatStyle`
       * @see [CLDR website](http://cldr.unicode.org/translation/number-patterns)
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _getLocaleNumberFormat(locale, type) {
        var data = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberFormats][type];
      }
      /**
       * Retrieves the symbol used to represent the currency for the main country
       * corresponding to a given locale. For example, '$' for `en-US`.
       *
       * @param locale A locale code for the locale format rules to use.
       * @returns The localized symbol character,
       * or `null` if the main country cannot be determined.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _getLocaleCurrencySymbol(locale) {
        var data = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].CurrencySymbol] || null;
      }
      /**
       * Retrieves the name of the currency for the main country corresponding
       * to a given locale. For example, 'US Dollar' for `en-US`.
       * @param locale A locale code for the locale format rules to use.
       * @returns The currency name,
       * or `null` if the main country cannot be determined.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _getLocaleCurrencyName(locale) {
        var data = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].CurrencyName] || null;
      }
      /**
       * Retrieves the default currency code for the given locale.
       *
       * The default is defined as the first currency which is still in use.
       *
       * @param locale The code of the locale whose currency code we want.
       * @returns The code of the default currency for the given locale.
       *
       * @publicApi
       */


      function _getLocaleCurrencyCode(locale) {
        return (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵgetLocaleCurrencyCode"])(locale);
      }
      /**
       * Retrieves the currency values for a given locale.
       * @param locale A locale code for the locale format rules to use.
       * @returns The currency values.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       */


      function getLocaleCurrencies(locale) {
        var data = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].Currencies];
      }
      /**
       * @alias core/ɵgetLocalePluralCase
       * @publicApi
       */


      var _getLocalePluralCase = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵgetLocalePluralCase"];

      function checkFullData(data) {
        if (!data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData]) {
          throw new Error("Missing extra locale data for the locale \"".concat(data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].LocaleId], "\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more."));
        }
      }
      /**
       * Retrieves locale-specific rules used to determine which day period to use
       * when more than one period is defined for a locale.
       *
       * There is a rule for each defined day period. The
       * first rule is applied to the first day period and so on.
       * Fall back to AM/PM when no rules are available.
       *
       * A rule can specify a period as time range, or as a single time value.
       *
       * This functionality is only available when you have loaded the full locale data.
       * See the ["I18n guide"](guide/i18n#i18n-pipes).
       *
       * @param locale A locale code for the locale format rules to use.
       * @returns The rules for the locale, a single time value or array of *from-time, to-time*,
       * or null if no periods are available.
       *
       * @see `getLocaleExtraDayPeriods()`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _getLocaleExtraDayPeriodRules(locale) {
        var data = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        checkFullData(data);
        var rules = data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData][2
        /* ExtraDayPeriodsRules */
        ] || [];
        return rules.map(function (rule) {
          if (typeof rule === 'string') {
            return extractTime(rule);
          }

          return [extractTime(rule[0]), extractTime(rule[1])];
        });
      }
      /**
       * Retrieves locale-specific day periods, which indicate roughly how a day is broken up
       * in different languages.
       * For example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.
       *
       * This functionality is only available when you have loaded the full locale data.
       * See the ["I18n guide"](guide/i18n#i18n-pipes).
       *
       * @param locale A locale code for the locale format rules to use.
       * @param formStyle The required grammatical form.
       * @param width The required character width.
       * @returns The translated day-period strings.
       * @see `getLocaleExtraDayPeriodRules()`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _getLocaleExtraDayPeriods(locale, formStyle, width) {
        var data = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        checkFullData(data);
        var dayPeriodsData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData][0
        /* ExtraDayPeriodFormats */
        ], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData][1
        /* ExtraDayPeriodStandalone */
        ]];
        var dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];
        return getLastDefinedValue(dayPeriods, width) || [];
      }
      /**
       * Retrieves the writing direction of a specified locale
       * @param locale A locale code for the locale format rules to use.
       * @publicApi
       * @returns 'rtl' or 'ltr'
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       */


      function _getLocaleDirection(locale) {
        var data = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
        return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].Directionality];
      }
      /**
       * Retrieves the first value that is defined in an array, going backwards from an index position.
       *
       * To avoid repeating the same data (as when the "format" and "standalone" forms are the same)
       * add the first value to the locale data arrays, and add other values only if they are different.
       *
       * @param data The data array to retrieve from.
       * @param index A 0-based index into the array to start from.
       * @returns The value immediately before the given index position.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function getLastDefinedValue(data, index) {
        for (var i = index; i > -1; i--) {
          if (typeof data[i] !== 'undefined') {
            return data[i];
          }
        }

        throw new Error('Locale data API: locale data undefined');
      }
      /**
       * Extracts the hours and minutes from a string like "15:45"
       */


      function extractTime(time) {
        var _time$split = time.split(':'),
            _time$split2 = _slicedToArray(_time$split, 2),
            h = _time$split2[0],
            m = _time$split2[1];

        return {
          hours: +h,
          minutes: +m
        };
      }
      /**
       * Retrieves the currency symbol for a given currency code.
       *
       * For example, for the default `en-US` locale, the code `USD` can
       * be represented by the narrow symbol `$` or the wide symbol `US$`.
       *
       * @param code The currency code.
       * @param format The format, `wide` or `narrow`.
       * @param locale A locale code for the locale format rules to use.
       *
       * @returns The symbol, or the currency code if no symbol is available.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _getCurrencySymbol(code, format) {
        var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';
        var currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];
        var symbolNarrow = currency[1
        /* SymbolNarrow */
        ];

        if (format === 'narrow' && typeof symbolNarrow === 'string') {
          return symbolNarrow;
        }

        return currency[0
        /* Symbol */
        ] || code;
      } // Most currencies have cents, that's why the default is 2


      var DEFAULT_NB_OF_CURRENCY_DIGITS = 2;
      /**
       * Reports the number of decimal digits for a given currency.
       * The value depends upon the presence of cents in that particular currency.
       *
       * @param code The currency code.
       * @returns The number of decimal digits, typically 0 or 2.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */

      function _getNumberOfCurrencyDigits(code) {
        var digits;
        var currency = CURRENCIES_EN[code];

        if (currency) {
          digits = currency[2
          /* NbOfDigits */
          ];
        }

        return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/; //    1        2       3         4          5          6          7          8  9     10      11

      var NAMED_FORMATS = {};
      var DATE_FORMATS_SPLIT = /((?:[^BEGHLMOSWYZabcdhmswyz']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|Y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|c{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\s\S]*)/;
      var ZoneWidth;

      (function (ZoneWidth) {
        ZoneWidth[ZoneWidth["Short"] = 0] = "Short";
        ZoneWidth[ZoneWidth["ShortGMT"] = 1] = "ShortGMT";
        ZoneWidth[ZoneWidth["Long"] = 2] = "Long";
        ZoneWidth[ZoneWidth["Extended"] = 3] = "Extended";
      })(ZoneWidth || (ZoneWidth = {}));

      var DateType;

      (function (DateType) {
        DateType[DateType["FullYear"] = 0] = "FullYear";
        DateType[DateType["Month"] = 1] = "Month";
        DateType[DateType["Date"] = 2] = "Date";
        DateType[DateType["Hours"] = 3] = "Hours";
        DateType[DateType["Minutes"] = 4] = "Minutes";
        DateType[DateType["Seconds"] = 5] = "Seconds";
        DateType[DateType["FractionalSeconds"] = 6] = "FractionalSeconds";
        DateType[DateType["Day"] = 7] = "Day";
      })(DateType || (DateType = {}));

      var TranslationType;

      (function (TranslationType) {
        TranslationType[TranslationType["DayPeriods"] = 0] = "DayPeriods";
        TranslationType[TranslationType["Days"] = 1] = "Days";
        TranslationType[TranslationType["Months"] = 2] = "Months";
        TranslationType[TranslationType["Eras"] = 3] = "Eras";
      })(TranslationType || (TranslationType = {}));
      /**
       * @ngModule CommonModule
       * @description
       *
       * Formats a date according to locale rules.
       *
       * @param value The date to format, as a Date, or a number (milliseconds since UTC epoch)
       * or an [ISO date-time string](https://www.w3.org/TR/NOTE-datetime).
       * @param format The date-time components to include. See `DatePipe` for details.
       * @param locale A locale code for the locale format rules to use.
       * @param timezone The time zone. A time zone offset from GMT (such as `'+0430'`),
       * or a standard UTC/GMT or continental US time zone abbreviation.
       * If not specified, uses host system settings.
       *
       * @returns The formatted date string.
       *
       * @see `DatePipe`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _formatDate(value, format, locale, timezone) {
        var date = toDate(value);
        var namedFormat = getNamedFormat(locale, format);
        format = namedFormat || format;
        var parts = [];
        var match;

        while (format) {
          match = DATE_FORMATS_SPLIT.exec(format);

          if (match) {
            parts = parts.concat(match.slice(1));
            var part = parts.pop();

            if (!part) {
              break;
            }

            format = part;
          } else {
            parts.push(format);
            break;
          }
        }

        var dateTimezoneOffset = date.getTimezoneOffset();

        if (timezone) {
          dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
          date = convertTimezoneToLocal(date, timezone, true);
        }

        var text = '';
        parts.forEach(function (value) {
          var dateFormatter = getDateFormatter(value);
          text += dateFormatter ? dateFormatter(date, locale, dateTimezoneOffset) : value === '\'\'' ? '\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
        });
        return text;
      }
      /**
       * Create a new Date object with the given date value, and the time set to midnight.
       *
       * We cannot use `new Date(year, month, date)` because it maps years between 0 and 99 to 1900-1999.
       * See: https://github.com/angular/angular/issues/40377
       *
       * Note that this function returns a Date object whose time is midnight in the current locale's
       * timezone. In the future we might want to change this to be midnight in UTC, but this would be a
       * considerable breaking change.
       */


      function createDate(year, month, date) {
        // The `newDate` is set to midnight (UTC) on January 1st 1970.
        // - In PST this will be December 31st 1969 at 4pm.
        // - In GMT this will be January 1st 1970 at 1am.
        // Note that they even have different years, dates and months!
        var newDate = new Date(0); // `setFullYear()` allows years like 0001 to be set correctly. This function does not
        // change the internal time of the date.
        // Consider calling `setFullYear(2019, 8, 20)` (September 20, 2019).
        // - In PST this will now be September 20, 2019 at 4pm
        // - In GMT this will now be September 20, 2019 at 1am

        newDate.setFullYear(year, month, date); // We want the final date to be at local midnight, so we reset the time.
        // - In PST this will now be September 20, 2019 at 12am
        // - In GMT this will now be September 20, 2019 at 12am

        newDate.setHours(0, 0, 0);
        return newDate;
      }

      function getNamedFormat(locale, format) {
        var localeId = _getLocaleId(locale);

        NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};

        if (NAMED_FORMATS[localeId][format]) {
          return NAMED_FORMATS[localeId][format];
        }

        var formatValue = '';

        switch (format) {
          case 'shortDate':
            formatValue = _getLocaleDateFormat(locale, _FormatWidth.Short);
            break;

          case 'mediumDate':
            formatValue = _getLocaleDateFormat(locale, _FormatWidth.Medium);
            break;

          case 'longDate':
            formatValue = _getLocaleDateFormat(locale, _FormatWidth.Long);
            break;

          case 'fullDate':
            formatValue = _getLocaleDateFormat(locale, _FormatWidth.Full);
            break;

          case 'shortTime':
            formatValue = _getLocaleTimeFormat(locale, _FormatWidth.Short);
            break;

          case 'mediumTime':
            formatValue = _getLocaleTimeFormat(locale, _FormatWidth.Medium);
            break;

          case 'longTime':
            formatValue = _getLocaleTimeFormat(locale, _FormatWidth.Long);
            break;

          case 'fullTime':
            formatValue = _getLocaleTimeFormat(locale, _FormatWidth.Full);
            break;

          case 'short':
            var shortTime = getNamedFormat(locale, 'shortTime');
            var shortDate = getNamedFormat(locale, 'shortDate');
            formatValue = formatDateTime(_getLocaleDateTimeFormat(locale, _FormatWidth.Short), [shortTime, shortDate]);
            break;

          case 'medium':
            var mediumTime = getNamedFormat(locale, 'mediumTime');
            var mediumDate = getNamedFormat(locale, 'mediumDate');
            formatValue = formatDateTime(_getLocaleDateTimeFormat(locale, _FormatWidth.Medium), [mediumTime, mediumDate]);
            break;

          case 'long':
            var longTime = getNamedFormat(locale, 'longTime');
            var longDate = getNamedFormat(locale, 'longDate');
            formatValue = formatDateTime(_getLocaleDateTimeFormat(locale, _FormatWidth.Long), [longTime, longDate]);
            break;

          case 'full':
            var fullTime = getNamedFormat(locale, 'fullTime');
            var fullDate = getNamedFormat(locale, 'fullDate');
            formatValue = formatDateTime(_getLocaleDateTimeFormat(locale, _FormatWidth.Full), [fullTime, fullDate]);
            break;
        }

        if (formatValue) {
          NAMED_FORMATS[localeId][format] = formatValue;
        }

        return formatValue;
      }

      function formatDateTime(str, opt_values) {
        if (opt_values) {
          str = str.replace(/\{([^}]+)}/g, function (match, key) {
            return opt_values != null && key in opt_values ? opt_values[key] : match;
          });
        }

        return str;
      }

      function padNumber(num, digits) {
        var minusSign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '-';
        var trim = arguments.length > 3 ? arguments[3] : undefined;
        var negWrap = arguments.length > 4 ? arguments[4] : undefined;
        var neg = '';

        if (num < 0 || negWrap && num <= 0) {
          if (negWrap) {
            num = -num + 1;
          } else {
            num = -num;
            neg = minusSign;
          }
        }

        var strNum = String(num);

        while (strNum.length < digits) {
          strNum = '0' + strNum;
        }

        if (trim) {
          strNum = strNum.substr(strNum.length - digits);
        }

        return neg + strNum;
      }

      function formatFractionalSeconds(milliseconds, digits) {
        var strMs = padNumber(milliseconds, 3);
        return strMs.substr(0, digits);
      }
      /**
       * Returns a date formatter that transforms a date into its locale digit representation
       */


      function dateGetter(name, size) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var trim = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        var negWrap = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
        return function (date, locale) {
          var part = getDatePart(name, date);

          if (offset > 0 || part > -offset) {
            part += offset;
          }

          if (name === DateType.Hours) {
            if (part === 0 && offset === -12) {
              part = 12;
            }
          } else if (name === DateType.FractionalSeconds) {
            return formatFractionalSeconds(part, size);
          }

          var localeMinus = _getLocaleNumberSymbol(locale, _NumberSymbol.MinusSign);

          return padNumber(part, size, localeMinus, trim, negWrap);
        };
      }

      function getDatePart(part, date) {
        switch (part) {
          case DateType.FullYear:
            return date.getFullYear();

          case DateType.Month:
            return date.getMonth();

          case DateType.Date:
            return date.getDate();

          case DateType.Hours:
            return date.getHours();

          case DateType.Minutes:
            return date.getMinutes();

          case DateType.Seconds:
            return date.getSeconds();

          case DateType.FractionalSeconds:
            return date.getMilliseconds();

          case DateType.Day:
            return date.getDay();

          default:
            throw new Error("Unknown DateType value \"".concat(part, "\"."));
        }
      }
      /**
       * Returns a date formatter that transforms a date into its locale string representation
       */


      function dateStrGetter(name, width) {
        var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _FormStyle.Format;
        var extended = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        return function (date, locale) {
          return getDateTranslation(date, locale, name, width, form, extended);
        };
      }
      /**
       * Returns the locale translation of a date for a given form, type and width
       */


      function getDateTranslation(date, locale, name, width, form, extended) {
        switch (name) {
          case TranslationType.Months:
            return _getLocaleMonthNames(locale, form, width)[date.getMonth()];

          case TranslationType.Days:
            return _getLocaleDayNames(locale, form, width)[date.getDay()];

          case TranslationType.DayPeriods:
            var currentHours = date.getHours();
            var currentMinutes = date.getMinutes();

            if (extended) {
              var rules = _getLocaleExtraDayPeriodRules(locale);

              var dayPeriods = _getLocaleExtraDayPeriods(locale, form, width);

              var index = rules.findIndex(function (rule) {
                if (Array.isArray(rule)) {
                  // morning, afternoon, evening, night
                  var _rule = _slicedToArray(rule, 2),
                      from = _rule[0],
                      to = _rule[1];

                  var afterFrom = currentHours >= from.hours && currentMinutes >= from.minutes;
                  var beforeTo = currentHours < to.hours || currentHours === to.hours && currentMinutes < to.minutes; // We must account for normal rules that span a period during the day (e.g. 6am-9am)
                  // where `from` is less (earlier) than `to`. But also rules that span midnight (e.g.
                  // 10pm - 5am) where `from` is greater (later!) than `to`.
                  //
                  // In the first case the current time must be BOTH after `from` AND before `to`
                  // (e.g. 8am is after 6am AND before 10am).
                  //
                  // In the second case the current time must be EITHER after `from` OR before `to`
                  // (e.g. 4am is before 5am but not after 10pm; and 11pm is not before 5am but it is
                  // after 10pm).

                  if (from.hours < to.hours) {
                    if (afterFrom && beforeTo) {
                      return true;
                    }
                  } else if (afterFrom || beforeTo) {
                    return true;
                  }
                } else {
                  // noon or midnight
                  if (rule.hours === currentHours && rule.minutes === currentMinutes) {
                    return true;
                  }
                }

                return false;
              });

              if (index !== -1) {
                return dayPeriods[index];
              }
            } // if no rules for the day periods, we use am/pm by default


            return _getLocaleDayPeriods(locale, form, width)[currentHours < 12 ? 0 : 1];

          case TranslationType.Eras:
            return _getLocaleEraNames(locale, width)[date.getFullYear() <= 0 ? 0 : 1];

          default:
            // This default case is not needed by TypeScript compiler, as the switch is exhaustive.
            // However Closure Compiler does not understand that and reports an error in typed mode.
            // The `throw new Error` below works around the problem, and the unexpected: never variable
            // makes sure tsc still checks this code is unreachable.
            var unexpected = name;
            throw new Error("unexpected translation type ".concat(unexpected));
        }
      }
      /**
       * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or
       * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,
       * extended = +04:30)
       */


      function timeZoneGetter(width) {
        return function (date, locale, offset) {
          var zone = -1 * offset;

          var minusSign = _getLocaleNumberSymbol(locale, _NumberSymbol.MinusSign);

          var hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);

          switch (width) {
            case ZoneWidth.Short:
              return (zone >= 0 ? '+' : '') + padNumber(hours, 2, minusSign) + padNumber(Math.abs(zone % 60), 2, minusSign);

            case ZoneWidth.ShortGMT:
              return 'GMT' + (zone >= 0 ? '+' : '') + padNumber(hours, 1, minusSign);

            case ZoneWidth.Long:
              return 'GMT' + (zone >= 0 ? '+' : '') + padNumber(hours, 2, minusSign) + ':' + padNumber(Math.abs(zone % 60), 2, minusSign);

            case ZoneWidth.Extended:
              if (offset === 0) {
                return 'Z';
              } else {
                return (zone >= 0 ? '+' : '') + padNumber(hours, 2, minusSign) + ':' + padNumber(Math.abs(zone % 60), 2, minusSign);
              }

            default:
              throw new Error("Unknown zone width \"".concat(width, "\""));
          }
        };
      }

      var JANUARY = 0;
      var THURSDAY = 4;

      function getFirstThursdayOfYear(year) {
        var firstDayOfYear = createDate(year, JANUARY, 1).getDay();
        return createDate(year, 0, 1 + (firstDayOfYear <= THURSDAY ? THURSDAY : THURSDAY + 7) - firstDayOfYear);
      }

      function getThursdayThisWeek(datetime) {
        return createDate(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (THURSDAY - datetime.getDay()));
      }

      function weekGetter(size) {
        var monthBased = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return function (date, locale) {
          var result;

          if (monthBased) {
            var nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;
            var today = date.getDate();
            result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);
          } else {
            var thisThurs = getThursdayThisWeek(date); // Some days of a year are part of next year according to ISO 8601.
            // Compute the firstThurs from the year of this week's Thursday

            var firstThurs = getFirstThursdayOfYear(thisThurs.getFullYear());
            var diff = thisThurs.getTime() - firstThurs.getTime();
            result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week
          }

          return padNumber(result, size, _getLocaleNumberSymbol(locale, _NumberSymbol.MinusSign));
        };
      }
      /**
       * Returns a date formatter that provides the week-numbering year for the input date.
       */


      function weekNumberingYearGetter(size) {
        var trim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return function (date, locale) {
          var thisThurs = getThursdayThisWeek(date);
          var weekNumberingYear = thisThurs.getFullYear();
          return padNumber(weekNumberingYear, size, _getLocaleNumberSymbol(locale, _NumberSymbol.MinusSign), trim);
        };
      }

      var DATE_FORMATS = {}; // Based on CLDR formats:
      // See complete list: http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
      // See also explanations: http://cldr.unicode.org/translation/date-time
      // TODO(ocombe): support all missing cldr formats: U, Q, D, F, e, j, J, C, A, v, V, X, x

      function getDateFormatter(format) {
        if (DATE_FORMATS[format]) {
          return DATE_FORMATS[format];
        }

        var formatter;

        switch (format) {
          // Era name (AD/BC)
          case 'G':
          case 'GG':
          case 'GGG':
            formatter = dateStrGetter(TranslationType.Eras, _TranslationWidth.Abbreviated);
            break;

          case 'GGGG':
            formatter = dateStrGetter(TranslationType.Eras, _TranslationWidth.Wide);
            break;

          case 'GGGGG':
            formatter = dateStrGetter(TranslationType.Eras, _TranslationWidth.Narrow);
            break;
          // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)

          case 'y':
            formatter = dateGetter(DateType.FullYear, 1, 0, false, true);
            break;
          // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)

          case 'yy':
            formatter = dateGetter(DateType.FullYear, 2, 0, true, true);
            break;
          // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)

          case 'yyy':
            formatter = dateGetter(DateType.FullYear, 3, 0, false, true);
            break;
          // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)

          case 'yyyy':
            formatter = dateGetter(DateType.FullYear, 4, 0, false, true);
            break;
          // 1 digit representation of the week-numbering year, e.g. (AD 1 => 1, AD 199 => 199)

          case 'Y':
            formatter = weekNumberingYearGetter(1);
            break;
          // 2 digit representation of the week-numbering year, padded (00-99). (e.g. AD 2001 => 01, AD
          // 2010 => 10)

          case 'YY':
            formatter = weekNumberingYearGetter(2, true);
            break;
          // 3 digit representation of the week-numbering year, padded (000-999). (e.g. AD 1 => 001, AD
          // 2010 => 2010)

          case 'YYY':
            formatter = weekNumberingYearGetter(3);
            break;
          // 4 digit representation of the week-numbering year (e.g. AD 1 => 0001, AD 2010 => 2010)

          case 'YYYY':
            formatter = weekNumberingYearGetter(4);
            break;
          // Month of the year (1-12), numeric

          case 'M':
          case 'L':
            formatter = dateGetter(DateType.Month, 1, 1);
            break;

          case 'MM':
          case 'LL':
            formatter = dateGetter(DateType.Month, 2, 1);
            break;
          // Month of the year (January, ...), string, format

          case 'MMM':
            formatter = dateStrGetter(TranslationType.Months, _TranslationWidth.Abbreviated);
            break;

          case 'MMMM':
            formatter = dateStrGetter(TranslationType.Months, _TranslationWidth.Wide);
            break;

          case 'MMMMM':
            formatter = dateStrGetter(TranslationType.Months, _TranslationWidth.Narrow);
            break;
          // Month of the year (January, ...), string, standalone

          case 'LLL':
            formatter = dateStrGetter(TranslationType.Months, _TranslationWidth.Abbreviated, _FormStyle.Standalone);
            break;

          case 'LLLL':
            formatter = dateStrGetter(TranslationType.Months, _TranslationWidth.Wide, _FormStyle.Standalone);
            break;

          case 'LLLLL':
            formatter = dateStrGetter(TranslationType.Months, _TranslationWidth.Narrow, _FormStyle.Standalone);
            break;
          // Week of the year (1, ... 52)

          case 'w':
            formatter = weekGetter(1);
            break;

          case 'ww':
            formatter = weekGetter(2);
            break;
          // Week of the month (1, ...)

          case 'W':
            formatter = weekGetter(1, true);
            break;
          // Day of the month (1-31)

          case 'd':
            formatter = dateGetter(DateType.Date, 1);
            break;

          case 'dd':
            formatter = dateGetter(DateType.Date, 2);
            break;
          // Day of the Week StandAlone (1, 1, Mon, Monday, M, Mo)

          case 'c':
          case 'cc':
            formatter = dateGetter(DateType.Day, 1);
            break;

          case 'ccc':
            formatter = dateStrGetter(TranslationType.Days, _TranslationWidth.Abbreviated, _FormStyle.Standalone);
            break;

          case 'cccc':
            formatter = dateStrGetter(TranslationType.Days, _TranslationWidth.Wide, _FormStyle.Standalone);
            break;

          case 'ccccc':
            formatter = dateStrGetter(TranslationType.Days, _TranslationWidth.Narrow, _FormStyle.Standalone);
            break;

          case 'cccccc':
            formatter = dateStrGetter(TranslationType.Days, _TranslationWidth.Short, _FormStyle.Standalone);
            break;
          // Day of the Week

          case 'E':
          case 'EE':
          case 'EEE':
            formatter = dateStrGetter(TranslationType.Days, _TranslationWidth.Abbreviated);
            break;

          case 'EEEE':
            formatter = dateStrGetter(TranslationType.Days, _TranslationWidth.Wide);
            break;

          case 'EEEEE':
            formatter = dateStrGetter(TranslationType.Days, _TranslationWidth.Narrow);
            break;

          case 'EEEEEE':
            formatter = dateStrGetter(TranslationType.Days, _TranslationWidth.Short);
            break;
          // Generic period of the day (am-pm)

          case 'a':
          case 'aa':
          case 'aaa':
            formatter = dateStrGetter(TranslationType.DayPeriods, _TranslationWidth.Abbreviated);
            break;

          case 'aaaa':
            formatter = dateStrGetter(TranslationType.DayPeriods, _TranslationWidth.Wide);
            break;

          case 'aaaaa':
            formatter = dateStrGetter(TranslationType.DayPeriods, _TranslationWidth.Narrow);
            break;
          // Extended period of the day (midnight, at night, ...), standalone

          case 'b':
          case 'bb':
          case 'bbb':
            formatter = dateStrGetter(TranslationType.DayPeriods, _TranslationWidth.Abbreviated, _FormStyle.Standalone, true);
            break;

          case 'bbbb':
            formatter = dateStrGetter(TranslationType.DayPeriods, _TranslationWidth.Wide, _FormStyle.Standalone, true);
            break;

          case 'bbbbb':
            formatter = dateStrGetter(TranslationType.DayPeriods, _TranslationWidth.Narrow, _FormStyle.Standalone, true);
            break;
          // Extended period of the day (midnight, night, ...), standalone

          case 'B':
          case 'BB':
          case 'BBB':
            formatter = dateStrGetter(TranslationType.DayPeriods, _TranslationWidth.Abbreviated, _FormStyle.Format, true);
            break;

          case 'BBBB':
            formatter = dateStrGetter(TranslationType.DayPeriods, _TranslationWidth.Wide, _FormStyle.Format, true);
            break;

          case 'BBBBB':
            formatter = dateStrGetter(TranslationType.DayPeriods, _TranslationWidth.Narrow, _FormStyle.Format, true);
            break;
          // Hour in AM/PM, (1-12)

          case 'h':
            formatter = dateGetter(DateType.Hours, 1, -12);
            break;

          case 'hh':
            formatter = dateGetter(DateType.Hours, 2, -12);
            break;
          // Hour of the day (0-23)

          case 'H':
            formatter = dateGetter(DateType.Hours, 1);
            break;
          // Hour in day, padded (00-23)

          case 'HH':
            formatter = dateGetter(DateType.Hours, 2);
            break;
          // Minute of the hour (0-59)

          case 'm':
            formatter = dateGetter(DateType.Minutes, 1);
            break;

          case 'mm':
            formatter = dateGetter(DateType.Minutes, 2);
            break;
          // Second of the minute (0-59)

          case 's':
            formatter = dateGetter(DateType.Seconds, 1);
            break;

          case 'ss':
            formatter = dateGetter(DateType.Seconds, 2);
            break;
          // Fractional second

          case 'S':
            formatter = dateGetter(DateType.FractionalSeconds, 1);
            break;

          case 'SS':
            formatter = dateGetter(DateType.FractionalSeconds, 2);
            break;

          case 'SSS':
            formatter = dateGetter(DateType.FractionalSeconds, 3);
            break;
          // Timezone ISO8601 short format (-0430)

          case 'Z':
          case 'ZZ':
          case 'ZZZ':
            formatter = timeZoneGetter(ZoneWidth.Short);
            break;
          // Timezone ISO8601 extended format (-04:30)

          case 'ZZZZZ':
            formatter = timeZoneGetter(ZoneWidth.Extended);
            break;
          // Timezone GMT short format (GMT+4)

          case 'O':
          case 'OO':
          case 'OOO': // Should be location, but fallback to format O instead because we don't have the data yet

          case 'z':
          case 'zz':
          case 'zzz':
            formatter = timeZoneGetter(ZoneWidth.ShortGMT);
            break;
          // Timezone GMT long format (GMT+0430)

          case 'OOOO':
          case 'ZZZZ': // Should be location, but fallback to format O instead because we don't have the data yet

          case 'zzzz':
            formatter = timeZoneGetter(ZoneWidth.Long);
            break;

          default:
            return null;
        }

        DATE_FORMATS[format] = formatter;
        return formatter;
      }

      function timezoneToOffset(timezone, fallback) {
        // Support: IE 11 only, Edge 13-15+
        // IE/Edge do not "understand" colon (`:`) in timezone
        timezone = timezone.replace(/:/g, '');
        var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
        return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
      }

      function addDateMinutes(date, minutes) {
        date = new Date(date.getTime());
        date.setMinutes(date.getMinutes() + minutes);
        return date;
      }

      function convertTimezoneToLocal(date, timezone, reverse) {
        var reverseValue = reverse ? -1 : 1;
        var dateTimezoneOffset = date.getTimezoneOffset();
        var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
        return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));
      }
      /**
       * Converts a value to date.
       *
       * Supported input formats:
       * - `Date`
       * - number: timestamp
       * - string: numeric (e.g. "1234"), ISO and date strings in a format supported by
       *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
       *   Note: ISO strings without time return a date without timeoffset.
       *
       * Throws if unable to convert to a date.
       */


      function toDate(value) {
        if (isDate(value)) {
          return value;
        }

        if (typeof value === 'number' && !isNaN(value)) {
          return new Date(value);
        }

        if (typeof value === 'string') {
          value = value.trim();

          if (/^(\d{4}(-\d{1,2}(-\d{1,2})?)?)$/.test(value)) {
            /* For ISO Strings without time the day, month and year must be extracted from the ISO String
            before Date creation to avoid time offset and errors in the new Date.
            If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
            date, some browsers (e.g. IE 9) will throw an invalid Date error.
            If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
            is applied.
            Note: ISO months are 0 for January, 1 for February, ... */
            var _value$split$map = value.split('-').map(function (val) {
              return +val;
            }),
                _value$split$map2 = _slicedToArray(_value$split$map, 3),
                y = _value$split$map2[0],
                _value$split$map2$ = _value$split$map2[1],
                m = _value$split$map2$ === void 0 ? 1 : _value$split$map2$,
                _value$split$map2$2 = _value$split$map2[2],
                d = _value$split$map2$2 === void 0 ? 1 : _value$split$map2$2;

            return createDate(y, m - 1, d);
          }

          var parsedNb = parseFloat(value); // any string that only contains numbers, like "1234" but not like "1234hello"

          if (!isNaN(value - parsedNb)) {
            return new Date(parsedNb);
          }

          var match;

          if (match = value.match(ISO8601_DATE_REGEX)) {
            return isoStringToDate(match);
          }
        }

        var date = new Date(value);

        if (!isDate(date)) {
          throw new Error("Unable to convert \"".concat(value, "\" into a date"));
        }

        return date;
      }
      /**
       * Converts a date in ISO8601 to a Date.
       * Used instead of `Date.parse` because of browser discrepancies.
       */


      function isoStringToDate(match) {
        var date = new Date(0);
        var tzHour = 0;
        var tzMin = 0; // match[8] means that the string contains "Z" (UTC) or a timezone like "+01:00" or "+0100"

        var dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
        var timeSetter = match[8] ? date.setUTCHours : date.setHours; // if there is a timezone defined like "+01:00" or "+0100"

        if (match[9]) {
          tzHour = Number(match[9] + match[10]);
          tzMin = Number(match[9] + match[11]);
        }

        dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));
        var h = Number(match[4] || 0) - tzHour;
        var m = Number(match[5] || 0) - tzMin;
        var s = Number(match[6] || 0); // The ECMAScript specification (https://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.11)
        // defines that `DateTime` milliseconds should always be rounded down, so that `999.9ms`
        // becomes `999ms`.

        var ms = Math.floor(parseFloat('0.' + (match[7] || 0)) * 1000);
        timeSetter.call(date, h, m, s, ms);
        return date;
      }

      function isDate(value) {
        return value instanceof Date && !isNaN(value.valueOf());
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
      var MAX_DIGITS = 22;
      var DECIMAL_SEP = '.';
      var ZERO_CHAR = '0';
      var PATTERN_SEP = ';';
      var GROUP_SEP = ',';
      var DIGIT_CHAR = '#';
      var CURRENCY_CHAR = '¤';
      var PERCENT_CHAR = '%';
      /**
       * Transforms a number to a locale string based on a style and a format.
       */

      function formatNumberToLocaleString(value, pattern, locale, groupSymbol, decimalSymbol, digitsInfo) {
        var isPercent = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
        var formattedText = '';
        var isZero = false;

        if (!isFinite(value)) {
          formattedText = _getLocaleNumberSymbol(locale, _NumberSymbol.Infinity);
        } else {
          var parsedNumber = parseNumber(value);

          if (isPercent) {
            parsedNumber = toPercent(parsedNumber);
          }

          var minInt = pattern.minInt;
          var minFraction = pattern.minFrac;
          var maxFraction = pattern.maxFrac;

          if (digitsInfo) {
            var parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);

            if (parts === null) {
              throw new Error("".concat(digitsInfo, " is not a valid digit info"));
            }

            var minIntPart = parts[1];
            var minFractionPart = parts[3];
            var maxFractionPart = parts[5];

            if (minIntPart != null) {
              minInt = parseIntAutoRadix(minIntPart);
            }

            if (minFractionPart != null) {
              minFraction = parseIntAutoRadix(minFractionPart);
            }

            if (maxFractionPart != null) {
              maxFraction = parseIntAutoRadix(maxFractionPart);
            } else if (minFractionPart != null && minFraction > maxFraction) {
              maxFraction = minFraction;
            }
          }

          roundNumber(parsedNumber, minFraction, maxFraction);
          var digits = parsedNumber.digits;
          var integerLen = parsedNumber.integerLen;
          var exponent = parsedNumber.exponent;
          var decimals = [];
          isZero = digits.every(function (d) {
            return !d;
          }); // pad zeros for small numbers

          for (; integerLen < minInt; integerLen++) {
            digits.unshift(0);
          } // pad zeros for small numbers


          for (; integerLen < 0; integerLen++) {
            digits.unshift(0);
          } // extract decimals digits


          if (integerLen > 0) {
            decimals = digits.splice(integerLen, digits.length);
          } else {
            decimals = digits;
            digits = [0];
          } // format the integer digits with grouping separators


          var groups = [];

          if (digits.length >= pattern.lgSize) {
            groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));
          }

          while (digits.length > pattern.gSize) {
            groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));
          }

          if (digits.length) {
            groups.unshift(digits.join(''));
          }

          formattedText = groups.join(_getLocaleNumberSymbol(locale, groupSymbol)); // append the decimal digits

          if (decimals.length) {
            formattedText += _getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');
          }

          if (exponent) {
            formattedText += _getLocaleNumberSymbol(locale, _NumberSymbol.Exponential) + '+' + exponent;
          }
        }

        if (value < 0 && !isZero) {
          formattedText = pattern.negPre + formattedText + pattern.negSuf;
        } else {
          formattedText = pattern.posPre + formattedText + pattern.posSuf;
        }

        return formattedText;
      }
      /**
       * @ngModule CommonModule
       * @description
       *
       * Formats a number as currency using locale rules.
       *
       * @param value The number to format.
       * @param locale A locale code for the locale format rules to use.
       * @param currency A string containing the currency symbol or its name,
       * such as "$" or "Canadian Dollar". Used in output string, but does not affect the operation
       * of the function.
       * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
       * currency code, such as `USD` for the US dollar and `EUR` for the euro.
       * Used to determine the number of digits in the decimal part.
       * @param digitsInfo Decimal representation options, specified by a string in the following format:
       * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.
       *
       * @returns The formatted currency value.
       *
       * @see `formatNumber()`
       * @see `DecimalPipe`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _formatCurrency(value, locale, currency, currencyCode, digitsInfo) {
        var format = _getLocaleNumberFormat(locale, _NumberFormatStyle.Currency);

        var pattern = parseNumberFormat(format, _getLocaleNumberSymbol(locale, _NumberSymbol.MinusSign));
        pattern.minFrac = _getNumberOfCurrencyDigits(currencyCode);
        pattern.maxFrac = pattern.minFrac;
        var res = formatNumberToLocaleString(value, pattern, locale, _NumberSymbol.CurrencyGroup, _NumberSymbol.CurrencyDecimal, digitsInfo);
        return res.replace(CURRENCY_CHAR, currency) // if we have 2 time the currency character, the second one is ignored
        .replace(CURRENCY_CHAR, '') // If there is a spacing between currency character and the value and
        // the currency character is supressed by passing an empty string, the
        // spacing character would remain as part of the string. Then we
        // should remove it.
        .trim();
      }
      /**
       * @ngModule CommonModule
       * @description
       *
       * Formats a number as a percentage according to locale rules.
       *
       * @param value The number to format.
       * @param locale A locale code for the locale format rules to use.
       * @param digitsInfo Decimal representation options, specified by a string in the following format:
       * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.
       *
       * @returns The formatted percentage value.
       *
       * @see `formatNumber()`
       * @see `DecimalPipe`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       * @publicApi
       *
       */


      function _formatPercent(value, locale, digitsInfo) {
        var format = _getLocaleNumberFormat(locale, _NumberFormatStyle.Percent);

        var pattern = parseNumberFormat(format, _getLocaleNumberSymbol(locale, _NumberSymbol.MinusSign));
        var res = formatNumberToLocaleString(value, pattern, locale, _NumberSymbol.Group, _NumberSymbol.Decimal, digitsInfo, true);
        return res.replace(new RegExp(PERCENT_CHAR, 'g'), _getLocaleNumberSymbol(locale, _NumberSymbol.PercentSign));
      }
      /**
       * @ngModule CommonModule
       * @description
       *
       * Formats a number as text, with group sizing, separator, and other
       * parameters based on the locale.
       *
       * @param value The number to format.
       * @param locale A locale code for the locale format rules to use.
       * @param digitsInfo Decimal representation options, specified by a string in the following format:
       * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.
       *
       * @returns The formatted text string.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       *
       * @publicApi
       */


      function _formatNumber(value, locale, digitsInfo) {
        var format = _getLocaleNumberFormat(locale, _NumberFormatStyle.Decimal);

        var pattern = parseNumberFormat(format, _getLocaleNumberSymbol(locale, _NumberSymbol.MinusSign));
        return formatNumberToLocaleString(value, pattern, locale, _NumberSymbol.Group, _NumberSymbol.Decimal, digitsInfo);
      }

      function parseNumberFormat(format) {
        var minusSign = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';
        var p = {
          minInt: 1,
          minFrac: 0,
          maxFrac: 0,
          posPre: '',
          posSuf: '',
          negPre: '',
          negSuf: '',
          gSize: 0,
          lgSize: 0
        };
        var patternParts = format.split(PATTERN_SEP);
        var positive = patternParts[0];
        var negative = patternParts[1];
        var positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ? positive.split(DECIMAL_SEP) : [positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1), positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)],
            integer = positiveParts[0],
            fraction = positiveParts[1] || '';
        p.posPre = integer.substr(0, integer.indexOf(DIGIT_CHAR));

        for (var i = 0; i < fraction.length; i++) {
          var ch = fraction.charAt(i);

          if (ch === ZERO_CHAR) {
            p.minFrac = p.maxFrac = i + 1;
          } else if (ch === DIGIT_CHAR) {
            p.maxFrac = i + 1;
          } else {
            p.posSuf += ch;
          }
        }

        var groups = integer.split(GROUP_SEP);
        p.gSize = groups[1] ? groups[1].length : 0;
        p.lgSize = groups[2] || groups[1] ? (groups[2] || groups[1]).length : 0;

        if (negative) {
          var trunkLen = positive.length - p.posPre.length - p.posSuf.length,
              pos = negative.indexOf(DIGIT_CHAR);
          p.negPre = negative.substr(0, pos).replace(/'/g, '');
          p.negSuf = negative.substr(pos + trunkLen).replace(/'/g, '');
        } else {
          p.negPre = minusSign + p.posPre;
          p.negSuf = p.posSuf;
        }

        return p;
      } // Transforms a parsed number into a percentage by multiplying it by 100


      function toPercent(parsedNumber) {
        // if the number is 0, don't do anything
        if (parsedNumber.digits[0] === 0) {
          return parsedNumber;
        } // Getting the current number of decimals


        var fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;

        if (parsedNumber.exponent) {
          parsedNumber.exponent += 2;
        } else {
          if (fractionLen === 0) {
            parsedNumber.digits.push(0, 0);
          } else if (fractionLen === 1) {
            parsedNumber.digits.push(0);
          }

          parsedNumber.integerLen += 2;
        }

        return parsedNumber;
      }
      /**
       * Parses a number.
       * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/
       */


      function parseNumber(num) {
        var numStr = Math.abs(num) + '';
        var exponent = 0,
            digits,
            integerLen;
        var i, j, zeros; // Decimal point?

        if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {
          numStr = numStr.replace(DECIMAL_SEP, '');
        } // Exponential form?


        if ((i = numStr.search(/e/i)) > 0) {
          // Work out the exponent.
          if (integerLen < 0) integerLen = i;
          integerLen += +numStr.slice(i + 1);
          numStr = numStr.substring(0, i);
        } else if (integerLen < 0) {
          // There was no decimal point or exponent so it is an integer.
          integerLen = numStr.length;
        } // Count the number of leading zeros.


        for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) {
          /* empty */
        }

        if (i === (zeros = numStr.length)) {
          // The digits are all zero.
          digits = [0];
          integerLen = 1;
        } else {
          // Count the number of trailing zeros
          zeros--;

          while (numStr.charAt(zeros) === ZERO_CHAR) {
            zeros--;
          } // Trailing zeros are insignificant so ignore them


          integerLen -= i;
          digits = []; // Convert string to array of digits without leading/trailing zeros.

          for (j = 0; i <= zeros; i++, j++) {
            digits[j] = Number(numStr.charAt(i));
          }
        } // If the number overflows the maximum allowed digits then use an exponent.


        if (integerLen > MAX_DIGITS) {
          digits = digits.splice(0, MAX_DIGITS - 1);
          exponent = integerLen - 1;
          integerLen = 1;
        }

        return {
          digits: digits,
          exponent: exponent,
          integerLen: integerLen
        };
      }
      /**
       * Round the parsed number to the specified number of decimal places
       * This function changes the parsedNumber in-place
       */


      function roundNumber(parsedNumber, minFrac, maxFrac) {
        if (minFrac > maxFrac) {
          throw new Error("The minimum number of digits after fraction (".concat(minFrac, ") is higher than the maximum (").concat(maxFrac, ")."));
        }

        var digits = parsedNumber.digits;
        var fractionLen = digits.length - parsedNumber.integerLen;
        var fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac); // The index of the digit to where rounding is to occur

        var roundAt = fractionSize + parsedNumber.integerLen;
        var digit = digits[roundAt];

        if (roundAt > 0) {
          // Drop fractional digits beyond `roundAt`
          digits.splice(Math.max(parsedNumber.integerLen, roundAt)); // Set non-fractional digits beyond `roundAt` to 0

          for (var j = roundAt; j < digits.length; j++) {
            digits[j] = 0;
          }
        } else {
          // We rounded to zero so reset the parsedNumber
          fractionLen = Math.max(0, fractionLen);
          parsedNumber.integerLen = 1;
          digits.length = Math.max(1, roundAt = fractionSize + 1);
          digits[0] = 0;

          for (var i = 1; i < roundAt; i++) {
            digits[i] = 0;
          }
        }

        if (digit >= 5) {
          if (roundAt - 1 < 0) {
            for (var k = 0; k > roundAt; k--) {
              digits.unshift(0);
              parsedNumber.integerLen++;
            }

            digits.unshift(1);
            parsedNumber.integerLen++;
          } else {
            digits[roundAt - 1]++;
          }
        } // Pad out with zeros to get the required fraction length


        for (; fractionLen < Math.max(0, fractionSize); fractionLen++) {
          digits.push(0);
        }

        var dropTrailingZeros = fractionSize !== 0; // Minimal length = nb of decimals required + current nb of integers
        // Any number besides that is optional and can be removed if it's a trailing 0

        var minLen = minFrac + parsedNumber.integerLen; // Do any carrying, e.g. a digit was rounded up to 10

        var carry = digits.reduceRight(function (carry, d, i, digits) {
          d = d + carry;
          digits[i] = d < 10 ? d : d - 10; // d % 10

          if (dropTrailingZeros) {
            // Do not keep meaningless fractional trailing zeros (e.g. 15.52000 --> 15.52)
            if (digits[i] === 0 && i >= minLen) {
              digits.pop();
            } else {
              dropTrailingZeros = false;
            }
          }

          return d >= 10 ? 1 : 0; // Math.floor(d / 10);
        }, 0);

        if (carry) {
          digits.unshift(carry);
          parsedNumber.integerLen++;
        }
      }

      function parseIntAutoRadix(text) {
        var result = parseInt(text);

        if (isNaN(result)) {
          throw new Error('Invalid integer literal when parsing ' + text);
        }

        return result;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @publicApi
       */


      var _NgLocalization = function _NgLocalization() {
        _classCallCheck2(this, _NgLocalization);
      };
      /**
       * Returns the plural category for a given value.
       * - "=value" when the case exists,
       * - the plural category otherwise
       */


      function getPluralCategory(value, cases, ngLocalization, locale) {
        var key = "=".concat(value);

        if (cases.indexOf(key) > -1) {
          return key;
        }

        key = ngLocalization.getPluralCategory(value, locale);

        if (cases.indexOf(key) > -1) {
          return key;
        }

        if (cases.indexOf('other') > -1) {
          return 'other';
        }

        throw new Error("No plural message found for value \"".concat(value, "\""));
      }
      /**
       * Returns the plural case based on the locale
       *
       * @publicApi
       */


      var _NgLocaleLocalization = /*#__PURE__*/function (_NgLocalization2) {
        _inherits(_NgLocaleLocalization, _NgLocalization2);

        var _super7 = _createSuper(_NgLocaleLocalization);

        function _NgLocaleLocalization(locale) {
          var _this60;

          _classCallCheck2(this, _NgLocaleLocalization);

          _this60 = _super7.call(this);
          _this60.locale = locale;
          return _this60;
        }

        _createClass2(_NgLocaleLocalization, [{
          key: "getPluralCategory",
          value: function getPluralCategory(value, locale) {
            var plural = _getLocalePluralCase(locale || this.locale)(value);

            switch (plural) {
              case _Plural.Zero:
                return 'zero';

              case _Plural.One:
                return 'one';

              case _Plural.Two:
                return 'two';

              case _Plural.Few:
                return 'few';

              case _Plural.Many:
                return 'many';

              default:
                return 'other';
            }
          }
        }]);

        return _NgLocaleLocalization;
      }(_NgLocalization);

      _NgLocaleLocalization.ɵfac = function NgLocaleLocalization_Factory(t) {
        return new (t || _NgLocaleLocalization)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID));
      };

      _NgLocaleLocalization.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: _NgLocaleLocalization,
        factory: _NgLocaleLocalization.ɵfac
      });

      _NgLocaleLocalization.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_NgLocaleLocalization, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Register global data to be used internally by Angular. See the
       * ["I18n guide"](guide/i18n#i18n-pipes) to know how to import additional locale data.
       *
       * The signature registerLocaleData(data: any, extraData?: any) is deprecated since v5.1
       *
       * @publicApi
       */


      function _registerLocaleData(data, localeId, extraData) {
        return (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵregisterLocaleData"])(data, localeId, extraData);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function parseCookieValue(cookieStr, name) {
        name = encodeURIComponent(name);

        var _iterator2 = _createForOfIteratorHelper(cookieStr.split(';')),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var cookie = _step2.value;
            var eqIndex = cookie.indexOf('=');

            var _ref2 = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)],
                _ref3 = _slicedToArray(_ref2, 2),
                cookieName = _ref3[0],
                cookieValue = _ref3[1];

            if (cookieName.trim() === name) {
              return decodeURIComponent(cookieValue);
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return null;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @ngModule CommonModule
       *
       * @usageNotes
       * ```
       *     <some-element [ngClass]="'first second'">...</some-element>
       *
       *     <some-element [ngClass]="['first', 'second']">...</some-element>
       *
       *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
       *
       *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
       *
       *     <some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>
       * ```
       *
       * @description
       *
       * Adds and removes CSS classes on an HTML element.
       *
       * The CSS classes are updated as follows, depending on the type of the expression evaluation:
       * - `string` - the CSS classes listed in the string (space delimited) are added,
       * - `Array` - the CSS classes declared as Array elements are added,
       * - `Object` - keys are CSS classes that get added when the expression given in the value
       *              evaluates to a truthy value, otherwise they are removed.
       *
       * @publicApi
       */


      var _NgClass = /*#__PURE__*/function () {
        function _NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
          _classCallCheck2(this, _NgClass);

          this._iterableDiffers = _iterableDiffers;
          this._keyValueDiffers = _keyValueDiffers;
          this._ngEl = _ngEl;
          this._renderer = _renderer;
          this._iterableDiffer = null;
          this._keyValueDiffer = null;
          this._initialClasses = [];
          this._rawClass = null;
        }

        _createClass2(_NgClass, [{
          key: "klass",
          set: function set(value) {
            this._removeClasses(this._initialClasses);

            this._initialClasses = typeof value === 'string' ? value.split(/\s+/) : [];

            this._applyClasses(this._initialClasses);

            this._applyClasses(this._rawClass);
          }
        }, {
          key: "ngClass",
          set: function set(value) {
            this._removeClasses(this._rawClass);

            this._applyClasses(this._initialClasses);

            this._iterableDiffer = null;
            this._keyValueDiffer = null;
            this._rawClass = typeof value === 'string' ? value.split(/\s+/) : value;

            if (this._rawClass) {
              if ((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisListLikeIterable"])(this._rawClass)) {
                this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();
              } else {
                this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();
              }
            }
          }
        }, {
          key: "ngDoCheck",
          value: function ngDoCheck() {
            if (this._iterableDiffer) {
              var iterableChanges = this._iterableDiffer.diff(this._rawClass);

              if (iterableChanges) {
                this._applyIterableChanges(iterableChanges);
              }
            } else if (this._keyValueDiffer) {
              var keyValueChanges = this._keyValueDiffer.diff(this._rawClass);

              if (keyValueChanges) {
                this._applyKeyValueChanges(keyValueChanges);
              }
            }
          }
        }, {
          key: "_applyKeyValueChanges",
          value: function _applyKeyValueChanges(changes) {
            var _this61 = this;

            changes.forEachAddedItem(function (record) {
              return _this61._toggleClass(record.key, record.currentValue);
            });
            changes.forEachChangedItem(function (record) {
              return _this61._toggleClass(record.key, record.currentValue);
            });
            changes.forEachRemovedItem(function (record) {
              if (record.previousValue) {
                _this61._toggleClass(record.key, false);
              }
            });
          }
        }, {
          key: "_applyIterableChanges",
          value: function _applyIterableChanges(changes) {
            var _this62 = this;

            changes.forEachAddedItem(function (record) {
              if (typeof record.item === 'string') {
                _this62._toggleClass(record.item, true);
              } else {
                throw new Error("NgClass can only toggle CSS classes expressed as strings, got ".concat((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵstringify"])(record.item)));
              }
            });
            changes.forEachRemovedItem(function (record) {
              return _this62._toggleClass(record.item, false);
            });
          }
          /**
           * Applies a collection of CSS classes to the DOM element.
           *
           * For argument of type Set and Array CSS class names contained in those collections are always
           * added.
           * For argument of type Map CSS class name in the map's key is toggled based on the value (added
           * for truthy and removed for falsy).
           */

        }, {
          key: "_applyClasses",
          value: function _applyClasses(rawClassVal) {
            var _this63 = this;

            if (rawClassVal) {
              if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
                rawClassVal.forEach(function (klass) {
                  return _this63._toggleClass(klass, true);
                });
              } else {
                Object.keys(rawClassVal).forEach(function (klass) {
                  return _this63._toggleClass(klass, !!rawClassVal[klass]);
                });
              }
            }
          }
          /**
           * Removes a collection of CSS classes from the DOM element. This is mostly useful for cleanup
           * purposes.
           */

        }, {
          key: "_removeClasses",
          value: function _removeClasses(rawClassVal) {
            var _this64 = this;

            if (rawClassVal) {
              if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
                rawClassVal.forEach(function (klass) {
                  return _this64._toggleClass(klass, false);
                });
              } else {
                Object.keys(rawClassVal).forEach(function (klass) {
                  return _this64._toggleClass(klass, false);
                });
              }
            }
          }
        }, {
          key: "_toggleClass",
          value: function _toggleClass(klass, enabled) {
            var _this65 = this;

            klass = klass.trim();

            if (klass) {
              klass.split(/\s+/g).forEach(function (klass) {
                if (enabled) {
                  _this65._renderer.addClass(_this65._ngEl.nativeElement, klass);
                } else {
                  _this65._renderer.removeClass(_this65._ngEl.nativeElement, klass);
                }
              });
            }
          }
        }]);

        return _NgClass;
      }();

      _NgClass.ɵfac = function NgClass_Factory(t) {
        return new (t || _NgClass)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.IterableDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.KeyValueDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2));
      };

      _NgClass.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _NgClass,
        selectors: [["", "ngClass", ""]],
        inputs: {
          klass: ["class", "klass"],
          ngClass: "ngClass"
        }
      });

      _NgClass.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.IterableDiffers
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.KeyValueDiffers
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
        }];
      };

      _NgClass.propDecorators = {
        klass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
          args: ['class']
        }],
        ngClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
          args: ['ngClass']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_NgClass, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[ngClass]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.IterableDiffers
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.KeyValueDiffers
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
          }];
        }, {
          klass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
            args: ['class']
          }],
          ngClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
            args: ['ngClass']
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Instantiates a single {@link Component} type and inserts its Host View into current View.
       * `NgComponentOutlet` provides a declarative approach for dynamic component creation.
       *
       * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and
       * any existing component will get destroyed.
       *
       * @usageNotes
       *
       * ### Fine tune control
       *
       * You can control the component creation process by using the following optional attributes:
       *
       * * `ngComponentOutletInjector`: Optional custom {@link Injector} that will be used as parent for
       * the Component. Defaults to the injector of the current view container.
       *
       * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content
       * section of the component, if exists.
       *
       * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other
       * module, then load a component from that module.
       *
       * ### Syntax
       *
       * Simple
       * ```
       * <ng-container *ngComponentOutlet="componentTypeExpression"></ng-container>
       * ```
       *
       * Customized injector/content
       * ```
       * <ng-container *ngComponentOutlet="componentTypeExpression;
       *                                   injector: injectorExpression;
       *                                   content: contentNodesExpression;">
       * </ng-container>
       * ```
       *
       * Customized ngModuleFactory
       * ```
       * <ng-container *ngComponentOutlet="componentTypeExpression;
       *                                   ngModuleFactory: moduleFactory;">
       * </ng-container>
       * ```
       *
       * ### A simple example
       *
       * {@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}
       *
       * A more complete example with additional options:
       *
       * {@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}
       *
       * @publicApi
       * @ngModule CommonModule
       */


      var _NgComponentOutlet = /*#__PURE__*/function () {
        function _NgComponentOutlet(_viewContainerRef) {
          _classCallCheck2(this, _NgComponentOutlet);

          this._viewContainerRef = _viewContainerRef;
          this._componentRef = null;
          this._moduleRef = null;
        }

        _createClass2(_NgComponentOutlet, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            this._viewContainerRef.clear();

            this._componentRef = null;

            if (this.ngComponentOutlet) {
              var elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;

              if (changes['ngComponentOutletNgModuleFactory']) {
                if (this._moduleRef) this._moduleRef.destroy();

                if (this.ngComponentOutletNgModuleFactory) {
                  var parentModule = elInjector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModuleRef);
                  this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);
                } else {
                  this._moduleRef = null;
                }
              }

              var componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver : elInjector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.ComponentFactoryResolver);
              var componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);
              this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this._moduleRef) this._moduleRef.destroy();
          }
        }]);

        return _NgComponentOutlet;
      }();

      _NgComponentOutlet.ɵfac = function NgComponentOutlet_Factory(t) {
        return new (t || _NgComponentOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef));
      };

      _NgComponentOutlet.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _NgComponentOutlet,
        selectors: [["", "ngComponentOutlet", ""]],
        inputs: {
          ngComponentOutlet: "ngComponentOutlet",
          ngComponentOutletInjector: "ngComponentOutletInjector",
          ngComponentOutletContent: "ngComponentOutletContent",
          ngComponentOutletNgModuleFactory: "ngComponentOutletNgModuleFactory"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });

      _NgComponentOutlet.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
        }];
      };

      _NgComponentOutlet.propDecorators = {
        ngComponentOutlet: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        ngComponentOutletInjector: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        ngComponentOutletContent: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        ngComponentOutletNgModuleFactory: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_NgComponentOutlet, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[ngComponentOutlet]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
          }];
        }, {
          ngComponentOutlet: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          ngComponentOutletInjector: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          ngComponentOutletContent: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          ngComponentOutletNgModuleFactory: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @publicApi
       */


      var _NgForOfContext = /*#__PURE__*/function () {
        function _NgForOfContext($implicit, ngForOf, index, count) {
          _classCallCheck2(this, _NgForOfContext);

          this.$implicit = $implicit;
          this.ngForOf = ngForOf;
          this.index = index;
          this.count = count;
        }

        _createClass2(_NgForOfContext, [{
          key: "first",
          get: function get() {
            return this.index === 0;
          }
        }, {
          key: "last",
          get: function get() {
            return this.index === this.count - 1;
          }
        }, {
          key: "even",
          get: function get() {
            return this.index % 2 === 0;
          }
        }, {
          key: "odd",
          get: function get() {
            return !this.even;
          }
        }]);

        return _NgForOfContext;
      }();
      /**
       * A [structural directive](guide/structural-directives) that renders
       * a template for each item in a collection.
       * The directive is placed on an element, which becomes the parent
       * of the cloned templates.
       *
       * The `ngForOf` directive is generally used in the
       * [shorthand form](guide/structural-directives#asterisk) `*ngFor`.
       * In this form, the template to be rendered for each iteration is the content
       * of an anchor element containing the directive.
       *
       * The following example shows the shorthand syntax with some options,
       * contained in an `<li>` element.
       *
       * ```
       * <li *ngFor="let item of items; index as i; trackBy: trackByFn">...</li>
       * ```
       *
       * The shorthand form expands into a long form that uses the `ngForOf` selector
       * on an `<ng-template>` element.
       * The content of the `<ng-template>` element is the `<li>` element that held the
       * short-form directive.
       *
       * Here is the expanded version of the short-form example.
       *
       * ```
       * <ng-template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
       *   <li>...</li>
       * </ng-template>
       * ```
       *
       * Angular automatically expands the shorthand syntax as it compiles the template.
       * The context for each embedded view is logically merged to the current component
       * context according to its lexical position.
       *
       * When using the shorthand syntax, Angular allows only [one structural directive
       * on an element](guide/built-in-directives#one-per-element).
       * If you want to iterate conditionally, for example,
       * put the `*ngIf` on a container element that wraps the `*ngFor` element.
       * For futher discussion, see
       * [Structural Directives](guide/built-in-directives#one-per-element).
       *
       * @usageNotes
       *
       * ### Local variables
       *
       * `NgForOf` provides exported values that can be aliased to local variables.
       * For example:
       *
       *  ```
       * <li *ngFor="let user of users; index as i; first as isFirst">
       *    {{i}}/{{users.length}}. {{user}} <span *ngIf="isFirst">default</span>
       * </li>
       * ```
       *
       * The following exported values can be aliased to local variables:
       *
       * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).
       * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is
       * more complex then a property access, for example when using the async pipe (`userStreams |
       * async`).
       * - `index: number`: The index of the current item in the iterable.
       * - `count: number`: The length of the iterable.
       * - `first: boolean`: True when the item is the first item in the iterable.
       * - `last: boolean`: True when the item is the last item in the iterable.
       * - `even: boolean`: True when the item has an even index in the iterable.
       * - `odd: boolean`: True when the item has an odd index in the iterable.
       *
       * ### Change propagation
       *
       * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:
       *
       * * When an item is added, a new instance of the template is added to the DOM.
       * * When an item is removed, its template instance is removed from the DOM.
       * * When items are reordered, their respective templates are reordered in the DOM.
       *
       * Angular uses object identity to track insertions and deletions within the iterator and reproduce
       * those changes in the DOM. This has important implications for animations and any stateful
       * controls that are present, such as `<input>` elements that accept user input. Inserted rows can
       * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state
       * such as user input.
       * For more on animations, see [Transitions and Triggers](guide/transition-and-triggers).
       *
       * The identities of elements in the iterator can change while the data does not.
       * This can happen, for example, if the iterator is produced from an RPC to the server, and that
       * RPC is re-run. Even if the data hasn't changed, the second response produces objects with
       * different identities, and Angular must tear down the entire DOM and rebuild it (as if all old
       * elements were deleted and all new elements inserted).
       *
       * To avoid this expensive operation, you can customize the default tracking algorithm.
       * by supplying the `trackBy` option to `NgForOf`.
       * `trackBy` takes a function that has two arguments: `index` and `item`.
       * If `trackBy` is given, Angular tracks changes by the return value of the function.
       *
       * @see [Structural Directives](guide/structural-directives)
       * @ngModule CommonModule
       * @publicApi
       */


      var _NgForOf = /*#__PURE__*/function () {
        function _NgForOf(_viewContainer, _template, _differs) {
          _classCallCheck2(this, _NgForOf);

          this._viewContainer = _viewContainer;
          this._template = _template;
          this._differs = _differs;
          this._ngForOf = null;
          this._ngForOfDirty = true;
          this._differ = null;
        }
        /**
         * The value of the iterable expression, which can be used as a
         * [template input variable](guide/structural-directives#shorthand).
         */


        _createClass2(_NgForOf, [{
          key: "ngForOf",
          set: function set(ngForOf) {
            this._ngForOf = ngForOf;
            this._ngForOfDirty = true;
          }
          /**
           * Specifies a custom `TrackByFunction` to compute the identity of items in an iterable.
           *
           * If a custom `TrackByFunction` is not provided, `NgForOf` will use the item's [object
           * identity](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)
           * as the key.
           *
           * `NgForOf` uses the computed key to associate items in an iterable with DOM elements
           * it produces for these items.
           *
           * A custom `TrackByFunction` is useful to provide good user experience in cases when items in an
           * iterable rendered using `NgForOf` have a natural identifier (for example, custom ID or a
           * primary key), and this iterable could be updated with new object instances that still
           * represent the same underlying entity (for example, when data is re-fetched from the server,
           * and the iterable is recreated and re-rendered, but most of the data is still the same).
           *
           * @see `TrackByFunction`
           */

        }, {
          key: "ngForTrackBy",
          get: function get() {
            return this._trackByFn;
          }
          /**
           * A reference to the template that is stamped out for each item in the iterable.
           * @see [template reference variable](guide/template-reference-variables)
           */
          ,
          set: function set(fn) {
            if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {
              // TODO(vicb): use a log service once there is a public one available
              if (console && console.warn) {
                console.warn("trackBy must be a function, but received ".concat(JSON.stringify(fn), ". ") + "See https://angular.io/api/common/NgForOf#change-propagation for more information.");
              }
            }

            this._trackByFn = fn;
          }
        }, {
          key: "ngForTemplate",
          set: function set(value) {
            // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1
            // The current type is too restrictive; a template that just uses index, for example,
            // should be acceptable.
            if (value) {
              this._template = value;
            }
          }
          /**
           * Applies the changes when needed.
           */

        }, {
          key: "ngDoCheck",
          value: function ngDoCheck() {
            if (this._ngForOfDirty) {
              this._ngForOfDirty = false; // React on ngForOf changes only once all inputs have been initialized

              var value = this._ngForOf;

              if (!this._differ && value) {
                try {
                  this._differ = this._differs.find(value).create(this.ngForTrackBy);
                } catch (_a) {
                  throw new Error("Cannot find a differ supporting object '".concat(value, "' of type '").concat(getTypeName(value), "'. NgFor only supports binding to Iterables such as Arrays."));
                }
              }
            }

            if (this._differ) {
              var changes = this._differ.diff(this._ngForOf);

              if (changes) this._applyChanges(changes);
            }
          }
        }, {
          key: "_applyChanges",
          value: function _applyChanges(changes) {
            var _this66 = this;

            var insertTuples = [];
            changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
              if (item.previousIndex == null) {
                // NgForOf is never "null" or "undefined" here because the differ detected
                // that a new item needs to be inserted from the iterable. This implies that
                // there is an iterable value for "_ngForOf".
                var view = _this66._viewContainer.createEmbeddedView(_this66._template, new _NgForOfContext(null, _this66._ngForOf, -1, -1), currentIndex === null ? undefined : currentIndex);

                var tuple = new RecordViewTuple(item, view);
                insertTuples.push(tuple);
              } else if (currentIndex == null) {
                _this66._viewContainer.remove(adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex);
              } else if (adjustedPreviousIndex !== null) {
                var _view2 = _this66._viewContainer.get(adjustedPreviousIndex);

                _this66._viewContainer.move(_view2, currentIndex);

                var _tuple = new RecordViewTuple(item, _view2);

                insertTuples.push(_tuple);
              }
            });

            for (var i = 0; i < insertTuples.length; i++) {
              this._perViewChange(insertTuples[i].view, insertTuples[i].record);
            }

            for (var _i8 = 0, ilen = this._viewContainer.length; _i8 < ilen; _i8++) {
              var viewRef = this._viewContainer.get(_i8);

              viewRef.context.index = _i8;
              viewRef.context.count = ilen;
              viewRef.context.ngForOf = this._ngForOf;
            }

            changes.forEachIdentityChange(function (record) {
              var viewRef = _this66._viewContainer.get(record.currentIndex);

              viewRef.context.$implicit = record.item;
            });
          }
        }, {
          key: "_perViewChange",
          value: function _perViewChange(view, record) {
            view.context.$implicit = record.item;
          }
          /**
           * Asserts the correct type of the context for the template that `NgForOf` will render.
           *
           * The presence of this method is a signal to the Ivy template type-check compiler that the
           * `NgForOf` structural directive renders its template with a specific context type.
           */

        }], [{
          key: "ngTemplateContextGuard",
          value: function ngTemplateContextGuard(dir, ctx) {
            return true;
          }
        }]);

        return _NgForOf;
      }();

      _NgForOf.ɵfac = function NgForOf_Factory(t) {
        return new (t || _NgForOf)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.IterableDiffers));
      };

      _NgForOf.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _NgForOf,
        selectors: [["", "ngFor", "", "ngForOf", ""]],
        inputs: {
          ngForOf: "ngForOf",
          ngForTrackBy: "ngForTrackBy",
          ngForTemplate: "ngForTemplate"
        }
      });

      _NgForOf.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.IterableDiffers
        }];
      };

      _NgForOf.propDecorators = {
        ngForOf: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        ngForTrackBy: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        ngForTemplate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_NgForOf, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[ngFor][ngForOf]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.IterableDiffers
          }];
        }, {
          ngForOf: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          ngForTrackBy: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          ngForTemplate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();

      var RecordViewTuple = function RecordViewTuple(record, view) {
        _classCallCheck2(this, RecordViewTuple);

        this.record = record;
        this.view = view;
      };

      function getTypeName(type) {
        return type['name'] || typeof type;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A structural directive that conditionally includes a template based on the value of
       * an expression coerced to Boolean.
       * When the expression evaluates to true, Angular renders the template
       * provided in a `then` clause, and when  false or null,
       * Angular renders the template provided in an optional `else` clause. The default
       * template for the `else` clause is blank.
       *
       * A [shorthand form](guide/structural-directives#asterisk) of the directive,
       * `*ngIf="condition"`, is generally used, provided
       * as an attribute of the anchor element for the inserted template.
       * Angular expands this into a more explicit version, in which the anchor element
       * is contained in an `<ng-template>` element.
       *
       * Simple form with shorthand syntax:
       *
       * ```
       * <div *ngIf="condition">Content to render when condition is true.</div>
       * ```
       *
       * Simple form with expanded syntax:
       *
       * ```
       * <ng-template [ngIf]="condition"><div>Content to render when condition is
       * true.</div></ng-template>
       * ```
       *
       * Form with an "else" block:
       *
       * ```
       * <div *ngIf="condition; else elseBlock">Content to render when condition is true.</div>
       * <ng-template #elseBlock>Content to render when condition is false.</ng-template>
       * ```
       *
       * Shorthand form with "then" and "else" blocks:
       *
       * ```
       * <div *ngIf="condition; then thenBlock else elseBlock"></div>
       * <ng-template #thenBlock>Content to render when condition is true.</ng-template>
       * <ng-template #elseBlock>Content to render when condition is false.</ng-template>
       * ```
       *
       * Form with storing the value locally:
       *
       * ```
       * <div *ngIf="condition as value; else elseBlock">{{value}}</div>
       * <ng-template #elseBlock>Content to render when value is null.</ng-template>
       * ```
       *
       * @usageNotes
       *
       * The `*ngIf` directive is most commonly used to conditionally show an inline template,
       * as seen in the following  example.
       * The default `else` template is blank.
       *
       * {@example common/ngIf/ts/module.ts region='NgIfSimple'}
       *
       * ### Showing an alternative template using `else`
       *
       * To display a template when `expression` evaluates to false, use an `else` template
       * binding as shown in the following example.
       * The `else` binding points to an `<ng-template>`  element labeled `#elseBlock`.
       * The template can be defined anywhere in the component view, but is typically placed right after
       * `ngIf` for readability.
       *
       * {@example common/ngIf/ts/module.ts region='NgIfElse'}
       *
       * ### Using an external `then` template
       *
       * In the previous example, the then-clause template is specified inline, as the content of the
       * tag that contains the `ngIf` directive. You can also specify a template that is defined
       * externally, by referencing a labeled `<ng-template>` element. When you do this, you can
       * change which template to use at runtime, as shown in the following example.
       *
       * {@example common/ngIf/ts/module.ts region='NgIfThenElse'}
       *
       * ### Storing a conditional result in a variable
       *
       * You might want to show a set of properties from the same object. If you are waiting
       * for asynchronous data, the object can be undefined.
       * In this case, you can use `ngIf` and store the result of the condition in a local
       * variable as shown in the following example.
       *
       * {@example common/ngIf/ts/module.ts region='NgIfAs'}
       *
       * This code uses only one `AsyncPipe`, so only one subscription is created.
       * The conditional statement stores the result of `userStream|async` in the local variable `user`.
       * You can then bind the local `user` repeatedly.
       *
       * The conditional displays the data only if `userStream` returns a value,
       * so you don't need to use the
       * safe-navigation-operator (`?.`)
       * to guard against null values when accessing properties.
       * You can display an alternative template while waiting for the data.
       *
       * ### Shorthand syntax
       *
       * The shorthand syntax `*ngIf` expands into two separate template specifications
       * for the "then" and "else" clauses. For example, consider the following shorthand statement,
       * that is meant to show a loading page while waiting for data to be loaded.
       *
       * ```
       * <div class="hero-list" *ngIf="heroes else loading">
       *  ...
       * </div>
       *
       * <ng-template #loading>
       *  <div>Loading...</div>
       * </ng-template>
       * ```
       *
       * You can see that the "else" clause references the `<ng-template>`
       * with the `#loading` label, and the template for the "then" clause
       * is provided as the content of the anchor element.
       *
       * However, when Angular expands the shorthand syntax, it creates
       * another `<ng-template>` tag, with `ngIf` and `ngIfElse` directives.
       * The anchor element containing the template for the "then" clause becomes
       * the content of this unlabeled `<ng-template>` tag.
       *
       * ```
       * <ng-template [ngIf]="heroes" [ngIfElse]="loading">
       *  <div class="hero-list">
       *   ...
       *  </div>
       * </ng-template>
       *
       * <ng-template #loading>
       *  <div>Loading...</div>
       * </ng-template>
       * ```
       *
       * The presence of the implicit template object has implications for the nesting of
       * structural directives. For more on this subject, see
       * [Structural Directives](https://angular.io/guide/built-in-directives#one-per-element).
       *
       * @ngModule CommonModule
       * @publicApi
       */


      var _NgIf = /*#__PURE__*/function () {
        function _NgIf(_viewContainer, templateRef) {
          _classCallCheck2(this, _NgIf);

          this._viewContainer = _viewContainer;
          this._context = new _NgIfContext();
          this._thenTemplateRef = null;
          this._elseTemplateRef = null;
          this._thenViewRef = null;
          this._elseViewRef = null;
          this._thenTemplateRef = templateRef;
        }
        /**
         * The Boolean expression to evaluate as the condition for showing a template.
         */


        _createClass2(_NgIf, [{
          key: "ngIf",
          set: function set(condition) {
            this._context.$implicit = this._context.ngIf = condition;

            this._updateView();
          }
          /**
           * A template to show if the condition expression evaluates to true.
           */

        }, {
          key: "ngIfThen",
          set: function set(templateRef) {
            assertTemplate('ngIfThen', templateRef);
            this._thenTemplateRef = templateRef;
            this._thenViewRef = null; // clear previous view if any.

            this._updateView();
          }
          /**
           * A template to show if the condition expression evaluates to false.
           */

        }, {
          key: "ngIfElse",
          set: function set(templateRef) {
            assertTemplate('ngIfElse', templateRef);
            this._elseTemplateRef = templateRef;
            this._elseViewRef = null; // clear previous view if any.

            this._updateView();
          }
        }, {
          key: "_updateView",
          value: function _updateView() {
            if (this._context.$implicit) {
              if (!this._thenViewRef) {
                this._viewContainer.clear();

                this._elseViewRef = null;

                if (this._thenTemplateRef) {
                  this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
                }
              }
            } else {
              if (!this._elseViewRef) {
                this._viewContainer.clear();

                this._thenViewRef = null;

                if (this._elseTemplateRef) {
                  this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
                }
              }
            }
          }
          /**
           * Asserts the correct type of the context for the template that `NgIf` will render.
           *
           * The presence of this method is a signal to the Ivy template type-check compiler that the
           * `NgIf` structural directive renders its template with a specific context type.
           */

        }], [{
          key: "ngTemplateContextGuard",
          value: function ngTemplateContextGuard(dir, ctx) {
            return true;
          }
        }]);

        return _NgIf;
      }();

      _NgIf.ɵfac = function NgIf_Factory(t) {
        return new (t || _NgIf)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef));
      };

      _NgIf.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _NgIf,
        selectors: [["", "ngIf", ""]],
        inputs: {
          ngIf: "ngIf",
          ngIfThen: "ngIfThen",
          ngIfElse: "ngIfElse"
        }
      });

      _NgIf.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
        }];
      };

      _NgIf.propDecorators = {
        ngIf: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        ngIfThen: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        ngIfElse: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_NgIf, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[ngIf]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
          }];
        }, {
          ngIf: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          ngIfThen: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          ngIfElse: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();
      /**
       * @publicApi
       */


      var _NgIfContext = function _NgIfContext() {
        _classCallCheck2(this, _NgIfContext);

        this.$implicit = null;
        this.ngIf = null;
      };

      function assertTemplate(property, templateRef) {
        var isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);

        if (!isTemplateRefOrNull) {
          throw new Error("".concat(property, " must be a TemplateRef, but received '").concat((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵstringify"])(templateRef), "'."));
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SwitchView = /*#__PURE__*/function () {
        function SwitchView(_viewContainerRef, _templateRef) {
          _classCallCheck2(this, SwitchView);

          this._viewContainerRef = _viewContainerRef;
          this._templateRef = _templateRef;
          this._created = false;
        }

        _createClass2(SwitchView, [{
          key: "create",
          value: function create() {
            this._created = true;

            this._viewContainerRef.createEmbeddedView(this._templateRef);
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this._created = false;

            this._viewContainerRef.clear();
          }
        }, {
          key: "enforceState",
          value: function enforceState(created) {
            if (created && !this._created) {
              this.create();
            } else if (!created && this._created) {
              this.destroy();
            }
          }
        }]);

        return SwitchView;
      }();
      /**
       * @ngModule CommonModule
       *
       * @description
       * The `[ngSwitch]` directive on a container specifies an expression to match against.
       * The expressions to match are provided by `ngSwitchCase` directives on views within the container.
       * - Every view that matches is rendered.
       * - If there are no matches, a view with the `ngSwitchDefault` directive is rendered.
       * - Elements within the `[NgSwitch]` statement but outside of any `NgSwitchCase`
       * or `ngSwitchDefault` directive are preserved at the location.
       *
       * @usageNotes
       * Define a container element for the directive, and specify the switch expression
       * to match against as an attribute:
       *
       * ```
       * <container-element [ngSwitch]="switch_expression">
       * ```
       *
       * Within the container, `*ngSwitchCase` statements specify the match expressions
       * as attributes. Include `*ngSwitchDefault` as the final case.
       *
       * ```
       * <container-element [ngSwitch]="switch_expression">
       *    <some-element *ngSwitchCase="match_expression_1">...</some-element>
       * ...
       *    <some-element *ngSwitchDefault>...</some-element>
       * </container-element>
       * ```
       *
       * ### Usage Examples
       *
       * The following example shows how to use more than one case to display the same view:
       *
       * ```
       * <container-element [ngSwitch]="switch_expression">
       *   <!-- the same view can be shown in more than one case -->
       *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
       *   <some-element *ngSwitchCase="match_expression_2">...</some-element>
       *   <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
       *   <!--default case when there are no matches -->
       *   <some-element *ngSwitchDefault>...</some-element>
       * </container-element>
       * ```
       *
       * The following example shows how cases can be nested:
       * ```
       * <container-element [ngSwitch]="switch_expression">
       *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
       *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
       *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
       *       <ng-container *ngSwitchCase="match_expression_3">
       *         <!-- use a ng-container to group multiple root nodes -->
       *         <inner-element></inner-element>
       *         <inner-other-element></inner-other-element>
       *       </ng-container>
       *       <some-element *ngSwitchDefault>...</some-element>
       *     </container-element>
       * ```
       *
       * @publicApi
       * @see `NgSwitchCase`
       * @see `NgSwitchDefault`
       * @see [Structural Directives](guide/structural-directives)
       *
       */


      var _NgSwitch = /*#__PURE__*/function () {
        function _NgSwitch() {
          _classCallCheck2(this, _NgSwitch);

          this._defaultUsed = false;
          this._caseCount = 0;
          this._lastCaseCheckIndex = 0;
          this._lastCasesMatched = false;
        }

        _createClass2(_NgSwitch, [{
          key: "ngSwitch",
          set: function set(newValue) {
            this._ngSwitch = newValue;

            if (this._caseCount === 0) {
              this._updateDefaultCases(true);
            }
          }
          /** @internal */

        }, {
          key: "_addCase",
          value: function _addCase() {
            return this._caseCount++;
          }
          /** @internal */

        }, {
          key: "_addDefault",
          value: function _addDefault(view) {
            if (!this._defaultViews) {
              this._defaultViews = [];
            }

            this._defaultViews.push(view);
          }
          /** @internal */

        }, {
          key: "_matchCase",
          value: function _matchCase(value) {
            var matched = value == this._ngSwitch;
            this._lastCasesMatched = this._lastCasesMatched || matched;
            this._lastCaseCheckIndex++;

            if (this._lastCaseCheckIndex === this._caseCount) {
              this._updateDefaultCases(!this._lastCasesMatched);

              this._lastCaseCheckIndex = 0;
              this._lastCasesMatched = false;
            }

            return matched;
          }
        }, {
          key: "_updateDefaultCases",
          value: function _updateDefaultCases(useDefault) {
            if (this._defaultViews && useDefault !== this._defaultUsed) {
              this._defaultUsed = useDefault;

              for (var i = 0; i < this._defaultViews.length; i++) {
                var defaultView = this._defaultViews[i];
                defaultView.enforceState(useDefault);
              }
            }
          }
        }]);

        return _NgSwitch;
      }();

      _NgSwitch.ɵfac = function NgSwitch_Factory(t) {
        return new (t || _NgSwitch)();
      };

      _NgSwitch.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _NgSwitch,
        selectors: [["", "ngSwitch", ""]],
        inputs: {
          ngSwitch: "ngSwitch"
        }
      });
      _NgSwitch.propDecorators = {
        ngSwitch: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_NgSwitch, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[ngSwitch]'
          }]
        }], function () {
          return [];
        }, {
          ngSwitch: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();
      /**
       * @ngModule CommonModule
       *
       * @description
       * Provides a switch case expression to match against an enclosing `ngSwitch` expression.
       * When the expressions match, the given `NgSwitchCase` template is rendered.
       * If multiple match expressions match the switch expression value, all of them are displayed.
       *
       * @usageNotes
       *
       * Within a switch container, `*ngSwitchCase` statements specify the match expressions
       * as attributes. Include `*ngSwitchDefault` as the final case.
       *
       * ```
       * <container-element [ngSwitch]="switch_expression">
       *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
       *   ...
       *   <some-element *ngSwitchDefault>...</some-element>
       * </container-element>
       * ```
       *
       * Each switch-case statement contains an in-line HTML template or template reference
       * that defines the subtree to be selected if the value of the match expression
       * matches the value of the switch expression.
       *
       * Unlike JavaScript, which uses strict equality, Angular uses loose equality.
       * This means that the empty string, `""` matches 0.
       *
       * @publicApi
       * @see `NgSwitch`
       * @see `NgSwitchDefault`
       *
       */


      var _NgSwitchCase = /*#__PURE__*/function () {
        function _NgSwitchCase(viewContainer, templateRef, ngSwitch) {
          _classCallCheck2(this, _NgSwitchCase);

          this.ngSwitch = ngSwitch;

          if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ngSwitch) {
            throwNgSwitchProviderNotFoundError('ngSwitchCase', 'NgSwitchCase');
          }

          ngSwitch._addCase();

          this._view = new SwitchView(viewContainer, templateRef);
        }
        /**
         * Performs case matching. For internal use only.
         */


        _createClass2(_NgSwitchCase, [{
          key: "ngDoCheck",
          value: function ngDoCheck() {
            this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
          }
        }]);

        return _NgSwitchCase;
      }();

      _NgSwitchCase.ɵfac = function NgSwitchCase_Factory(t) {
        return new (t || _NgSwitchCase)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_NgSwitch, 9));
      };

      _NgSwitchCase.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _NgSwitchCase,
        selectors: [["", "ngSwitchCase", ""]],
        inputs: {
          ngSwitchCase: "ngSwitchCase"
        }
      });

      _NgSwitchCase.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
        }, {
          type: _NgSwitch,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Host
          }]
        }];
      };

      _NgSwitchCase.propDecorators = {
        ngSwitchCase: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_NgSwitchCase, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[ngSwitchCase]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
          }, {
            type: _NgSwitch,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Host
            }]
          }];
        }, {
          ngSwitchCase: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();
      /**
       * @ngModule CommonModule
       *
       * @description
       *
       * Creates a view that is rendered when no `NgSwitchCase` expressions
       * match the `NgSwitch` expression.
       * This statement should be the final case in an `NgSwitch`.
       *
       * @publicApi
       * @see `NgSwitch`
       * @see `NgSwitchCase`
       *
       */


      var _NgSwitchDefault = function _NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
        _classCallCheck2(this, _NgSwitchDefault);

        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ngSwitch) {
          throwNgSwitchProviderNotFoundError('ngSwitchDefault', 'NgSwitchDefault');
        }

        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
      };

      _NgSwitchDefault.ɵfac = function NgSwitchDefault_Factory(t) {
        return new (t || _NgSwitchDefault)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_NgSwitch, 9));
      };

      _NgSwitchDefault.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _NgSwitchDefault,
        selectors: [["", "ngSwitchDefault", ""]]
      });

      _NgSwitchDefault.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
        }, {
          type: _NgSwitch,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Host
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_NgSwitchDefault, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[ngSwitchDefault]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
          }, {
            type: _NgSwitch,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Host
            }]
          }];
        }, null);
      })();

      function throwNgSwitchProviderNotFoundError(attrName, directiveName) {
        throw new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"]("305"
        /* TEMPLATE_STRUCTURE_ERROR */
        , "An element with the \"".concat(attrName, "\" attribute ") + "(matching the \"".concat(directiveName, "\" directive) must be located inside an element with the \"ngSwitch\" attribute ") + "(matching \"NgSwitch\" directive)");
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @ngModule CommonModule
       *
       * @usageNotes
       * ```
       * <some-element [ngPlural]="value">
       *   <ng-template ngPluralCase="=0">there is nothing</ng-template>
       *   <ng-template ngPluralCase="=1">there is one</ng-template>
       *   <ng-template ngPluralCase="few">there are a few</ng-template>
       * </some-element>
       * ```
       *
       * @description
       *
       * Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
       *
       * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
       * that match the switch expression's pluralization category.
       *
       * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
       * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
       * expression:
       * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
       *   matches the switch expression exactly,
       * - otherwise, the view will be treated as a "category match", and will only display if exact
       *   value matches aren't found and the value maps to its category for the defined locale.
       *
       * See http://cldr.unicode.org/index/cldr-spec/plural-rules
       *
       * @publicApi
       */


      var _NgPlural = /*#__PURE__*/function () {
        function _NgPlural(_localization) {
          _classCallCheck2(this, _NgPlural);

          this._localization = _localization;
          this._caseViews = {};
        }

        _createClass2(_NgPlural, [{
          key: "ngPlural",
          set: function set(value) {
            this._switchValue = value;

            this._updateView();
          }
        }, {
          key: "addCase",
          value: function addCase(value, switchView) {
            this._caseViews[value] = switchView;
          }
        }, {
          key: "_updateView",
          value: function _updateView() {
            this._clearViews();

            var cases = Object.keys(this._caseViews);
            var key = getPluralCategory(this._switchValue, cases, this._localization);

            this._activateView(this._caseViews[key]);
          }
        }, {
          key: "_clearViews",
          value: function _clearViews() {
            if (this._activeView) this._activeView.destroy();
          }
        }, {
          key: "_activateView",
          value: function _activateView(view) {
            if (view) {
              this._activeView = view;

              this._activeView.create();
            }
          }
        }]);

        return _NgPlural;
      }();

      _NgPlural.ɵfac = function NgPlural_Factory(t) {
        return new (t || _NgPlural)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_NgLocalization));
      };

      _NgPlural.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _NgPlural,
        selectors: [["", "ngPlural", ""]],
        inputs: {
          ngPlural: "ngPlural"
        }
      });

      _NgPlural.ctorParameters = function () {
        return [{
          type: _NgLocalization
        }];
      };

      _NgPlural.propDecorators = {
        ngPlural: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_NgPlural, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[ngPlural]'
          }]
        }], function () {
          return [{
            type: _NgLocalization
          }];
        }, {
          ngPlural: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();
      /**
       * @ngModule CommonModule
       *
       * @description
       *
       * Creates a view that will be added/removed from the parent {@link NgPlural} when the
       * given expression matches the plural expression according to CLDR rules.
       *
       * @usageNotes
       * ```
       * <some-element [ngPlural]="value">
       *   <ng-template ngPluralCase="=0">...</ng-template>
       *   <ng-template ngPluralCase="other">...</ng-template>
       * </some-element>
       *```
       *
       * See {@link NgPlural} for more details and example.
       *
       * @publicApi
       */


      var _NgPluralCase = function _NgPluralCase(value, template, viewContainer, ngPlural) {
        _classCallCheck2(this, _NgPluralCase);

        this.value = value;
        var isANumber = !isNaN(Number(value));
        ngPlural.addCase(isANumber ? "=".concat(value) : value, new SwitchView(viewContainer, template));
      };

      _NgPluralCase.ɵfac = function NgPluralCase_Factory(t) {
        return new (t || _NgPluralCase)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinjectAttribute"]('ngPluralCase'), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_NgPlural, 1));
      };

      _NgPluralCase.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _NgPluralCase,
        selectors: [["", "ngPluralCase", ""]]
      });

      _NgPluralCase.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Attribute,
            args: ['ngPluralCase']
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
        }, {
          type: _NgPlural,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Host
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_NgPluralCase, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[ngPluralCase]'
          }]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Attribute,
              args: ['ngPluralCase']
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
          }, {
            type: _NgPlural,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Host
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @ngModule CommonModule
       *
       * @usageNotes
       *
       * Set the font of the containing element to the result of an expression.
       *
       * ```
       * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
       * ```
       *
       * Set the width of the containing element to a pixel value returned by an expression.
       *
       * ```
       * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
       * ```
       *
       * Set a collection of style values using an expression that returns key-value pairs.
       *
       * ```
       * <some-element [ngStyle]="objExp">...</some-element>
       * ```
       *
       * @description
       *
       * An attribute directive that updates styles for the containing HTML element.
       * Sets one or more style properties, specified as colon-separated key-value pairs.
       * The key is a style name, with an optional `.<unit>` suffix
       * (such as 'top.px', 'font-style.em').
       * The value is an expression to be evaluated.
       * The resulting non-null value, expressed in the given unit,
       * is assigned to the given style property.
       * If the result of evaluation is null, the corresponding style is removed.
       *
       * @publicApi
       */


      var _NgStyle = /*#__PURE__*/function () {
        function _NgStyle(_ngEl, _differs, _renderer) {
          _classCallCheck2(this, _NgStyle);

          this._ngEl = _ngEl;
          this._differs = _differs;
          this._renderer = _renderer;
          this._ngStyle = null;
          this._differ = null;
        }

        _createClass2(_NgStyle, [{
          key: "ngStyle",
          set: function set(values) {
            this._ngStyle = values;

            if (!this._differ && values) {
              this._differ = this._differs.find(values).create();
            }
          }
        }, {
          key: "ngDoCheck",
          value: function ngDoCheck() {
            if (this._differ) {
              var changes = this._differ.diff(this._ngStyle);

              if (changes) {
                this._applyChanges(changes);
              }
            }
          }
        }, {
          key: "_setStyle",
          value: function _setStyle(nameAndUnit, value) {
            var _nameAndUnit$split = nameAndUnit.split('.'),
                _nameAndUnit$split2 = _slicedToArray(_nameAndUnit$split, 2),
                name = _nameAndUnit$split2[0],
                unit = _nameAndUnit$split2[1];

            value = value != null && unit ? "".concat(value).concat(unit) : value;

            if (value != null) {
              this._renderer.setStyle(this._ngEl.nativeElement, name, value);
            } else {
              this._renderer.removeStyle(this._ngEl.nativeElement, name);
            }
          }
        }, {
          key: "_applyChanges",
          value: function _applyChanges(changes) {
            var _this67 = this;

            changes.forEachRemovedItem(function (record) {
              return _this67._setStyle(record.key, null);
            });
            changes.forEachAddedItem(function (record) {
              return _this67._setStyle(record.key, record.currentValue);
            });
            changes.forEachChangedItem(function (record) {
              return _this67._setStyle(record.key, record.currentValue);
            });
          }
        }]);

        return _NgStyle;
      }();

      _NgStyle.ɵfac = function NgStyle_Factory(t) {
        return new (t || _NgStyle)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.KeyValueDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2));
      };

      _NgStyle.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _NgStyle,
        selectors: [["", "ngStyle", ""]],
        inputs: {
          ngStyle: "ngStyle"
        }
      });

      _NgStyle.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.KeyValueDiffers
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
        }];
      };

      _NgStyle.propDecorators = {
        ngStyle: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
          args: ['ngStyle']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_NgStyle, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[ngStyle]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.KeyValueDiffers
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
          }];
        }, {
          ngStyle: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
            args: ['ngStyle']
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @ngModule CommonModule
       *
       * @description
       *
       * Inserts an embedded view from a prepared `TemplateRef`.
       *
       * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.
       * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding
       * by the local template `let` declarations.
       *
       * @usageNotes
       * ```
       * <ng-container *ngTemplateOutlet="templateRefExp; context: contextExp"></ng-container>
       * ```
       *
       * Using the key `$implicit` in the context object will set its value as default.
       *
       * ### Example
       *
       * {@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}
       *
       * @publicApi
       */


      var _NgTemplateOutlet = /*#__PURE__*/function () {
        function _NgTemplateOutlet(_viewContainerRef) {
          _classCallCheck2(this, _NgTemplateOutlet);

          this._viewContainerRef = _viewContainerRef;
          this._viewRef = null;
          /**
           * A context object to attach to the {@link EmbeddedViewRef}. This should be an
           * object, the object's keys will be available for binding by the local template `let`
           * declarations.
           * Using the key `$implicit` in the context object will set its value as default.
           */

          this.ngTemplateOutletContext = null;
          /**
           * A string defining the template reference and optionally the context object for the template.
           */

          this.ngTemplateOutlet = null;
        }

        _createClass2(_NgTemplateOutlet, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            if (changes['ngTemplateOutlet']) {
              var viewContainerRef = this._viewContainerRef;

              if (this._viewRef) {
                viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));
              }

              this._viewRef = this.ngTemplateOutlet ? viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext) : null;
            } else if (this._viewRef && changes['ngTemplateOutletContext'] && this.ngTemplateOutletContext) {
              this._viewRef.context = this.ngTemplateOutletContext;
            }
          }
        }]);

        return _NgTemplateOutlet;
      }();

      _NgTemplateOutlet.ɵfac = function NgTemplateOutlet_Factory(t) {
        return new (t || _NgTemplateOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef));
      };

      _NgTemplateOutlet.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _NgTemplateOutlet,
        selectors: [["", "ngTemplateOutlet", ""]],
        inputs: {
          ngTemplateOutletContext: "ngTemplateOutletContext",
          ngTemplateOutlet: "ngTemplateOutlet"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });

      _NgTemplateOutlet.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
        }];
      };

      _NgTemplateOutlet.propDecorators = {
        ngTemplateOutletContext: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        ngTemplateOutlet: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_NgTemplateOutlet, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[ngTemplateOutlet]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
          }];
        }, {
          ngTemplateOutletContext: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          ngTemplateOutlet: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A collection of Angular directives that are likely to be used in each and every Angular
       * application.
       */


      var COMMON_DIRECTIVES = [_NgClass, _NgComponentOutlet, _NgForOf, _NgIf, _NgTemplateOutlet, _NgStyle, _NgSwitch, _NgSwitchCase, _NgSwitchDefault, _NgPlural, _NgPluralCase];
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      function invalidPipeArgumentError(type, value) {
        return Error("InvalidPipeArgument: '".concat(value, "' for pipe '").concat((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵstringify"])(type), "'"));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SubscribableStrategy = /*#__PURE__*/function () {
        function SubscribableStrategy() {
          _classCallCheck2(this, SubscribableStrategy);
        }

        _createClass2(SubscribableStrategy, [{
          key: "createSubscription",
          value: function createSubscription(async, updateLatestValue) {
            return async.subscribe({
              next: updateLatestValue,
              error: function error(e) {
                throw e;
              }
            });
          }
        }, {
          key: "dispose",
          value: function dispose(subscription) {
            subscription.unsubscribe();
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(subscription) {
            subscription.unsubscribe();
          }
        }]);

        return SubscribableStrategy;
      }();

      var PromiseStrategy = /*#__PURE__*/function () {
        function PromiseStrategy() {
          _classCallCheck2(this, PromiseStrategy);
        }

        _createClass2(PromiseStrategy, [{
          key: "createSubscription",
          value: function createSubscription(async, updateLatestValue) {
            return async.then(updateLatestValue, function (e) {
              throw e;
            });
          }
        }, {
          key: "dispose",
          value: function dispose(subscription) {}
        }, {
          key: "onDestroy",
          value: function onDestroy(subscription) {}
        }]);

        return PromiseStrategy;
      }();

      var _promiseStrategy = new PromiseStrategy();

      var _subscribableStrategy = new SubscribableStrategy();
      /**
       * @ngModule CommonModule
       * @description
       *
       * Unwraps a value from an asynchronous primitive.
       *
       * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
       * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
       * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
       * potential memory leaks.
       *
       * @usageNotes
       *
       * ### Examples
       *
       * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
       * promise.
       *
       * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
       *
       * It's also possible to use `async` with Observables. The example below binds the `time` Observable
       * to the view. The Observable continuously updates the view with the current time.
       *
       * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
       *
       * @publicApi
       */


      var _AsyncPipe = /*#__PURE__*/function () {
        function _AsyncPipe(_ref) {
          _classCallCheck2(this, _AsyncPipe);

          this._ref = _ref;
          this._latestValue = null;
          this._subscription = null;
          this._obj = null;
          this._strategy = null;
        }

        _createClass2(_AsyncPipe, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this._subscription) {
              this._dispose();
            }
          }
        }, {
          key: "transform",
          value: function transform(obj) {
            if (!this._obj) {
              if (obj) {
                this._subscribe(obj);
              }

              return this._latestValue;
            }

            if (obj !== this._obj) {
              this._dispose();

              return this.transform(obj);
            }

            return this._latestValue;
          }
        }, {
          key: "_subscribe",
          value: function _subscribe(obj) {
            var _this68 = this;

            this._obj = obj;
            this._strategy = this._selectStrategy(obj);
            this._subscription = this._strategy.createSubscription(obj, function (value) {
              return _this68._updateLatestValue(obj, value);
            });
          }
        }, {
          key: "_selectStrategy",
          value: function _selectStrategy(obj) {
            if ((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisPromise"])(obj)) {
              return _promiseStrategy;
            }

            if ((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisSubscribable"])(obj)) {
              return _subscribableStrategy;
            }

            throw invalidPipeArgumentError(_AsyncPipe, obj);
          }
        }, {
          key: "_dispose",
          value: function _dispose() {
            this._strategy.dispose(this._subscription);

            this._latestValue = null;
            this._subscription = null;
            this._obj = null;
          }
        }, {
          key: "_updateLatestValue",
          value: function _updateLatestValue(async, value) {
            if (async === this._obj) {
              this._latestValue = value;

              this._ref.markForCheck();
            }
          }
        }]);

        return _AsyncPipe;
      }();

      _AsyncPipe.ɵfac = function AsyncPipe_Factory(t) {
        return new (t || _AsyncPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef, 16));
      };

      _AsyncPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "async",
        type: _AsyncPipe,
        pure: false
      });

      _AsyncPipe.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_AsyncPipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Pipe,
          args: [{
            name: 'async',
            pure: false
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Transforms text to all lower case.
       *
       * @see `UpperCasePipe`
       * @see `TitleCasePipe`
       * @usageNotes
       *
       * The following example defines a view that allows the user to enter
       * text, and then uses the pipe to convert the input text to all lower case.
       *
       * <code-example path="common/pipes/ts/lowerupper_pipe.ts" region='LowerUpperPipe'></code-example>
       *
       * @ngModule CommonModule
       * @publicApi
       */


      var _LowerCasePipe = /*#__PURE__*/function () {
        function _LowerCasePipe() {
          _classCallCheck2(this, _LowerCasePipe);
        }

        _createClass2(_LowerCasePipe, [{
          key: "transform",
          value: function transform(value) {
            if (value == null) return null;

            if (typeof value !== 'string') {
              throw invalidPipeArgumentError(_LowerCasePipe, value);
            }

            return value.toLowerCase();
          }
        }]);

        return _LowerCasePipe;
      }();

      _LowerCasePipe.ɵfac = function LowerCasePipe_Factory(t) {
        return new (t || _LowerCasePipe)();
      };

      _LowerCasePipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "lowercase",
        type: _LowerCasePipe,
        pure: true
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_LowerCasePipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Pipe,
          args: [{
            name: 'lowercase'
          }]
        }], null, null);
      })(); //
      // Regex below matches any Unicode word and compatible with ES5. In ES2018 the same result
      // can be achieved by using /\p{L}\S*/gu and also known as Unicode Property Escapes
      // (https://2ality.com/2017/07/regexp-unicode-property-escapes.html). Since there is no
      // transpilation of this functionality down to ES5 without external tool, the only solution is
      // to use already transpiled form. Example can be found here -
      // https://mothereff.in/regexpu#input=var+regex+%3D+/%5Cp%7BL%7D/u%3B&unicodePropertyEscape=1
      //


      var unicodeWordMatch = /(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D])\S*/g;
      /**
       * Transforms text to title case.
       * Capitalizes the first letter of each word and transforms the
       * rest of the word to lower case.
       * Words are delimited by any whitespace character, such as a space, tab, or line-feed character.
       *
       * @see `LowerCasePipe`
       * @see `UpperCasePipe`
       *
       * @usageNotes
       * The following example shows the result of transforming various strings into title case.
       *
       * <code-example path="common/pipes/ts/titlecase_pipe.ts" region='TitleCasePipe'></code-example>
       *
       * @ngModule CommonModule
       * @publicApi
       */

      var _TitleCasePipe = /*#__PURE__*/function () {
        function _TitleCasePipe() {
          _classCallCheck2(this, _TitleCasePipe);
        }

        _createClass2(_TitleCasePipe, [{
          key: "transform",
          value: function transform(value) {
            if (value == null) return null;

            if (typeof value !== 'string') {
              throw invalidPipeArgumentError(_TitleCasePipe, value);
            }

            return value.replace(unicodeWordMatch, function (txt) {
              return txt[0].toUpperCase() + txt.substr(1).toLowerCase();
            });
          }
        }]);

        return _TitleCasePipe;
      }();

      _TitleCasePipe.ɵfac = function TitleCasePipe_Factory(t) {
        return new (t || _TitleCasePipe)();
      };

      _TitleCasePipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "titlecase",
        type: _TitleCasePipe,
        pure: true
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_TitleCasePipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Pipe,
          args: [{
            name: 'titlecase'
          }]
        }], null, null);
      })();
      /**
       * Transforms text to all upper case.
       * @see `LowerCasePipe`
       * @see `TitleCasePipe`
       *
       * @ngModule CommonModule
       * @publicApi
       */


      var _UpperCasePipe = /*#__PURE__*/function () {
        function _UpperCasePipe() {
          _classCallCheck2(this, _UpperCasePipe);
        }

        _createClass2(_UpperCasePipe, [{
          key: "transform",
          value: function transform(value) {
            if (value == null) return null;

            if (typeof value !== 'string') {
              throw invalidPipeArgumentError(_UpperCasePipe, value);
            }

            return value.toUpperCase();
          }
        }]);

        return _UpperCasePipe;
      }();

      _UpperCasePipe.ɵfac = function UpperCasePipe_Factory(t) {
        return new (t || _UpperCasePipe)();
      };

      _UpperCasePipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "uppercase",
        type: _UpperCasePipe,
        pure: true
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_UpperCasePipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Pipe,
          args: [{
            name: 'uppercase'
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // clang-format off

      /**
       * @ngModule CommonModule
       * @description
       *
       * Formats a date value according to locale rules.
       *
       * `DatePipe` is executed only when it detects a pure change to the input value.
       * A pure change is either a change to a primitive input value
       * (such as `String`, `Number`, `Boolean`, or `Symbol`),
       * or a changed object reference (such as `Date`, `Array`, `Function`, or `Object`).
       *
       * Note that mutating a `Date` object does not cause the pipe to be rendered again.
       * To ensure that the pipe is executed, you must create a new `Date` object.
       *
       * Only the `en-US` locale data comes with Angular. To localize dates
       * in another language, you must import the corresponding locale data.
       * See the [I18n guide](guide/i18n#i18n-pipes) for more information.
       *
       * @see `formatDate()`
       *
       *
       * @usageNotes
       *
       * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to
       * reformat the date on every change-detection cycle, treat the date as an immutable object
       * and change the reference when the pipe needs to run again.
       *
       * ### Pre-defined format options
       *
       * | Option        | Equivalent to                       | Examples (given in `en-US` locale)              |
       * |---------------|-------------------------------------|-------------------------------------------------|
       * | `'short'`     | `'M/d/yy, h:mm a'`                  | `6/15/15, 9:03 AM`                              |
       * | `'medium'`    | `'MMM d, y, h:mm:ss a'`             | `Jun 15, 2015, 9:03:01 AM`                      |
       * | `'long'`      | `'MMMM d, y, h:mm:ss a z'`          | `June 15, 2015 at 9:03:01 AM GMT+1`             |
       * | `'full'`      | `'EEEE, MMMM d, y, h:mm:ss a zzzz'` | `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00` |
       * | `'shortDate'` | `'M/d/yy'`                          | `6/15/15`                                       |
       * | `'mediumDate'`| `'MMM d, y'`                        | `Jun 15, 2015`                                  |
       * | `'longDate'`  | `'MMMM d, y'`                       | `June 15, 2015`                                 |
       * | `'fullDate'`  | `'EEEE, MMMM d, y'`                 | `Monday, June 15, 2015`                         |
       * | `'shortTime'` | `'h:mm a'`                          | `9:03 AM`                                       |
       * | `'mediumTime'`| `'h:mm:ss a'`                       | `9:03:01 AM`                                    |
       * | `'longTime'`  | `'h:mm:ss a z'`                     | `9:03:01 AM GMT+1`                              |
       * | `'fullTime'`  | `'h:mm:ss a zzzz'`                  | `9:03:01 AM GMT+01:00`                          |
       *
       * ### Custom format options
       *
       * You can construct a format string using symbols to specify the components
       * of a date-time value, as described in the following table.
       * Format details depend on the locale.
       * Fields marked with (*) are only available in the extra data set for the given locale.
       *
       *  | Field type          | Format      | Description                                                   | Example Value                                              |
       *  |-------------------- |-------------|---------------------------------------------------------------|------------------------------------------------------------|
       *  | Era                 | G, GG & GGG | Abbreviated                                                   | AD                                                         |
       *  |                     | GGGG        | Wide                                                          | Anno Domini                                                |
       *  |                     | GGGGG       | Narrow                                                        | A                                                          |
       *  | Year                | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |
       *  |                     | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |
       *  |                     | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |
       *  |                     | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |
       *  | Week-numbering year | Y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |
       *  |                     | YY          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |
       *  |                     | YYY         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |
       *  |                     | YYYY        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |
       *  | Month               | M           | Numeric: 1 digit                                              | 9, 12                                                      |
       *  |                     | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |
       *  |                     | MMM         | Abbreviated                                                   | Sep                                                        |
       *  |                     | MMMM        | Wide                                                          | September                                                  |
       *  |                     | MMMMM       | Narrow                                                        | S                                                          |
       *  | Month standalone    | L           | Numeric: 1 digit                                              | 9, 12                                                      |
       *  |                     | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |
       *  |                     | LLL         | Abbreviated                                                   | Sep                                                        |
       *  |                     | LLLL        | Wide                                                          | September                                                  |
       *  |                     | LLLLL       | Narrow                                                        | S                                                          |
       *  | Week of year        | w           | Numeric: minimum digits                                       | 1... 53                                                    |
       *  |                     | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |
       *  | Week of month       | W           | Numeric: 1 digit                                              | 1... 5                                                     |
       *  | Day of month        | d           | Numeric: minimum digits                                       | 1                                                          |
       *  |                     | dd          | Numeric: 2 digits + zero padded                               | 01                                                         |
       *  | Week day            | E, EE & EEE | Abbreviated                                                   | Tue                                                        |
       *  |                     | EEEE        | Wide                                                          | Tuesday                                                    |
       *  |                     | EEEEE       | Narrow                                                        | T                                                          |
       *  |                     | EEEEEE      | Short                                                         | Tu                                                         |
       *  | Week day standalone | c, cc       | Numeric: 1 digit                                              | 2                                                          |
       *  |                     | ccc         | Abbreviated                                                   | Tue                                                        |
       *  |                     | cccc        | Wide                                                          | Tuesday                                                    |
       *  |                     | ccccc       | Narrow                                                        | T                                                          |
       *  |                     | cccccc      | Short                                                         | Tu                                                         |
       *  | Period              | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |
       *  |                     | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |
       *  |                     | aaaaa       | Narrow                                                        | a/p                                                        |
       *  | Period*             | B, BB & BBB | Abbreviated                                                   | mid.                                                       |
       *  |                     | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |
       *  |                     | BBBBB       | Narrow                                                        | md                                                         |
       *  | Period standalone*  | b, bb & bbb | Abbreviated                                                   | mid.                                                       |
       *  |                     | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |
       *  |                     | bbbbb       | Narrow                                                        | md                                                         |
       *  | Hour 1-12           | h           | Numeric: minimum digits                                       | 1, 12                                                      |
       *  |                     | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |
       *  | Hour 0-23           | H           | Numeric: minimum digits                                       | 0, 23                                                      |
       *  |                     | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |
       *  | Minute              | m           | Numeric: minimum digits                                       | 8, 59                                                      |
       *  |                     | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |
       *  | Second              | s           | Numeric: minimum digits                                       | 0... 59                                                    |
       *  |                     | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |
       *  | Fractional seconds  | S           | Numeric: 1 digit                                              | 0... 9                                                     |
       *  |                     | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |
       *  |                     | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |
       *  | Zone                | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |
       *  |                     | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |
       *  |                     | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |
       *  |                     | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |
       *  |                     | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |
       *  |                     | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |
       *  |                     | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |
       *
       *
       * ### Format examples
       *
       * These examples transform a date into various formats,
       * assuming that `dateObj` is a JavaScript `Date` object for
       * year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,
       * given in the local time for the `en-US` locale.
       *
       * ```
       * {{ dateObj | date }}               // output is 'Jun 15, 2015'
       * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
       * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
       * {{ dateObj | date:'mm:ss' }}       // output is '43:11'
       * ```
       *
       * ### Usage example
       *
       * The following component uses a date pipe to display the current date in different formats.
       *
       * ```
       * @Component({
       *  selector: 'date-pipe',
       *  template: `<div>
       *    <p>Today is {{today | date}}</p>
       *    <p>Or if you prefer, {{today | date:'fullDate'}}</p>
       *    <p>The time is {{today | date:'h:mm a z'}}</p>
       *  </div>`
       * })
       * // Get the current date and time as a date-time value.
       * export class DatePipeComponent {
       *   today: number = Date.now();
       * }
       * ```
       *
       * @publicApi
       */
      // clang-format on


      var _DatePipe = /*#__PURE__*/function () {
        function _DatePipe(locale) {
          _classCallCheck2(this, _DatePipe);

          this.locale = locale;
        }

        _createClass2(_DatePipe, [{
          key: "transform",
          value: function transform(value) {
            var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'mediumDate';
            var timezone = arguments.length > 2 ? arguments[2] : undefined;
            var locale = arguments.length > 3 ? arguments[3] : undefined;
            if (value == null || value === '' || value !== value) return null;

            try {
              return _formatDate(value, format, locale || this.locale, timezone);
            } catch (error) {
              throw invalidPipeArgumentError(_DatePipe, error.message);
            }
          }
        }]);

        return _DatePipe;
      }();

      _DatePipe.ɵfac = function DatePipe_Factory(t) {
        return new (t || _DatePipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID, 16));
      };

      _DatePipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "date",
        type: _DatePipe,
        pure: true
      });

      _DatePipe.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_DatePipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Pipe,
          args: [{
            name: 'date',
            pure: true
          }]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _INTERPOLATION_REGEXP = /#/g;
      /**
       * @ngModule CommonModule
       * @description
       *
       * Maps a value to a string that pluralizes the value according to locale rules.
       *
       * @usageNotes
       *
       * ### Example
       *
       * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
       *
       * @publicApi
       */

      var _I18nPluralPipe = /*#__PURE__*/function () {
        function _I18nPluralPipe(_localization) {
          _classCallCheck2(this, _I18nPluralPipe);

          this._localization = _localization;
        }
        /**
         * @param value the number to be formatted
         * @param pluralMap an object that mimics the ICU format, see
         * http://userguide.icu-project.org/formatparse/messages.
         * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by
         * default).
         */


        _createClass2(_I18nPluralPipe, [{
          key: "transform",
          value: function transform(value, pluralMap, locale) {
            if (value == null) return '';

            if (typeof pluralMap !== 'object' || pluralMap === null) {
              throw invalidPipeArgumentError(_I18nPluralPipe, pluralMap);
            }

            var key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);
            return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
          }
        }]);

        return _I18nPluralPipe;
      }();

      _I18nPluralPipe.ɵfac = function I18nPluralPipe_Factory(t) {
        return new (t || _I18nPluralPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_NgLocalization, 16));
      };

      _I18nPluralPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "i18nPlural",
        type: _I18nPluralPipe,
        pure: true
      });

      _I18nPluralPipe.ctorParameters = function () {
        return [{
          type: _NgLocalization
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_I18nPluralPipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Pipe,
          args: [{
            name: 'i18nPlural',
            pure: true
          }]
        }], function () {
          return [{
            type: _NgLocalization
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @ngModule CommonModule
       * @description
       *
       * Generic selector that displays the string that matches the current value.
       *
       * If none of the keys of the `mapping` match the `value`, then the content
       * of the `other` key is returned when present, otherwise an empty string is returned.
       *
       * @usageNotes
       *
       * ### Example
       *
       * {@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
       *
       * @publicApi
       */


      var _I18nSelectPipe = /*#__PURE__*/function () {
        function _I18nSelectPipe() {
          _classCallCheck2(this, _I18nSelectPipe);
        }

        _createClass2(_I18nSelectPipe, [{
          key: "transform",
          value:
          /**
           * @param value a string to be internationalized.
           * @param mapping an object that indicates the text that should be displayed
           * for different values of the provided `value`.
           */
          function transform(value, mapping) {
            if (value == null) return '';

            if (typeof mapping !== 'object' || typeof value !== 'string') {
              throw invalidPipeArgumentError(_I18nSelectPipe, mapping);
            }

            if (mapping.hasOwnProperty(value)) {
              return mapping[value];
            }

            if (mapping.hasOwnProperty('other')) {
              return mapping['other'];
            }

            return '';
          }
        }]);

        return _I18nSelectPipe;
      }();

      _I18nSelectPipe.ɵfac = function I18nSelectPipe_Factory(t) {
        return new (t || _I18nSelectPipe)();
      };

      _I18nSelectPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "i18nSelect",
        type: _I18nSelectPipe,
        pure: true
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_I18nSelectPipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Pipe,
          args: [{
            name: 'i18nSelect',
            pure: true
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @ngModule CommonModule
       * @description
       *
       * Converts a value into its JSON-format representation.  Useful for debugging.
       *
       * @usageNotes
       *
       * The following component uses a JSON pipe to convert an object
       * to JSON format, and displays the string in both formats for comparison.
       *
       * {@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
       *
       * @publicApi
       */


      var _JsonPipe = /*#__PURE__*/function () {
        function _JsonPipe() {
          _classCallCheck2(this, _JsonPipe);
        }

        _createClass2(_JsonPipe, [{
          key: "transform",
          value:
          /**
           * @param value A value of any type to convert into a JSON-format string.
           */
          function transform(value) {
            return JSON.stringify(value, null, 2);
          }
        }]);

        return _JsonPipe;
      }();

      _JsonPipe.ɵfac = function JsonPipe_Factory(t) {
        return new (t || _JsonPipe)();
      };

      _JsonPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "json",
        type: _JsonPipe,
        pure: false
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_JsonPipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Pipe,
          args: [{
            name: 'json',
            pure: false
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function makeKeyValuePair(key, value) {
        return {
          key: key,
          value: value
        };
      }
      /**
       * @ngModule CommonModule
       * @description
       *
       * Transforms Object or Map into an array of key value pairs.
       *
       * The output array will be ordered by keys.
       * By default the comparator will be by Unicode point value.
       * You can optionally pass a compareFn if your keys are complex types.
       *
       * @usageNotes
       * ### Examples
       *
       * This examples show how an Object or a Map can be iterated by ngFor with the use of this
       * keyvalue pipe.
       *
       * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}
       *
       * @publicApi
       */


      var _KeyValuePipe = /*#__PURE__*/function () {
        function _KeyValuePipe(differs) {
          _classCallCheck2(this, _KeyValuePipe);

          this.differs = differs;
          this.keyValues = [];
        }

        _createClass2(_KeyValuePipe, [{
          key: "transform",
          value: function transform(input) {
            var _this69 = this;

            var compareFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultComparator;

            if (!input || !(input instanceof Map) && typeof input !== 'object') {
              return null;
            }

            if (!this.differ) {
              // make a differ for whatever type we've been passed in
              this.differ = this.differs.find(input).create();
            }

            var differChanges = this.differ.diff(input);

            if (differChanges) {
              this.keyValues = [];
              differChanges.forEachItem(function (r) {
                _this69.keyValues.push(makeKeyValuePair(r.key, r.currentValue));
              });
              this.keyValues.sort(compareFn);
            }

            return this.keyValues;
          }
        }]);

        return _KeyValuePipe;
      }();

      _KeyValuePipe.ɵfac = function KeyValuePipe_Factory(t) {
        return new (t || _KeyValuePipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.KeyValueDiffers, 16));
      };

      _KeyValuePipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "keyvalue",
        type: _KeyValuePipe,
        pure: false
      });

      _KeyValuePipe.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.KeyValueDiffers
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_KeyValuePipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Pipe,
          args: [{
            name: 'keyvalue',
            pure: false
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.KeyValueDiffers
          }];
        }, null);
      })();

      function defaultComparator(keyValueA, keyValueB) {
        var a = keyValueA.key;
        var b = keyValueB.key; // if same exit with 0;

        if (a === b) return 0; // make sure that undefined are at the end of the sort.

        if (a === undefined) return 1;
        if (b === undefined) return -1; // make sure that nulls are at the end of the sort.

        if (a === null) return 1;
        if (b === null) return -1;

        if (typeof a == 'string' && typeof b == 'string') {
          return a < b ? -1 : 1;
        }

        if (typeof a == 'number' && typeof b == 'number') {
          return a - b;
        }

        if (typeof a == 'boolean' && typeof b == 'boolean') {
          return a < b ? -1 : 1;
        } // `a` and `b` are of different types. Compare their string values.


        var aString = String(a);
        var bString = String(b);
        return aString == bString ? 0 : aString < bString ? -1 : 1;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @ngModule CommonModule
       * @description
       *
       * Formats a value according to digit options and locale rules.
       * Locale determines group sizing and separator,
       * decimal point character, and other locale-specific configurations.
       *
       * @see `formatNumber()`
       *
       * @usageNotes
       *
       * ### digitsInfo
       *
       * The value's decimal representation is specified by the `digitsInfo`
       * parameter, written in the following format:<br>
       *
       * ```
       * {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}
       * ```
       *
       *  - `minIntegerDigits`:
       * The minimum number of integer digits before the decimal point.
       * Default is 1.
       *
       * - `minFractionDigits`:
       * The minimum number of digits after the decimal point.
       * Default is 0.
       *
       *  - `maxFractionDigits`:
       * The maximum number of digits after the decimal point.
       * Default is 3.
       *
       * If the formatted value is truncated it will be rounded using the "to-nearest" method:
       *
       * ```
       * {{3.6 | number: '1.0-0'}}
       * <!--will output '4'-->
       *
       * {{-3.6 | number:'1.0-0'}}
       * <!--will output '-4'-->
       * ```
       *
       * ### locale
       *
       * `locale` will format a value according to locale rules.
       * Locale determines group sizing and separator,
       * decimal point character, and other locale-specific configurations.
       *
       * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
       *
       * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
       *
       * ### Example
       *
       * The following code shows how the pipe transforms values
       * according to various format specifications,
       * where the caller's default locale is `en-US`.
       *
       * <code-example path="common/pipes/ts/number_pipe.ts" region='NumberPipe'></code-example>
       *
       * @publicApi
       */


      var _DecimalPipe = /*#__PURE__*/function () {
        function _DecimalPipe(_locale) {
          _classCallCheck2(this, _DecimalPipe);

          this._locale = _locale;
        }
        /**
         * @param value The value to be formatted.
         * @param digitsInfo Sets digit and decimal representation.
         * [See more](#digitsinfo).
         * @param locale Specifies what locale format rules to use.
         * [See more](#locale).
         */


        _createClass2(_DecimalPipe, [{
          key: "transform",
          value: function transform(value, digitsInfo, locale) {
            if (!isValue(value)) return null;
            locale = locale || this._locale;

            try {
              var num = strToNumber(value);
              return _formatNumber(num, locale, digitsInfo);
            } catch (error) {
              throw invalidPipeArgumentError(_DecimalPipe, error.message);
            }
          }
        }]);

        return _DecimalPipe;
      }();

      _DecimalPipe.ɵfac = function DecimalPipe_Factory(t) {
        return new (t || _DecimalPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID, 16));
      };

      _DecimalPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "number",
        type: _DecimalPipe,
        pure: true
      });

      _DecimalPipe.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_DecimalPipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Pipe,
          args: [{
            name: 'number'
          }]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID]
            }]
          }];
        }, null);
      })();
      /**
       * @ngModule CommonModule
       * @description
       *
       * Transforms a number to a percentage
       * string, formatted according to locale rules that determine group sizing and
       * separator, decimal-point character, and other locale-specific
       * configurations.
       *
       * @see `formatPercent()`
       *
       * @usageNotes
       * The following code shows how the pipe transforms numbers
       * into text strings, according to various format specifications,
       * where the caller's default locale is `en-US`.
       *
       * <code-example path="common/pipes/ts/percent_pipe.ts" region='PercentPipe'></code-example>
       *
       * @publicApi
       */


      var _PercentPipe = /*#__PURE__*/function () {
        function _PercentPipe(_locale) {
          _classCallCheck2(this, _PercentPipe);

          this._locale = _locale;
        }

        _createClass2(_PercentPipe, [{
          key: "transform",
          value: function transform(value, digitsInfo, locale) {
            if (!isValue(value)) return null;
            locale = locale || this._locale;

            try {
              var num = strToNumber(value);
              return _formatPercent(num, locale, digitsInfo);
            } catch (error) {
              throw invalidPipeArgumentError(_PercentPipe, error.message);
            }
          }
        }]);

        return _PercentPipe;
      }();

      _PercentPipe.ɵfac = function PercentPipe_Factory(t) {
        return new (t || _PercentPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID, 16));
      };

      _PercentPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "percent",
        type: _PercentPipe,
        pure: true
      });

      _PercentPipe.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_PercentPipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Pipe,
          args: [{
            name: 'percent'
          }]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID]
            }]
          }];
        }, null);
      })();
      /**
       * @ngModule CommonModule
       * @description
       *
       * Transforms a number to a currency string, formatted according to locale rules
       * that determine group sizing and separator, decimal-point character,
       * and other locale-specific configurations.
       *
       * {@a currency-code-deprecation}
       * <div class="alert is-helpful">
       *
       * **Deprecation notice:**
       *
       * The default currency code is currently always `USD` but this is deprecated from v9.
       *
       * **In v11 the default currency code will be taken from the current locale identified by
       * the `LOCALE_ID` token. See the [i18n guide](guide/i18n#setting-up-the-locale-of-your-app) for
       * more information.**
       *
       * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in
       * your application `NgModule`:
       *
       * ```ts
       * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}
       * ```
       *
       * </div>
       *
       * @see `getCurrencySymbol()`
       * @see `formatCurrency()`
       *
       * @usageNotes
       * The following code shows how the pipe transforms numbers
       * into text strings, according to various format specifications,
       * where the caller's default locale is `en-US`.
       *
       * <code-example path="common/pipes/ts/currency_pipe.ts" region='CurrencyPipe'></code-example>
       *
       * @publicApi
       */


      var _CurrencyPipe = /*#__PURE__*/function () {
        function _CurrencyPipe(_locale) {
          var _defaultCurrencyCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'USD';

          _classCallCheck2(this, _CurrencyPipe);

          this._locale = _locale;
          this._defaultCurrencyCode = _defaultCurrencyCode;
        }

        _createClass2(_CurrencyPipe, [{
          key: "transform",
          value: function transform(value, currencyCode) {
            var display = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'symbol';
            var digitsInfo = arguments.length > 3 ? arguments[3] : undefined;
            var locale = arguments.length > 4 ? arguments[4] : undefined;
            if (!isValue(value)) return null;
            locale = locale || this._locale;

            if (typeof display === 'boolean') {
              if ((typeof ngDevMode === 'undefined' || ngDevMode) && console && console.warn) {
                console.warn("Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".");
              }

              display = display ? 'symbol' : 'code';
            }

            var currency = currencyCode || this._defaultCurrencyCode;

            if (display !== 'code') {
              if (display === 'symbol' || display === 'symbol-narrow') {
                currency = _getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);
              } else {
                currency = display;
              }
            }

            try {
              var num = strToNumber(value);
              return _formatCurrency(num, locale, currency, currencyCode, digitsInfo);
            } catch (error) {
              throw invalidPipeArgumentError(_CurrencyPipe, error.message);
            }
          }
        }]);

        return _CurrencyPipe;
      }();

      _CurrencyPipe.ɵfac = function CurrencyPipe_Factory(t) {
        return new (t || _CurrencyPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID, 16), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CURRENCY_CODE, 16));
      };

      _CurrencyPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "currency",
        type: _CurrencyPipe,
        pure: true
      });

      _CurrencyPipe.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID]
          }]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CURRENCY_CODE]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_CurrencyPipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Pipe,
          args: [{
            name: 'currency'
          }]
        }], function () {
          return [{
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID]
            }]
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CURRENCY_CODE]
            }]
          }];
        }, null);
      })();

      function isValue(value) {
        return !(value == null || value === '' || value !== value);
      }
      /**
       * Transforms a string into a number (if needed).
       */


      function strToNumber(value) {
        // Convert strings to numbers
        if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {
          return Number(value);
        }

        if (typeof value !== 'number') {
          throw new Error("".concat(value, " is not a number"));
        }

        return value;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @ngModule CommonModule
       * @description
       *
       * Creates a new `Array` or `String` containing a subset (slice) of the elements.
       *
       * @usageNotes
       *
       * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
       * and `String.prototype.slice()`.
       *
       * When operating on an `Array`, the returned `Array` is always a copy even when all
       * the elements are being returned.
       *
       * When operating on a blank value, the pipe returns the blank value.
       *
       * ### List Example
       *
       * This `ngFor` example:
       *
       * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
       *
       * produces the following:
       *
       * ```html
       * <li>b</li>
       * <li>c</li>
       * ```
       *
       * ### String Examples
       *
       * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
       *
       * @publicApi
       */


      var _SlicePipe = /*#__PURE__*/function () {
        function _SlicePipe() {
          _classCallCheck2(this, _SlicePipe);
        }

        _createClass2(_SlicePipe, [{
          key: "transform",
          value: function transform(value, start, end) {
            if (value == null) return null;

            if (!this.supports(value)) {
              throw invalidPipeArgumentError(_SlicePipe, value);
            }

            return value.slice(start, end);
          }
        }, {
          key: "supports",
          value: function supports(obj) {
            return typeof obj === 'string' || Array.isArray(obj);
          }
        }]);

        return _SlicePipe;
      }();

      _SlicePipe.ɵfac = function SlicePipe_Factory(t) {
        return new (t || _SlicePipe)();
      };

      _SlicePipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "slice",
        type: _SlicePipe,
        pure: false
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_SlicePipe, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Pipe,
          args: [{
            name: 'slice',
            pure: false
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A collection of Angular pipes that are likely to be used in each and every application.
       */


      var COMMON_PIPES = [_AsyncPipe, _UpperCasePipe, _LowerCasePipe, _JsonPipe, _SlicePipe, _DecimalPipe, _PercentPipe, _TitleCasePipe, _CurrencyPipe, _DatePipe, _I18nPluralPipe, _I18nSelectPipe, _KeyValuePipe];
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Note: This does not contain the location providers,
      // as they need some platform specific implementations to work.

      /**
       * Exports all the basic Angular directives and pipes,
       * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.
       * Re-exported by `BrowserModule`, which is included automatically in the root
       * `AppModule` when you create a new app with the CLI `new` command.
       *
       * * The `providers` options configure the NgModule's injector to provide
       * localization dependencies to members.
       * * The `exports` options make the declared directives and pipes available for import
       * by other NgModules.
       *
       * @publicApi
       */

      var _CommonModule = function _CommonModule() {
        _classCallCheck2(this, _CommonModule);
      };

      _CommonModule.ɵfac = function CommonModule_Factory(t) {
        return new (t || _CommonModule)();
      };

      _CommonModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _CommonModule
      });
      _CommonModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        providers: [{
          provide: _NgLocalization,
          useClass: _NgLocaleLocalization
        }]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_CommonModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
            exports: [COMMON_DIRECTIVES, COMMON_PIPES],
            providers: [{
              provide: _NgLocalization,
              useClass: _NgLocaleLocalization
            }]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_CommonModule, {
          declarations: [_NgClass, _NgComponentOutlet, _NgForOf, _NgIf, _NgTemplateOutlet, _NgStyle, _NgSwitch, _NgSwitchCase, _NgSwitchDefault, _NgPlural, _NgPluralCase, _AsyncPipe, _UpperCasePipe, _LowerCasePipe, _JsonPipe, _SlicePipe, _DecimalPipe, _PercentPipe, _TitleCasePipe, _CurrencyPipe, _DatePipe, _I18nPluralPipe, _I18nSelectPipe, _KeyValuePipe],
          exports: [_NgClass, _NgComponentOutlet, _NgForOf, _NgIf, _NgTemplateOutlet, _NgStyle, _NgSwitch, _NgSwitchCase, _NgSwitchDefault, _NgPlural, _NgPluralCase, _AsyncPipe, _UpperCasePipe, _LowerCasePipe, _JsonPipe, _SlicePipe, _DecimalPipe, _PercentPipe, _TitleCasePipe, _CurrencyPipe, _DatePipe, _I18nPluralPipe, _I18nSelectPipe, _KeyValuePipe]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var PLATFORM_BROWSER_ID = 'browser';
      var PLATFORM_SERVER_ID = 'server';
      var PLATFORM_WORKER_APP_ID = 'browserWorkerApp';
      var PLATFORM_WORKER_UI_ID = 'browserWorkerUi';
      /**
       * Returns whether a platform id represents a browser platform.
       * @publicApi
       */

      function _isPlatformBrowser(platformId) {
        return platformId === PLATFORM_BROWSER_ID;
      }
      /**
       * Returns whether a platform id represents a server platform.
       * @publicApi
       */


      function _isPlatformServer(platformId) {
        return platformId === PLATFORM_SERVER_ID;
      }
      /**
       * Returns whether a platform id represents a web worker app platform.
       * @publicApi
       */


      function _isPlatformWorkerApp(platformId) {
        return platformId === PLATFORM_WORKER_APP_ID;
      }
      /**
       * Returns whether a platform id represents a web worker UI platform.
       * @publicApi
       */


      function _isPlatformWorkerUi(platformId) {
        return platformId === PLATFORM_WORKER_UI_ID;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @publicApi
       */


      var _VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Version('12.0.3');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Defines a scroll position manager. Implemented by `BrowserViewportScroller`.
       *
       * @publicApi
       */


      var _ViewportScroller = function _ViewportScroller() {
        _classCallCheck2(this, _ViewportScroller);
      }; // De-sugared tree-shakable injection
      // See #23917

      /** @nocollapse */


      _ViewportScroller.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        token: _ViewportScroller,
        providedIn: 'root',
        factory: function factory() {
          return new BrowserViewportScroller((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_DOCUMENT), window);
        }
      });
      /**
       * Manages the scroll position for a browser window.
       */

      var BrowserViewportScroller = /*#__PURE__*/function () {
        function BrowserViewportScroller(document, window) {
          _classCallCheck2(this, BrowserViewportScroller);

          this.document = document;
          this.window = window;

          this.offset = function () {
            return [0, 0];
          };
        }
        /**
         * Configures the top offset used when scrolling to an anchor.
         * @param offset A position in screen coordinates (a tuple with x and y values)
         * or a function that returns the top offset position.
         *
         */


        _createClass2(BrowserViewportScroller, [{
          key: "setOffset",
          value: function setOffset(offset) {
            if (Array.isArray(offset)) {
              this.offset = function () {
                return offset;
              };
            } else {
              this.offset = offset;
            }
          }
          /**
           * Retrieves the current scroll position.
           * @returns The position in screen coordinates.
           */

        }, {
          key: "getScrollPosition",
          value: function getScrollPosition() {
            if (this.supportsScrolling()) {
              return [this.window.pageXOffset, this.window.pageYOffset];
            } else {
              return [0, 0];
            }
          }
          /**
           * Sets the scroll position.
           * @param position The new position in screen coordinates.
           */

        }, {
          key: "scrollToPosition",
          value: function scrollToPosition(position) {
            if (this.supportsScrolling()) {
              this.window.scrollTo(position[0], position[1]);
            }
          }
          /**
           * Scrolls to an element and attempts to focus the element.
           *
           * Note that the function name here is misleading in that the target string may be an ID for a
           * non-anchor element.
           *
           * @param target The ID of an element or name of the anchor.
           *
           * @see https://html.spec.whatwg.org/#the-indicated-part-of-the-document
           * @see https://html.spec.whatwg.org/#scroll-to-fragid
           */

        }, {
          key: "scrollToAnchor",
          value: function scrollToAnchor(target) {
            if (!this.supportsScrolling()) {
              return;
            } // TODO(atscott): The correct behavior for `getElementsByName` would be to also verify that the
            // element is an anchor. However, this could be considered a breaking change and should be
            // done in a major version.


            var elSelected = findAnchorFromDocument(this.document, target);

            if (elSelected) {
              this.scrollToElement(elSelected); // After scrolling to the element, the spec dictates that we follow the focus steps for the
              // target. Rather than following the robust steps, simply attempt focus.

              this.attemptFocus(elSelected);
            }
          }
          /**
           * Disables automatic scroll restoration provided by the browser.
           */

        }, {
          key: "setHistoryScrollRestoration",
          value: function setHistoryScrollRestoration(scrollRestoration) {
            if (this.supportScrollRestoration()) {
              var history = this.window.history;

              if (history && history.scrollRestoration) {
                history.scrollRestoration = scrollRestoration;
              }
            }
          }
          /**
           * Scrolls to an element using the native offset and the specified offset set on this scroller.
           *
           * The offset can be used when we know that there is a floating header and scrolling naively to an
           * element (ex: `scrollIntoView`) leaves the element hidden behind the floating header.
           */

        }, {
          key: "scrollToElement",
          value: function scrollToElement(el) {
            var rect = el.getBoundingClientRect();
            var left = rect.left + this.window.pageXOffset;
            var top = rect.top + this.window.pageYOffset;
            var offset = this.offset();
            this.window.scrollTo(left - offset[0], top - offset[1]);
          }
          /**
           * Calls `focus` on the `focusTarget` and returns `true` if the element was focused successfully.
           *
           * If `false`, further steps may be necessary to determine a valid substitute to be focused
           * instead.
           *
           * @see https://html.spec.whatwg.org/#get-the-focusable-area
           * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus
           * @see https://html.spec.whatwg.org/#focusable-area
           */

        }, {
          key: "attemptFocus",
          value: function attemptFocus(focusTarget) {
            focusTarget.focus();
            return this.document.activeElement === focusTarget;
          }
          /**
           * We only support scroll restoration when we can get a hold of window.
           * This means that we do not support this behavior when running in a web worker.
           *
           * Lifting this restriction right now would require more changes in the dom adapter.
           * Since webworkers aren't widely used, we will lift it once RouterScroller is
           * battle-tested.
           */

        }, {
          key: "supportScrollRestoration",
          value: function supportScrollRestoration() {
            try {
              if (!this.supportsScrolling()) {
                return false;
              } // The `scrollRestoration` property could be on the `history` instance or its prototype.


              var scrollRestorationDescriptor = getScrollRestorationProperty(this.window.history) || getScrollRestorationProperty(Object.getPrototypeOf(this.window.history)); // We can write to the `scrollRestoration` property if it is a writable data field or it has a
              // setter function.

              return !!scrollRestorationDescriptor && !!(scrollRestorationDescriptor.writable || scrollRestorationDescriptor.set);
            } catch (_a) {
              return false;
            }
          }
        }, {
          key: "supportsScrolling",
          value: function supportsScrolling() {
            try {
              return !!this.window && !!this.window.scrollTo && 'pageXOffset' in this.window;
            } catch (_a) {
              return false;
            }
          }
        }]);

        return BrowserViewportScroller;
      }();

      function getScrollRestorationProperty(obj) {
        return Object.getOwnPropertyDescriptor(obj, 'scrollRestoration');
      }

      function findAnchorFromDocument(document, target) {
        var documentResult = document.getElementById(target) || document.getElementsByName(target)[0];

        if (documentResult) {
          return documentResult;
        } // `getElementById` and `getElementsByName` won't pierce through the shadow DOM so we
        // have to traverse the DOM manually and do the lookup through the shadow roots.


        if (typeof document.createTreeWalker === 'function' && document.body && (document.body.createShadowRoot || document.body.attachShadow)) {
          var treeWalker = document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT);
          var currentNode = treeWalker.currentNode;

          while (currentNode) {
            var shadowRoot = currentNode.shadowRoot;

            if (shadowRoot) {
              // Note that `ShadowRoot` doesn't support `getElementsByName`
              // so we have to fall back to `querySelector`.
              var result = shadowRoot.getElementById(target) || shadowRoot.querySelector("[name=\"".concat(target, "\"]"));

              if (result) {
                return result;
              }
            }

            currentNode = treeWalker.nextNode();
          }
        }

        return null;
      }
      /**
       * Provides an empty implementation of the viewport scroller.
       */


      var NullViewportScroller = /*#__PURE__*/function () {
        function NullViewportScroller() {
          _classCallCheck2(this, NullViewportScroller);
        }

        _createClass2(NullViewportScroller, [{
          key: "setOffset",
          value:
          /**
           * Empty implementation
           */
          function setOffset(offset) {}
          /**
           * Empty implementation
           */

        }, {
          key: "getScrollPosition",
          value: function getScrollPosition() {
            return [0, 0];
          }
          /**
           * Empty implementation
           */

        }, {
          key: "scrollToPosition",
          value: function scrollToPosition(position) {}
          /**
           * Empty implementation
           */

        }, {
          key: "scrollToAnchor",
          value: function scrollToAnchor(anchor) {}
          /**
           * Empty implementation
           */

        }, {
          key: "setHistoryScrollRestoration",
          value: function setHistoryScrollRestoration(scrollRestoration) {}
        }]);

        return NullViewportScroller;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A wrapper around the `XMLHttpRequest` constructor.
       *
       * @publicApi
       */


      var _XhrFactory = function _XhrFactory() {
        _classCallCheck2(this, _XhrFactory);
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // This file only reexports content of the `src` folder. Keep it that way.

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=common.js.map

      /***/

    },

    /***/
    37716:
    /*!******************************************************************!*\
      !*** ./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js ***!
      \******************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ANALYZE_FOR_ENTRY_COMPONENTS": function ANALYZE_FOR_ENTRY_COMPONENTS() {
          return (
            /* binding */
            _ANALYZE_FOR_ENTRY_COMPONENTS
          );
        },

        /* harmony export */
        "APP_BOOTSTRAP_LISTENER": function APP_BOOTSTRAP_LISTENER() {
          return (
            /* binding */
            _APP_BOOTSTRAP_LISTENER
          );
        },

        /* harmony export */
        "APP_ID": function APP_ID() {
          return (
            /* binding */
            _APP_ID
          );
        },

        /* harmony export */
        "APP_INITIALIZER": function APP_INITIALIZER() {
          return (
            /* binding */
            _APP_INITIALIZER
          );
        },

        /* harmony export */
        "ApplicationInitStatus": function ApplicationInitStatus() {
          return (
            /* binding */
            _ApplicationInitStatus
          );
        },

        /* harmony export */
        "ApplicationModule": function ApplicationModule() {
          return (
            /* binding */
            _ApplicationModule
          );
        },

        /* harmony export */
        "ApplicationRef": function ApplicationRef() {
          return (
            /* binding */
            _ApplicationRef
          );
        },

        /* harmony export */
        "Attribute": function Attribute() {
          return (
            /* binding */
            _Attribute
          );
        },

        /* harmony export */
        "COMPILER_OPTIONS": function COMPILER_OPTIONS() {
          return (
            /* binding */
            _COMPILER_OPTIONS
          );
        },

        /* harmony export */
        "CUSTOM_ELEMENTS_SCHEMA": function CUSTOM_ELEMENTS_SCHEMA() {
          return (
            /* binding */
            _CUSTOM_ELEMENTS_SCHEMA
          );
        },

        /* harmony export */
        "ChangeDetectionStrategy": function ChangeDetectionStrategy() {
          return (
            /* binding */
            _ChangeDetectionStrategy
          );
        },

        /* harmony export */
        "ChangeDetectorRef": function ChangeDetectorRef() {
          return (
            /* binding */
            _ChangeDetectorRef
          );
        },

        /* harmony export */
        "Compiler": function Compiler() {
          return (
            /* binding */
            _Compiler
          );
        },

        /* harmony export */
        "CompilerFactory": function CompilerFactory() {
          return (
            /* binding */
            _CompilerFactory
          );
        },

        /* harmony export */
        "Component": function Component() {
          return (
            /* binding */
            _Component
          );
        },

        /* harmony export */
        "ComponentFactory": function ComponentFactory() {
          return (
            /* binding */
            _ComponentFactory
          );
        },

        /* harmony export */
        "ComponentFactoryResolver": function ComponentFactoryResolver() {
          return (
            /* binding */
            _ComponentFactoryResolver
          );
        },

        /* harmony export */
        "ComponentRef": function ComponentRef() {
          return (
            /* binding */
            _ComponentRef
          );
        },

        /* harmony export */
        "ContentChild": function ContentChild() {
          return (
            /* binding */
            _ContentChild
          );
        },

        /* harmony export */
        "ContentChildren": function ContentChildren() {
          return (
            /* binding */
            _ContentChildren
          );
        },

        /* harmony export */
        "DEFAULT_CURRENCY_CODE": function DEFAULT_CURRENCY_CODE() {
          return (
            /* binding */
            _DEFAULT_CURRENCY_CODE
          );
        },

        /* harmony export */
        "DebugElement": function DebugElement() {
          return (
            /* binding */
            _DebugElement
          );
        },

        /* harmony export */
        "DebugEventListener": function DebugEventListener() {
          return (
            /* binding */
            _DebugEventListener
          );
        },

        /* harmony export */
        "DebugNode": function DebugNode() {
          return (
            /* binding */
            _DebugNode
          );
        },

        /* harmony export */
        "DefaultIterableDiffer": function DefaultIterableDiffer() {
          return (
            /* binding */
            _DefaultIterableDiffer
          );
        },

        /* harmony export */
        "Directive": function Directive() {
          return (
            /* binding */
            _Directive
          );
        },

        /* harmony export */
        "ElementRef": function ElementRef() {
          return (
            /* binding */
            _ElementRef
          );
        },

        /* harmony export */
        "EmbeddedViewRef": function EmbeddedViewRef() {
          return (
            /* binding */
            _EmbeddedViewRef
          );
        },

        /* harmony export */
        "ErrorHandler": function ErrorHandler() {
          return (
            /* binding */
            _ErrorHandler
          );
        },

        /* harmony export */
        "EventEmitter": function EventEmitter() {
          return (
            /* binding */
            _EventEmitter
          );
        },

        /* harmony export */
        "Host": function Host() {
          return (
            /* binding */
            _Host
          );
        },

        /* harmony export */
        "HostBinding": function HostBinding() {
          return (
            /* binding */
            _HostBinding
          );
        },

        /* harmony export */
        "HostListener": function HostListener() {
          return (
            /* binding */
            _HostListener
          );
        },

        /* harmony export */
        "INJECTOR": function INJECTOR() {
          return (
            /* binding */
            INJECTOR$1
          );
        },

        /* harmony export */
        "Inject": function Inject() {
          return (
            /* binding */
            _Inject
          );
        },

        /* harmony export */
        "InjectFlags": function InjectFlags() {
          return (
            /* binding */
            _InjectFlags
          );
        },

        /* harmony export */
        "Injectable": function Injectable() {
          return (
            /* binding */
            _Injectable
          );
        },

        /* harmony export */
        "InjectionToken": function InjectionToken() {
          return (
            /* binding */
            _InjectionToken
          );
        },

        /* harmony export */
        "Injector": function Injector() {
          return (
            /* binding */
            _Injector
          );
        },

        /* harmony export */
        "Input": function Input() {
          return (
            /* binding */
            _Input
          );
        },

        /* harmony export */
        "IterableDiffers": function IterableDiffers() {
          return (
            /* binding */
            _IterableDiffers
          );
        },

        /* harmony export */
        "KeyValueDiffers": function KeyValueDiffers() {
          return (
            /* binding */
            _KeyValueDiffers
          );
        },

        /* harmony export */
        "LOCALE_ID": function LOCALE_ID() {
          return (
            /* binding */
            LOCALE_ID$1
          );
        },

        /* harmony export */
        "MissingTranslationStrategy": function MissingTranslationStrategy() {
          return (
            /* binding */
            _MissingTranslationStrategy
          );
        },

        /* harmony export */
        "ModuleWithComponentFactories": function ModuleWithComponentFactories() {
          return (
            /* binding */
            _ModuleWithComponentFactories
          );
        },

        /* harmony export */
        "NO_ERRORS_SCHEMA": function NO_ERRORS_SCHEMA() {
          return (
            /* binding */
            _NO_ERRORS_SCHEMA
          );
        },

        /* harmony export */
        "NgModule": function NgModule() {
          return (
            /* binding */
            _NgModule
          );
        },

        /* harmony export */
        "NgModuleFactory": function NgModuleFactory() {
          return (
            /* binding */
            _NgModuleFactory
          );
        },

        /* harmony export */
        "NgModuleFactoryLoader": function NgModuleFactoryLoader() {
          return (
            /* binding */
            _NgModuleFactoryLoader
          );
        },

        /* harmony export */
        "NgModuleRef": function NgModuleRef() {
          return (
            /* binding */
            _NgModuleRef
          );
        },

        /* harmony export */
        "NgProbeToken": function NgProbeToken() {
          return (
            /* binding */
            _NgProbeToken
          );
        },

        /* harmony export */
        "NgZone": function NgZone() {
          return (
            /* binding */
            _NgZone
          );
        },

        /* harmony export */
        "Optional": function Optional() {
          return (
            /* binding */
            _Optional
          );
        },

        /* harmony export */
        "Output": function Output() {
          return (
            /* binding */
            _Output
          );
        },

        /* harmony export */
        "PACKAGE_ROOT_URL": function PACKAGE_ROOT_URL() {
          return (
            /* binding */
            _PACKAGE_ROOT_URL
          );
        },

        /* harmony export */
        "PLATFORM_ID": function PLATFORM_ID() {
          return (
            /* binding */
            _PLATFORM_ID
          );
        },

        /* harmony export */
        "PLATFORM_INITIALIZER": function PLATFORM_INITIALIZER() {
          return (
            /* binding */
            _PLATFORM_INITIALIZER
          );
        },

        /* harmony export */
        "Pipe": function Pipe() {
          return (
            /* binding */
            _Pipe
          );
        },

        /* harmony export */
        "PlatformRef": function PlatformRef() {
          return (
            /* binding */
            _PlatformRef
          );
        },

        /* harmony export */
        "Query": function Query() {
          return (
            /* binding */
            _Query
          );
        },

        /* harmony export */
        "QueryList": function QueryList() {
          return (
            /* binding */
            _QueryList
          );
        },

        /* harmony export */
        "ReflectiveInjector": function ReflectiveInjector() {
          return (
            /* binding */
            _ReflectiveInjector
          );
        },

        /* harmony export */
        "ReflectiveKey": function ReflectiveKey() {
          return (
            /* binding */
            _ReflectiveKey
          );
        },

        /* harmony export */
        "Renderer2": function Renderer2() {
          return (
            /* binding */
            _Renderer
          );
        },

        /* harmony export */
        "RendererFactory2": function RendererFactory2() {
          return (
            /* binding */
            _RendererFactory
          );
        },

        /* harmony export */
        "RendererStyleFlags2": function RendererStyleFlags2() {
          return (
            /* binding */
            _RendererStyleFlags
          );
        },

        /* harmony export */
        "ResolvedReflectiveFactory": function ResolvedReflectiveFactory() {
          return (
            /* binding */
            _ResolvedReflectiveFactory
          );
        },

        /* harmony export */
        "Sanitizer": function Sanitizer() {
          return (
            /* binding */
            _Sanitizer
          );
        },

        /* harmony export */
        "SecurityContext": function SecurityContext() {
          return (
            /* binding */
            _SecurityContext
          );
        },

        /* harmony export */
        "Self": function Self() {
          return (
            /* binding */
            _Self
          );
        },

        /* harmony export */
        "SimpleChange": function SimpleChange() {
          return (
            /* binding */
            _SimpleChange
          );
        },

        /* harmony export */
        "SkipSelf": function SkipSelf() {
          return (
            /* binding */
            _SkipSelf
          );
        },

        /* harmony export */
        "SystemJsNgModuleLoader": function SystemJsNgModuleLoader() {
          return (
            /* binding */
            _SystemJsNgModuleLoader
          );
        },

        /* harmony export */
        "SystemJsNgModuleLoaderConfig": function SystemJsNgModuleLoaderConfig() {
          return (
            /* binding */
            _SystemJsNgModuleLoaderConfig
          );
        },

        /* harmony export */
        "TRANSLATIONS": function TRANSLATIONS() {
          return (
            /* binding */
            _TRANSLATIONS
          );
        },

        /* harmony export */
        "TRANSLATIONS_FORMAT": function TRANSLATIONS_FORMAT() {
          return (
            /* binding */
            _TRANSLATIONS_FORMAT
          );
        },

        /* harmony export */
        "TemplateRef": function TemplateRef() {
          return (
            /* binding */
            _TemplateRef
          );
        },

        /* harmony export */
        "Testability": function Testability() {
          return (
            /* binding */
            _Testability
          );
        },

        /* harmony export */
        "TestabilityRegistry": function TestabilityRegistry() {
          return (
            /* binding */
            _TestabilityRegistry
          );
        },

        /* harmony export */
        "Type": function Type() {
          return (
            /* binding */
            _Type
          );
        },

        /* harmony export */
        "VERSION": function VERSION() {
          return (
            /* binding */
            _VERSION2
          );
        },

        /* harmony export */
        "Version": function Version() {
          return (
            /* binding */
            _Version
          );
        },

        /* harmony export */
        "ViewChild": function ViewChild() {
          return (
            /* binding */
            _ViewChild
          );
        },

        /* harmony export */
        "ViewChildren": function ViewChildren() {
          return (
            /* binding */
            _ViewChildren
          );
        },

        /* harmony export */
        "ViewContainerRef": function ViewContainerRef() {
          return (
            /* binding */
            _ViewContainerRef
          );
        },

        /* harmony export */
        "ViewEncapsulation": function ViewEncapsulation() {
          return (
            /* binding */
            _ViewEncapsulation
          );
        },

        /* harmony export */
        "ViewRef": function ViewRef() {
          return (
            /* binding */
            ViewRef$1
          );
        },

        /* harmony export */
        "WrappedValue": function WrappedValue() {
          return (
            /* binding */
            _WrappedValue
          );
        },

        /* harmony export */
        "asNativeElements": function asNativeElements() {
          return (
            /* binding */
            _asNativeElements
          );
        },

        /* harmony export */
        "assertPlatform": function assertPlatform() {
          return (
            /* binding */
            _assertPlatform
          );
        },

        /* harmony export */
        "createPlatform": function createPlatform() {
          return (
            /* binding */
            _createPlatform
          );
        },

        /* harmony export */
        "createPlatformFactory": function createPlatformFactory() {
          return (
            /* binding */
            _createPlatformFactory
          );
        },

        /* harmony export */
        "defineInjectable": function defineInjectable() {
          return (
            /* binding */
            _defineInjectable
          );
        },

        /* harmony export */
        "destroyPlatform": function destroyPlatform() {
          return (
            /* binding */
            _destroyPlatform
          );
        },

        /* harmony export */
        "enableProdMode": function enableProdMode() {
          return (
            /* binding */
            _enableProdMode
          );
        },

        /* harmony export */
        "forwardRef": function forwardRef() {
          return (
            /* binding */
            _forwardRef
          );
        },

        /* harmony export */
        "getDebugNode": function getDebugNode() {
          return (
            /* binding */
            getDebugNode$1
          );
        },

        /* harmony export */
        "getModuleFactory": function getModuleFactory() {
          return (
            /* binding */
            _getModuleFactory
          );
        },

        /* harmony export */
        "getPlatform": function getPlatform() {
          return (
            /* binding */
            _getPlatform
          );
        },

        /* harmony export */
        "inject": function inject() {
          return (
            /* binding */
            _inject
          );
        },

        /* harmony export */
        "isDevMode": function isDevMode() {
          return (
            /* binding */
            _isDevMode
          );
        },

        /* harmony export */
        "platformCore": function platformCore() {
          return (
            /* binding */
            _platformCore
          );
        },

        /* harmony export */
        "resolveForwardRef": function resolveForwardRef() {
          return (
            /* binding */
            _resolveForwardRef
          );
        },

        /* harmony export */
        "setTestabilityGetter": function setTestabilityGetter() {
          return (
            /* binding */
            _setTestabilityGetter
          );
        },

        /* harmony export */
        "ɵ0": function ɵ0() {
          return (
            /* binding */
            ɵ0$3
          );
        },

        /* harmony export */
        "ɵALLOW_MULTIPLE_PLATFORMS": function ɵALLOW_MULTIPLE_PLATFORMS() {
          return (
            /* binding */
            ALLOW_MULTIPLE_PLATFORMS
          );
        },

        /* harmony export */
        "ɵAPP_ID_RANDOM_PROVIDER": function ɵAPP_ID_RANDOM_PROVIDER() {
          return (
            /* binding */
            APP_ID_RANDOM_PROVIDER
          );
        },

        /* harmony export */
        "ɵCREATE_ATTRIBUTE_DECORATOR__POST_R3__": function ɵCREATE_ATTRIBUTE_DECORATOR__POST_R3__() {
          return (
            /* binding */
            CREATE_ATTRIBUTE_DECORATOR__POST_R3__
          );
        },

        /* harmony export */
        "ɵChangeDetectorStatus": function ɵChangeDetectorStatus() {
          return (
            /* binding */
            ChangeDetectorStatus
          );
        },

        /* harmony export */
        "ɵCodegenComponentFactoryResolver": function ɵCodegenComponentFactoryResolver() {
          return (
            /* binding */
            CodegenComponentFactoryResolver
          );
        },

        /* harmony export */
        "ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__": function ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__() {
          return (
            /* binding */
            Compiler_compileModuleAndAllComponentsAsync__POST_R3__
          );
        },

        /* harmony export */
        "ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__": function ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__() {
          return (
            /* binding */
            Compiler_compileModuleAndAllComponentsSync__POST_R3__
          );
        },

        /* harmony export */
        "ɵCompiler_compileModuleAsync__POST_R3__": function ɵCompiler_compileModuleAsync__POST_R3__() {
          return (
            /* binding */
            Compiler_compileModuleAsync__POST_R3__
          );
        },

        /* harmony export */
        "ɵCompiler_compileModuleSync__POST_R3__": function ɵCompiler_compileModuleSync__POST_R3__() {
          return (
            /* binding */
            Compiler_compileModuleSync__POST_R3__
          );
        },

        /* harmony export */
        "ɵComponentFactory": function ɵComponentFactory() {
          return (
            /* binding */
            _ComponentFactory
          );
        },

        /* harmony export */
        "ɵConsole": function ɵConsole() {
          return (
            /* binding */
            Console
          );
        },

        /* harmony export */
        "ɵDEFAULT_LOCALE_ID": function ɵDEFAULT_LOCALE_ID() {
          return (
            /* binding */
            DEFAULT_LOCALE_ID
          );
        },

        /* harmony export */
        "ɵEMPTY_ARRAY": function ɵEMPTY_ARRAY() {
          return (
            /* binding */
            EMPTY_ARRAY
          );
        },

        /* harmony export */
        "ɵEMPTY_MAP": function ɵEMPTY_MAP() {
          return (
            /* binding */
            EMPTY_MAP
          );
        },

        /* harmony export */
        "ɵINJECTOR_IMPL__POST_R3__": function ɵINJECTOR_IMPL__POST_R3__() {
          return (
            /* binding */
            INJECTOR_IMPL__POST_R3__
          );
        },

        /* harmony export */
        "ɵINJECTOR_SCOPE": function ɵINJECTOR_SCOPE() {
          return (
            /* binding */
            INJECTOR_SCOPE
          );
        },

        /* harmony export */
        "ɵLifecycleHooksFeature": function ɵLifecycleHooksFeature() {
          return (
            /* binding */
            LifecycleHooksFeature
          );
        },

        /* harmony export */
        "ɵLocaleDataIndex": function ɵLocaleDataIndex() {
          return (
            /* binding */
            LocaleDataIndex
          );
        },

        /* harmony export */
        "ɵNG_COMP_DEF": function ɵNG_COMP_DEF() {
          return (
            /* binding */
            NG_COMP_DEF
          );
        },

        /* harmony export */
        "ɵNG_DIR_DEF": function ɵNG_DIR_DEF() {
          return (
            /* binding */
            NG_DIR_DEF
          );
        },

        /* harmony export */
        "ɵNG_ELEMENT_ID": function ɵNG_ELEMENT_ID() {
          return (
            /* binding */
            NG_ELEMENT_ID
          );
        },

        /* harmony export */
        "ɵNG_INJ_DEF": function ɵNG_INJ_DEF() {
          return (
            /* binding */
            NG_INJ_DEF
          );
        },

        /* harmony export */
        "ɵNG_MOD_DEF": function ɵNG_MOD_DEF() {
          return (
            /* binding */
            NG_MOD_DEF
          );
        },

        /* harmony export */
        "ɵNG_PIPE_DEF": function ɵNG_PIPE_DEF() {
          return (
            /* binding */
            NG_PIPE_DEF
          );
        },

        /* harmony export */
        "ɵNG_PROV_DEF": function ɵNG_PROV_DEF() {
          return (
            /* binding */
            NG_PROV_DEF
          );
        },

        /* harmony export */
        "ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR": function ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR() {
          return (
            /* binding */
            NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR
          );
        },

        /* harmony export */
        "ɵNO_CHANGE": function ɵNO_CHANGE() {
          return (
            /* binding */
            NO_CHANGE
          );
        },

        /* harmony export */
        "ɵNgModuleFactory": function ɵNgModuleFactory() {
          return (
            /* binding */
            NgModuleFactory$1
          );
        },

        /* harmony export */
        "ɵNoopNgZone": function ɵNoopNgZone() {
          return (
            /* binding */
            NoopNgZone
          );
        },

        /* harmony export */
        "ɵReflectionCapabilities": function ɵReflectionCapabilities() {
          return (
            /* binding */
            ReflectionCapabilities
          );
        },

        /* harmony export */
        "ɵRender3ComponentFactory": function ɵRender3ComponentFactory() {
          return (
            /* binding */
            ComponentFactory$1
          );
        },

        /* harmony export */
        "ɵRender3ComponentRef": function ɵRender3ComponentRef() {
          return (
            /* binding */
            ComponentRef$1
          );
        },

        /* harmony export */
        "ɵRender3NgModuleRef": function ɵRender3NgModuleRef() {
          return (
            /* binding */
            NgModuleRef$1
          );
        },

        /* harmony export */
        "ɵRuntimeError": function ɵRuntimeError() {
          return (
            /* binding */
            RuntimeError
          );
        },

        /* harmony export */
        "ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__": function ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__() {
          return (
            /* binding */
            SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__
          );
        },

        /* harmony export */
        "ɵSWITCH_COMPILE_COMPONENT__POST_R3__": function ɵSWITCH_COMPILE_COMPONENT__POST_R3__() {
          return (
            /* binding */
            SWITCH_COMPILE_COMPONENT__POST_R3__
          );
        },

        /* harmony export */
        "ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__": function ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__() {
          return (
            /* binding */
            SWITCH_COMPILE_DIRECTIVE__POST_R3__
          );
        },

        /* harmony export */
        "ɵSWITCH_COMPILE_INJECTABLE__POST_R3__": function ɵSWITCH_COMPILE_INJECTABLE__POST_R3__() {
          return (
            /* binding */
            SWITCH_COMPILE_INJECTABLE__POST_R3__
          );
        },

        /* harmony export */
        "ɵSWITCH_COMPILE_NGMODULE__POST_R3__": function ɵSWITCH_COMPILE_NGMODULE__POST_R3__() {
          return (
            /* binding */
            SWITCH_COMPILE_NGMODULE__POST_R3__
          );
        },

        /* harmony export */
        "ɵSWITCH_COMPILE_PIPE__POST_R3__": function ɵSWITCH_COMPILE_PIPE__POST_R3__() {
          return (
            /* binding */
            SWITCH_COMPILE_PIPE__POST_R3__
          );
        },

        /* harmony export */
        "ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__": function ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__() {
          return (
            /* binding */
            SWITCH_ELEMENT_REF_FACTORY__POST_R3__
          );
        },

        /* harmony export */
        "ɵSWITCH_IVY_ENABLED__POST_R3__": function ɵSWITCH_IVY_ENABLED__POST_R3__() {
          return (
            /* binding */
            SWITCH_IVY_ENABLED__POST_R3__
          );
        },

        /* harmony export */
        "ɵSWITCH_RENDERER2_FACTORY__POST_R3__": function ɵSWITCH_RENDERER2_FACTORY__POST_R3__() {
          return (
            /* binding */
            SWITCH_RENDERER2_FACTORY__POST_R3__
          );
        },

        /* harmony export */
        "ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__": function ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__() {
          return (
            /* binding */
            SWITCH_TEMPLATE_REF_FACTORY__POST_R3__
          );
        },

        /* harmony export */
        "ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__": function ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__() {
          return (
            /* binding */
            SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__
          );
        },

        /* harmony export */
        "ɵ_sanitizeHtml": function ɵ_sanitizeHtml() {
          return (
            /* binding */
            _sanitizeHtml
          );
        },

        /* harmony export */
        "ɵ_sanitizeUrl": function ɵ_sanitizeUrl() {
          return (
            /* binding */
            _sanitizeUrl
          );
        },

        /* harmony export */
        "ɵallowSanitizationBypassAndThrow": function ɵallowSanitizationBypassAndThrow() {
          return (
            /* binding */
            allowSanitizationBypassAndThrow
          );
        },

        /* harmony export */
        "ɵand": function ɵand() {
          return (
            /* binding */
            anchorDef
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_a": function ɵangular_packages_core_core_a() {
          return (
            /* binding */
            isForwardRef
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_b": function ɵangular_packages_core_core_b() {
          return (
            /* binding */
            injectInjectorOnly
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_ba": function ɵangular_packages_core_core_ba() {
          return (
            /* binding */
            zoneSchedulerFactory
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bb": function ɵangular_packages_core_core_bb() {
          return (
            /* binding */
            USD_CURRENCY_CODE
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bc": function ɵangular_packages_core_core_bc() {
          return (
            /* binding */
            _def
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bd": function ɵangular_packages_core_core_bd() {
          return (
            /* binding */
            DebugContext
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_be": function ɵangular_packages_core_core_be() {
          return (
            /* binding */
            NgOnChangesFeatureImpl
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bf": function ɵangular_packages_core_core_bf() {
          return (
            /* binding */
            SCHEDULER
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bg": function ɵangular_packages_core_core_bg() {
          return (
            /* binding */
            injectAttributeImpl
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bh": function ɵangular_packages_core_core_bh() {
          return (
            /* binding */
            getLView
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bi": function ɵangular_packages_core_core_bi() {
          return (
            /* binding */
            getBindingRoot
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bj": function ɵangular_packages_core_core_bj() {
          return (
            /* binding */
            nextContextImpl
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bl": function ɵangular_packages_core_core_bl() {
          return (
            /* binding */
            pureFunction1Internal
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bm": function ɵangular_packages_core_core_bm() {
          return (
            /* binding */
            pureFunction2Internal
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bn": function ɵangular_packages_core_core_bn() {
          return (
            /* binding */
            pureFunction3Internal
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bo": function ɵangular_packages_core_core_bo() {
          return (
            /* binding */
            pureFunction4Internal
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bp": function ɵangular_packages_core_core_bp() {
          return (
            /* binding */
            pureFunctionVInternal
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bq": function ɵangular_packages_core_core_bq() {
          return (
            /* binding */
            getUrlSanitizer
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_br": function ɵangular_packages_core_core_br() {
          return (
            /* binding */
            makePropDecorator
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bs": function ɵangular_packages_core_core_bs() {
          return (
            /* binding */
            makeParamDecorator
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bv": function ɵangular_packages_core_core_bv() {
          return (
            /* binding */
            getClosureSafeProperty
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bw": function ɵangular_packages_core_core_bw() {
          return (
            /* binding */
            NullInjector
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bx": function ɵangular_packages_core_core_bx() {
          return (
            /* binding */
            getInjectImplementation
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_bz": function ɵangular_packages_core_core_bz() {
          return (
            /* binding */
            getNativeByTNode
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_c": function ɵangular_packages_core_core_c() {
          return (
            /* binding */
            attachInjectFlag
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_cb": function ɵangular_packages_core_core_cb() {
          return (
            /* binding */
            getRootContext
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_cc": function ɵangular_packages_core_core_cc() {
          return (
            /* binding */
            i18nPostprocess
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_d": function ɵangular_packages_core_core_d() {
          return (
            /* binding */
            ReflectiveInjector_
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_e": function ɵangular_packages_core_core_e() {
          return (
            /* binding */
            ReflectiveDependency
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_f": function ɵangular_packages_core_core_f() {
          return (
            /* binding */
            resolveReflectiveProviders
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_g": function ɵangular_packages_core_core_g() {
          return (
            /* binding */
            _appIdRandomProviderFactory
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_h": function ɵangular_packages_core_core_h() {
          return (
            /* binding */
            injectRenderer2
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_i": function ɵangular_packages_core_core_i() {
          return (
            /* binding */
            injectElementRef
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_j": function ɵangular_packages_core_core_j() {
          return (
            /* binding */
            createElementRef
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_k": function ɵangular_packages_core_core_k() {
          return (
            /* binding */
            getModuleFactory__PRE_R3__
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_l": function ɵangular_packages_core_core_l() {
          return (
            /* binding */
            injectTemplateRef
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_m": function ɵangular_packages_core_core_m() {
          return (
            /* binding */
            createTemplateRef
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_n": function ɵangular_packages_core_core_n() {
          return (
            /* binding */
            injectViewContainerRef
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_o": function ɵangular_packages_core_core_o() {
          return (
            /* binding */
            DebugNode__PRE_R3__
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_p": function ɵangular_packages_core_core_p() {
          return (
            /* binding */
            DebugElement__PRE_R3__
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_q": function ɵangular_packages_core_core_q() {
          return (
            /* binding */
            getDebugNodeR2__PRE_R3__
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_r": function ɵangular_packages_core_core_r() {
          return (
            /* binding */
            injectChangeDetectorRef
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_s": function ɵangular_packages_core_core_s() {
          return (
            /* binding */
            DefaultIterableDifferFactory
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_t": function ɵangular_packages_core_core_t() {
          return (
            /* binding */
            DefaultKeyValueDifferFactory
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_u": function ɵangular_packages_core_core_u() {
          return (
            /* binding */
            defaultIterableDiffersFactory
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_v": function ɵangular_packages_core_core_v() {
          return (
            /* binding */
            defaultKeyValueDiffersFactory
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_w": function ɵangular_packages_core_core_w() {
          return (
            /* binding */
            _iterableDiffersFactory
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_x": function ɵangular_packages_core_core_x() {
          return (
            /* binding */
            _keyValueDiffersFactory
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_y": function ɵangular_packages_core_core_y() {
          return (
            /* binding */
            _localeFactory
          );
        },

        /* harmony export */
        "ɵangular_packages_core_core_z": function ɵangular_packages_core_core_z() {
          return (
            /* binding */
            APPLICATION_MODULE_PROVIDERS
          );
        },

        /* harmony export */
        "ɵbypassSanitizationTrustHtml": function ɵbypassSanitizationTrustHtml() {
          return (
            /* binding */
            bypassSanitizationTrustHtml
          );
        },

        /* harmony export */
        "ɵbypassSanitizationTrustResourceUrl": function ɵbypassSanitizationTrustResourceUrl() {
          return (
            /* binding */
            bypassSanitizationTrustResourceUrl
          );
        },

        /* harmony export */
        "ɵbypassSanitizationTrustScript": function ɵbypassSanitizationTrustScript() {
          return (
            /* binding */
            bypassSanitizationTrustScript
          );
        },

        /* harmony export */
        "ɵbypassSanitizationTrustStyle": function ɵbypassSanitizationTrustStyle() {
          return (
            /* binding */
            bypassSanitizationTrustStyle
          );
        },

        /* harmony export */
        "ɵbypassSanitizationTrustUrl": function ɵbypassSanitizationTrustUrl() {
          return (
            /* binding */
            bypassSanitizationTrustUrl
          );
        },

        /* harmony export */
        "ɵccf": function ɵccf() {
          return (
            /* binding */
            createComponentFactory
          );
        },

        /* harmony export */
        "ɵclearOverrides": function ɵclearOverrides() {
          return (
            /* binding */
            clearOverrides
          );
        },

        /* harmony export */
        "ɵclearResolutionOfComponentResourcesQueue": function ɵclearResolutionOfComponentResourcesQueue() {
          return (
            /* binding */
            clearResolutionOfComponentResourcesQueue
          );
        },

        /* harmony export */
        "ɵcmf": function ɵcmf() {
          return (
            /* binding */
            createNgModuleFactory
          );
        },

        /* harmony export */
        "ɵcompileComponent": function ɵcompileComponent() {
          return (
            /* binding */
            compileComponent
          );
        },

        /* harmony export */
        "ɵcompileDirective": function ɵcompileDirective() {
          return (
            /* binding */
            compileDirective
          );
        },

        /* harmony export */
        "ɵcompileNgModule": function ɵcompileNgModule() {
          return (
            /* binding */
            compileNgModule
          );
        },

        /* harmony export */
        "ɵcompileNgModuleDefs": function ɵcompileNgModuleDefs() {
          return (
            /* binding */
            compileNgModuleDefs
          );
        },

        /* harmony export */
        "ɵcompileNgModuleFactory__POST_R3__": function ɵcompileNgModuleFactory__POST_R3__() {
          return (
            /* binding */
            compileNgModuleFactory__POST_R3__
          );
        },

        /* harmony export */
        "ɵcompilePipe": function ɵcompilePipe() {
          return (
            /* binding */
            compilePipe
          );
        },

        /* harmony export */
        "ɵcreateInjector": function ɵcreateInjector() {
          return (
            /* binding */
            createInjector
          );
        },

        /* harmony export */
        "ɵcrt": function ɵcrt() {
          return (
            /* binding */
            createRendererType2
          );
        },

        /* harmony export */
        "ɵdefaultIterableDiffers": function ɵdefaultIterableDiffers() {
          return (
            /* binding */
            defaultIterableDiffers
          );
        },

        /* harmony export */
        "ɵdefaultKeyValueDiffers": function ɵdefaultKeyValueDiffers() {
          return (
            /* binding */
            defaultKeyValueDiffers
          );
        },

        /* harmony export */
        "ɵdetectChanges": function ɵdetectChanges() {
          return (
            /* binding */
            detectChanges
          );
        },

        /* harmony export */
        "ɵdevModeEqual": function ɵdevModeEqual() {
          return (
            /* binding */
            devModeEqual
          );
        },

        /* harmony export */
        "ɵdid": function ɵdid() {
          return (
            /* binding */
            directiveDef
          );
        },

        /* harmony export */
        "ɵeld": function ɵeld() {
          return (
            /* binding */
            elementDef
          );
        },

        /* harmony export */
        "ɵfindLocaleData": function ɵfindLocaleData() {
          return (
            /* binding */
            findLocaleData
          );
        },

        /* harmony export */
        "ɵflushModuleScopingQueueAsMuchAsPossible": function ɵflushModuleScopingQueueAsMuchAsPossible() {
          return (
            /* binding */
            flushModuleScopingQueueAsMuchAsPossible
          );
        },

        /* harmony export */
        "ɵgetComponentViewDefinitionFactory": function ɵgetComponentViewDefinitionFactory() {
          return (
            /* binding */
            getComponentViewDefinitionFactory
          );
        },

        /* harmony export */
        "ɵgetDebugNodeR2": function ɵgetDebugNodeR2() {
          return (
            /* binding */
            getDebugNodeR2
          );
        },

        /* harmony export */
        "ɵgetDebugNode__POST_R3__": function ɵgetDebugNode__POST_R3__() {
          return (
            /* binding */
            getDebugNode__POST_R3__
          );
        },

        /* harmony export */
        "ɵgetDirectives": function ɵgetDirectives() {
          return (
            /* binding */
            getDirectives
          );
        },

        /* harmony export */
        "ɵgetHostElement": function ɵgetHostElement() {
          return (
            /* binding */
            getHostElement
          );
        },

        /* harmony export */
        "ɵgetInjectableDef": function ɵgetInjectableDef() {
          return (
            /* binding */
            getInjectableDef
          );
        },

        /* harmony export */
        "ɵgetLContext": function ɵgetLContext() {
          return (
            /* binding */
            getLContext
          );
        },

        /* harmony export */
        "ɵgetLocaleCurrencyCode": function ɵgetLocaleCurrencyCode() {
          return (
            /* binding */
            getLocaleCurrencyCode
          );
        },

        /* harmony export */
        "ɵgetLocalePluralCase": function ɵgetLocalePluralCase() {
          return (
            /* binding */
            getLocalePluralCase
          );
        },

        /* harmony export */
        "ɵgetModuleFactory__POST_R3__": function ɵgetModuleFactory__POST_R3__() {
          return (
            /* binding */
            getModuleFactory__POST_R3__
          );
        },

        /* harmony export */
        "ɵgetSanitizationBypassType": function ɵgetSanitizationBypassType() {
          return (
            /* binding */
            getSanitizationBypassType
          );
        },

        /* harmony export */
        "ɵglobal": function ɵglobal() {
          return (
            /* binding */
            _global
          );
        },

        /* harmony export */
        "ɵinitServicesIfNeeded": function ɵinitServicesIfNeeded() {
          return (
            /* binding */
            initServicesIfNeeded
          );
        },

        /* harmony export */
        "ɵinlineInterpolate": function ɵinlineInterpolate() {
          return (
            /* binding */
            inlineInterpolate
          );
        },

        /* harmony export */
        "ɵinterpolate": function ɵinterpolate() {
          return (
            /* binding */
            interpolate
          );
        },

        /* harmony export */
        "ɵisBoundToModule__POST_R3__": function ɵisBoundToModule__POST_R3__() {
          return (
            /* binding */
            isBoundToModule__POST_R3__
          );
        },

        /* harmony export */
        "ɵisDefaultChangeDetectionStrategy": function ɵisDefaultChangeDetectionStrategy() {
          return (
            /* binding */
            isDefaultChangeDetectionStrategy
          );
        },

        /* harmony export */
        "ɵisListLikeIterable": function ɵisListLikeIterable() {
          return (
            /* binding */
            isListLikeIterable
          );
        },

        /* harmony export */
        "ɵisObservable": function ɵisObservable() {
          return (
            /* binding */
            isObservable
          );
        },

        /* harmony export */
        "ɵisPromise": function ɵisPromise() {
          return (
            /* binding */
            isPromise
          );
        },

        /* harmony export */
        "ɵisSubscribable": function ɵisSubscribable() {
          return (
            /* binding */
            isSubscribable
          );
        },

        /* harmony export */
        "ɵivyEnabled": function ɵivyEnabled() {
          return (
            /* binding */
            ivyEnabled
          );
        },

        /* harmony export */
        "ɵmakeDecorator": function ɵmakeDecorator() {
          return (
            /* binding */
            makeDecorator
          );
        },

        /* harmony export */
        "ɵmarkDirty": function ɵmarkDirty() {
          return (
            /* binding */
            markDirty
          );
        },

        /* harmony export */
        "ɵmod": function ɵmod() {
          return (
            /* binding */
            moduleDef
          );
        },

        /* harmony export */
        "ɵmpd": function ɵmpd() {
          return (
            /* binding */
            moduleProvideDef
          );
        },

        /* harmony export */
        "ɵncd": function ɵncd() {
          return (
            /* binding */
            ngContentDef
          );
        },

        /* harmony export */
        "ɵnoSideEffects": function ɵnoSideEffects() {
          return (
            /* binding */
            noSideEffects
          );
        },

        /* harmony export */
        "ɵnov": function ɵnov() {
          return (
            /* binding */
            nodeValue
          );
        },

        /* harmony export */
        "ɵoverrideComponentView": function ɵoverrideComponentView() {
          return (
            /* binding */
            overrideComponentView
          );
        },

        /* harmony export */
        "ɵoverrideProvider": function ɵoverrideProvider() {
          return (
            /* binding */
            overrideProvider
          );
        },

        /* harmony export */
        "ɵpad": function ɵpad() {
          return (
            /* binding */
            pureArrayDef
          );
        },

        /* harmony export */
        "ɵpatchComponentDefWithScope": function ɵpatchComponentDefWithScope() {
          return (
            /* binding */
            patchComponentDefWithScope
          );
        },

        /* harmony export */
        "ɵpid": function ɵpid() {
          return (
            /* binding */
            pipeDef
          );
        },

        /* harmony export */
        "ɵpod": function ɵpod() {
          return (
            /* binding */
            pureObjectDef
          );
        },

        /* harmony export */
        "ɵppd": function ɵppd() {
          return (
            /* binding */
            purePipeDef
          );
        },

        /* harmony export */
        "ɵprd": function ɵprd() {
          return (
            /* binding */
            providerDef
          );
        },

        /* harmony export */
        "ɵpublishDefaultGlobalUtils": function ɵpublishDefaultGlobalUtils() {
          return (
            /* binding */
            publishDefaultGlobalUtils
          );
        },

        /* harmony export */
        "ɵpublishGlobalUtil": function ɵpublishGlobalUtil() {
          return (
            /* binding */
            publishGlobalUtil
          );
        },

        /* harmony export */
        "ɵqud": function ɵqud() {
          return (
            /* binding */
            queryDef
          );
        },

        /* harmony export */
        "ɵregisterLocaleData": function ɵregisterLocaleData() {
          return (
            /* binding */
            registerLocaleData
          );
        },

        /* harmony export */
        "ɵregisterModuleFactory": function ɵregisterModuleFactory() {
          return (
            /* binding */
            registerModuleFactory
          );
        },

        /* harmony export */
        "ɵregisterNgModuleType": function ɵregisterNgModuleType() {
          return (
            /* binding */
            registerNgModuleType
          );
        },

        /* harmony export */
        "ɵrenderComponent": function ɵrenderComponent() {
          return (
            /* binding */
            renderComponent$1
          );
        },

        /* harmony export */
        "ɵresetCompiledComponents": function ɵresetCompiledComponents() {
          return (
            /* binding */
            resetCompiledComponents
          );
        },

        /* harmony export */
        "ɵresetJitOptions": function ɵresetJitOptions() {
          return (
            /* binding */
            resetJitOptions
          );
        },

        /* harmony export */
        "ɵresolveComponentResources": function ɵresolveComponentResources() {
          return (
            /* binding */
            resolveComponentResources
          );
        },

        /* harmony export */
        "ɵsetClassMetadata": function ɵsetClassMetadata() {
          return (
            /* binding */
            setClassMetadata
          );
        },

        /* harmony export */
        "ɵsetCurrentInjector": function ɵsetCurrentInjector() {
          return (
            /* binding */
            setCurrentInjector
          );
        },

        /* harmony export */
        "ɵsetDocument": function ɵsetDocument() {
          return (
            /* binding */
            setDocument
          );
        },

        /* harmony export */
        "ɵsetLocaleId": function ɵsetLocaleId() {
          return (
            /* binding */
            setLocaleId
          );
        },

        /* harmony export */
        "ɵstore": function ɵstore() {
          return (
            /* binding */
            store
          );
        },

        /* harmony export */
        "ɵstringify": function ɵstringify() {
          return (
            /* binding */
            stringify
          );
        },

        /* harmony export */
        "ɵted": function ɵted() {
          return (
            /* binding */
            textDef
          );
        },

        /* harmony export */
        "ɵtransitiveScopesFor": function ɵtransitiveScopesFor() {
          return (
            /* binding */
            transitiveScopesFor
          );
        },

        /* harmony export */
        "ɵunregisterLocaleData": function ɵunregisterLocaleData() {
          return (
            /* binding */
            unregisterAllLocaleData
          );
        },

        /* harmony export */
        "ɵunv": function ɵunv() {
          return (
            /* binding */
            unwrapValue
          );
        },

        /* harmony export */
        "ɵunwrapSafeValue": function ɵunwrapSafeValue() {
          return (
            /* binding */
            unwrapSafeValue
          );
        },

        /* harmony export */
        "ɵvid": function ɵvid() {
          return (
            /* binding */
            viewDef
          );
        },

        /* harmony export */
        "ɵwhenRendered": function ɵwhenRendered() {
          return (
            /* binding */
            whenRendered
          );
        },

        /* harmony export */
        "ɵɵCopyDefinitionFeature": function ɵɵCopyDefinitionFeature() {
          return (
            /* binding */
            _ɵɵCopyDefinitionFeature
          );
        },

        /* harmony export */
        "ɵɵFactoryTarget": function ɵɵFactoryTarget() {
          return (
            /* binding */
            FactoryTarget
          );
        },

        /* harmony export */
        "ɵɵInheritDefinitionFeature": function ɵɵInheritDefinitionFeature() {
          return (
            /* binding */
            _ɵɵInheritDefinitionFeature
          );
        },

        /* harmony export */
        "ɵɵNgOnChangesFeature": function ɵɵNgOnChangesFeature() {
          return (
            /* binding */
            _ɵɵNgOnChangesFeature
          );
        },

        /* harmony export */
        "ɵɵProvidersFeature": function ɵɵProvidersFeature() {
          return (
            /* binding */
            _ɵɵProvidersFeature
          );
        },

        /* harmony export */
        "ɵɵadvance": function ɵɵadvance() {
          return (
            /* binding */
            _ɵɵadvance
          );
        },

        /* harmony export */
        "ɵɵattribute": function ɵɵattribute() {
          return (
            /* binding */
            _ɵɵattribute
          );
        },

        /* harmony export */
        "ɵɵattributeInterpolate1": function ɵɵattributeInterpolate1() {
          return (
            /* binding */
            _ɵɵattributeInterpolate
          );
        },

        /* harmony export */
        "ɵɵattributeInterpolate2": function ɵɵattributeInterpolate2() {
          return (
            /* binding */
            _ɵɵattributeInterpolate2
          );
        },

        /* harmony export */
        "ɵɵattributeInterpolate3": function ɵɵattributeInterpolate3() {
          return (
            /* binding */
            _ɵɵattributeInterpolate3
          );
        },

        /* harmony export */
        "ɵɵattributeInterpolate4": function ɵɵattributeInterpolate4() {
          return (
            /* binding */
            _ɵɵattributeInterpolate4
          );
        },

        /* harmony export */
        "ɵɵattributeInterpolate5": function ɵɵattributeInterpolate5() {
          return (
            /* binding */
            _ɵɵattributeInterpolate5
          );
        },

        /* harmony export */
        "ɵɵattributeInterpolate6": function ɵɵattributeInterpolate6() {
          return (
            /* binding */
            _ɵɵattributeInterpolate6
          );
        },

        /* harmony export */
        "ɵɵattributeInterpolate7": function ɵɵattributeInterpolate7() {
          return (
            /* binding */
            _ɵɵattributeInterpolate7
          );
        },

        /* harmony export */
        "ɵɵattributeInterpolate8": function ɵɵattributeInterpolate8() {
          return (
            /* binding */
            _ɵɵattributeInterpolate8
          );
        },

        /* harmony export */
        "ɵɵattributeInterpolateV": function ɵɵattributeInterpolateV() {
          return (
            /* binding */
            _ɵɵattributeInterpolateV
          );
        },

        /* harmony export */
        "ɵɵclassMap": function ɵɵclassMap() {
          return (
            /* binding */
            _ɵɵclassMap
          );
        },

        /* harmony export */
        "ɵɵclassMapInterpolate1": function ɵɵclassMapInterpolate1() {
          return (
            /* binding */
            _ɵɵclassMapInterpolate
          );
        },

        /* harmony export */
        "ɵɵclassMapInterpolate2": function ɵɵclassMapInterpolate2() {
          return (
            /* binding */
            _ɵɵclassMapInterpolate2
          );
        },

        /* harmony export */
        "ɵɵclassMapInterpolate3": function ɵɵclassMapInterpolate3() {
          return (
            /* binding */
            _ɵɵclassMapInterpolate3
          );
        },

        /* harmony export */
        "ɵɵclassMapInterpolate4": function ɵɵclassMapInterpolate4() {
          return (
            /* binding */
            _ɵɵclassMapInterpolate4
          );
        },

        /* harmony export */
        "ɵɵclassMapInterpolate5": function ɵɵclassMapInterpolate5() {
          return (
            /* binding */
            _ɵɵclassMapInterpolate5
          );
        },

        /* harmony export */
        "ɵɵclassMapInterpolate6": function ɵɵclassMapInterpolate6() {
          return (
            /* binding */
            _ɵɵclassMapInterpolate6
          );
        },

        /* harmony export */
        "ɵɵclassMapInterpolate7": function ɵɵclassMapInterpolate7() {
          return (
            /* binding */
            _ɵɵclassMapInterpolate7
          );
        },

        /* harmony export */
        "ɵɵclassMapInterpolate8": function ɵɵclassMapInterpolate8() {
          return (
            /* binding */
            _ɵɵclassMapInterpolate8
          );
        },

        /* harmony export */
        "ɵɵclassMapInterpolateV": function ɵɵclassMapInterpolateV() {
          return (
            /* binding */
            _ɵɵclassMapInterpolateV
          );
        },

        /* harmony export */
        "ɵɵclassProp": function ɵɵclassProp() {
          return (
            /* binding */
            _ɵɵclassProp
          );
        },

        /* harmony export */
        "ɵɵcontentQuery": function ɵɵcontentQuery() {
          return (
            /* binding */
            _ɵɵcontentQuery
          );
        },

        /* harmony export */
        "ɵɵdefineComponent": function ɵɵdefineComponent() {
          return (
            /* binding */
            _ɵɵdefineComponent
          );
        },

        /* harmony export */
        "ɵɵdefineDirective": function ɵɵdefineDirective() {
          return (
            /* binding */
            _ɵɵdefineDirective
          );
        },

        /* harmony export */
        "ɵɵdefineInjectable": function ɵɵdefineInjectable() {
          return (
            /* binding */
            _ɵɵdefineInjectable
          );
        },

        /* harmony export */
        "ɵɵdefineInjector": function ɵɵdefineInjector() {
          return (
            /* binding */
            _ɵɵdefineInjector
          );
        },

        /* harmony export */
        "ɵɵdefineNgModule": function ɵɵdefineNgModule() {
          return (
            /* binding */
            _ɵɵdefineNgModule
          );
        },

        /* harmony export */
        "ɵɵdefinePipe": function ɵɵdefinePipe() {
          return (
            /* binding */
            _ɵɵdefinePipe
          );
        },

        /* harmony export */
        "ɵɵdirectiveInject": function ɵɵdirectiveInject() {
          return (
            /* binding */
            _ɵɵdirectiveInject
          );
        },

        /* harmony export */
        "ɵɵdisableBindings": function ɵɵdisableBindings() {
          return (
            /* binding */
            _ɵɵdisableBindings
          );
        },

        /* harmony export */
        "ɵɵelement": function ɵɵelement() {
          return (
            /* binding */
            _ɵɵelement
          );
        },

        /* harmony export */
        "ɵɵelementContainer": function ɵɵelementContainer() {
          return (
            /* binding */
            _ɵɵelementContainer
          );
        },

        /* harmony export */
        "ɵɵelementContainerEnd": function ɵɵelementContainerEnd() {
          return (
            /* binding */
            _ɵɵelementContainerEnd
          );
        },

        /* harmony export */
        "ɵɵelementContainerStart": function ɵɵelementContainerStart() {
          return (
            /* binding */
            _ɵɵelementContainerStart
          );
        },

        /* harmony export */
        "ɵɵelementEnd": function ɵɵelementEnd() {
          return (
            /* binding */
            _ɵɵelementEnd
          );
        },

        /* harmony export */
        "ɵɵelementStart": function ɵɵelementStart() {
          return (
            /* binding */
            _ɵɵelementStart
          );
        },

        /* harmony export */
        "ɵɵenableBindings": function ɵɵenableBindings() {
          return (
            /* binding */
            _ɵɵenableBindings
          );
        },

        /* harmony export */
        "ɵɵgetCurrentView": function ɵɵgetCurrentView() {
          return (
            /* binding */
            _ɵɵgetCurrentView
          );
        },

        /* harmony export */
        "ɵɵgetInheritedFactory": function ɵɵgetInheritedFactory() {
          return (
            /* binding */
            _ɵɵgetInheritedFactory
          );
        },

        /* harmony export */
        "ɵɵhostProperty": function ɵɵhostProperty() {
          return (
            /* binding */
            _ɵɵhostProperty
          );
        },

        /* harmony export */
        "ɵɵi18n": function ɵɵi18n() {
          return (
            /* binding */
            _ɵɵi18n
          );
        },

        /* harmony export */
        "ɵɵi18nApply": function ɵɵi18nApply() {
          return (
            /* binding */
            _ɵɵi18nApply
          );
        },

        /* harmony export */
        "ɵɵi18nAttributes": function ɵɵi18nAttributes() {
          return (
            /* binding */
            _ɵɵi18nAttributes
          );
        },

        /* harmony export */
        "ɵɵi18nEnd": function ɵɵi18nEnd() {
          return (
            /* binding */
            _ɵɵi18nEnd
          );
        },

        /* harmony export */
        "ɵɵi18nExp": function ɵɵi18nExp() {
          return (
            /* binding */
            _ɵɵi18nExp
          );
        },

        /* harmony export */
        "ɵɵi18nPostprocess": function ɵɵi18nPostprocess() {
          return (
            /* binding */
            _ɵɵi18nPostprocess
          );
        },

        /* harmony export */
        "ɵɵi18nStart": function ɵɵi18nStart() {
          return (
            /* binding */
            _ɵɵi18nStart
          );
        },

        /* harmony export */
        "ɵɵinject": function ɵɵinject() {
          return (
            /* binding */
            _ɵɵinject
          );
        },

        /* harmony export */
        "ɵɵinjectAttribute": function ɵɵinjectAttribute() {
          return (
            /* binding */
            _ɵɵinjectAttribute
          );
        },

        /* harmony export */
        "ɵɵinvalidFactory": function ɵɵinvalidFactory() {
          return (
            /* binding */
            _ɵɵinvalidFactory
          );
        },

        /* harmony export */
        "ɵɵinvalidFactoryDep": function ɵɵinvalidFactoryDep() {
          return (
            /* binding */
            _ɵɵinvalidFactoryDep
          );
        },

        /* harmony export */
        "ɵɵlistener": function ɵɵlistener() {
          return (
            /* binding */
            _ɵɵlistener
          );
        },

        /* harmony export */
        "ɵɵloadQuery": function ɵɵloadQuery() {
          return (
            /* binding */
            _ɵɵloadQuery
          );
        },

        /* harmony export */
        "ɵɵnamespaceHTML": function ɵɵnamespaceHTML() {
          return (
            /* binding */
            _ɵɵnamespaceHTML
          );
        },

        /* harmony export */
        "ɵɵnamespaceMathML": function ɵɵnamespaceMathML() {
          return (
            /* binding */
            _ɵɵnamespaceMathML
          );
        },

        /* harmony export */
        "ɵɵnamespaceSVG": function ɵɵnamespaceSVG() {
          return (
            /* binding */
            _ɵɵnamespaceSVG
          );
        },

        /* harmony export */
        "ɵɵnextContext": function ɵɵnextContext() {
          return (
            /* binding */
            _ɵɵnextContext
          );
        },

        /* harmony export */
        "ɵɵngDeclareClassMetadata": function ɵɵngDeclareClassMetadata() {
          return (
            /* binding */
            _ɵɵngDeclareClassMetadata
          );
        },

        /* harmony export */
        "ɵɵngDeclareComponent": function ɵɵngDeclareComponent() {
          return (
            /* binding */
            _ɵɵngDeclareComponent
          );
        },

        /* harmony export */
        "ɵɵngDeclareDirective": function ɵɵngDeclareDirective() {
          return (
            /* binding */
            _ɵɵngDeclareDirective
          );
        },

        /* harmony export */
        "ɵɵngDeclareFactory": function ɵɵngDeclareFactory() {
          return (
            /* binding */
            _ɵɵngDeclareFactory
          );
        },

        /* harmony export */
        "ɵɵngDeclareInjectable": function ɵɵngDeclareInjectable() {
          return (
            /* binding */
            _ɵɵngDeclareInjectable
          );
        },

        /* harmony export */
        "ɵɵngDeclareInjector": function ɵɵngDeclareInjector() {
          return (
            /* binding */
            _ɵɵngDeclareInjector
          );
        },

        /* harmony export */
        "ɵɵngDeclareNgModule": function ɵɵngDeclareNgModule() {
          return (
            /* binding */
            _ɵɵngDeclareNgModule
          );
        },

        /* harmony export */
        "ɵɵngDeclarePipe": function ɵɵngDeclarePipe() {
          return (
            /* binding */
            _ɵɵngDeclarePipe
          );
        },

        /* harmony export */
        "ɵɵpipe": function ɵɵpipe() {
          return (
            /* binding */
            _ɵɵpipe
          );
        },

        /* harmony export */
        "ɵɵpipeBind1": function ɵɵpipeBind1() {
          return (
            /* binding */
            _ɵɵpipeBind
          );
        },

        /* harmony export */
        "ɵɵpipeBind2": function ɵɵpipeBind2() {
          return (
            /* binding */
            _ɵɵpipeBind2
          );
        },

        /* harmony export */
        "ɵɵpipeBind3": function ɵɵpipeBind3() {
          return (
            /* binding */
            _ɵɵpipeBind3
          );
        },

        /* harmony export */
        "ɵɵpipeBind4": function ɵɵpipeBind4() {
          return (
            /* binding */
            _ɵɵpipeBind4
          );
        },

        /* harmony export */
        "ɵɵpipeBindV": function ɵɵpipeBindV() {
          return (
            /* binding */
            _ɵɵpipeBindV
          );
        },

        /* harmony export */
        "ɵɵprojection": function ɵɵprojection() {
          return (
            /* binding */
            _ɵɵprojection
          );
        },

        /* harmony export */
        "ɵɵprojectionDef": function ɵɵprojectionDef() {
          return (
            /* binding */
            _ɵɵprojectionDef
          );
        },

        /* harmony export */
        "ɵɵproperty": function ɵɵproperty() {
          return (
            /* binding */
            _ɵɵproperty
          );
        },

        /* harmony export */
        "ɵɵpropertyInterpolate": function ɵɵpropertyInterpolate() {
          return (
            /* binding */
            _ɵɵpropertyInterpolate
          );
        },

        /* harmony export */
        "ɵɵpropertyInterpolate1": function ɵɵpropertyInterpolate1() {
          return (
            /* binding */
            _ɵɵpropertyInterpolate2
          );
        },

        /* harmony export */
        "ɵɵpropertyInterpolate2": function ɵɵpropertyInterpolate2() {
          return (
            /* binding */
            _ɵɵpropertyInterpolate3
          );
        },

        /* harmony export */
        "ɵɵpropertyInterpolate3": function ɵɵpropertyInterpolate3() {
          return (
            /* binding */
            _ɵɵpropertyInterpolate4
          );
        },

        /* harmony export */
        "ɵɵpropertyInterpolate4": function ɵɵpropertyInterpolate4() {
          return (
            /* binding */
            _ɵɵpropertyInterpolate5
          );
        },

        /* harmony export */
        "ɵɵpropertyInterpolate5": function ɵɵpropertyInterpolate5() {
          return (
            /* binding */
            _ɵɵpropertyInterpolate6
          );
        },

        /* harmony export */
        "ɵɵpropertyInterpolate6": function ɵɵpropertyInterpolate6() {
          return (
            /* binding */
            _ɵɵpropertyInterpolate7
          );
        },

        /* harmony export */
        "ɵɵpropertyInterpolate7": function ɵɵpropertyInterpolate7() {
          return (
            /* binding */
            _ɵɵpropertyInterpolate8
          );
        },

        /* harmony export */
        "ɵɵpropertyInterpolate8": function ɵɵpropertyInterpolate8() {
          return (
            /* binding */
            _ɵɵpropertyInterpolate9
          );
        },

        /* harmony export */
        "ɵɵpropertyInterpolateV": function ɵɵpropertyInterpolateV() {
          return (
            /* binding */
            _ɵɵpropertyInterpolateV
          );
        },

        /* harmony export */
        "ɵɵpureFunction0": function ɵɵpureFunction0() {
          return (
            /* binding */
            _ɵɵpureFunction
          );
        },

        /* harmony export */
        "ɵɵpureFunction1": function ɵɵpureFunction1() {
          return (
            /* binding */
            _ɵɵpureFunction2
          );
        },

        /* harmony export */
        "ɵɵpureFunction2": function ɵɵpureFunction2() {
          return (
            /* binding */
            _ɵɵpureFunction3
          );
        },

        /* harmony export */
        "ɵɵpureFunction3": function ɵɵpureFunction3() {
          return (
            /* binding */
            _ɵɵpureFunction4
          );
        },

        /* harmony export */
        "ɵɵpureFunction4": function ɵɵpureFunction4() {
          return (
            /* binding */
            _ɵɵpureFunction5
          );
        },

        /* harmony export */
        "ɵɵpureFunction5": function ɵɵpureFunction5() {
          return (
            /* binding */
            _ɵɵpureFunction6
          );
        },

        /* harmony export */
        "ɵɵpureFunction6": function ɵɵpureFunction6() {
          return (
            /* binding */
            _ɵɵpureFunction7
          );
        },

        /* harmony export */
        "ɵɵpureFunction7": function ɵɵpureFunction7() {
          return (
            /* binding */
            _ɵɵpureFunction8
          );
        },

        /* harmony export */
        "ɵɵpureFunction8": function ɵɵpureFunction8() {
          return (
            /* binding */
            _ɵɵpureFunction9
          );
        },

        /* harmony export */
        "ɵɵpureFunctionV": function ɵɵpureFunctionV() {
          return (
            /* binding */
            _ɵɵpureFunctionV
          );
        },

        /* harmony export */
        "ɵɵqueryRefresh": function ɵɵqueryRefresh() {
          return (
            /* binding */
            _ɵɵqueryRefresh
          );
        },

        /* harmony export */
        "ɵɵreference": function ɵɵreference() {
          return (
            /* binding */
            _ɵɵreference
          );
        },

        /* harmony export */
        "ɵɵresolveBody": function ɵɵresolveBody() {
          return (
            /* binding */
            _ɵɵresolveBody
          );
        },

        /* harmony export */
        "ɵɵresolveDocument": function ɵɵresolveDocument() {
          return (
            /* binding */
            _ɵɵresolveDocument
          );
        },

        /* harmony export */
        "ɵɵresolveWindow": function ɵɵresolveWindow() {
          return (
            /* binding */
            _ɵɵresolveWindow
          );
        },

        /* harmony export */
        "ɵɵrestoreView": function ɵɵrestoreView() {
          return (
            /* binding */
            _ɵɵrestoreView
          );
        },

        /* harmony export */
        "ɵɵsanitizeHtml": function ɵɵsanitizeHtml() {
          return (
            /* binding */
            _ɵɵsanitizeHtml
          );
        },

        /* harmony export */
        "ɵɵsanitizeResourceUrl": function ɵɵsanitizeResourceUrl() {
          return (
            /* binding */
            _ɵɵsanitizeResourceUrl
          );
        },

        /* harmony export */
        "ɵɵsanitizeScript": function ɵɵsanitizeScript() {
          return (
            /* binding */
            _ɵɵsanitizeScript
          );
        },

        /* harmony export */
        "ɵɵsanitizeStyle": function ɵɵsanitizeStyle() {
          return (
            /* binding */
            _ɵɵsanitizeStyle
          );
        },

        /* harmony export */
        "ɵɵsanitizeUrl": function ɵɵsanitizeUrl() {
          return (
            /* binding */
            _ɵɵsanitizeUrl
          );
        },

        /* harmony export */
        "ɵɵsanitizeUrlOrResourceUrl": function ɵɵsanitizeUrlOrResourceUrl() {
          return (
            /* binding */
            _ɵɵsanitizeUrlOrResourceUrl
          );
        },

        /* harmony export */
        "ɵɵsetComponentScope": function ɵɵsetComponentScope() {
          return (
            /* binding */
            _ɵɵsetComponentScope
          );
        },

        /* harmony export */
        "ɵɵsetNgModuleScope": function ɵɵsetNgModuleScope() {
          return (
            /* binding */
            _ɵɵsetNgModuleScope
          );
        },

        /* harmony export */
        "ɵɵstyleMap": function ɵɵstyleMap() {
          return (
            /* binding */
            _ɵɵstyleMap
          );
        },

        /* harmony export */
        "ɵɵstyleMapInterpolate1": function ɵɵstyleMapInterpolate1() {
          return (
            /* binding */
            _ɵɵstyleMapInterpolate
          );
        },

        /* harmony export */
        "ɵɵstyleMapInterpolate2": function ɵɵstyleMapInterpolate2() {
          return (
            /* binding */
            _ɵɵstyleMapInterpolate2
          );
        },

        /* harmony export */
        "ɵɵstyleMapInterpolate3": function ɵɵstyleMapInterpolate3() {
          return (
            /* binding */
            _ɵɵstyleMapInterpolate3
          );
        },

        /* harmony export */
        "ɵɵstyleMapInterpolate4": function ɵɵstyleMapInterpolate4() {
          return (
            /* binding */
            _ɵɵstyleMapInterpolate4
          );
        },

        /* harmony export */
        "ɵɵstyleMapInterpolate5": function ɵɵstyleMapInterpolate5() {
          return (
            /* binding */
            _ɵɵstyleMapInterpolate5
          );
        },

        /* harmony export */
        "ɵɵstyleMapInterpolate6": function ɵɵstyleMapInterpolate6() {
          return (
            /* binding */
            _ɵɵstyleMapInterpolate6
          );
        },

        /* harmony export */
        "ɵɵstyleMapInterpolate7": function ɵɵstyleMapInterpolate7() {
          return (
            /* binding */
            _ɵɵstyleMapInterpolate7
          );
        },

        /* harmony export */
        "ɵɵstyleMapInterpolate8": function ɵɵstyleMapInterpolate8() {
          return (
            /* binding */
            _ɵɵstyleMapInterpolate8
          );
        },

        /* harmony export */
        "ɵɵstyleMapInterpolateV": function ɵɵstyleMapInterpolateV() {
          return (
            /* binding */
            _ɵɵstyleMapInterpolateV
          );
        },

        /* harmony export */
        "ɵɵstyleProp": function ɵɵstyleProp() {
          return (
            /* binding */
            _ɵɵstyleProp
          );
        },

        /* harmony export */
        "ɵɵstylePropInterpolate1": function ɵɵstylePropInterpolate1() {
          return (
            /* binding */
            _ɵɵstylePropInterpolate
          );
        },

        /* harmony export */
        "ɵɵstylePropInterpolate2": function ɵɵstylePropInterpolate2() {
          return (
            /* binding */
            _ɵɵstylePropInterpolate2
          );
        },

        /* harmony export */
        "ɵɵstylePropInterpolate3": function ɵɵstylePropInterpolate3() {
          return (
            /* binding */
            _ɵɵstylePropInterpolate3
          );
        },

        /* harmony export */
        "ɵɵstylePropInterpolate4": function ɵɵstylePropInterpolate4() {
          return (
            /* binding */
            _ɵɵstylePropInterpolate4
          );
        },

        /* harmony export */
        "ɵɵstylePropInterpolate5": function ɵɵstylePropInterpolate5() {
          return (
            /* binding */
            _ɵɵstylePropInterpolate5
          );
        },

        /* harmony export */
        "ɵɵstylePropInterpolate6": function ɵɵstylePropInterpolate6() {
          return (
            /* binding */
            _ɵɵstylePropInterpolate6
          );
        },

        /* harmony export */
        "ɵɵstylePropInterpolate7": function ɵɵstylePropInterpolate7() {
          return (
            /* binding */
            _ɵɵstylePropInterpolate7
          );
        },

        /* harmony export */
        "ɵɵstylePropInterpolate8": function ɵɵstylePropInterpolate8() {
          return (
            /* binding */
            _ɵɵstylePropInterpolate8
          );
        },

        /* harmony export */
        "ɵɵstylePropInterpolateV": function ɵɵstylePropInterpolateV() {
          return (
            /* binding */
            _ɵɵstylePropInterpolateV
          );
        },

        /* harmony export */
        "ɵɵsyntheticHostListener": function ɵɵsyntheticHostListener() {
          return (
            /* binding */
            _ɵɵsyntheticHostListener
          );
        },

        /* harmony export */
        "ɵɵsyntheticHostProperty": function ɵɵsyntheticHostProperty() {
          return (
            /* binding */
            _ɵɵsyntheticHostProperty
          );
        },

        /* harmony export */
        "ɵɵtemplate": function ɵɵtemplate() {
          return (
            /* binding */
            _ɵɵtemplate
          );
        },

        /* harmony export */
        "ɵɵtemplateRefExtractor": function ɵɵtemplateRefExtractor() {
          return (
            /* binding */
            _ɵɵtemplateRefExtractor
          );
        },

        /* harmony export */
        "ɵɵtext": function ɵɵtext() {
          return (
            /* binding */
            _ɵɵtext
          );
        },

        /* harmony export */
        "ɵɵtextInterpolate": function ɵɵtextInterpolate() {
          return (
            /* binding */
            _ɵɵtextInterpolate
          );
        },

        /* harmony export */
        "ɵɵtextInterpolate1": function ɵɵtextInterpolate1() {
          return (
            /* binding */
            _ɵɵtextInterpolate2
          );
        },

        /* harmony export */
        "ɵɵtextInterpolate2": function ɵɵtextInterpolate2() {
          return (
            /* binding */
            _ɵɵtextInterpolate3
          );
        },

        /* harmony export */
        "ɵɵtextInterpolate3": function ɵɵtextInterpolate3() {
          return (
            /* binding */
            _ɵɵtextInterpolate4
          );
        },

        /* harmony export */
        "ɵɵtextInterpolate4": function ɵɵtextInterpolate4() {
          return (
            /* binding */
            _ɵɵtextInterpolate5
          );
        },

        /* harmony export */
        "ɵɵtextInterpolate5": function ɵɵtextInterpolate5() {
          return (
            /* binding */
            _ɵɵtextInterpolate6
          );
        },

        /* harmony export */
        "ɵɵtextInterpolate6": function ɵɵtextInterpolate6() {
          return (
            /* binding */
            _ɵɵtextInterpolate7
          );
        },

        /* harmony export */
        "ɵɵtextInterpolate7": function ɵɵtextInterpolate7() {
          return (
            /* binding */
            _ɵɵtextInterpolate8
          );
        },

        /* harmony export */
        "ɵɵtextInterpolate8": function ɵɵtextInterpolate8() {
          return (
            /* binding */
            _ɵɵtextInterpolate9
          );
        },

        /* harmony export */
        "ɵɵtextInterpolateV": function ɵɵtextInterpolateV() {
          return (
            /* binding */
            _ɵɵtextInterpolateV
          );
        },

        /* harmony export */
        "ɵɵtrustConstantHtml": function ɵɵtrustConstantHtml() {
          return (
            /* binding */
            _ɵɵtrustConstantHtml
          );
        },

        /* harmony export */
        "ɵɵtrustConstantResourceUrl": function ɵɵtrustConstantResourceUrl() {
          return (
            /* binding */
            _ɵɵtrustConstantResourceUrl
          );
        },

        /* harmony export */
        "ɵɵviewQuery": function ɵɵviewQuery() {
          return (
            /* binding */
            _ɵɵviewQuery
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! rxjs */
      79765);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs */
      10826);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      69165);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs */
      66682);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! rxjs/operators */
      78345);
      /**
       * @license Angular v12.0.3
       * (c) 2010-2021 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function getClosureSafeProperty(objWithPropertyToExtract) {
        for (var key in objWithPropertyToExtract) {
          if (objWithPropertyToExtract[key] === getClosureSafeProperty) {
            return key;
          }
        }

        throw Error('Could not find renamed property on target object.');
      }
      /**
       * Sets properties on a target object from a source object, but only if
       * the property doesn't already exist on the target object.
       * @param target The target to set properties on
       * @param source The source of the property keys and values to set
       */


      function fillProperties(target, source) {
        for (var key in source) {
          if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {
            target[key] = source[key];
          }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function stringify(token) {
        if (typeof token === 'string') {
          return token;
        }

        if (Array.isArray(token)) {
          return '[' + token.map(stringify).join(', ') + ']';
        }

        if (token == null) {
          return '' + token;
        }

        if (token.overriddenName) {
          return "".concat(token.overriddenName);
        }

        if (token.name) {
          return "".concat(token.name);
        }

        var res = token.toString();

        if (res == null) {
          return '' + res;
        }

        var newLineIndex = res.indexOf('\n');
        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
      }
      /**
       * Concatenates two strings with separator, allocating new strings only when necessary.
       *
       * @param before before string.
       * @param separator separator string.
       * @param after after string.
       * @returns concatenated string.
       */


      function concatStringsWithSpace(before, after) {
        return before == null || before === '' ? after === null ? '' : after : after == null || after === '' ? before : before + ' ' + after;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var __forward_ref__ = getClosureSafeProperty({
        __forward_ref__: getClosureSafeProperty
      });
      /**
       * Allows to refer to references which are not yet defined.
       *
       * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
       * DI is declared, but not yet defined. It is also used when the `token` which we use when creating
       * a query is not yet defined.
       *
       * @usageNotes
       * ### Example
       * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
       * @publicApi
       */


      function _forwardRef(forwardRefFn) {
        forwardRefFn.__forward_ref__ = _forwardRef;

        forwardRefFn.toString = function () {
          return stringify(this());
        };

        return forwardRefFn;
      }
      /**
       * Lazily retrieves the reference value from a forwardRef.
       *
       * Acts as the identity function when given a non-forward-ref value.
       *
       * @usageNotes
       * ### Example
       *
       * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
       *
       * @see `forwardRef`
       * @publicApi
       */


      function _resolveForwardRef(type) {
        return isForwardRef(type) ? type() : type;
      }
      /** Checks whether a function is wrapped by a `forwardRef`. */


      function isForwardRef(fn) {
        return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) && fn.__forward_ref__ === _forwardRef;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Base URL for the error details page.
      // Keep this value in sync with a similar const in
      // `packages/compiler-cli/src/ngtsc/diagnostics/src/error_code.ts`.


      var ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.io/errors';

      var RuntimeError = /*#__PURE__*/function (_Error) {
        _inherits(RuntimeError, _Error);

        var _super8 = _createSuper(RuntimeError);

        function RuntimeError(code, message) {
          var _this70;

          _classCallCheck2(this, RuntimeError);

          _this70 = _super8.call(this, formatRuntimeError(code, message));
          _this70.code = code;
          return _this70;
        }

        return RuntimeError;
      }( /*#__PURE__*/_wrapNativeSuper(Error)); // Contains a set of error messages that have details guides at angular.io.
      // Full list of available error guides can be found at https://angular.io/errors

      /* tslint:disable:no-toplevel-property-access */


      var RUNTIME_ERRORS_WITH_GUIDES = new Set(["100"
      /* EXPRESSION_CHANGED_AFTER_CHECKED */
      , "200"
      /* CYCLIC_DI_DEPENDENCY */
      , "201"
      /* PROVIDER_NOT_FOUND */
      , "300"
      /* MULTIPLE_COMPONENTS_MATCH */
      , "301"
      /* EXPORT_NOT_FOUND */
      , "302"
      /* PIPE_NOT_FOUND */
      ]);
      /* tslint:enable:no-toplevel-property-access */

      /** Called to format a runtime error */

      function formatRuntimeError(code, message) {
        var fullCode = code ? "NG0".concat(code, ": ") : '';
        var errorMessage = "".concat(fullCode).concat(message); // Some runtime errors are still thrown without `ngDevMode` (for example
        // `throwProviderNotFoundError`), so we add `ngDevMode` check here to avoid pulling
        // `RUNTIME_ERRORS_WITH_GUIDES` symbol into prod bundles.
        // TODO: revisit all instances where `RuntimeError` is thrown and see if `ngDevMode` can be added
        // there instead to tree-shake more devmode-only code (and eventually remove `ngDevMode` check
        // from this code).

        if (ngDevMode && RUNTIME_ERRORS_WITH_GUIDES.has(code)) {
          errorMessage = "".concat(errorMessage, ". Find more at ").concat(ERROR_DETAILS_PAGE_BASE_URL, "/NG0").concat(code);
        }

        return errorMessage;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Used for stringify render output in Ivy.
       * Important! This function is very performance-sensitive and we should
       * be extra careful not to introduce megamorphic reads in it.
       * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.
       */


      function renderStringify(value) {
        if (typeof value === 'string') return value;
        if (value == null) return ''; // Use `String` so that it invokes the `toString` method of the value. Note that this
        // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).

        return String(value);
      }
      /**
       * Used to stringify a value so that it can be displayed in an error message.
       * Important! This function contains a megamorphic read and should only be
       * used for error messages.
       */


      function stringifyForError(value) {
        if (typeof value === 'function') return value.name || value.toString();

        if (typeof value === 'object' && value != null && typeof value.type === 'function') {
          return value.type.name || value.type.toString();
        }

        return renderStringify(value);
      }
      /** Called when directives inject each other (creating a circular dependency) */


      function throwCyclicDependencyError(token, path) {
        var depPath = path ? ". Dependency path: ".concat(path.join(' > '), " > ").concat(token) : '';
        throw new RuntimeError("200"
        /* CYCLIC_DI_DEPENDENCY */
        , "Circular dependency in DI detected for ".concat(token).concat(depPath));
      }

      function throwMixedMultiProviderError() {
        throw new Error("Cannot mix multi providers and regular providers");
      }

      function throwInvalidProviderError(ngModuleType, providers, provider) {
        var ngModuleDetail = '';

        if (ngModuleType && providers) {
          var providerDetail = providers.map(function (v) {
            return v == provider ? '?' + provider + '?' : '...';
          });
          ngModuleDetail = " - only instances of Provider and Type are allowed, got: [".concat(providerDetail.join(', '), "]");
        }

        throw new Error("Invalid provider for the NgModule '".concat(stringify(ngModuleType), "'") + ngModuleDetail);
      }
      /** Throws an error when a token is not found in DI. */


      function throwProviderNotFoundError(token, injectorName) {
        var injectorDetails = injectorName ? " in ".concat(injectorName) : '';
        throw new RuntimeError("201"
        /* PROVIDER_NOT_FOUND */
        , "No provider for ".concat(stringifyForError(token), " found").concat(injectorDetails));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function assertNumber(actual, msg) {
        if (!(typeof actual === 'number')) {
          throwError(msg, typeof actual, 'number', '===');
        }
      }

      function assertNumberInRange(actual, minInclusive, maxInclusive) {
        assertNumber(actual, 'Expected a number');
        assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');
        assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');
      }

      function assertString(actual, msg) {
        if (!(typeof actual === 'string')) {
          throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');
        }
      }

      function assertFunction(actual, msg) {
        if (!(typeof actual === 'function')) {
          throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');
        }
      }

      function assertEqual(actual, expected, msg) {
        if (!(actual == expected)) {
          throwError(msg, actual, expected, '==');
        }
      }

      function assertNotEqual(actual, expected, msg) {
        if (!(actual != expected)) {
          throwError(msg, actual, expected, '!=');
        }
      }

      function assertSame(actual, expected, msg) {
        if (!(actual === expected)) {
          throwError(msg, actual, expected, '===');
        }
      }

      function assertNotSame(actual, expected, msg) {
        if (!(actual !== expected)) {
          throwError(msg, actual, expected, '!==');
        }
      }

      function assertLessThan(actual, expected, msg) {
        if (!(actual < expected)) {
          throwError(msg, actual, expected, '<');
        }
      }

      function assertLessThanOrEqual(actual, expected, msg) {
        if (!(actual <= expected)) {
          throwError(msg, actual, expected, '<=');
        }
      }

      function assertGreaterThan(actual, expected, msg) {
        if (!(actual > expected)) {
          throwError(msg, actual, expected, '>');
        }
      }

      function assertGreaterThanOrEqual(actual, expected, msg) {
        if (!(actual >= expected)) {
          throwError(msg, actual, expected, '>=');
        }
      }

      function assertNotDefined(actual, msg) {
        if (actual != null) {
          throwError(msg, actual, null, '==');
        }
      }

      function assertDefined(actual, msg) {
        if (actual == null) {
          throwError(msg, actual, null, '!=');
        }
      }

      function throwError(msg, actual, expected, comparison) {
        throw new Error("ASSERTION ERROR: ".concat(msg) + (comparison == null ? '' : " [Expected=> ".concat(expected, " ").concat(comparison, " ").concat(actual, " <=Actual]")));
      }

      function assertDomNode(node) {
        // If we're in a worker, `Node` will not be defined.
        if (!(typeof Node !== 'undefined' && node instanceof Node) && !(typeof node === 'object' && node != null && node.constructor.name === 'WebWorkerRenderNode')) {
          throwError("The provided value must be an instance of a DOM Node but got ".concat(stringify(node)));
        }
      }

      function assertIndexInRange(arr, index) {
        assertDefined(arr, 'Array must be defined.');
        var maxLen = arr.length;

        if (index < 0 || index >= maxLen) {
          throwError("Index expected to be less than ".concat(maxLen, " but got ").concat(index));
        }
      }

      function assertOneOf(value) {
        for (var _len2 = arguments.length, validValues = new Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {
          validValues[_key3 - 1] = arguments[_key3];
        }

        if (validValues.indexOf(value) !== -1) return true;
        throwError("Expected value to be one of ".concat(JSON.stringify(validValues), " but was ").concat(JSON.stringify(value), "."));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Construct an injectable definition which defines how a token will be constructed by the DI
       * system, and in which injectors (if any) it will be available.
       *
       * This should be assigned to a static `ɵprov` field on a type, which will then be an
       * `InjectableType`.
       *
       * Options:
       * * `providedIn` determines which injectors will include the injectable, by either associating it
       *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be
       *   provided in the `'root'` injector, which will be the application-level injector in most apps.
       * * `factory` gives the zero argument function which will create an instance of the injectable.
       *   The factory can call `inject` to access the `Injector` and request injection of dependencies.
       *
       * @codeGenApi
       * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.
       */


      function _ɵɵdefineInjectable(opts) {
        return {
          token: opts.token,
          providedIn: opts.providedIn || null,
          factory: opts.factory,
          value: undefined
        };
      }
      /**
       * @deprecated in v8, delete after v10. This API should be used only by generated code, and that
       * code should now use ɵɵdefineInjectable instead.
       * @publicApi
       */


      var _defineInjectable = _ɵɵdefineInjectable;
      /**
       * Construct an `InjectorDef` which configures an injector.
       *
       * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an
       * `InjectorType`.
       *
       * Options:
       *
       * * `providers`: an optional array of providers to add to the injector. Each provider must
       *   either have a factory or point to a type which has a `ɵprov` static property (the
       *   type must be an `InjectableType`).
       * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s
       *   whose providers will also be added to the injector. Locally provided types will override
       *   providers from imports.
       *
       * @codeGenApi
       */

      function _ɵɵdefineInjector(options) {
        return {
          providers: options.providers || [],
          imports: options.imports || []
        };
      }
      /**
       * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading
       * inherited value.
       *
       * @param type A type which may have its own (non-inherited) `ɵprov`.
       */


      function getInjectableDef(type) {
        return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);
      }
      /**
       * Return definition only if it is defined directly on `type` and is not inherited from a base
       * class of `type`.
       */


      function getOwnDefinition(type, field) {
        return type.hasOwnProperty(field) ? type[field] : null;
      }
      /**
       * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.
       *
       * @param type A type which may have `ɵprov`, via inheritance.
       *
       * @deprecated Will be removed in a future version of Angular, where an error will occur in the
       *     scenario if we find the `ɵprov` on an ancestor only.
       */


      function getInheritedInjectableDef(type) {
        var def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);

        if (def) {
          var typeName = getTypeName(type); // TODO(FW-1307): Re-add ngDevMode when closure can handle it
          // ngDevMode &&

          console.warn("DEPRECATED: DI is instantiating a token \"".concat(typeName, "\" that inherits its @Injectable decorator but does not provide one itself.\n") + "This will become an error in a future version of Angular. Please add @Injectable() to the \"".concat(typeName, "\" class."));
          return def;
        } else {
          return null;
        }
      }
      /** Gets the name of a type, accounting for some cross-browser differences. */


      function getTypeName(type) {
        // `Function.prototype.name` behaves differently between IE and other browsers. In most browsers
        // it'll always return the name of the function itself, no matter how many other functions it
        // inherits from. On IE the function doesn't have its own `name` property, but it takes it from
        // the lowest level in the prototype chain. E.g. if we have `class Foo extends Parent` most
        // browsers will evaluate `Foo.name` to `Foo` while IE will return `Parent`. We work around
        // the issue by converting the function to a string and parsing its name out that way via a regex.
        if (type.hasOwnProperty('name')) {
          return type.name;
        }

        var match = ('' + type).match(/^function\s*([^\s(]+)/);
        return match === null ? '' : match[1];
      }
      /**
       * Read the injector def type in a way which is immune to accidentally reading inherited value.
       *
       * @param type type which may have an injector def (`ɵinj`)
       */


      function getInjectorDef(type) {
        return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ? type[NG_INJ_DEF] : null;
      }

      var NG_PROV_DEF = getClosureSafeProperty({
        ɵprov: getClosureSafeProperty
      });
      var NG_INJ_DEF = getClosureSafeProperty({
        ɵinj: getClosureSafeProperty
      }); // We need to keep these around so we can read off old defs if new defs are unavailable

      var NG_INJECTABLE_DEF = getClosureSafeProperty({
        ngInjectableDef: getClosureSafeProperty
      });
      var NG_INJECTOR_DEF = getClosureSafeProperty({
        ngInjectorDef: getClosureSafeProperty
      });
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Injection flags for DI.
       *
       * @publicApi
       */

      var _InjectFlags;

      (function (InjectFlags) {
        // TODO(alxhub): make this 'const' (and remove `InternalInjectFlags` enum) when ngc no longer
        // writes exports of it into ngfactory files.

        /** Check self and check parent injector if needed */
        InjectFlags[InjectFlags["Default"] = 0] = "Default";
        /**
         * Specifies that an injector should retrieve a dependency from any injector until reaching the
         * host element of the current component. (Only used with Element Injector)
         */

        InjectFlags[InjectFlags["Host"] = 1] = "Host";
        /** Don't ascend to ancestors of the node requesting injection. */

        InjectFlags[InjectFlags["Self"] = 2] = "Self";
        /** Skip the node that is requesting injection. */

        InjectFlags[InjectFlags["SkipSelf"] = 4] = "SkipSelf";
        /** Inject `defaultValue` instead if token not found. */

        InjectFlags[InjectFlags["Optional"] = 8] = "Optional";
      })(_InjectFlags || (_InjectFlags = {}));
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Current implementation of inject.
       *
       * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed
       * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this
       * way for two reasons:
       *  1. `Injector` should not depend on ivy logic.
       *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.
       */


      var _injectImplementation;

      function getInjectImplementation() {
        return _injectImplementation;
      }
      /**
       * Sets the current inject implementation.
       */


      function setInjectImplementation(impl) {
        var previous = _injectImplementation;
        _injectImplementation = impl;
        return previous;
      }
      /**
       * Injects `root` tokens in limp mode.
       *
       * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to
       * `"root"`. This is known as the limp mode injection. In such case the value is stored in the
       * injectable definition.
       */


      function injectRootLimpMode(token, notFoundValue, flags) {
        var injectableDef = getInjectableDef(token);

        if (injectableDef && injectableDef.providedIn == 'root') {
          return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() : injectableDef.value;
        }

        if (flags & _InjectFlags.Optional) return null;
        if (notFoundValue !== undefined) return notFoundValue;
        throwProviderNotFoundError(stringify(token), 'Injector');
      }
      /**
       * Assert that `_injectImplementation` is not `fn`.
       *
       * This is useful, to prevent infinite recursion.
       *
       * @param fn Function which it should not equal to
       */


      function assertInjectImplementationNotEqual(fn) {
        ngDevMode && assertNotEqual(_injectImplementation, fn, 'Calling ɵɵinject would cause infinite recursion');
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Convince closure compiler that the wrapped function has no side-effects.
       *
       * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to
       * allow us to execute a function but have closure compiler mark the call as no-side-effects.
       * It is important that the return value for the `noSideEffects` function be assigned
       * to something which is retained otherwise the call to `noSideEffects` will be removed by closure
       * compiler.
       */


      function noSideEffects(fn) {
        return {
          toString: fn
        }.toString();
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The strategy that the default change detector uses to detect changes.
       * When set, takes effect the next time change detection is triggered.
       *
       * @see {@link ChangeDetectorRef#usage-notes Change detection usage}
       *
       * @publicApi
       */


      var _ChangeDetectionStrategy;

      (function (ChangeDetectionStrategy) {
        /**
         * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated
         * until reactivated by setting the strategy to `Default` (`CheckAlways`).
         * Change detection can still be explicitly invoked.
         * This strategy applies to all child directives and cannot be overridden.
         */
        ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
        /**
         * Use the default `CheckAlways` strategy, in which change detection is automatic until
         * explicitly deactivated.
         */

        ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
      })(_ChangeDetectionStrategy || (_ChangeDetectionStrategy = {}));
      /**
       * Defines the possible states of the default change detector.
       * @see `ChangeDetectorRef`
       */


      var ChangeDetectorStatus;

      (function (ChangeDetectorStatus) {
        /**
         * A state in which, after calling `detectChanges()`, the change detector
         * state becomes `Checked`, and must be explicitly invoked or reactivated.
         */
        ChangeDetectorStatus[ChangeDetectorStatus["CheckOnce"] = 0] = "CheckOnce";
        /**
         * A state in which change detection is skipped until the change detector mode
         * becomes `CheckOnce`.
         */

        ChangeDetectorStatus[ChangeDetectorStatus["Checked"] = 1] = "Checked";
        /**
         * A state in which change detection continues automatically until explicitly
         * deactivated.
         */

        ChangeDetectorStatus[ChangeDetectorStatus["CheckAlways"] = 2] = "CheckAlways";
        /**
         * A state in which a change detector sub tree is not a part of the main tree and
         * should be skipped.
         */

        ChangeDetectorStatus[ChangeDetectorStatus["Detached"] = 3] = "Detached";
        /**
         * Indicates that the change detector encountered an error checking a binding
         * or calling a directive lifecycle method and is now in an inconsistent state. Change
         * detectors in this state do not detect changes.
         */

        ChangeDetectorStatus[ChangeDetectorStatus["Errored"] = 4] = "Errored";
        /**
         * Indicates that the change detector has been destroyed.
         */

        ChangeDetectorStatus[ChangeDetectorStatus["Destroyed"] = 5] = "Destroyed";
      })(ChangeDetectorStatus || (ChangeDetectorStatus = {}));
      /**
       * Reports whether a given strategy is currently the default for change detection.
       * @param changeDetectionStrategy The strategy to check.
       * @returns True if the given strategy is the current default, false otherwise.
       * @see `ChangeDetectorStatus`
       * @see `ChangeDetectorRef`
       */


      function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
        return changeDetectionStrategy == null || changeDetectionStrategy === _ChangeDetectionStrategy.Default;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Defines template and style encapsulation options available for Component's {@link Component}.
       *
       * See {@link Component#encapsulation encapsulation}.
       *
       * @usageNotes
       * ### Example
       *
       * {@example core/ts/metadata/encapsulation.ts region='longform'}
       *
       * @publicApi
       */


      var _ViewEncapsulation;

      (function (ViewEncapsulation) {
        /**
         * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host
         * Element and pre-processing the style rules provided via {@link Component#styles styles} or
         * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all
         * selectors.
         *
         * This is the default option.
         */
        ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated"; // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.

        /**
         * Don't provide any template or style encapsulation.
         */

        ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
        /**
         * Use Shadow DOM to encapsulate styles.
         *
         * For the DOM this means using modern [Shadow
         * DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM) and
         * creating a ShadowRoot for Component's Host Element.
         */

        ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
      })(_ViewEncapsulation || (_ViewEncapsulation = {}));
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var __globalThis = typeof globalThis !== 'undefined' && globalThis;

      var __window = typeof window !== 'undefined' && window;

      var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;

      var __global = typeof global !== 'undefined' && global; // Always use __globalThis if available, which is the spec-defined global variable across all
      // environments, then fallback to __global first, because in Node tests both __global and
      // __window may be defined and _global should be __global in that case.


      var _global = __globalThis || __global || __window || __self;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function ngDevModeResetPerfCounters() {
        var locationString = typeof location !== 'undefined' ? location.toString() : '';
        var newCounters = {
          namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,
          firstCreatePass: 0,
          tNode: 0,
          tView: 0,
          rendererCreateTextNode: 0,
          rendererSetText: 0,
          rendererCreateElement: 0,
          rendererAddEventListener: 0,
          rendererSetAttribute: 0,
          rendererRemoveAttribute: 0,
          rendererSetProperty: 0,
          rendererSetClassName: 0,
          rendererAddClass: 0,
          rendererRemoveClass: 0,
          rendererSetStyle: 0,
          rendererRemoveStyle: 0,
          rendererDestroy: 0,
          rendererDestroyNode: 0,
          rendererMoveNode: 0,
          rendererRemoveNode: 0,
          rendererAppendChild: 0,
          rendererInsertBefore: 0,
          rendererCreateComment: 0
        }; // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.

        var allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;
        _global['ngDevMode'] = allowNgDevModeTrue && newCounters;
        return newCounters;
      }
      /**
       * This function checks to see if the `ngDevMode` has been set. If yes,
       * then we honor it, otherwise we default to dev mode with additional checks.
       *
       * The idea is that unless we are doing production build where we explicitly
       * set `ngDevMode == false` we should be helping the developer by providing
       * as much early warning and errors as possible.
       *
       * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions
       * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode
       * is defined for the entire instruction set.
       *
       * When checking `ngDevMode` on toplevel, always init it before referencing it
       * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can
       *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.
       *
       * Details on possible values for `ngDevMode` can be found on its docstring.
       *
       * NOTE:
       * - changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.
       */


      function initNgDevMode() {
        // The below checks are to ensure that calling `initNgDevMode` multiple times does not
        // reset the counters.
        // If the `ngDevMode` is not an object, then it means we have not created the perf counters
        // yet.
        if (typeof ngDevMode === 'undefined' || ngDevMode) {
          if (typeof ngDevMode !== 'object') {
            ngDevModeResetPerfCounters();
          }

          return typeof ngDevMode !== 'undefined' && !!ngDevMode;
        }

        return false;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * This file contains reuseable "empty" symbols that can be used as default return values
       * in different parts of the rendering code. Because the same symbols are returned, this
       * allows for identity checks against these values to be consistently used by the framework
       * code.
       */


      var EMPTY_OBJ = {};
      var EMPTY_ARRAY = []; // freezing the values prevents any code from accidentally inserting new values in

      if ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {
        // These property accesses can be ignored because ngDevMode will be set to false
        // when optimizing code and the whole if statement will be dropped.
        // tslint:disable-next-line:no-toplevel-property-access
        Object.freeze(EMPTY_OBJ); // tslint:disable-next-line:no-toplevel-property-access

        Object.freeze(EMPTY_ARRAY);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var NG_COMP_DEF = getClosureSafeProperty({
        ɵcmp: getClosureSafeProperty
      });
      var NG_DIR_DEF = getClosureSafeProperty({
        ɵdir: getClosureSafeProperty
      });
      var NG_PIPE_DEF = getClosureSafeProperty({
        ɵpipe: getClosureSafeProperty
      });
      var NG_MOD_DEF = getClosureSafeProperty({
        ɵmod: getClosureSafeProperty
      });
      var NG_LOC_ID_DEF = getClosureSafeProperty({
        ɵloc: getClosureSafeProperty
      });
      var NG_FACTORY_DEF = getClosureSafeProperty({
        ɵfac: getClosureSafeProperty
      });
      /**
       * If a directive is diPublic, bloomAdd sets a property on the type with this constant as
       * the key and the directive's unique ID as the value. This allows us to map directives to their
       * bloom filter bit for DI.
       */
      // TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.

      var NG_ELEMENT_ID = getClosureSafeProperty({
        __NG_ELEMENT_ID__: getClosureSafeProperty
      });
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var _renderCompCount = 0;
      /**
       * Create a component definition object.
       *
       *
       * # Example
       * ```
       * class MyDirective {
       *   // Generated by Angular Template Compiler
       *   // [Symbol] syntax will not be supported by TypeScript until v2.7
       *   static ɵcmp = defineComponent({
       *     ...
       *   });
       * }
       * ```
       * @codeGenApi
       */

      function _ɵɵdefineComponent(componentDefinition) {
        return noSideEffects(function () {
          // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.
          // See the `initNgDevMode` docstring for more information.
          (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();
          var type = componentDefinition.type;
          var declaredInputs = {};
          var def = {
            type: type,
            providersResolver: null,
            decls: componentDefinition.decls,
            vars: componentDefinition.vars,
            factory: null,
            template: componentDefinition.template || null,
            consts: componentDefinition.consts || null,
            ngContentSelectors: componentDefinition.ngContentSelectors,
            hostBindings: componentDefinition.hostBindings || null,
            hostVars: componentDefinition.hostVars || 0,
            hostAttrs: componentDefinition.hostAttrs || null,
            contentQueries: componentDefinition.contentQueries || null,
            declaredInputs: declaredInputs,
            inputs: null,
            outputs: null,
            exportAs: componentDefinition.exportAs || null,
            onPush: componentDefinition.changeDetection === _ChangeDetectionStrategy.OnPush,
            directiveDefs: null,
            pipeDefs: null,
            selectors: componentDefinition.selectors || EMPTY_ARRAY,
            viewQuery: componentDefinition.viewQuery || null,
            features: componentDefinition.features || null,
            data: componentDefinition.data || {},
            // TODO(misko): convert ViewEncapsulation into const enum so that it can be used
            // directly in the next line. Also `None` should be 0 not 2.
            encapsulation: componentDefinition.encapsulation || _ViewEncapsulation.Emulated,
            id: 'c',
            styles: componentDefinition.styles || EMPTY_ARRAY,
            _: null,
            setInput: null,
            schemas: componentDefinition.schemas || null,
            tView: null
          };
          var directiveTypes = componentDefinition.directives;
          var feature = componentDefinition.features;
          var pipeTypes = componentDefinition.pipes;
          def.id += _renderCompCount++;
          def.inputs = invertObject(componentDefinition.inputs, declaredInputs), def.outputs = invertObject(componentDefinition.outputs), feature && feature.forEach(function (fn) {
            return fn(def);
          });
          def.directiveDefs = directiveTypes ? function () {
            return (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes).map(extractDirectiveDef);
          } : null;
          def.pipeDefs = pipeTypes ? function () {
            return (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef);
          } : null;
          return def;
        });
      }
      /**
       * Generated next to NgModules to monkey-patch directive and pipe references onto a component's
       * definition, when generating a direct reference in the component file would otherwise create an
       * import cycle.
       *
       * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.
       *
       * @codeGenApi
       */


      function _ɵɵsetComponentScope(type, directives, pipes) {
        var def = type.ɵcmp;

        def.directiveDefs = function () {
          return directives.map(extractDirectiveDef);
        };

        def.pipeDefs = function () {
          return pipes.map(extractPipeDef);
        };
      }

      function extractDirectiveDef(type) {
        var def = getComponentDef(type) || getDirectiveDef(type);

        if (ngDevMode && !def) {
          throw new Error("'".concat(type.name, "' is neither 'ComponentType' or 'DirectiveType'."));
        }

        return def;
      }

      function extractPipeDef(type) {
        var def = getPipeDef(type);

        if (ngDevMode && !def) {
          throw new Error("'".concat(type.name, "' is not a 'PipeType'."));
        }

        return def;
      }

      var autoRegisterModuleById = {};
      /**
       * @codeGenApi
       */

      function _ɵɵdefineNgModule(def) {
        var res = {
          type: def.type,
          bootstrap: def.bootstrap || EMPTY_ARRAY,
          declarations: def.declarations || EMPTY_ARRAY,
          imports: def.imports || EMPTY_ARRAY,
          exports: def.exports || EMPTY_ARRAY,
          transitiveCompileScopes: null,
          schemas: def.schemas || null,
          id: def.id || null
        };

        if (def.id != null) {
          noSideEffects(function () {
            autoRegisterModuleById[def.id] = def.type;
          });
        }

        return res;
      }
      /**
       * Adds the module metadata that is necessary to compute the module's transitive scope to an
       * existing module definition.
       *
       * Scope metadata of modules is not used in production builds, so calls to this function can be
       * marked pure to tree-shake it from the bundle, allowing for all referenced declarations
       * to become eligible for tree-shaking as well.
       *
       * @codeGenApi
       */


      function _ɵɵsetNgModuleScope(type, scope) {
        return noSideEffects(function () {
          var ngModuleDef = getNgModuleDef(type, true);
          ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY;
          ngModuleDef.imports = scope.imports || EMPTY_ARRAY;
          ngModuleDef.exports = scope.exports || EMPTY_ARRAY;
        });
      }
      /**
       * Inverts an inputs or outputs lookup such that the keys, which were the
       * minified keys, are part of the values, and the values are parsed so that
       * the publicName of the property is the new key
       *
       * e.g. for
       *
       * ```
       * class Comp {
       *   @Input()
       *   propName1: string;
       *
       *   @Input('publicName2')
       *   declaredPropName2: number;
       * }
       * ```
       *
       * will be serialized as
       *
       * ```
       * {
       *   propName1: 'propName1',
       *   declaredPropName2: ['publicName2', 'declaredPropName2'],
       * }
       * ```
       *
       * which is than translated by the minifier as:
       *
       * ```
       * {
       *   minifiedPropName1: 'propName1',
       *   minifiedPropName2: ['publicName2', 'declaredPropName2'],
       * }
       * ```
       *
       * becomes: (public name => minifiedName)
       *
       * ```
       * {
       *  'propName1': 'minifiedPropName1',
       *  'publicName2': 'minifiedPropName2',
       * }
       * ```
       *
       * Optionally the function can take `secondary` which will result in: (public name => declared name)
       *
       * ```
       * {
       *  'propName1': 'propName1',
       *  'publicName2': 'declaredPropName2',
       * }
       * ```
       *
      
       */


      function invertObject(obj, secondary) {
        if (obj == null) return EMPTY_OBJ;
        var newLookup = {};

        for (var minifiedKey in obj) {
          if (obj.hasOwnProperty(minifiedKey)) {
            var publicName = obj[minifiedKey];
            var declaredName = publicName;

            if (Array.isArray(publicName)) {
              declaredName = publicName[1];
              publicName = publicName[0];
            }

            newLookup[publicName] = minifiedKey;

            if (secondary) {
              secondary[publicName] = declaredName;
            }
          }
        }

        return newLookup;
      }
      /**
       * Create a directive definition object.
       *
       * # Example
       * ```ts
       * class MyDirective {
       *   // Generated by Angular Template Compiler
       *   // [Symbol] syntax will not be supported by TypeScript until v2.7
       *   static ɵdir = ɵɵdefineDirective({
       *     ...
       *   });
       * }
       * ```
       *
       * @codeGenApi
       */


      var _ɵɵdefineDirective = _ɵɵdefineComponent;
      /**
       * Create a pipe definition object.
       *
       * # Example
       * ```
       * class MyPipe implements PipeTransform {
       *   // Generated by Angular Template Compiler
       *   static ɵpipe = definePipe({
       *     ...
       *   });
       * }
       * ```
       * @param pipeDef Pipe definition generated by the compiler
       *
       * @codeGenApi
       */

      function _ɵɵdefinePipe(pipeDef) {
        return {
          type: pipeDef.type,
          name: pipeDef.name,
          factory: null,
          pure: pipeDef.pure !== false,
          onDestroy: pipeDef.type.prototype.ngOnDestroy || null
        };
      }
      /**
       * The following getter methods retrieve the definition from the type. Currently the retrieval
       * honors inheritance, but in the future we may change the rule to require that definitions are
       * explicit. This would require some sort of migration strategy.
       */


      function getComponentDef(type) {
        return type[NG_COMP_DEF] || null;
      }

      function getDirectiveDef(type) {
        return type[NG_DIR_DEF] || null;
      }

      function getPipeDef(type) {
        return type[NG_PIPE_DEF] || null;
      }

      function getNgModuleDef(type, throwNotFound) {
        var ngModuleDef = type[NG_MOD_DEF] || null;

        if (!ngModuleDef && throwNotFound === true) {
          throw new Error("Type ".concat(stringify(type), " does not have '\u0275mod' property."));
        }

        return ngModuleDef;
      }

      function getNgLocaleIdDef(type) {
        return type[NG_LOC_ID_DEF] || null;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Below are constants for LView indices to help us look up LView members
      // without having to remember the specific indices.
      // Uglify will inline these when minifying so there shouldn't be a cost.


      var HOST = 0;
      var TVIEW = 1;
      var FLAGS = 2;
      var PARENT = 3;
      var NEXT = 4;
      var TRANSPLANTED_VIEWS_TO_REFRESH = 5;
      var T_HOST = 6;
      var CLEANUP = 7;
      var CONTEXT = 8;
      var INJECTOR = 9;
      var RENDERER_FACTORY = 10;
      var RENDERER = 11;
      var SANITIZER = 12;
      var CHILD_HEAD = 13;
      var CHILD_TAIL = 14; // FIXME(misko): Investigate if the three declarations aren't all same thing.

      var DECLARATION_VIEW = 15;
      var DECLARATION_COMPONENT_VIEW = 16;
      var DECLARATION_LCONTAINER = 17;
      var PREORDER_HOOK_FLAGS = 18;
      var QUERIES = 19;
      /**
       * Size of LView's header. Necessary to adjust for it when setting slots.
       *
       * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ɵɵ*` instructions to translate
       * instruction index into `LView` index. All other indexes should be in the `LView` index space and
       * there should be no need to refer to `HEADER_OFFSET` anywhere else.
       */

      var HEADER_OFFSET = 20;
      /**
       * Converts `TViewType` into human readable text.
       * Make sure this matches with `TViewType`
       */

      var TViewTypeAsString = ['Root', 'Component', 'Embedded' // 2
      ]; // Note: This hack is necessary so we don't erroneously get a circular dependency
      // failure based on types.

      var unusedValueExportToPlacateAjd = 1;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Special location which allows easy identification of type. If we have an array which was
       * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is
       * `LContainer`.
       */

      var TYPE = 1;
      /**
       * Below are constants for LContainer indices to help us look up LContainer members
       * without having to remember the specific indices.
       * Uglify will inline these when minifying so there shouldn't be a cost.
       */

      /**
       * Flag to signify that this `LContainer` may have transplanted views which need to be change
       * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.
       *
       * This flag, once set, is never unset for the `LContainer`. This means that when unset we can skip
       * a lot of work in `refreshEmbeddedViews`. But when set we still need to verify
       * that the `MOVED_VIEWS` are transplanted and on-push.
       */

      var HAS_TRANSPLANTED_VIEWS = 2; // PARENT, NEXT, TRANSPLANTED_VIEWS_TO_REFRESH are indices 3, 4, and 5
      // As we already have these constants in LView, we don't need to re-create them.
      // T_HOST is index 6
      // We already have this constants in LView, we don't need to re-create it.

      var NATIVE = 7;
      var VIEW_REFS = 8;
      var MOVED_VIEWS = 9;
      /**
       * Size of LContainer's header. Represents the index after which all views in the
       * container will be inserted. We need to keep a record of current views so we know
       * which views are already in the DOM (and don't need to be re-added) and so we can
       * remove views from the DOM when they are no longer required.
       */

      var CONTAINER_HEADER_OFFSET = 10; // Note: This hack is necessary so we don't erroneously get a circular dependency
      // failure based on types.

      var unusedValueExportToPlacateAjd$1 = 1;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * True if `value` is `LView`.
       * @param value wrapped value of `RNode`, `LView`, `LContainer`
       */

      function isLView(value) {
        return Array.isArray(value) && typeof value[TYPE] === 'object';
      }
      /**
       * True if `value` is `LContainer`.
       * @param value wrapped value of `RNode`, `LView`, `LContainer`
       */


      function isLContainer(value) {
        return Array.isArray(value) && value[TYPE] === true;
      }

      function isContentQueryHost(tNode) {
        return (tNode.flags & 8
        /* hasContentQuery */
        ) !== 0;
      }

      function isComponentHost(tNode) {
        return (tNode.flags & 2
        /* isComponentHost */
        ) === 2
        /* isComponentHost */
        ;
      }

      function isDirectiveHost(tNode) {
        return (tNode.flags & 1
        /* isDirectiveHost */
        ) === 1
        /* isDirectiveHost */
        ;
      }

      function isComponentDef(def) {
        return def.template !== null;
      }

      function isRootView(target) {
        return (target[FLAGS] & 512
        /* IsRoot */
        ) !== 0;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // [Assert functions do not constraint type when they are guarded by a truthy
      // expression.](https://github.com/microsoft/TypeScript/issues/37295)


      function assertTNodeForLView(tNode, lView) {
        assertTNodeForTView(tNode, lView[TVIEW]);
      }

      function assertTNodeForTView(tNode, tView) {
        assertTNode(tNode);
        tNode.hasOwnProperty('tView_') && assertEqual(tNode.tView_, tView, 'This TNode does not belong to this TView.');
      }

      function assertTNode(tNode) {
        assertDefined(tNode, 'TNode must be defined');

        if (!(tNode && typeof tNode === 'object' && tNode.hasOwnProperty('directiveStylingLast'))) {
          throwError('Not of type TNode, got: ' + tNode);
        }
      }

      function assertTIcu(tIcu) {
        assertDefined(tIcu, 'Expected TIcu to be defined');

        if (!(typeof tIcu.currentCaseLViewIndex === 'number')) {
          throwError('Object is not of TIcu type.');
        }
      }

      function assertComponentType(actual) {
        var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Type passed in is not ComponentType, it does not have \'ɵcmp\' property.';

        if (!getComponentDef(actual)) {
          throwError(msg);
        }
      }

      function assertNgModuleType(actual) {
        var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Type passed in is not NgModuleType, it does not have \'ɵmod\' property.';

        if (!getNgModuleDef(actual)) {
          throwError(msg);
        }
      }

      function assertCurrentTNodeIsParent(isParent) {
        assertEqual(isParent, true, 'currentTNode should be a parent');
      }

      function assertHasParent(tNode) {
        assertDefined(tNode, 'currentTNode should exist!');
        assertDefined(tNode.parent, 'currentTNode should have a parent');
      }

      function assertDataNext(lView, index, arr) {
        if (arr == null) arr = lView;
        assertEqual(arr.length, index, "index ".concat(index, " expected to be at the end of arr (length ").concat(arr.length, ")"));
      }

      function assertLContainer(value) {
        assertDefined(value, 'LContainer must be defined');
        assertEqual(isLContainer(value), true, 'Expecting LContainer');
      }

      function assertLViewOrUndefined(value) {
        value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');
      }

      function assertLView(value) {
        assertDefined(value, 'LView must be defined');
        assertEqual(isLView(value), true, 'Expecting LView');
      }

      function assertFirstCreatePass(tView, errMessage) {
        assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');
      }

      function assertFirstUpdatePass(tView, errMessage) {
        assertEqual(tView.firstUpdatePass, true, errMessage || 'Should only be called in first update pass.');
      }
      /**
       * This is a basic sanity check that an object is probably a directive def. DirectiveDef is
       * an interface, so we can't do a direct instanceof check.
       */


      function assertDirectiveDef(obj) {
        if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {
          throwError("Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.");
        }
      }

      function assertIndexInDeclRange(lView, index) {
        var tView = lView[1];
        assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);
      }

      function assertIndexInVarsRange(lView, index) {
        var tView = lView[1];
        assertBetween(tView.bindingStartIndex, tView.expandoStartIndex, index);
      }

      function assertIndexInExpandoRange(lView, index) {
        var tView = lView[1];
        assertBetween(tView.expandoStartIndex, lView.length, index);
      }

      function assertBetween(lower, upper, index) {
        if (!(lower <= index && index < upper)) {
          throwError("Index out of range (expecting ".concat(lower, " <= ").concat(index, " < ").concat(upper, ")"));
        }
      }

      function assertProjectionSlots(lView, errMessage) {
        assertDefined(lView[DECLARATION_COMPONENT_VIEW], 'Component views should exist.');
        assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, errMessage || 'Components with projection nodes (<ng-content>) must have projection slots defined.');
      }

      function assertParentView(lView, errMessage) {
        assertDefined(lView, errMessage || 'Component views should always have a parent view (component\'s host view)');
      }
      /**
       * This is a basic sanity check that the `injectorIndex` seems to point to what looks like a
       * NodeInjector data structure.
       *
       * @param lView `LView` which should be checked.
       * @param injectorIndex index into the `LView` where the `NodeInjector` is expected.
       */


      function assertNodeInjector(lView, injectorIndex) {
        assertIndexInExpandoRange(lView, injectorIndex);
        assertIndexInExpandoRange(lView, injectorIndex + 8
        /* PARENT */
        );
        assertNumber(lView[injectorIndex + 0], 'injectorIndex should point to a bloom filter');
        assertNumber(lView[injectorIndex + 1], 'injectorIndex should point to a bloom filter');
        assertNumber(lView[injectorIndex + 2], 'injectorIndex should point to a bloom filter');
        assertNumber(lView[injectorIndex + 3], 'injectorIndex should point to a bloom filter');
        assertNumber(lView[injectorIndex + 4], 'injectorIndex should point to a bloom filter');
        assertNumber(lView[injectorIndex + 5], 'injectorIndex should point to a bloom filter');
        assertNumber(lView[injectorIndex + 6], 'injectorIndex should point to a bloom filter');
        assertNumber(lView[injectorIndex + 7], 'injectorIndex should point to a bloom filter');
        assertNumber(lView[injectorIndex + 8
        /* PARENT */
        ], 'injectorIndex should point to parent injector');
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function getFactoryDef(type, throwNotFound) {
        var hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);

        if (!hasFactoryDef && throwNotFound === true && ngDevMode) {
          throw new Error("Type ".concat(stringify(type), " does not have '\u0275fac' property."));
        }

        return hasFactoryDef ? type[NG_FACTORY_DEF] : null;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Represents a basic change from a previous to a new value for a single
       * property on a directive instance. Passed as a value in a
       * {@link SimpleChanges} object to the `ngOnChanges` hook.
       *
       * @see `OnChanges`
       *
       * @publicApi
       */


      var _SimpleChange = /*#__PURE__*/function () {
        function _SimpleChange(previousValue, currentValue, firstChange) {
          _classCallCheck2(this, _SimpleChange);

          this.previousValue = previousValue;
          this.currentValue = currentValue;
          this.firstChange = firstChange;
        }
        /**
         * Check whether the new value is the first value assigned.
         */


        _createClass2(_SimpleChange, [{
          key: "isFirstChange",
          value: function isFirstChange() {
            return this.firstChange;
          }
        }]);

        return _SimpleChange;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The NgOnChangesFeature decorates a component with support for the ngOnChanges
       * lifecycle hook, so it should be included in any component that implements
       * that hook.
       *
       * If the component or directive uses inheritance, the NgOnChangesFeature MUST
       * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise
       * inherited properties will not be propagated to the ngOnChanges lifecycle
       * hook.
       *
       * Example usage:
       *
       * ```
       * static ɵcmp = defineComponent({
       *   ...
       *   inputs: {name: 'publicName'},
       *   features: [NgOnChangesFeature]
       * });
       * ```
       *
       * @codeGenApi
       */


      function _ɵɵNgOnChangesFeature() {
        return NgOnChangesFeatureImpl;
      }

      function NgOnChangesFeatureImpl(definition) {
        if (definition.type.prototype.ngOnChanges) {
          definition.setInput = ngOnChangesSetInput;
        }

        return rememberChangeHistoryAndInvokeOnChangesHook;
      } // This option ensures that the ngOnChanges lifecycle hook will be inherited
      // from superclasses (in InheritDefinitionFeature).

      /** @nocollapse */
      // tslint:disable-next-line:no-toplevel-property-access


      _ɵɵNgOnChangesFeature.ngInherit = true;
      /**
       * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate
       * `ngOnChanges`.
       *
       * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are
       * found it invokes `ngOnChanges` on the component instance.
       *
       * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,
       *     it is guaranteed to be called with component instance.
       */

      function rememberChangeHistoryAndInvokeOnChangesHook() {
        var simpleChangesStore = getSimpleChangesStore(this);
        var current = simpleChangesStore === null || simpleChangesStore === void 0 ? void 0 : simpleChangesStore.current;

        if (current) {
          var previous = simpleChangesStore.previous;

          if (previous === EMPTY_OBJ) {
            simpleChangesStore.previous = current;
          } else {
            // New changes are copied to the previous store, so that we don't lose history for inputs
            // which were not changed this time
            for (var key in current) {
              previous[key] = current[key];
            }
          }

          simpleChangesStore.current = null;
          this.ngOnChanges(current);
        }
      }

      function ngOnChangesSetInput(instance, value, publicName, privateName) {
        var simpleChangesStore = getSimpleChangesStore(instance) || setSimpleChangesStore(instance, {
          previous: EMPTY_OBJ,
          current: null
        });
        var current = simpleChangesStore.current || (simpleChangesStore.current = {});
        var previous = simpleChangesStore.previous;
        var declaredName = this.declaredInputs[publicName];
        var previousChange = previous[declaredName];
        current[declaredName] = new _SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);
        instance[privateName] = value;
      }

      var SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';

      function getSimpleChangesStore(instance) {
        return instance[SIMPLE_CHANGES_STORE] || null;
      }

      function setSimpleChangesStore(instance, store) {
        return instance[SIMPLE_CHANGES_STORE] = store;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var profilerCallback = null;
      /**
       * Sets the callback function which will be invoked before and after performing certain actions at
       * runtime (for example, before and after running change detection).
       *
       * Warning: this function is *INTERNAL* and should not be relied upon in application's code.
       * The contract of the function might be changed in any release and/or the function can be removed
       * completely.
       *
       * @param profiler function provided by the caller or null value to disable profiling.
       */

      var setProfiler = function setProfiler(profiler) {
        profilerCallback = profiler;
      };
      /**
       * Profiler function which wraps user code executed by the runtime.
       *
       * @param event ProfilerEvent corresponding to the execution context
       * @param instance component instance
       * @param hookOrListener lifecycle hook function or output listener. The value depends on the
       *  execution context
       * @returns
       */


      var profiler = function profiler(event, instance, hookOrListener) {
        if (profilerCallback != null
        /* both `null` and `undefined` */
        ) {
            profilerCallback(event, instance, hookOrListener);
          }
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
      var MATH_ML_NAMESPACE = 'http://www.w3.org/1998/MathML/';
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Most of the use of `document` in Angular is from within the DI system so it is possible to simply
       * inject the `DOCUMENT` token and are done.
       *
       * Ivy is special because it does not rely upon the DI and must get hold of the document some other
       * way.
       *
       * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.
       * Wherever ivy needs the global document, it calls `getDocument()` instead.
       *
       * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to
       * tell ivy what the global `document` is.
       *
       * Angular does this for us in each of the standard platforms (`Browser`, `Server`, and `WebWorker`)
       * by calling `setDocument()` when providing the `DOCUMENT` token.
       */

      var DOCUMENT = undefined;
      /**
       * Tell ivy what the `document` is for this platform.
       *
       * It is only necessary to call this if the current platform is not a browser.
       *
       * @param document The object representing the global `document` in this environment.
       */

      function setDocument(document) {
        DOCUMENT = document;
      }
      /**
       * Access the object that represents the `document` for this platform.
       *
       * Ivy calls this whenever it needs to access the `document` object.
       * For example to create the renderer or to do sanitization.
       */


      function getDocument() {
        if (DOCUMENT !== undefined) {
          return DOCUMENT;
        } else if (typeof document !== 'undefined') {
          return document;
        } // No "document" can be found. This should only happen if we are running ivy outside Angular and
        // the current platform is not a browser. Since this is not a supported scenario at the moment
        // this should not happen in Angular apps.
        // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a
        // public API. Meanwhile we just return `undefined` and let the application fail.


        return undefined;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // TODO: cleanup once the code is merged in angular/angular


      var RendererStyleFlags3;

      (function (RendererStyleFlags3) {
        RendererStyleFlags3[RendererStyleFlags3["Important"] = 1] = "Important";
        RendererStyleFlags3[RendererStyleFlags3["DashCase"] = 2] = "DashCase";
      })(RendererStyleFlags3 || (RendererStyleFlags3 = {}));
      /** Returns whether the `renderer` is a `ProceduralRenderer3` */


      function isProceduralRenderer(renderer) {
        return !!renderer.listen;
      }

      var ɵ0 = function ɵ0(hostElement, rendererType) {
        return getDocument();
      };

      var domRendererFactory3 = {
        createRenderer: ɵ0
      }; // Note: This hack is necessary so we don't erroneously get a circular dependency
      // failure based on types.

      var unusedValueExportToPlacateAjd$2 = 1;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)
       * in same location in `LView`. This is because we don't want to pre-allocate space for it
       * because the storage is sparse. This file contains utilities for dealing with such data types.
       *
       * How do we know what is stored at a given location in `LView`.
       * - `Array.isArray(value) === false` => `RNode` (The normal storage value)
       * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.
       *   - `typeof value[TYPE] === 'object'` => `LView`
       *      - This happens when we have a component at a given location
       *   - `typeof value[TYPE] === true` => `LContainer`
       *      - This happens when we have `LContainer` binding at a given location.
       *
       *
       * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.
       */

      /**
       * Returns `RNode`.
       * @param value wrapped value of `RNode`, `LView`, `LContainer`
       */

      function unwrapRNode(value) {
        while (Array.isArray(value)) {
          value = value[HOST];
        }

        return value;
      }
      /**
       * Returns `LView` or `null` if not found.
       * @param value wrapped value of `RNode`, `LView`, `LContainer`
       */


      function unwrapLView(value) {
        while (Array.isArray(value)) {
          // This check is same as `isLView()` but we don't call at as we don't want to call
          // `Array.isArray()` twice and give JITer more work for inlining.
          if (typeof value[TYPE] === 'object') return value;
          value = value[HOST];
        }

        return null;
      }
      /**
       * Returns `LContainer` or `null` if not found.
       * @param value wrapped value of `RNode`, `LView`, `LContainer`
       */


      function unwrapLContainer(value) {
        while (Array.isArray(value)) {
          // This check is same as `isLContainer()` but we don't call at as we don't want to call
          // `Array.isArray()` twice and give JITer more work for inlining.
          if (value[TYPE] === true) return value;
          value = value[HOST];
        }

        return null;
      }
      /**
       * Retrieves an element value from the provided `viewData`, by unwrapping
       * from any containers, component views, or style contexts.
       */


      function getNativeByIndex(index, lView) {
        ngDevMode && assertIndexInRange(lView, index);
        ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');
        return unwrapRNode(lView[index]);
      }
      /**
       * Retrieve an `RNode` for a given `TNode` and `LView`.
       *
       * This function guarantees in dev mode to retrieve a non-null `RNode`.
       *
       * @param tNode
       * @param lView
       */


      function getNativeByTNode(tNode, lView) {
        ngDevMode && assertTNodeForLView(tNode, lView);
        ngDevMode && assertIndexInRange(lView, tNode.index);
        var node = unwrapRNode(lView[tNode.index]);
        ngDevMode && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);
        return node;
      }
      /**
       * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.
       *
       * Some `TNode`s don't have associated `RNode`s. For example `Projection`
       *
       * @param tNode
       * @param lView
       */


      function getNativeByTNodeOrNull(tNode, lView) {
        var index = tNode === null ? -1 : tNode.index;

        if (index !== -1) {
          ngDevMode && assertTNodeForLView(tNode, lView);
          var node = unwrapRNode(lView[index]);
          ngDevMode && node !== null && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);
          return node;
        }

        return null;
      } // fixme(misko): The return Type should be `TNode|null`


      function getTNode(tView, index) {
        ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');
        ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');
        var tNode = tView.data[index];
        ngDevMode && tNode !== null && assertTNode(tNode);
        return tNode;
      }
      /** Retrieves a value from any `LView` or `TData`. */


      function load(view, index) {
        ngDevMode && assertIndexInRange(view, index);
        return view[index];
      }

      function getComponentLViewByIndex(nodeIndex, hostView) {
        // Could be an LView or an LContainer. If LContainer, unwrap to find LView.
        ngDevMode && assertIndexInRange(hostView, nodeIndex);
        var slotValue = hostView[nodeIndex];
        var lView = isLView(slotValue) ? slotValue : slotValue[HOST];
        return lView;
      }
      /** Checks whether a given view is in creation mode */


      function isCreationMode(view) {
        return (view[FLAGS] & 4
        /* CreationMode */
        ) === 4
        /* CreationMode */
        ;
      }
      /**
       * Returns a boolean for whether the view is attached to the change detection tree.
       *
       * Note: This determines whether a view should be checked, not whether it's inserted
       * into a container. For that, you'll want `viewAttachedToContainer` below.
       */


      function viewAttachedToChangeDetector(view) {
        return (view[FLAGS] & 128
        /* Attached */
        ) === 128
        /* Attached */
        ;
      }
      /** Returns a boolean for whether the view is attached to a container. */


      function viewAttachedToContainer(view) {
        return isLContainer(view[PARENT]);
      }

      function getConstant(consts, index) {
        if (index === null || index === undefined) return null;
        ngDevMode && assertIndexInRange(consts, index);
        return consts[index];
      }
      /**
       * Resets the pre-order hook flags of the view.
       * @param lView the LView on which the flags are reset
       */


      function resetPreOrderHookFlags(lView) {
        lView[PREORDER_HOOK_FLAGS] = 0;
      }
      /**
       * Updates the `TRANSPLANTED_VIEWS_TO_REFRESH` counter on the `LContainer` as well as the parents
       * whose
       *  1. counter goes from 0 to 1, indicating that there is a new child that has a view to refresh
       *  or
       *  2. counter goes from 1 to 0, indicating there are no more descendant views to refresh
       */


      function updateTransplantedViewCount(lContainer, amount) {
        lContainer[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;
        var viewOrContainer = lContainer;
        var parent = lContainer[PARENT];

        while (parent !== null && (amount === 1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 1 || amount === -1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 0)) {
          parent[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;
          viewOrContainer = parent;
          parent = parent[PARENT];
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var instructionState = {
        lFrame: createLFrame(null),
        bindingsEnabled: true,
        isInCheckNoChangesMode: false
      };
      /**
       * Returns true if the instruction state stack is empty.
       *
       * Intended to be called from tests only (tree shaken otherwise).
       */

      function specOnlyIsInstructionStateEmpty() {
        return instructionState.lFrame.parent === null;
      }

      function getElementDepthCount() {
        return instructionState.lFrame.elementDepthCount;
      }

      function increaseElementDepthCount() {
        instructionState.lFrame.elementDepthCount++;
      }

      function decreaseElementDepthCount() {
        instructionState.lFrame.elementDepthCount--;
      }

      function getBindingsEnabled() {
        return instructionState.bindingsEnabled;
      }
      /**
       * Enables directive matching on elements.
       *
       *  * Example:
       * ```
       * <my-comp my-directive>
       *   Should match component / directive.
       * </my-comp>
       * <div ngNonBindable>
       *   <!-- ɵɵdisableBindings() -->
       *   <my-comp my-directive>
       *     Should not match component / directive because we are in ngNonBindable.
       *   </my-comp>
       *   <!-- ɵɵenableBindings() -->
       * </div>
       * ```
       *
       * @codeGenApi
       */


      function _ɵɵenableBindings() {
        instructionState.bindingsEnabled = true;
      }
      /**
       * Disables directive matching on element.
       *
       *  * Example:
       * ```
       * <my-comp my-directive>
       *   Should match component / directive.
       * </my-comp>
       * <div ngNonBindable>
       *   <!-- ɵɵdisableBindings() -->
       *   <my-comp my-directive>
       *     Should not match component / directive because we are in ngNonBindable.
       *   </my-comp>
       *   <!-- ɵɵenableBindings() -->
       * </div>
       * ```
       *
       * @codeGenApi
       */


      function _ɵɵdisableBindings() {
        instructionState.bindingsEnabled = false;
      }
      /**
       * Return the current `LView`.
       */


      function getLView() {
        return instructionState.lFrame.lView;
      }
      /**
       * Return the current `TView`.
       */


      function getTView() {
        return instructionState.lFrame.tView;
      }
      /**
       * Restores `contextViewData` to the given OpaqueViewState instance.
       *
       * Used in conjunction with the getCurrentView() instruction to save a snapshot
       * of the current view and restore it when listeners are invoked. This allows
       * walking the declaration view tree in listeners to get vars from parent views.
       *
       * @param viewToRestore The OpaqueViewState instance to restore.
       * @returns Context of the restored OpaqueViewState instance.
       *
       * @codeGenApi
       */


      function _ɵɵrestoreView(viewToRestore) {
        instructionState.lFrame.contextLView = viewToRestore;
        return viewToRestore[CONTEXT];
      }

      function getCurrentTNode() {
        var currentTNode = getCurrentTNodePlaceholderOk();

        while (currentTNode !== null && currentTNode.type === 64
        /* Placeholder */
        ) {
          currentTNode = currentTNode.parent;
        }

        return currentTNode;
      }

      function getCurrentTNodePlaceholderOk() {
        return instructionState.lFrame.currentTNode;
      }

      function getCurrentParentTNode() {
        var lFrame = instructionState.lFrame;
        var currentTNode = lFrame.currentTNode;
        return lFrame.isParent ? currentTNode : currentTNode.parent;
      }

      function setCurrentTNode(tNode, isParent) {
        ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);
        var lFrame = instructionState.lFrame;
        lFrame.currentTNode = tNode;
        lFrame.isParent = isParent;
      }

      function isCurrentTNodeParent() {
        return instructionState.lFrame.isParent;
      }

      function setCurrentTNodeAsNotParent() {
        instructionState.lFrame.isParent = false;
      }

      function setCurrentTNodeAsParent() {
        instructionState.lFrame.isParent = true;
      }

      function getContextLView() {
        return instructionState.lFrame.contextLView;
      }

      function isInCheckNoChangesMode() {
        // TODO(misko): remove this from the LView since it is ngDevMode=true mode only.
        return instructionState.isInCheckNoChangesMode;
      }

      function setIsInCheckNoChangesMode(mode) {
        instructionState.isInCheckNoChangesMode = mode;
      } // top level variables should not be exported for performance reasons (PERF_NOTES.md)


      function getBindingRoot() {
        var lFrame = instructionState.lFrame;
        var index = lFrame.bindingRootIndex;

        if (index === -1) {
          index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;
        }

        return index;
      }

      function getBindingIndex() {
        return instructionState.lFrame.bindingIndex;
      }

      function setBindingIndex(value) {
        return instructionState.lFrame.bindingIndex = value;
      }

      function nextBindingIndex() {
        return instructionState.lFrame.bindingIndex++;
      }

      function incrementBindingIndex(count) {
        var lFrame = instructionState.lFrame;
        var index = lFrame.bindingIndex;
        lFrame.bindingIndex = lFrame.bindingIndex + count;
        return index;
      }

      function isInI18nBlock() {
        return instructionState.lFrame.inI18n;
      }

      function setInI18nBlock(isInI18nBlock) {
        instructionState.lFrame.inI18n = isInI18nBlock;
      }
      /**
       * Set a new binding root index so that host template functions can execute.
       *
       * Bindings inside the host template are 0 index. But because we don't know ahead of time
       * how many host bindings we have we can't pre-compute them. For this reason they are all
       * 0 index and we just shift the root so that they match next available location in the LView.
       *
       * @param bindingRootIndex Root index for `hostBindings`
       * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive
       *        whose `hostBindings` are being processed.
       */


      function setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {
        var lFrame = instructionState.lFrame;
        lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;
        setCurrentDirectiveIndex(currentDirectiveIndex);
      }
      /**
       * When host binding is executing this points to the directive index.
       * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`
       * `LView[getCurrentDirectiveIndex()]` is directive instance.
       */


      function getCurrentDirectiveIndex() {
        return instructionState.lFrame.currentDirectiveIndex;
      }
      /**
       * Sets an index of a directive whose `hostBindings` are being processed.
       *
       * @param currentDirectiveIndex `TData` index where current directive instance can be found.
       */


      function setCurrentDirectiveIndex(currentDirectiveIndex) {
        instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;
      }
      /**
       * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being
       * executed.
       *
       * @param tData Current `TData` where the `DirectiveDef` will be looked up at.
       */


      function getCurrentDirectiveDef(tData) {
        var currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;
        return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];
      }

      function getCurrentQueryIndex() {
        return instructionState.lFrame.currentQueryIndex;
      }

      function setCurrentQueryIndex(value) {
        instructionState.lFrame.currentQueryIndex = value;
      }
      /**
       * Returns a `TNode` of the location where the current `LView` is declared at.
       *
       * @param lView an `LView` that we want to find parent `TNode` for.
       */


      function getDeclarationTNode(lView) {
        var tView = lView[TVIEW]; // Return the declaration parent for embedded views

        if (tView.type === 2
        /* Embedded */
        ) {
            ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');
            return tView.declTNode;
          } // Components don't have `TView.declTNode` because each instance of component could be
        // inserted in different location, hence `TView.declTNode` is meaningless.
        // Falling back to `T_HOST` in case we cross component boundary.


        if (tView.type === 1
        /* Component */
        ) {
            return lView[T_HOST];
          } // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.


        return null;
      }
      /**
       * This is a light weight version of the `enterView` which is needed by the DI system.
       *
       * @param lView `LView` location of the DI context.
       * @param tNode `TNode` for DI context
       * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration
       *     tree from `tNode`  until we find parent declared `TElementNode`.
       * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared
       *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated
       *     `NodeInjector` can be found and we should instead use `ModuleInjector`.
       *     - If `true` than this call must be fallowed by `leaveDI`
       *     - If `false` than this call failed and we should NOT call `leaveDI`
       */


      function enterDI(lView, tNode, flags) {
        ngDevMode && assertLViewOrUndefined(lView);

        if (flags & _InjectFlags.SkipSelf) {
          ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);
          var parentTNode = tNode;
          var parentLView = lView;

          while (true) {
            ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');
            parentTNode = parentTNode.parent;

            if (parentTNode === null && !(flags & _InjectFlags.Host)) {
              parentTNode = getDeclarationTNode(parentLView);
              if (parentTNode === null) break; // In this case, a parent exists and is definitely an element. So it will definitely
              // have an existing lView as the declaration view, which is why we can assume it's defined.

              ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');
              parentLView = parentLView[DECLARATION_VIEW]; // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives
              // We want to skip those and look only at Elements and ElementContainers to ensure
              // we're looking at true parent nodes, and not content or other types.

              if (parentTNode.type & (2
              /* Element */
              | 8
              /* ElementContainer */
              )) {
                break;
              }
            } else {
              break;
            }
          }

          if (parentTNode === null) {
            // If we failed to find a parent TNode this means that we should use module injector.
            return false;
          } else {
            tNode = parentTNode;
            lView = parentLView;
          }
        }

        ngDevMode && assertTNodeForLView(tNode, lView);
        var lFrame = instructionState.lFrame = allocLFrame();
        lFrame.currentTNode = tNode;
        lFrame.lView = lView;
        return true;
      }
      /**
       * Swap the current lView with a new lView.
       *
       * For performance reasons we store the lView in the top level of the module.
       * This way we minimize the number of properties to read. Whenever a new view
       * is entered we have to store the lView for later, and when the view is
       * exited the state has to be restored
       *
       * @param newView New lView to become active
       * @returns the previously active lView;
       */


      function enterView(newView) {
        ngDevMode && assertNotEqual(newView[0], newView[1], '????');
        ngDevMode && assertLViewOrUndefined(newView);
        var newLFrame = allocLFrame();

        if (ngDevMode) {
          assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');
          assertEqual(newLFrame.lView, null, 'Expected clean LFrame');
          assertEqual(newLFrame.tView, null, 'Expected clean LFrame');
          assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');
          assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');
          assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');
          assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');
          assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');
          assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');
        }

        var tView = newView[TVIEW];
        instructionState.lFrame = newLFrame;
        ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);
        newLFrame.currentTNode = tView.firstChild;
        newLFrame.lView = newView;
        newLFrame.tView = tView;
        newLFrame.contextLView = newView;
        newLFrame.bindingIndex = tView.bindingStartIndex;
        newLFrame.inI18n = false;
      }
      /**
       * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.
       */


      function allocLFrame() {
        var currentLFrame = instructionState.lFrame;
        var childLFrame = currentLFrame === null ? null : currentLFrame.child;
        var newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;
        return newLFrame;
      }

      function createLFrame(parent) {
        var lFrame = {
          currentTNode: null,
          isParent: true,
          lView: null,
          tView: null,
          selectedIndex: -1,
          contextLView: null,
          elementDepthCount: 0,
          currentNamespace: null,
          currentDirectiveIndex: -1,
          bindingRootIndex: -1,
          bindingIndex: -1,
          currentQueryIndex: 0,
          parent: parent,
          child: null,
          inI18n: false
        };
        parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.

        return lFrame;
      }
      /**
       * A lightweight version of leave which is used with DI.
       *
       * This function only resets `currentTNode` and `LView` as those are the only properties
       * used with DI (`enterDI()`).
       *
       * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where
       * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.
       */


      function leaveViewLight() {
        var oldLFrame = instructionState.lFrame;
        instructionState.lFrame = oldLFrame.parent;
        oldLFrame.currentTNode = null;
        oldLFrame.lView = null;
        return oldLFrame;
      }
      /**
       * This is a lightweight version of the `leaveView` which is needed by the DI system.
       *
       * NOTE: this function is an alias so that we can change the type of the function to have `void`
       * return type.
       */


      var leaveDI = leaveViewLight;
      /**
       * Leave the current `LView`
       *
       * This pops the `LFrame` with the associated `LView` from the stack.
       *
       * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is
       * because for performance reasons we don't release `LFrame` but rather keep it for next use.
       */

      function leaveView() {
        var oldLFrame = leaveViewLight();
        oldLFrame.isParent = true;
        oldLFrame.tView = null;
        oldLFrame.selectedIndex = -1;
        oldLFrame.contextLView = null;
        oldLFrame.elementDepthCount = 0;
        oldLFrame.currentDirectiveIndex = -1;
        oldLFrame.currentNamespace = null;
        oldLFrame.bindingRootIndex = -1;
        oldLFrame.bindingIndex = -1;
        oldLFrame.currentQueryIndex = 0;
      }

      function nextContextImpl(level) {
        var contextLView = instructionState.lFrame.contextLView = walkUpViews(level, instructionState.lFrame.contextLView);
        return contextLView[CONTEXT];
      }

      function walkUpViews(nestingLevel, currentView) {
        while (nestingLevel > 0) {
          ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');
          currentView = currentView[DECLARATION_VIEW];
          nestingLevel--;
        }

        return currentView;
      }
      /**
       * Gets the currently selected element index.
       *
       * Used with {@link property} instruction (and more in the future) to identify the index in the
       * current `LView` to act on.
       */


      function getSelectedIndex() {
        return instructionState.lFrame.selectedIndex;
      }
      /**
       * Sets the most recent index passed to {@link select}
       *
       * Used with {@link property} instruction (and more in the future) to identify the index in the
       * current `LView` to act on.
       *
       * (Note that if an "exit function" was set earlier (via `setElementExitFn()`) then that will be
       * run if and when the provided `index` value is different from the current selected index value.)
       */


      function setSelectedIndex(index) {
        ngDevMode && index !== -1 && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');
        ngDevMode && assertLessThan(index, instructionState.lFrame.lView.length, 'Can\'t set index passed end of LView');
        instructionState.lFrame.selectedIndex = index;
      }
      /**
       * Gets the `tNode` that represents currently selected element.
       */


      function getSelectedTNode() {
        var lFrame = instructionState.lFrame;
        return getTNode(lFrame.tView, lFrame.selectedIndex);
      }
      /**
       * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.
       *
       * @codeGenApi
       */


      function _ɵɵnamespaceSVG() {
        instructionState.lFrame.currentNamespace = SVG_NAMESPACE;
      }
      /**
       * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.
       *
       * @codeGenApi
       */


      function _ɵɵnamespaceMathML() {
        instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;
      }
      /**
       * Sets the namespace used to create elements to `null`, which forces element creation to use
       * `createElement` rather than `createElementNS`.
       *
       * @codeGenApi
       */


      function _ɵɵnamespaceHTML() {
        namespaceHTMLInternal();
      }
      /**
       * Sets the namespace used to create elements to `null`, which forces element creation to use
       * `createElement` rather than `createElementNS`.
       */


      function namespaceHTMLInternal() {
        instructionState.lFrame.currentNamespace = null;
      }

      function getNamespace() {
        return instructionState.lFrame.currentNamespace;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.
       *
       * Must be run *only* on the first template pass.
       *
       * Sets up the pre-order hooks on the provided `tView`,
       * see {@link HookData} for details about the data structure.
       *
       * @param directiveIndex The index of the directive in LView
       * @param directiveDef The definition containing the hooks to setup in tView
       * @param tView The current TView
       */


      function registerPreOrderHooks(directiveIndex, directiveDef, tView) {
        ngDevMode && assertFirstCreatePass(tView);
        var _directiveDef$type$pr = directiveDef.type.prototype,
            ngOnChanges = _directiveDef$type$pr.ngOnChanges,
            ngOnInit = _directiveDef$type$pr.ngOnInit,
            ngDoCheck = _directiveDef$type$pr.ngDoCheck;

        if (ngOnChanges) {
          var wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);
          (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, wrappedOnChanges);
          (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, wrappedOnChanges);
        }

        if (ngOnInit) {
          (tView.preOrderHooks || (tView.preOrderHooks = [])).push(0 - directiveIndex, ngOnInit);
        }

        if (ngDoCheck) {
          (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, ngDoCheck);
          (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, ngDoCheck);
        }
      }
      /**
       *
       * Loops through the directives on the provided `tNode` and queues hooks to be
       * run that are not initialization hooks.
       *
       * Should be executed during `elementEnd()` and similar to
       * preserve hook execution order. Content, view, and destroy hooks for projected
       * components and directives must be called *before* their hosts.
       *
       * Sets up the content, view, and destroy hooks on the provided `tView`,
       * see {@link HookData} for details about the data structure.
       *
       * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up
       * separately at `elementStart`.
       *
       * @param tView The current TView
       * @param tNode The TNode whose directives are to be searched for hooks to queue
       */


      function registerPostOrderHooks(tView, tNode) {
        ngDevMode && assertFirstCreatePass(tView); // It's necessary to loop through the directives at elementEnd() (rather than processing in
        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy
        // hooks for projected components and directives must be called *before* their hosts.

        for (var i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {
          var _directiveDef = tView.data[i];
          ngDevMode && assertDefined(_directiveDef, 'Expecting DirectiveDef');
          var lifecycleHooks = _directiveDef.type.prototype;
          var ngAfterContentInit = lifecycleHooks.ngAfterContentInit,
              ngAfterContentChecked = lifecycleHooks.ngAfterContentChecked,
              ngAfterViewInit = lifecycleHooks.ngAfterViewInit,
              ngAfterViewChecked = lifecycleHooks.ngAfterViewChecked,
              ngOnDestroy = lifecycleHooks.ngOnDestroy;

          if (ngAfterContentInit) {
            (tView.contentHooks || (tView.contentHooks = [])).push(-i, ngAfterContentInit);
          }

          if (ngAfterContentChecked) {
            (tView.contentHooks || (tView.contentHooks = [])).push(i, ngAfterContentChecked);
            (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, ngAfterContentChecked);
          }

          if (ngAfterViewInit) {
            (tView.viewHooks || (tView.viewHooks = [])).push(-i, ngAfterViewInit);
          }

          if (ngAfterViewChecked) {
            (tView.viewHooks || (tView.viewHooks = [])).push(i, ngAfterViewChecked);
            (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, ngAfterViewChecked);
          }

          if (ngOnDestroy != null) {
            (tView.destroyHooks || (tView.destroyHooks = [])).push(i, ngOnDestroy);
          }
        }
      }
      /**
       * Executing hooks requires complex logic as we need to deal with 2 constraints.
       *
       * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only
       * once, across many change detection cycles. This must be true even if some hooks throw, or if
       * some recursively trigger a change detection cycle.
       * To solve that, it is required to track the state of the execution of these init hooks.
       * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},
       * and the index within that phase. They can be seen as a cursor in the following structure:
       * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]
       * They are are stored as flags in LView[FLAGS].
       *
       * 2. Pre-order hooks can be executed in batches, because of the select instruction.
       * To be able to pause and resume their execution, we also need some state about the hook's array
       * that is being processed:
       * - the index of the next hook to be executed
       * - the number of init hooks already found in the processed part of the  array
       * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].
       */

      /**
       * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were
       * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read
       * / write of the init-hooks related flags.
       * @param lView The LView where hooks are defined
       * @param hooks Hooks to be run
       * @param nodeIndex 3 cases depending on the value:
       * - undefined: all hooks from the array should be executed (post-order case)
       * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
       * flushing the remaining hooks)
       * - number: execute hooks only from the saved index until that node index exclusive (pre-order
       * case, when executing select(number))
       */


      function executeCheckHooks(lView, hooks, nodeIndex) {
        callHooks(lView, hooks, 3
        /* InitPhaseCompleted */
        , nodeIndex);
      }
      /**
       * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,
       * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.
       * @param lView The LView where hooks are defined
       * @param hooks Hooks to be run
       * @param initPhase A phase for which hooks should be run
       * @param nodeIndex 3 cases depending on the value:
       * - undefined: all hooks from the array should be executed (post-order case)
       * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
       * flushing the remaining hooks)
       * - number: execute hooks only from the saved index until that node index exclusive (pre-order
       * case, when executing select(number))
       */


      function executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {
        ngDevMode && assertNotEqual(initPhase, 3
        /* InitPhaseCompleted */
        , 'Init pre-order hooks should not be called more than once');

        if ((lView[FLAGS] & 3
        /* InitPhaseStateMask */
        ) === initPhase) {
          callHooks(lView, hooks, initPhase, nodeIndex);
        }
      }

      function incrementInitPhaseFlags(lView, initPhase) {
        ngDevMode && assertNotEqual(initPhase, 3
        /* InitPhaseCompleted */
        , 'Init hooks phase should not be incremented after all init hooks have been run.');
        var flags = lView[FLAGS];

        if ((flags & 3
        /* InitPhaseStateMask */
        ) === initPhase) {
          flags &= 2047
          /* IndexWithinInitPhaseReset */
          ;
          flags += 1
          /* InitPhaseStateIncrementer */
          ;
          lView[FLAGS] = flags;
        }
      }
      /**
       * Calls lifecycle hooks with their contexts, skipping init hooks if it's not
       * the first LView pass
       *
       * @param currentView The current view
       * @param arr The array in which the hooks are found
       * @param initPhaseState the current state of the init phase
       * @param currentNodeIndex 3 cases depending on the value:
       * - undefined: all hooks from the array should be executed (post-order case)
       * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
       * flushing the remaining hooks)
       * - number: execute hooks only from the saved index until that node index exclusive (pre-order
       * case, when executing select(number))
       */


      function callHooks(currentView, arr, initPhase, currentNodeIndex) {
        ngDevMode && assertEqual(isInCheckNoChangesMode(), false, 'Hooks should never be run when in check no changes mode.');
        var startIndex = currentNodeIndex !== undefined ? currentView[PREORDER_HOOK_FLAGS] & 65535
        /* IndexOfTheNextPreOrderHookMaskMask */
        : 0;
        var nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;
        var max = arr.length - 1; // Stop the loop at length - 1, because we look for the hook at i + 1

        var lastNodeIndexFound = 0;

        for (var i = startIndex; i < max; i++) {
          var hook = arr[i + 1];

          if (typeof hook === 'number') {
            lastNodeIndexFound = arr[i];

            if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {
              break;
            }
          } else {
            var isInitHook = arr[i] < 0;
            if (isInitHook) currentView[PREORDER_HOOK_FLAGS] += 65536
            /* NumberOfInitHooksCalledIncrementer */
            ;

            if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {
              callHook(currentView, initPhase, arr, i);
              currentView[PREORDER_HOOK_FLAGS] = (currentView[PREORDER_HOOK_FLAGS] & 4294901760
              /* NumberOfInitHooksCalledMask */
              ) + i + 2;
            }

            i++;
          }
        }
      }
      /**
       * Execute one hook against the current `LView`.
       *
       * @param currentView The current view
       * @param initPhaseState the current state of the init phase
       * @param arr The array in which the hooks are found
       * @param i The current index within the hook data array
       */


      function callHook(currentView, initPhase, arr, i) {
        var isInitHook = arr[i] < 0;
        var hook = arr[i + 1];
        var directiveIndex = isInitHook ? -arr[i] : arr[i];
        var directive = currentView[directiveIndex];

        if (isInitHook) {
          var indexWithintInitPhase = currentView[FLAGS] >> 11
          /* IndexWithinInitPhaseShift */
          ; // The init phase state must be always checked here as it may have been recursively updated.

          if (indexWithintInitPhase < currentView[PREORDER_HOOK_FLAGS] >> 16
          /* NumberOfInitHooksCalledShift */
          && (currentView[FLAGS] & 3
          /* InitPhaseStateMask */
          ) === initPhase) {
            currentView[FLAGS] += 2048
            /* IndexWithinInitPhaseIncrementer */
            ;
            profiler(4
            /* LifecycleHookStart */
            , directive, hook);

            try {
              hook.call(directive);
            } finally {
              profiler(5
              /* LifecycleHookEnd */
              , directive, hook);
            }
          }
        } else {
          profiler(4
          /* LifecycleHookStart */
          , directive, hook);

          try {
            hook.call(directive);
          } finally {
            profiler(5
            /* LifecycleHookEnd */
            , directive, hook);
          }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var NO_PARENT_INJECTOR = -1;
      /**
       * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in
       * `TView.data`. This allows us to store information about the current node's tokens (which
       * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be
       * shared, so they live in `LView`).
       *
       * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter
       * determines whether a directive is available on the associated node or not. This prevents us
       * from searching the directives array at this level unless it's probable the directive is in it.
       *
       * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.
       *
       * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed
       * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`
       * will differ based on where it is flattened into the main array, so it's not possible to know
       * the indices ahead of time and save their types here. The interfaces are still included here
       * for documentation purposes.
       *
       * export interface LInjector extends Array<any> {
       *
       *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)
       *    [0]: number;
       *
       *    // Cumulative bloom for directive IDs 32-63
       *    [1]: number;
       *
       *    // Cumulative bloom for directive IDs 64-95
       *    [2]: number;
       *
       *    // Cumulative bloom for directive IDs 96-127
       *    [3]: number;
       *
       *    // Cumulative bloom for directive IDs 128-159
       *    [4]: number;
       *
       *    // Cumulative bloom for directive IDs 160 - 191
       *    [5]: number;
       *
       *    // Cumulative bloom for directive IDs 192 - 223
       *    [6]: number;
       *
       *    // Cumulative bloom for directive IDs 224 - 255
       *    [7]: number;
       *
       *    // We need to store a reference to the injector's parent so DI can keep looking up
       *    // the injector tree until it finds the dependency it's looking for.
       *    [PARENT_INJECTOR]: number;
       * }
       *
       * export interface TInjector extends Array<any> {
       *
       *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)
       *    [0]: number;
       *
       *    // Shared node bloom for directive IDs 32-63
       *    [1]: number;
       *
       *    // Shared node bloom for directive IDs 64-95
       *    [2]: number;
       *
       *    // Shared node bloom for directive IDs 96-127
       *    [3]: number;
       *
       *    // Shared node bloom for directive IDs 128-159
       *    [4]: number;
       *
       *    // Shared node bloom for directive IDs 160 - 191
       *    [5]: number;
       *
       *    // Shared node bloom for directive IDs 192 - 223
       *    [6]: number;
       *
       *    // Shared node bloom for directive IDs 224 - 255
       *    [7]: number;
       *
       *    // Necessary to find directive indices for a particular node.
       *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;
       *  }
       */

      /**
       * Factory for creating instances of injectors in the NodeInjector.
       *
       * This factory is complicated by the fact that it can resolve `multi` factories as well.
       *
       * NOTE: Some of the fields are optional which means that this class has two hidden classes.
       * - One without `multi` support (most common)
       * - One with `multi` values, (rare).
       *
       * Since VMs can cache up to 4 inline hidden classes this is OK.
       *
       * - Single factory: Only `resolving` and `factory` is defined.
       * - `providers` factory: `componentProviders` is a number and `index = -1`.
       * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.
       */

      var NodeInjectorFactory = function NodeInjectorFactory(
      /**
       * Factory to invoke in order to create a new instance.
       */
      factory,
      /**
       * Set to `true` if the token is declared in `viewProviders` (or if it is component).
       */
      isViewProvider, injectImplementation) {
        _classCallCheck2(this, NodeInjectorFactory);

        this.factory = factory;
        /**
         * Marker set to true during factory invocation to see if we get into recursive loop.
         * Recursive loop causes an error to be displayed.
         */

        this.resolving = false;
        ngDevMode && assertDefined(factory, 'Factory not specified');
        ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');
        this.canSeeViewProviders = isViewProvider;
        this.injectImpl = injectImplementation;
      };

      function isFactory(obj) {
        return obj instanceof NodeInjectorFactory;
      } // Note: This hack is necessary so we don't erroneously get a circular dependency
      // failure based on types.


      var unusedValueExportToPlacateAjd$3 = 1;
      /**
       * Converts `TNodeType` into human readable text.
       * Make sure this matches with `TNodeType`
       */

      function toTNodeTypeAsString(tNodeType) {
        var text = '';
        tNodeType & 1
        /* Text */
        && (text += '|Text');
        tNodeType & 2
        /* Element */
        && (text += '|Element');
        tNodeType & 4
        /* Container */
        && (text += '|Container');
        tNodeType & 8
        /* ElementContainer */
        && (text += '|ElementContainer');
        tNodeType & 16
        /* Projection */
        && (text += '|Projection');
        tNodeType & 32
        /* Icu */
        && (text += '|IcuContainer');
        tNodeType & 64
        /* Placeholder */
        && (text += '|Placeholder');
        return text.length > 0 ? text.substring(1) : text;
      } // Note: This hack is necessary so we don't erroneously get a circular dependency
      // failure based on types.


      var unusedValueExportToPlacateAjd$4 = 1;
      /**
       * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.
       *
       * ```
       * <div my-dir [class]="exp"></div>
       * ```
       * and
       * ```
       * @Directive({
       * })
       * class MyDirective {
       *   @Input()
       *   class: string;
       * }
       * ```
       *
       * In the above case it is necessary to write the reconciled styling information into the
       * directive's input.
       *
       * @param tNode
       */

      function hasClassInput(tNode) {
        return (tNode.flags & 16
        /* hasClassInput */
        ) !== 0;
      }
      /**
       * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.
       *
       * ```
       * <div my-dir [style]="exp"></div>
       * ```
       * and
       * ```
       * @Directive({
       * })
       * class MyDirective {
       *   @Input()
       *   class: string;
       * }
       * ```
       *
       * In the above case it is necessary to write the reconciled styling information into the
       * directive's input.
       *
       * @param tNode
       */


      function hasStyleInput(tNode) {
        return (tNode.flags & 32
        /* hasStyleInput */
        ) !== 0;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function assertTNodeType(tNode, expectedTypes, message) {
        assertDefined(tNode, 'should be called with a TNode');

        if ((tNode.type & expectedTypes) === 0) {
          throwError(message || "Expected [".concat(toTNodeTypeAsString(expectedTypes), "] but got ").concat(toTNodeTypeAsString(tNode.type), "."));
        }
      }

      function assertPureTNodeType(type) {
        if (!(type === 2
        /* Element */
        || //
        type === 1
        /* Text */
        || //
        type === 4
        /* Container */
        || //
        type === 8
        /* ElementContainer */
        || //
        type === 32
        /* Icu */
        || //
        type === 16
        /* Projection */
        || //
        type === 64
        /* Placeholder */
        )) {
          throwError("Expected TNodeType to have only a single type selected, but got ".concat(toTNodeTypeAsString(type), "."));
        }
      }
      /**
       * Assigns all attribute values to the provided element via the inferred renderer.
       *
       * This function accepts two forms of attribute entries:
       *
       * default: (key, value):
       *  attrs = [key1, value1, key2, value2]
       *
       * namespaced: (NAMESPACE_MARKER, uri, name, value)
       *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]
       *
       * The `attrs` array can contain a mix of both the default and namespaced entries.
       * The "default" values are set without a marker, but if the function comes across
       * a marker value then it will attempt to set a namespaced value. If the marker is
       * not of a namespaced value then the function will quit and return the index value
       * where it stopped during the iteration of the attrs array.
       *
       * See [AttributeMarker] to understand what the namespace marker value is.
       *
       * Note that this instruction does not support assigning style and class values to
       * an element. See `elementStart` and `elementHostAttrs` to learn how styling values
       * are applied to an element.
       * @param renderer The renderer to be used
       * @param native The element that the attributes will be assigned to
       * @param attrs The attribute array of values that will be assigned to the element
       * @returns the index value that was last accessed in the attributes array
       */


      function setUpAttributes(renderer, _native, attrs) {
        var isProc = isProceduralRenderer(renderer);
        var i = 0;

        while (i < attrs.length) {
          var value = attrs[i];

          if (typeof value === 'number') {
            // only namespaces are supported. Other value types (such as style/class
            // entries) are not supported in this function.
            if (value !== 0
            /* NamespaceURI */
            ) {
                break;
              } // we just landed on the marker value ... therefore
            // we should skip to the next entry


            i++;
            var namespaceURI = attrs[i++];
            var attrName = attrs[i++];
            var attrVal = attrs[i++];
            ngDevMode && ngDevMode.rendererSetAttribute++;
            isProc ? renderer.setAttribute(_native, attrName, attrVal, namespaceURI) : _native.setAttributeNS(namespaceURI, attrName, attrVal);
          } else {
            // attrName is string;
            var _attrName = value;
            var _attrVal = attrs[++i]; // Standard attributes

            ngDevMode && ngDevMode.rendererSetAttribute++;

            if (isAnimationProp(_attrName)) {
              if (isProc) {
                renderer.setProperty(_native, _attrName, _attrVal);
              }
            } else {
              isProc ? renderer.setAttribute(_native, _attrName, _attrVal) : _native.setAttribute(_attrName, _attrVal);
            }

            i++;
          }
        } // another piece of code may iterate over the same attributes array. Therefore
        // it may be helpful to return the exact spot where the attributes array exited
        // whether by running into an unsupported marker or if all the static values were
        // iterated over.


        return i;
      }
      /**
       * Test whether the given value is a marker that indicates that the following
       * attribute values in a `TAttributes` array are only the names of attributes,
       * and not name-value pairs.
       * @param marker The attribute marker to test.
       * @returns true if the marker is a "name-only" marker (e.g. `Bindings`, `Template` or `I18n`).
       */


      function isNameOnlyAttributeMarker(marker) {
        return marker === 3
        /* Bindings */
        || marker === 4
        /* Template */
        || marker === 6
        /* I18n */
        ;
      }

      function isAnimationProp(name) {
        // Perf note: accessing charCodeAt to check for the first character of a string is faster as
        // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that
        // charCodeAt doesn't allocate memory to return a substring.
        return name.charCodeAt(0) === 64
        /* AT_SIGN */
        ;
      }
      /**
       * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.
       *
       * This merge function keeps the order of attrs same.
       *
       * @param dst Location of where the merged `TAttributes` should end up.
       * @param src `TAttributes` which should be appended to `dst`
       */


      function mergeHostAttrs(dst, src) {
        if (src === null || src.length === 0) {// do nothing
        } else if (dst === null || dst.length === 0) {
          // We have source, but dst is empty, just make a copy.
          dst = src.slice();
        } else {
          var srcMarker = -1
          /* ImplicitAttributes */
          ;

          for (var i = 0; i < src.length; i++) {
            var item = src[i];

            if (typeof item === 'number') {
              srcMarker = item;
            } else {
              if (srcMarker === 0
              /* NamespaceURI */
              ) {// Case where we need to consume `key1`, `key2`, `value` items.
                } else if (srcMarker === -1
              /* ImplicitAttributes */
              || srcMarker === 2
              /* Styles */
              ) {
                  // Case where we have to consume `key1` and `value` only.
                  mergeHostAttribute(dst, srcMarker, item, null, src[++i]);
                } else {
                // Case where we have to consume `key1` only.
                mergeHostAttribute(dst, srcMarker, item, null, null);
              }
            }
          }
        }

        return dst;
      }
      /**
       * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.
       *
       * @param dst `TAttributes` to append to.
       * @param marker Region where the `key`/`value` should be added.
       * @param key1 Key to add to `TAttributes`
       * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)
       * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.
       */


      function mergeHostAttribute(dst, marker, key1, key2, value) {
        var i = 0; // Assume that new markers will be inserted at the end.

        var markerInsertPosition = dst.length; // scan until correct type.

        if (marker === -1
        /* ImplicitAttributes */
        ) {
            markerInsertPosition = -1;
          } else {
          while (i < dst.length) {
            var dstValue = dst[i++];

            if (typeof dstValue === 'number') {
              if (dstValue === marker) {
                markerInsertPosition = -1;
                break;
              } else if (dstValue > marker) {
                // We need to save this as we want the markers to be inserted in specific order.
                markerInsertPosition = i - 1;
                break;
              }
            }
          }
        } // search until you find place of insertion


        while (i < dst.length) {
          var item = dst[i];

          if (typeof item === 'number') {
            // since `i` started as the index after the marker, we did not find it if we are at the next
            // marker
            break;
          } else if (item === key1) {
            // We already have same token
            if (key2 === null) {
              if (value !== null) {
                dst[i + 1] = value;
              }

              return;
            } else if (key2 === dst[i + 1]) {
              dst[i + 2] = value;
              return;
            }
          } // Increment counter.


          i++;
          if (key2 !== null) i++;
          if (value !== null) i++;
        } // insert at location.


        if (markerInsertPosition !== -1) {
          dst.splice(markerInsertPosition, 0, marker);
          i = markerInsertPosition + 1;
        }

        dst.splice(i++, 0, key1);

        if (key2 !== null) {
          dst.splice(i++, 0, key2);
        }

        if (value !== null) {
          dst.splice(i++, 0, value);
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      /// Parent Injector Utils ///////////////////////////////////////////////////////////////


      function hasParentInjector(parentLocation) {
        return parentLocation !== NO_PARENT_INJECTOR;
      }

      function getParentInjectorIndex(parentLocation) {
        ngDevMode && assertNumber(parentLocation, 'Number expected');
        ngDevMode && assertNotEqual(parentLocation, -1, 'Not a valid state.');
        var parentInjectorIndex = parentLocation & 32767
        /* InjectorIndexMask */
        ;
        ngDevMode && assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, 'Parent injector must be pointing past HEADER_OFFSET.');
        return parentLocation & 32767
        /* InjectorIndexMask */
        ;
      }

      function getParentInjectorViewOffset(parentLocation) {
        return parentLocation >> 16
        /* ViewOffsetShift */
        ;
      }
      /**
       * Unwraps a parent injector location number to find the view offset from the current injector,
       * then walks up the declaration view tree until the view is found that contains the parent
       * injector.
       *
       * @param location The location of the parent injector, which contains the view offset
       * @param startView The LView instance from which to start walking up the view tree
       * @returns The LView instance that contains the parent injector
       */


      function getParentInjectorView(location, startView) {
        var viewOffset = getParentInjectorViewOffset(location);
        var parentView = startView; // For most cases, the parent injector can be found on the host node (e.g. for component
        // or container), but we must keep the loop here to support the rarer case of deeply nested
        // <ng-template> tags or inline views, where the parent injector might live many views
        // above the child injector.

        while (viewOffset > 0) {
          parentView = parentView[DECLARATION_VIEW];
          viewOffset--;
        }

        return parentView;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Defines if the call to `inject` should include `viewProviders` in its resolution.
       *
       * This is set to true when we try to instantiate a component. This value is reset in
       * `getNodeInjectable` to a value which matches the declaration location of the token about to be
       * instantiated. This is done so that if we are injecting a token which was declared outside of
       * `viewProviders` we don't accidentally pull `viewProviders` in.
       *
       * Example:
       *
       * ```
       * @Injectable()
       * class MyService {
       *   constructor(public value: String) {}
       * }
       *
       * @Component({
       *   providers: [
       *     MyService,
       *     {provide: String, value: 'providers' }
       *   ]
       *   viewProviders: [
       *     {provide: String, value: 'viewProviders'}
       *   ]
       * })
       * class MyComponent {
       *   constructor(myService: MyService, value: String) {
       *     // We expect that Component can see into `viewProviders`.
       *     expect(value).toEqual('viewProviders');
       *     // `MyService` was not declared in `viewProviders` hence it can't see it.
       *     expect(myService.value).toEqual('providers');
       *   }
       * }
       *
       * ```
       */


      var includeViewProviders = true;

      function setIncludeViewProviders(v) {
        var oldValue = includeViewProviders;
        includeViewProviders = v;
        return oldValue;
      }
      /**
       * The number of slots in each bloom filter (used by DI). The larger this number, the fewer
       * directives that will share slots, and thus, the fewer false positives when checking for
       * the existence of a directive.
       */


      var BLOOM_SIZE = 256;
      var BLOOM_MASK = BLOOM_SIZE - 1;
      /**
       * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,
       * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash
       * number.
       */

      var BLOOM_BUCKET_BITS = 5;
      /** Counter used to generate unique IDs for directives. */

      var nextNgElementId = 0;
      /**
       * Registers this directive as present in its node's injector by flipping the directive's
       * corresponding bit in the injector's bloom filter.
       *
       * @param injectorIndex The index of the node injector where this token should be registered
       * @param tView The TView for the injector's bloom filters
       * @param type The directive token to register
       */

      function bloomAdd(injectorIndex, tView, type) {
        ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');
        var id;

        if (typeof type === 'string') {
          id = type.charCodeAt(0) || 0;
        } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {
          id = type[NG_ELEMENT_ID];
        } // Set a unique ID on the directive type, so if something tries to inject the directive,
        // we can easily retrieve the ID and hash it into the bloom bit that should be checked.


        if (id == null) {
          id = type[NG_ELEMENT_ID] = nextNgElementId++;
        } // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),
        // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.


        var bloomHash = id & BLOOM_MASK; // Create a mask that targets the specific bit associated with the directive.
        // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
        // to bit positions 0 - 31 in a 32 bit integer.

        var mask = 1 << bloomHash; // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.
        // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask
        // should be written to.

        tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;
      }
      /**
       * Creates (or gets an existing) injector for a given element or container.
       *
       * @param tNode for which an injector should be retrieved / created.
       * @param lView View where the node is stored
       * @returns Node injector
       */


      function getOrCreateNodeInjectorForNode(tNode, lView) {
        var existingInjectorIndex = getInjectorIndex(tNode, lView);

        if (existingInjectorIndex !== -1) {
          return existingInjectorIndex;
        }

        var tView = lView[TVIEW];

        if (tView.firstCreatePass) {
          tNode.injectorIndex = lView.length;
          insertBloom(tView.data, tNode); // foundation for node bloom

          insertBloom(lView, null); // foundation for cumulative bloom

          insertBloom(tView.blueprint, null);
        }

        var parentLoc = getParentInjectorLocation(tNode, lView);
        var injectorIndex = tNode.injectorIndex; // If a parent injector can't be found, its location is set to -1.
        // In that case, we don't need to set up a cumulative bloom

        if (hasParentInjector(parentLoc)) {
          var parentIndex = getParentInjectorIndex(parentLoc);
          var parentLView = getParentInjectorView(parentLoc, lView);
          var parentData = parentLView[TVIEW].data; // Creates a cumulative bloom filter that merges the parent's bloom filter
          // and its own cumulative bloom (which contains tokens for all ancestors)

          for (var i = 0; i < 8
          /* BLOOM_SIZE */
          ; i++) {
            lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];
          }
        }

        lView[injectorIndex + 8
        /* PARENT */
        ] = parentLoc;
        return injectorIndex;
      }

      function insertBloom(arr, footer) {
        arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);
      }

      function getInjectorIndex(tNode, lView) {
        if (tNode.injectorIndex === -1 || // If the injector index is the same as its parent's injector index, then the index has been
        // copied down from the parent node. No injector has been created yet on this node.
        tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex || // After the first template pass, the injector index might exist but the parent values
        // might not have been calculated yet for this instance
        lView[tNode.injectorIndex + 8
        /* PARENT */
        ] === null) {
          return -1;
        } else {
          ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);
          return tNode.injectorIndex;
        }
      }
      /**
       * Finds the index of the parent injector, with a view offset if applicable. Used to set the
       * parent injector initially.
       *
       * @returns Returns a number that is the combination of the number of LViews that we have to go up
       * to find the LView containing the parent inject AND the index of the injector within that LView.
       */


      function getParentInjectorLocation(tNode, lView) {
        if (tNode.parent && tNode.parent.injectorIndex !== -1) {
          // If we have a parent `TNode` and there is an injector associated with it we are done, because
          // the parent injector is within the current `LView`.
          return tNode.parent.injectorIndex; // ViewOffset is 0
        } // When parent injector location is computed it may be outside of the current view. (ie it could
        // be pointing to a declared parent location). This variable stores number of declaration parents
        // we need to walk up in order to find the parent injector location.


        var declarationViewOffset = 0;
        var parentTNode = null;
        var lViewCursor = lView; // The parent injector is not in the current `LView`. We will have to walk the declared parent
        // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent
        // `NodeInjector`.

        while (lViewCursor !== null) {
          // First determine the `parentTNode` location. The parent pointer differs based on `TView.type`.
          var tView = lViewCursor[TVIEW];
          var tViewType = tView.type;

          if (tViewType === 2
          /* Embedded */
          ) {
              ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');
              parentTNode = tView.declTNode;
            } else if (tViewType === 1
          /* Component */
          ) {
              // Components don't have `TView.declTNode` because each instance of component could be
              // inserted in different location, hence `TView.declTNode` is meaningless.
              parentTNode = lViewCursor[T_HOST];
            } else {
            ngDevMode && assertEqual(tView.type, 0
            /* Root */
            , 'Root type expected');
            parentTNode = null;
          }

          if (parentTNode === null) {
            // If we have no parent, than we are done.
            return NO_PARENT_INJECTOR;
          }

          ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]); // Every iteration of the loop requires that we go to the declared parent.

          declarationViewOffset++;
          lViewCursor = lViewCursor[DECLARATION_VIEW];

          if (parentTNode.injectorIndex !== -1) {
            // We found a NodeInjector which points to something.
            return parentTNode.injectorIndex | declarationViewOffset << 16
            /* ViewOffsetShift */
            ;
          }
        }

        return NO_PARENT_INJECTOR;
      }
      /**
       * Makes a type or an injection token public to the DI system by adding it to an
       * injector's bloom filter.
       *
       * @param di The node injector in which a directive will be added
       * @param token The type or the injection token to be made public
       */


      function diPublicInInjector(injectorIndex, tView, token) {
        bloomAdd(injectorIndex, tView, token);
      }
      /**
       * Inject static attribute value into directive constructor.
       *
       * This method is used with `factory` functions which are generated as part of
       * `defineDirective` or `defineComponent`. The method retrieves the static value
       * of an attribute. (Dynamic attributes are not supported since they are not resolved
       *  at the time of injection and can change over time.)
       *
       * # Example
       * Given:
       * ```
       * @Component(...)
       * class MyComponent {
       *   constructor(@Attribute('title') title: string) { ... }
       * }
       * ```
       * When instantiated with
       * ```
       * <my-component title="Hello"></my-component>
       * ```
       *
       * Then factory method generated is:
       * ```
       * MyComponent.ɵcmp = defineComponent({
       *   factory: () => new MyComponent(injectAttribute('title'))
       *   ...
       * })
       * ```
       *
       * @publicApi
       */


      function injectAttributeImpl(tNode, attrNameToInject) {
        ngDevMode && assertTNodeType(tNode, 12
        /* AnyContainer */
        | 3
        /* AnyRNode */
        );
        ngDevMode && assertDefined(tNode, 'expecting tNode');

        if (attrNameToInject === 'class') {
          return tNode.classes;
        }

        if (attrNameToInject === 'style') {
          return tNode.styles;
        }

        var attrs = tNode.attrs;

        if (attrs) {
          var attrsLength = attrs.length;
          var i = 0;

          while (i < attrsLength) {
            var value = attrs[i]; // If we hit a `Bindings` or `Template` marker then we are done.

            if (isNameOnlyAttributeMarker(value)) break; // Skip namespaced attributes

            if (value === 0
            /* NamespaceURI */
            ) {
                // we skip the next two values
                // as namespaced attributes looks like
                // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',
                // 'existValue', ...]
                i = i + 2;
              } else if (typeof value === 'number') {
              // Skip to the first value of the marked attribute.
              i++;

              while (i < attrsLength && typeof attrs[i] === 'string') {
                i++;
              }
            } else if (value === attrNameToInject) {
              return attrs[i + 1];
            } else {
              i = i + 2;
            }
          }
        }

        return null;
      }

      function notFoundValueOrThrow(notFoundValue, token, flags) {
        if (flags & _InjectFlags.Optional) {
          return notFoundValue;
        } else {
          throwProviderNotFoundError(token, 'NodeInjector');
        }
      }
      /**
       * Returns the value associated to the given token from the ModuleInjector or throws exception
       *
       * @param lView The `LView` that contains the `tNode`
       * @param token The token to look for
       * @param flags Injection flags
       * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`
       * @returns the value from the injector or throws an exception
       */


      function lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {
        if (flags & _InjectFlags.Optional && notFoundValue === undefined) {
          // This must be set or the NullInjector will throw for optional deps
          notFoundValue = null;
        }

        if ((flags & (_InjectFlags.Self | _InjectFlags.Host)) === 0) {
          var moduleInjector = lView[INJECTOR]; // switch to `injectInjectorOnly` implementation for module injector, since module injector
          // should not have access to Component/Directive DI scope (that may happen through
          // `directiveInject` implementation)

          var previousInjectImplementation = setInjectImplementation(undefined);

          try {
            if (moduleInjector) {
              return moduleInjector.get(token, notFoundValue, flags & _InjectFlags.Optional);
            } else {
              return injectRootLimpMode(token, notFoundValue, flags & _InjectFlags.Optional);
            }
          } finally {
            setInjectImplementation(previousInjectImplementation);
          }
        }

        return notFoundValueOrThrow(notFoundValue, token, flags);
      }
      /**
       * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.
       *
       * Look for the injector providing the token by walking up the node injector tree and then
       * the module injector tree.
       *
       * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom
       * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)
       *
       * @param tNode The Node where the search for the injector should start
       * @param lView The `LView` that contains the `tNode`
       * @param token The token to look for
       * @param flags Injection flags
       * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`
       * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided
       */


      function getOrCreateInjectable(tNode, lView, token) {
        var flags = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _InjectFlags.Default;
        var notFoundValue = arguments.length > 4 ? arguments[4] : undefined;

        if (tNode !== null) {
          var bloomHash = bloomHashBitOrFactory(token); // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef
          // so just call the factory function to create it.

          if (typeof bloomHash === 'function') {
            if (!enterDI(lView, tNode, flags)) {
              // Failed to enter DI, try module injector instead. If a token is injected with the @Host
              // flag, the module injector is not searched for that token in Ivy.
              return flags & _InjectFlags.Host ? notFoundValueOrThrow(notFoundValue, token, flags) : lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
            }

            try {
              var value = bloomHash(flags);

              if (value == null && !(flags & _InjectFlags.Optional)) {
                throwProviderNotFoundError(token);
              } else {
                return value;
              }
            } finally {
              leaveDI();
            }
          } else if (typeof bloomHash === 'number') {
            // A reference to the previous injector TView that was found while climbing the element
            // injector tree. This is used to know if viewProviders can be accessed on the current
            // injector.
            var previousTView = null;
            var injectorIndex = getInjectorIndex(tNode, lView);
            var parentLocation = NO_PARENT_INJECTOR;
            var hostTElementNode = flags & _InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null; // If we should skip this injector, or if there is no injector on this node, start by
            // searching the parent injector.

            if (injectorIndex === -1 || flags & _InjectFlags.SkipSelf) {
              parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) : lView[injectorIndex + 8
              /* PARENT */
              ];

              if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {
                injectorIndex = -1;
              } else {
                previousTView = lView[TVIEW];
                injectorIndex = getParentInjectorIndex(parentLocation);
                lView = getParentInjectorView(parentLocation, lView);
              }
            } // Traverse up the injector tree until we find a potential match or until we know there
            // *isn't* a match.


            while (injectorIndex !== -1) {
              ngDevMode && assertNodeInjector(lView, injectorIndex); // Check the current injector. If it matches, see if it contains token.

              var tView = lView[TVIEW];
              ngDevMode && assertTNodeForLView(tView.data[injectorIndex + 8
              /* TNODE */
              ], lView);

              if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {
                // At this point, we have an injector which *may* contain the token, so we step through
                // the providers and directives associated with the injector's corresponding node to get
                // the instance.
                var instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);

                if (instance !== NOT_FOUND) {
                  return instance;
                }
              }

              parentLocation = lView[injectorIndex + 8
              /* PARENT */
              ];

              if (parentLocation !== NO_PARENT_INJECTOR && shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + 8
              /* TNODE */
              ] === hostTElementNode) && bloomHasToken(bloomHash, injectorIndex, lView)) {
                // The def wasn't found anywhere on this node, so it was a false positive.
                // Traverse up the tree and continue searching.
                previousTView = tView;
                injectorIndex = getParentInjectorIndex(parentLocation);
                lView = getParentInjectorView(parentLocation, lView);
              } else {
                // If we should not search parent OR If the ancestor bloom filter value does not have the
                // bit corresponding to the directive we can give up on traversing up to find the specific
                // injector.
                injectorIndex = -1;
              }
            }
          }
        }

        return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
      }

      var NOT_FOUND = {};

      function createNodeInjector() {
        return new NodeInjector(getCurrentTNode(), getLView());
      }

      function searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {
        var currentTView = lView[TVIEW];
        var tNode = currentTView.data[injectorIndex + 8
        /* TNODE */
        ]; // First, we need to determine if view providers can be accessed by the starting element.
        // There are two possibilities

        var canAccessViewProviders = previousTView == null ? // 1) This is the first invocation `previousTView == null` which means that we are at the
        // `TNode` of where injector is starting to look. In such a case the only time we are allowed
        // to look into the ViewProviders is if:
        // - we are on a component
        // - AND the injector set `includeViewProviders` to true (implying that the token can see
        // ViewProviders because it is the Component or a Service which itself was declared in
        // ViewProviders)
        isComponentHost(tNode) && includeViewProviders : // 2) `previousTView != null` which means that we are now walking across the parent nodes.
        // In such a case we are only allowed to look into the ViewProviders if:
        // - We just crossed from child View to Parent View `previousTView != currentTView`
        // - AND the parent TNode is an Element.
        // This means that we just came from the Component's View and therefore are allowed to see
        // into the ViewProviders.
        previousTView != currentTView && (tNode.type & 3
        /* AnyRNode */
        ) !== 0; // This special case happens when there is a @host on the inject and when we are searching
        // on the host element node.

        var isHostSpecialCase = flags & _InjectFlags.Host && hostTElementNode === tNode;
        var injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);

        if (injectableIdx !== null) {
          return getNodeInjectable(lView, currentTView, injectableIdx, tNode);
        } else {
          return NOT_FOUND;
        }
      }
      /**
       * Searches for the given token among the node's directives and providers.
       *
       * @param tNode TNode on which directives are present.
       * @param tView The tView we are currently processing
       * @param token Provider token or type of a directive to look for.
       * @param canAccessViewProviders Whether view providers should be considered.
       * @param isHostSpecialCase Whether the host special case applies.
       * @returns Index of a found directive or provider, or null when none found.
       */


      function locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {
        var nodeProviderIndexes = tNode.providerIndexes;
        var tInjectables = tView.data;
        var injectablesStart = nodeProviderIndexes & 1048575
        /* ProvidersStartIndexMask */
        ;
        var directivesStart = tNode.directiveStart;
        var directiveEnd = tNode.directiveEnd;
        var cptViewProvidersCount = nodeProviderIndexes >> 20
        /* CptViewProvidersCountShift */
        ;
        var startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount; // When the host special case applies, only the viewProviders and the component are visible

        var endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;

        for (var i = startingIndex; i < endIndex; i++) {
          var providerTokenOrDef = tInjectables[i];

          if (i < directivesStart && token === providerTokenOrDef || i >= directivesStart && providerTokenOrDef.type === token) {
            return i;
          }
        }

        if (isHostSpecialCase) {
          var dirDef = tInjectables[directivesStart];

          if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {
            return directivesStart;
          }
        }

        return null;
      }
      /**
       * Retrieve or instantiate the injectable from the `LView` at particular `index`.
       *
       * This function checks to see if the value has already been instantiated and if so returns the
       * cached `injectable`. Otherwise if it detects that the value is still a factory it
       * instantiates the `injectable` and caches the value.
       */


      function getNodeInjectable(lView, tView, index, tNode) {
        var value = lView[index];
        var tData = tView.data;

        if (isFactory(value)) {
          var factory = value;

          if (factory.resolving) {
            throwCyclicDependencyError(stringifyForError(tData[index]));
          }

          var previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);
          factory.resolving = true;
          var previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;
          var success = enterDI(lView, tNode, _InjectFlags.Default);
          ngDevMode && assertEqual(success, true, 'Because flags do not contain \`SkipSelf\' we expect this to always succeed.');

          try {
            value = lView[index] = factory.factory(undefined, tData, lView, tNode); // This code path is hit for both directives and providers.
            // For perf reasons, we want to avoid searching for hooks on providers.
            // It does no harm to try (the hooks just won't exist), but the extra
            // checks are unnecessary and this is a hot path. So we check to see
            // if the index of the dependency is in the directive range for this
            // tNode. If it's not, we know it's a provider and skip hook registration.

            if (tView.firstCreatePass && index >= tNode.directiveStart) {
              ngDevMode && assertDirectiveDef(tData[index]);
              registerPreOrderHooks(index, tData[index], tView);
            }
          } finally {
            previousInjectImplementation !== null && setInjectImplementation(previousInjectImplementation);
            setIncludeViewProviders(previousIncludeViewProviders);
            factory.resolving = false;
            leaveDI();
          }
        }

        return value;
      }
      /**
       * Returns the bit in an injector's bloom filter that should be used to determine whether or not
       * the directive might be provided by the injector.
       *
       * When a directive is public, it is added to the bloom filter and given a unique ID that can be
       * retrieved on the Type. When the directive isn't public or the token is not a directive `null`
       * is returned as the node injector can not possibly provide that token.
       *
       * @param token the injection token
       * @returns the matching bit to check in the bloom filter or `null` if the token is not known.
       *   When the returned value is negative then it represents special values such as `Injector`.
       */


      function bloomHashBitOrFactory(token) {
        ngDevMode && assertDefined(token, 'token must be defined');

        if (typeof token === 'string') {
          return token.charCodeAt(0) || 0;
        }

        var tokenId = // First check with `hasOwnProperty` so we don't get an inherited ID.
        token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : undefined; // Negative token IDs are used for special objects such as `Injector`

        if (typeof tokenId === 'number') {
          if (tokenId >= 0) {
            return tokenId & BLOOM_MASK;
          } else {
            ngDevMode && assertEqual(tokenId, -1
            /* Injector */
            , 'Expecting to get Special Injector Id');
            return createNodeInjector;
          }
        } else {
          return tokenId;
        }
      }

      function bloomHasToken(bloomHash, injectorIndex, injectorView) {
        // Create a mask that targets the specific bit associated with the directive we're looking for.
        // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
        // to bit positions 0 - 31 in a 32 bit integer.
        var mask = 1 << bloomHash; // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of
        // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset
        // that should be used.

        var value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)]; // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,
        // this injector is a potential match.

        return !!(value & mask);
      }
      /** Returns true if flags prevent parent injector from being searched for tokens */


      function shouldSearchParent(flags, isFirstHostTNode) {
        return !(flags & _InjectFlags.Self) && !(flags & _InjectFlags.Host && isFirstHostTNode);
      }

      var NodeInjector = /*#__PURE__*/function () {
        function NodeInjector(_tNode, _lView) {
          _classCallCheck2(this, NodeInjector);

          this._tNode = _tNode;
          this._lView = _lView;
        }

        _createClass2(NodeInjector, [{
          key: "get",
          value: function get(token, notFoundValue) {
            return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);
          }
        }]);

        return NodeInjector;
      }();
      /**
       * @codeGenApi
       */


      function _ɵɵgetInheritedFactory(type) {
        return noSideEffects(function () {
          var ownConstructor = type.prototype.constructor;
          var ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);
          var objectPrototype = Object.prototype;
          var parent = Object.getPrototypeOf(type.prototype).constructor; // Go up the prototype until we hit `Object`.

          while (parent && parent !== objectPrototype) {
            var factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent); // If we hit something that has a factory and the factory isn't the same as the type,
            // we've found the inherited factory. Note the check that the factory isn't the type's
            // own factory is redundant in most cases, but if the user has custom decorators on the
            // class, this lookup will start one level down in the prototype chain, causing us to
            // find the own factory first and potentially triggering an infinite loop downstream.

            if (factory && factory !== ownFactory) {
              return factory;
            }

            parent = Object.getPrototypeOf(parent);
          } // There is no factory defined. Either this was improper usage of inheritance
          // (no Angular decorator on the superclass) or there is no constructor at all
          // in the inheritance chain. Since the two cases cannot be distinguished, the
          // latter has to be assumed.


          return function (t) {
            return new t();
          };
        });
      }

      function getFactoryOf(type) {
        if (isForwardRef(type)) {
          return function () {
            var factory = getFactoryOf(_resolveForwardRef(type));
            return factory && factory();
          };
        }

        return getFactoryDef(type);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Facade for the attribute injection from DI.
       *
       * @codeGenApi
       */


      function _ɵɵinjectAttribute(attrNameToInject) {
        return injectAttributeImpl(getCurrentTNode(), attrNameToInject);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ANNOTATIONS = '__annotations__';
      var PARAMETERS = '__parameters__';
      var PROP_METADATA = '__prop__metadata__';
      /**
       * @suppress {globalThis}
       */

      function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {
        return noSideEffects(function () {
          var metaCtor = makeMetadataCtor(props);

          function DecoratorFactory() {
            for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {
              args[_key4] = arguments[_key4];
            }

            if (this instanceof DecoratorFactory) {
              metaCtor.call.apply(metaCtor, [this].concat(args));
              return this;
            }

            var annotationInstance = _construct(DecoratorFactory, args);

            return function TypeDecorator(cls) {
              if (typeFn) typeFn.apply(void 0, [cls].concat(args)); // Use of Object.defineProperty is important since it creates non-enumerable property which
              // prevents the property is copied during subclassing.

              var annotations = cls.hasOwnProperty(ANNOTATIONS) ? cls[ANNOTATIONS] : Object.defineProperty(cls, ANNOTATIONS, {
                value: []
              })[ANNOTATIONS];
              annotations.push(annotationInstance);
              if (additionalProcessing) additionalProcessing(cls);
              return cls;
            };
          }

          if (parentClass) {
            DecoratorFactory.prototype = Object.create(parentClass.prototype);
          }

          DecoratorFactory.prototype.ngMetadataName = name;
          DecoratorFactory.annotationCls = DecoratorFactory;
          return DecoratorFactory;
        });
      }

      function makeMetadataCtor(props) {
        return function ctor() {
          if (props) {
            var values = props.apply(void 0, arguments);

            for (var propName in values) {
              this[propName] = values[propName];
            }
          }
        };
      }

      function makeParamDecorator(name, props, parentClass) {
        return noSideEffects(function () {
          var metaCtor = makeMetadataCtor(props);

          function ParamDecoratorFactory() {
            for (var _len4 = arguments.length, args = new Array(_len4), _key5 = 0; _key5 < _len4; _key5++) {
              args[_key5] = arguments[_key5];
            }

            if (this instanceof ParamDecoratorFactory) {
              metaCtor.apply(this, args);
              return this;
            }

            var annotationInstance = _construct(ParamDecoratorFactory, args);

            ParamDecorator.annotation = annotationInstance;
            return ParamDecorator;

            function ParamDecorator(cls, unusedKey, index) {
              // Use of Object.defineProperty is important since it creates non-enumerable property which
              // prevents the property is copied during subclassing.
              var parameters = cls.hasOwnProperty(PARAMETERS) ? cls[PARAMETERS] : Object.defineProperty(cls, PARAMETERS, {
                value: []
              })[PARAMETERS]; // there might be gaps if some in between parameters do not have annotations.
              // we pad with nulls.

              while (parameters.length <= index) {
                parameters.push(null);
              }

              (parameters[index] = parameters[index] || []).push(annotationInstance);
              return cls;
            }
          }

          if (parentClass) {
            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
          }

          ParamDecoratorFactory.prototype.ngMetadataName = name;
          ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
          return ParamDecoratorFactory;
        });
      }

      function makePropDecorator(name, props, parentClass, additionalProcessing) {
        return noSideEffects(function () {
          var metaCtor = makeMetadataCtor(props);

          function PropDecoratorFactory() {
            for (var _len5 = arguments.length, args = new Array(_len5), _key6 = 0; _key6 < _len5; _key6++) {
              args[_key6] = arguments[_key6];
            }

            if (this instanceof PropDecoratorFactory) {
              metaCtor.apply(this, args);
              return this;
            }

            var decoratorInstance = _construct(PropDecoratorFactory, args);

            function PropDecorator(target, name) {
              var constructor = target.constructor; // Use of Object.defineProperty is important because it creates a non-enumerable property
              // which prevents the property from being copied during subclassing.

              var meta = constructor.hasOwnProperty(PROP_METADATA) ? constructor[PROP_METADATA] : Object.defineProperty(constructor, PROP_METADATA, {
                value: {}
              })[PROP_METADATA];
              meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
              meta[name].unshift(decoratorInstance);
              if (additionalProcessing) additionalProcessing.apply(void 0, [target, name].concat(args));
            }

            return PropDecorator;
          }

          if (parentClass) {
            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
          }

          PropDecoratorFactory.prototype.ngMetadataName = name;
          PropDecoratorFactory.annotationCls = PropDecoratorFactory;
          return PropDecoratorFactory;
        });
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function CREATE_ATTRIBUTE_DECORATOR__PRE_R3__() {
        return makeParamDecorator('Attribute', function (attributeName) {
          return {
            attributeName: attributeName
          };
        });
      }

      function CREATE_ATTRIBUTE_DECORATOR__POST_R3__() {
        return makeParamDecorator('Attribute', function (attributeName) {
          return {
            attributeName: attributeName,
            __NG_ELEMENT_ID__: function __NG_ELEMENT_ID__() {
              return _ɵɵinjectAttribute(attributeName);
            }
          };
        });
      }

      var CREATE_ATTRIBUTE_DECORATOR_IMPL = CREATE_ATTRIBUTE_DECORATOR__POST_R3__;
      /**
       * Attribute decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */

      var _Attribute = CREATE_ATTRIBUTE_DECORATOR_IMPL();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Creates a token that can be used in a DI Provider.
       *
       * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a
       * runtime representation) such as when injecting an interface, callable type, array or
       * parameterized type.
       *
       * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by
       * the `Injector`. This provides additional level of type safety.
       *
       * ```
       * interface MyInterface {...}
       * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));
       * // myInterface is inferred to be MyInterface.
       * ```
       *
       * When creating an `InjectionToken`, you can optionally specify a factory function which returns
       * (possibly by creating) a default value of the parameterized type `T`. This sets up the
       * `InjectionToken` using this factory as a provider as if it was defined explicitly in the
       * application's root injector. If the factory function, which takes zero arguments, needs to inject
       * dependencies, it can do so using the `inject` function. See below for an example.
       *
       * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which
       * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As
       * mentioned above, `'root'` is the default value for `providedIn`.
       *
       * @usageNotes
       * ### Basic Example
       *
       * ### Plain InjectionToken
       *
       * {@example core/di/ts/injector_spec.ts region='InjectionToken'}
       *
       * ### Tree-shakable InjectionToken
       *
       * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}
       *
       *
       * @publicApi
       */


      var _InjectionToken = /*#__PURE__*/function () {
        function _InjectionToken(_desc, options) {
          _classCallCheck2(this, _InjectionToken);

          this._desc = _desc;
          /** @internal */

          this.ngMetadataName = 'InjectionToken';
          this.ɵprov = undefined;

          if (typeof options == 'number') {
            (typeof ngDevMode === 'undefined' || ngDevMode) && assertLessThan(options, 0, 'Only negative numbers are supported here'); // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.
            // See `InjectorMarkers`

            this.__NG_ELEMENT_ID__ = options;
          } else if (options !== undefined) {
            this.ɵprov = _ɵɵdefineInjectable({
              token: this,
              providedIn: options.providedIn || 'root',
              factory: options.factory
            });
          }
        }

        _createClass2(_InjectionToken, [{
          key: "toString",
          value: function toString() {
            return "InjectionToken ".concat(this._desc);
          }
        }]);

        return _InjectionToken;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A DI token that you can use to create a virtual [provider](guide/glossary#provider)
       * that will populate the `entryComponents` field of components and NgModules
       * based on its `useValue` property value.
       * All components that are referenced in the `useValue` value (either directly
       * or in a nested array or map) are added to the `entryComponents` property.
       *
       * @usageNotes
       *
       * The following example shows how the router can populate the `entryComponents`
       * field of an NgModule based on a router configuration that refers
       * to components.
       *
       * ```typescript
       * // helper function inside the router
       * function provideRoutes(routes) {
       *   return [
       *     {provide: ROUTES, useValue: routes},
       *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
       *   ];
       * }
       *
       * // user code
       * let routes = [
       *   {path: '/root', component: RootComp},
       *   {path: '/teams', component: TeamsComp}
       * ];
       *
       * @NgModule({
       *   providers: [provideRoutes(routes)]
       * })
       * class ModuleWithRoutes {}
       * ```
       *
       * @publicApi
       * @deprecated Since 9.0.0. With Ivy, this property is no longer necessary.
       */


      var _ANALYZE_FOR_ENTRY_COMPONENTS = new _InjectionToken('AnalyzeForEntryComponents'); // Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not
      // explicitly set.


      var emitDistinctChangesOnlyDefaultValue = true;
      /**
       * Base class for query metadata.
       *
       * @see `ContentChildren`.
       * @see `ContentChild`.
       * @see `ViewChildren`.
       * @see `ViewChild`.
       *
       * @publicApi
       */

      var _Query = function _Query() {
        _classCallCheck2(this, _Query);
      };

      var ɵ0$1 = function ɵ0$1(selector) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return Object.assign({
          selector: selector,
          first: false,
          isViewQuery: false,
          descendants: false,
          emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue
        }, data);
      };
      /**
       * ContentChildren decorator and metadata.
       *
       *
       * @Annotation
       * @publicApi
       */


      var _ContentChildren = makePropDecorator('ContentChildren', ɵ0$1, _Query);

      var ɵ1 = function ɵ1(selector) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return Object.assign({
          selector: selector,
          first: true,
          isViewQuery: false,
          descendants: true
        }, data);
      };
      /**
       * ContentChild decorator and metadata.
       *
       *
       * @Annotation
       *
       * @publicApi
       */


      var _ContentChild = makePropDecorator('ContentChild', ɵ1, _Query);

      var ɵ2 = function ɵ2(selector) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return Object.assign({
          selector: selector,
          first: false,
          isViewQuery: true,
          descendants: true,
          emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue
        }, data);
      };
      /**
       * ViewChildren decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */


      var _ViewChildren = makePropDecorator('ViewChildren', ɵ2, _Query);

      var ɵ3 = function ɵ3(selector, data) {
        return Object.assign({
          selector: selector,
          first: true,
          isViewQuery: true,
          descendants: true
        }, data);
      };
      /**
       * ViewChild decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */


      var _ViewChild = makePropDecorator('ViewChild', ɵ3, _Query);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var FactoryTarget;

      (function (FactoryTarget) {
        FactoryTarget[FactoryTarget["Directive"] = 0] = "Directive";
        FactoryTarget[FactoryTarget["Component"] = 1] = "Component";
        FactoryTarget[FactoryTarget["Injectable"] = 2] = "Injectable";
        FactoryTarget[FactoryTarget["Pipe"] = 3] = "Pipe";
        FactoryTarget[FactoryTarget["NgModule"] = 4] = "NgModule";
      })(FactoryTarget || (FactoryTarget = {}));

      var ViewEncapsulation$1;

      (function (ViewEncapsulation) {
        ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated"; // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.

        ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
        ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
      })(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function getCompilerFacade() {
        var globalNg = _global['ng'];

        if (!globalNg || !globalNg.ɵcompilerFacade) {
          throw new Error("Angular JIT compilation failed: '@angular/compiler' not loaded!\n" + "  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\n" + "  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\n" + "  - Alternatively provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.");
        }

        return globalNg.ɵcompilerFacade;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description
       *
       * Represents a type that a Component or other object is instances of.
       *
       * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by
       * the `MyCustomComponent` constructor function.
       *
       * @publicApi
       */


      var _Type = Function;

      function isType(v) {
        return typeof v === 'function';
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Equivalent to ES6 spread, add each item to an array.
       *
       * @param items The items to add
       * @param arr The array to which you want to add the items
       */


      function addAllToArray(items, arr) {
        for (var i = 0; i < items.length; i++) {
          arr.push(items[i]);
        }
      }
      /**
       * Determines if the contents of two arrays is identical
       *
       * @param a first array
       * @param b second array
       * @param identityAccessor Optional function for extracting stable object identity from a value in
       *     the array.
       */


      function arrayEquals(a, b, identityAccessor) {
        if (a.length !== b.length) return false;

        for (var i = 0; i < a.length; i++) {
          var valueA = a[i];
          var valueB = b[i];

          if (identityAccessor) {
            valueA = identityAccessor(valueA);
            valueB = identityAccessor(valueB);
          }

          if (valueB !== valueA) {
            return false;
          }
        }

        return true;
      }
      /**
       * Flattens an array.
       */


      function flatten(list, dst) {
        if (dst === undefined) dst = list;

        for (var i = 0; i < list.length; i++) {
          var item = list[i];

          if (Array.isArray(item)) {
            // we need to inline it.
            if (dst === list) {
              // Our assumption that the list was already flat was wrong and
              // we need to clone flat since we need to write to it.
              dst = list.slice(0, i);
            }

            flatten(item, dst);
          } else if (dst !== list) {
            dst.push(item);
          }
        }

        return dst;
      }

      function deepForEach(input, fn) {
        input.forEach(function (value) {
          return Array.isArray(value) ? deepForEach(value, fn) : fn(value);
        });
      }

      function addToArray(arr, index, value) {
        // perf: array.push is faster than array.splice!
        if (index >= arr.length) {
          arr.push(value);
        } else {
          arr.splice(index, 0, value);
        }
      }

      function removeFromArray(arr, index) {
        // perf: array.pop is faster than array.splice!
        if (index >= arr.length - 1) {
          return arr.pop();
        } else {
          return arr.splice(index, 1)[0];
        }
      }

      function newArray(size, value) {
        var list = [];

        for (var i = 0; i < size; i++) {
          list.push(value);
        }

        return list;
      }
      /**
       * Remove item from array (Same as `Array.splice()` but faster.)
       *
       * `Array.splice()` is not as fast because it has to allocate an array for the elements which were
       * removed. This causes memory pressure and slows down code when most of the time we don't
       * care about the deleted items array.
       *
       * https://jsperf.com/fast-array-splice (About 20x faster)
       *
       * @param array Array to splice
       * @param index Index of element in array to remove.
       * @param count Number of items to remove.
       */


      function arraySplice(array, index, count) {
        var length = array.length - count;

        while (index < length) {
          array[index] = array[index + count];
          index++;
        }

        while (count--) {
          array.pop(); // shrink the array
        }
      }
      /**
       * Same as `Array.splice(index, 0, value)` but faster.
       *
       * `Array.splice()` is not fast because it has to allocate an array for the elements which were
       * removed. This causes memory pressure and slows down code when most of the time we don't
       * care about the deleted items array.
       *
       * @param array Array to splice.
       * @param index Index in array where the `value` should be added.
       * @param value Value to add to array.
       */


      function arrayInsert(array, index, value) {
        ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\'t insert past array end.');
        var end = array.length;

        while (end > index) {
          var previousEnd = end - 1;
          array[end] = array[previousEnd];
          end = previousEnd;
        }

        array[index] = value;
      }
      /**
       * Same as `Array.splice2(index, 0, value1, value2)` but faster.
       *
       * `Array.splice()` is not fast because it has to allocate an array for the elements which were
       * removed. This causes memory pressure and slows down code when most of the time we don't
       * care about the deleted items array.
       *
       * @param array Array to splice.
       * @param index Index in array where the `value` should be added.
       * @param value1 Value to add to array.
       * @param value2 Value to add to array.
       */


      function arrayInsert2(array, index, value1, value2) {
        ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\'t insert past array end.');
        var end = array.length;

        if (end == index) {
          // inserting at the end.
          array.push(value1, value2);
        } else if (end === 1) {
          // corner case when we have less items in array than we have items to insert.
          array.push(value2, array[0]);
          array[0] = value1;
        } else {
          end--;
          array.push(array[end - 1], array[end]);

          while (end > index) {
            var previousEnd = end - 2;
            array[end] = array[previousEnd];
            end--;
          }

          array[index] = value1;
          array[index + 1] = value2;
        }
      }
      /**
       * Insert a `value` into an `array` so that the array remains sorted.
       *
       * NOTE:
       * - Duplicates are not allowed, and are ignored.
       * - This uses binary search algorithm for fast inserts.
       *
       * @param array A sorted array to insert into.
       * @param value The value to insert.
       * @returns index of the inserted value.
       */


      function arrayInsertSorted(array, value) {
        var index = arrayIndexOfSorted(array, value);

        if (index < 0) {
          // if we did not find it insert it.
          index = ~index;
          arrayInsert(array, index, value);
        }

        return index;
      }
      /**
       * Remove `value` from a sorted `array`.
       *
       * NOTE:
       * - This uses binary search algorithm for fast removals.
       *
       * @param array A sorted array to remove from.
       * @param value The value to remove.
       * @returns index of the removed value.
       *   - positive index if value found and removed.
       *   - negative index if value not found. (`~index` to get the value where it should have been
       *     inserted)
       */


      function arrayRemoveSorted(array, value) {
        var index = arrayIndexOfSorted(array, value);

        if (index >= 0) {
          arraySplice(array, index, 1);
        }

        return index;
      }
      /**
       * Get an index of an `value` in a sorted `array`.
       *
       * NOTE:
       * - This uses binary search algorithm for fast removals.
       *
       * @param array A sorted array to binary search.
       * @param value The value to look for.
       * @returns index of the value.
       *   - positive index if value found.
       *   - negative index if value not found. (`~index` to get the value where it should have been
       *     located)
       */


      function arrayIndexOfSorted(array, value) {
        return _arrayIndexOfSorted(array, value, 0);
      }
      /**
       * Set a `value` for a `key`.
       *
       * @param keyValueArray to modify.
       * @param key The key to locate or create.
       * @param value The value to set for a `key`.
       * @returns index (always even) of where the value vas set.
       */


      function keyValueArraySet(keyValueArray, key, value) {
        var index = keyValueArrayIndexOf(keyValueArray, key);

        if (index >= 0) {
          // if we found it set it.
          keyValueArray[index | 1] = value;
        } else {
          index = ~index;
          arrayInsert2(keyValueArray, index, key, value);
        }

        return index;
      }
      /**
       * Retrieve a `value` for a `key` (on `undefined` if not found.)
       *
       * @param keyValueArray to search.
       * @param key The key to locate.
       * @return The `value` stored at the `key` location or `undefined if not found.
       */


      function keyValueArrayGet(keyValueArray, key) {
        var index = keyValueArrayIndexOf(keyValueArray, key);

        if (index >= 0) {
          // if we found it retrieve it.
          return keyValueArray[index | 1];
        }

        return undefined;
      }
      /**
       * Retrieve a `key` index value in the array or `-1` if not found.
       *
       * @param keyValueArray to search.
       * @param key The key to locate.
       * @returns index of where the key is (or should have been.)
       *   - positive (even) index if key found.
       *   - negative index if key not found. (`~index` (even) to get the index where it should have
       *     been inserted.)
       */


      function keyValueArrayIndexOf(keyValueArray, key) {
        return _arrayIndexOfSorted(keyValueArray, key, 1);
      }
      /**
       * Delete a `key` (and `value`) from the `KeyValueArray`.
       *
       * @param keyValueArray to modify.
       * @param key The key to locate or delete (if exist).
       * @returns index of where the key was (or should have been.)
       *   - positive (even) index if key found and deleted.
       *   - negative index if key not found. (`~index` (even) to get the index where it should have
       *     been.)
       */


      function keyValueArrayDelete(keyValueArray, key) {
        var index = keyValueArrayIndexOf(keyValueArray, key);

        if (index >= 0) {
          // if we found it remove it.
          arraySplice(keyValueArray, index, 2);
        }

        return index;
      }
      /**
       * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.
       *
       * NOTE:
       * - This uses binary search algorithm for fast removals.
       *
       * @param array A sorted array to binary search.
       * @param value The value to look for.
       * @param shift grouping shift.
       *   - `0` means look at every location
       *   - `1` means only look at every other (even) location (the odd locations are to be ignored as
       *         they are values.)
       * @returns index of the value.
       *   - positive index if value found.
       *   - negative index if value not found. (`~index` to get the value where it should have been
       * inserted)
       */


      function _arrayIndexOfSorted(array, value, shift) {
        ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');
        var start = 0;
        var end = array.length >> shift;

        while (end !== start) {
          var middle = start + (end - start >> 1); // find the middle.

          var current = array[middle << shift];

          if (value === current) {
            return middle << shift;
          } else if (current > value) {
            end = middle;
          } else {
            start = middle + 1; // We already searched middle so make it non-inclusive by adding 1
          }
        }

        return ~(end << shift);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /*
       * #########################
       * Attention: These Regular expressions have to hold even if the code is minified!
       * ##########################
       */

      /**
       * Regular expression that detects pass-through constructors for ES5 output. This Regex
       * intends to capture the common delegation pattern emitted by TypeScript and Babel. Also
       * it intends to capture the pattern where existing constructors have been downleveled from
       * ES2015 to ES5 using TypeScript w/ downlevel iteration. e.g.
       *
       * ```
       *   function MyClass() {
       *     var _this = _super.apply(this, arguments) || this;
       * ```
       *
       * downleveled to ES5 with `downlevelIteration` for TypeScript < 4.2:
       * ```
       *   function MyClass() {
       *     var _this = _super.apply(this, __spread(arguments)) || this;
       * ```
       *
       * or downleveled to ES5 with `downlevelIteration` for TypeScript >= 4.2:
       * ```
       *   function MyClass() {
       *     var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
       * ```
       *
       * More details can be found in: https://github.com/angular/angular/issues/38453.
       */


      var ES5_DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*(arguments|(?:[^()]+\(\[\],)?[^()]+\(arguments\))\)/;
      /** Regular expression that detects ES2015 classes which extend from other classes. */

      var ES2015_INHERITED_CLASS = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/;
      /**
       * Regular expression that detects ES2015 classes which extend from other classes and
       * have an explicit constructor defined.
       */

      var ES2015_INHERITED_CLASS_WITH_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/;
      /**
       * Regular expression that detects ES2015 classes which extend from other classes
       * and inherit a constructor.
       */

      var ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{\s*super\(\.\.\.arguments\)/;
      /**
       * Determine whether a stringified type is a class which delegates its constructor
       * to its parent.
       *
       * This is not trivial since compiled code can actually contain a constructor function
       * even if the original source code did not. For instance, when the child class contains
       * an initialized instance property.
       */

      function isDelegateCtor(typeStr) {
        return ES5_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr);
      }

      var ReflectionCapabilities = /*#__PURE__*/function () {
        function ReflectionCapabilities(reflect) {
          _classCallCheck2(this, ReflectionCapabilities);

          this._reflect = reflect || _global['Reflect'];
        }

        _createClass2(ReflectionCapabilities, [{
          key: "isReflectionEnabled",
          value: function isReflectionEnabled() {
            return true;
          }
        }, {
          key: "factory",
          value: function factory(t) {
            return function () {
              for (var _len6 = arguments.length, args = new Array(_len6), _key7 = 0; _key7 < _len6; _key7++) {
                args[_key7] = arguments[_key7];
              }

              return _construct(t, args);
            };
          }
          /** @internal */

        }, {
          key: "_zipTypesAndAnnotations",
          value: function _zipTypesAndAnnotations(paramTypes, paramAnnotations) {
            var result;

            if (typeof paramTypes === 'undefined') {
              result = newArray(paramAnnotations.length);
            } else {
              result = newArray(paramTypes.length);
            }

            for (var i = 0; i < result.length; i++) {
              // TS outputs Object for parameters without types, while Traceur omits
              // the annotations. For now we preserve the Traceur behavior to aid
              // migration, but this can be revisited.
              if (typeof paramTypes === 'undefined') {
                result[i] = [];
              } else if (paramTypes[i] && paramTypes[i] != Object) {
                result[i] = [paramTypes[i]];
              } else {
                result[i] = [];
              }

              if (paramAnnotations && paramAnnotations[i] != null) {
                result[i] = result[i].concat(paramAnnotations[i]);
              }
            }

            return result;
          }
        }, {
          key: "_ownParameters",
          value: function _ownParameters(type, parentCtor) {
            var typeStr = type.toString(); // If we have no decorators, we only have function.length as metadata.
            // In that case, to detect whether a child class declared an own constructor or not,
            // we need to look inside of that constructor to check whether it is
            // just calling the parent.
            // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
            // that sets 'design:paramtypes' to []
            // if a class inherits from another class but has no ctor declared itself.

            if (isDelegateCtor(typeStr)) {
              return null;
            } // Prefer the direct API.


            if (type.parameters && type.parameters !== parentCtor.parameters) {
              return type.parameters;
            } // API of tsickle for lowering decorators to properties on the class.


            var tsickleCtorParams = type.ctorParameters;

            if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
              // Newer tsickle uses a function closure
              // Retain the non-function case for compatibility with older tsickle
              var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;

              var _paramTypes = ctorParameters.map(function (ctorParam) {
                return ctorParam && ctorParam.type;
              });

              var _paramAnnotations = ctorParameters.map(function (ctorParam) {
                return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
              });

              return this._zipTypesAndAnnotations(_paramTypes, _paramAnnotations);
            } // API for metadata created by invoking the decorators.


            var paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];

            var paramTypes = this._reflect && this._reflect.getOwnMetadata && this._reflect.getOwnMetadata('design:paramtypes', type);

            if (paramTypes || paramAnnotations) {
              return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
            } // If a class has no decorators, at least create metadata
            // based on function.length.
            // Note: We know that this is a real constructor as we checked
            // the content of the constructor above.


            return newArray(type.length);
          }
        }, {
          key: "parameters",
          value: function parameters(type) {
            // Note: only report metadata if we have at least one class decorator
            // to stay in sync with the static reflector.
            if (!isType(type)) {
              return [];
            }

            var parentCtor = getParentCtor(type);

            var parameters = this._ownParameters(type, parentCtor);

            if (!parameters && parentCtor !== Object) {
              parameters = this.parameters(parentCtor);
            }

            return parameters || [];
          }
        }, {
          key: "_ownAnnotations",
          value: function _ownAnnotations(typeOrFunc, parentCtor) {
            // Prefer the direct API.
            if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {
              var annotations = typeOrFunc.annotations;

              if (typeof annotations === 'function' && annotations.annotations) {
                annotations = annotations.annotations;
              }

              return annotations;
            } // API of tsickle for lowering decorators to properties on the class.


            if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {
              return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
            } // API for metadata created by invoking the decorators.


            if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {
              return typeOrFunc[ANNOTATIONS];
            }

            return null;
          }
        }, {
          key: "annotations",
          value: function annotations(typeOrFunc) {
            if (!isType(typeOrFunc)) {
              return [];
            }

            var parentCtor = getParentCtor(typeOrFunc);
            var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
            var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
            return parentAnnotations.concat(ownAnnotations);
          }
        }, {
          key: "_ownPropMetadata",
          value: function _ownPropMetadata(typeOrFunc, parentCtor) {
            // Prefer the direct API.
            if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {
              var propMetadata = typeOrFunc.propMetadata;

              if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
                propMetadata = propMetadata.propMetadata;
              }

              return propMetadata;
            } // API of tsickle for lowering decorators to properties on the class.


            if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {
              var propDecorators = typeOrFunc.propDecorators;
              var _propMetadata = {};
              Object.keys(propDecorators).forEach(function (prop) {
                _propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);
              });
              return _propMetadata;
            } // API for metadata created by invoking the decorators.


            if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {
              return typeOrFunc[PROP_METADATA];
            }

            return null;
          }
        }, {
          key: "propMetadata",
          value: function propMetadata(typeOrFunc) {
            if (!isType(typeOrFunc)) {
              return {};
            }

            var parentCtor = getParentCtor(typeOrFunc);
            var propMetadata = {};

            if (parentCtor !== Object) {
              var parentPropMetadata = this.propMetadata(parentCtor);
              Object.keys(parentPropMetadata).forEach(function (propName) {
                propMetadata[propName] = parentPropMetadata[propName];
              });
            }

            var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);

            if (ownPropMetadata) {
              Object.keys(ownPropMetadata).forEach(function (propName) {
                var decorators = [];

                if (propMetadata.hasOwnProperty(propName)) {
                  decorators.push.apply(decorators, _toConsumableArray(propMetadata[propName]));
                }

                decorators.push.apply(decorators, _toConsumableArray(ownPropMetadata[propName]));
                propMetadata[propName] = decorators;
              });
            }

            return propMetadata;
          }
        }, {
          key: "ownPropMetadata",
          value: function ownPropMetadata(typeOrFunc) {
            if (!isType(typeOrFunc)) {
              return {};
            }

            return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};
          }
        }, {
          key: "hasLifecycleHook",
          value: function hasLifecycleHook(type, lcProperty) {
            return type instanceof _Type && lcProperty in type.prototype;
          }
        }, {
          key: "guards",
          value: function guards(type) {
            return {};
          }
        }, {
          key: "getter",
          value: function getter(name) {
            return new Function('o', 'return o.' + name + ';');
          }
        }, {
          key: "setter",
          value: function setter(name) {
            return new Function('o', 'v', 'return o.' + name + ' = v;');
          }
        }, {
          key: "method",
          value: function method(name) {
            var functionBody = "if (!o.".concat(name, ") throw new Error('\"").concat(name, "\" is undefined');\n        return o.").concat(name, ".apply(o, args);");
            return new Function('o', 'args', functionBody);
          } // There is not a concept of import uri in Js, but this is useful in developing Dart applications.

        }, {
          key: "importUri",
          value: function importUri(type) {
            // StaticSymbol
            if (typeof type === 'object' && type['filePath']) {
              return type['filePath'];
            } // Runtime type


            return "./".concat(stringify(type));
          }
        }, {
          key: "resourceUri",
          value: function resourceUri(type) {
            return "./".concat(stringify(type));
          }
        }, {
          key: "resolveIdentifier",
          value: function resolveIdentifier(name, moduleUrl, members, runtime) {
            return runtime;
          }
        }, {
          key: "resolveEnum",
          value: function resolveEnum(enumIdentifier, name) {
            return enumIdentifier[name];
          }
        }]);

        return ReflectionCapabilities;
      }();

      function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
        if (!decoratorInvocations) {
          return [];
        }

        return decoratorInvocations.map(function (decoratorInvocation) {
          var decoratorType = decoratorInvocation.type;
          var annotationCls = decoratorType.annotationCls;
          var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
          return _construct(annotationCls, _toConsumableArray(annotationArgs));
        });
      }

      function getParentCtor(ctor) {
        var parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;
        var parentCtor = parentProto ? parentProto.constructor : null; // Note: We always use `Object` as the null value
        // to simplify checking later on.

        return parentCtor || Object;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _THROW_IF_NOT_FOUND = {};
      var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
      /*
       * Name of a property (that we patch onto DI decorator), which is used as an annotation of which
       * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators
       * in the code, thus making them tree-shakable.
       */

      var DI_DECORATOR_FLAG = '__NG_DI_FLAG__';
      var NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';
      var NG_TOKEN_PATH = 'ngTokenPath';
      var NEW_LINE = /\n/gm;
      var NO_NEW_LINE = 'ɵ';
      var SOURCE = '__source';
      var ɵ0$2 = getClosureSafeProperty;
      var USE_VALUE = getClosureSafeProperty({
        provide: String,
        useValue: ɵ0$2
      });
      /**
       * Current injector value used by `inject`.
       * - `undefined`: it is an error to call `inject`
       * - `null`: `inject` can be called but there is no injector (limp-mode).
       * - Injector instance: Use the injector for resolution.
       */

      var _currentInjector = undefined;

      function setCurrentInjector(injector) {
        var former = _currentInjector;
        _currentInjector = injector;
        return former;
      }

      function injectInjectorOnly(token) {
        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _InjectFlags.Default;

        if (_currentInjector === undefined) {
          throw new Error("inject() must be called from an injection context");
        } else if (_currentInjector === null) {
          return injectRootLimpMode(token, undefined, flags);
        } else {
          return _currentInjector.get(token, flags & _InjectFlags.Optional ? null : undefined, flags);
        }
      }

      function _ɵɵinject(token) {
        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _InjectFlags.Default;
        return (getInjectImplementation() || injectInjectorOnly)(_resolveForwardRef(token), flags);
      }
      /**
       * Throws an error indicating that a factory function could not be generated by the compiler for a
       * particular class.
       *
       * This instruction allows the actual error message to be optimized away when ngDevMode is turned
       * off, saving bytes of generated code while still providing a good experience in dev mode.
       *
       * The name of the class is not mentioned here, but will be in the generated factory function name
       * and thus in the stack trace.
       *
       * @codeGenApi
       */


      function _ɵɵinvalidFactoryDep(index) {
        var msg = ngDevMode ? "This constructor is not compatible with Angular Dependency Injection because its dependency at index ".concat(index, " of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ").concat(index, " is correct and 2) the correct Angular decorators are defined for this class and its ancestors.") : 'invalid';
        throw new Error(msg);
      }
      /**
       * Injects a token from the currently active injector.
       *
       * Must be used in the context of a factory function such as one defined for an
       * `InjectionToken`. Throws an error if not called from such a context.
       *
       * Within such a factory function, using this function to request injection of a dependency
       * is faster and more type-safe than providing an additional array of dependencies
       * (as has been common with `useFactory` providers).
       *
       * @param token The injection token for the dependency to be injected.
       * @param flags Optional flags that control how injection is executed.
       * The flags correspond to injection strategies that can be specified with
       * parameter decorators `@Host`, `@Self`, `@SkipSef`, and `@Optional`.
       * @returns the injected value if injection is successful, `null` otherwise.
       *
       * @usageNotes
       *
       * ### Example
       *
       * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}
       *
       * @publicApi
       */


      var _inject = _ɵɵinject;

      function injectArgs(types) {
        var args = [];

        for (var i = 0; i < types.length; i++) {
          var arg = _resolveForwardRef(types[i]);

          if (Array.isArray(arg)) {
            if (arg.length === 0) {
              throw new Error('Arguments array must have arguments.');
            }

            var type = undefined;
            var flags = _InjectFlags.Default;

            for (var j = 0; j < arg.length; j++) {
              var meta = arg[j];
              var flag = getInjectFlag(meta);

              if (typeof flag === 'number') {
                // Special case when we handle @Inject decorator.
                if (flag === -1
                /* Inject */
                ) {
                    type = meta.token;
                  } else {
                  flags |= flag;
                }
              } else {
                type = meta;
              }
            }

            args.push(_ɵɵinject(type, flags));
          } else {
            args.push(_ɵɵinject(arg));
          }
        }

        return args;
      }
      /**
       * Attaches a given InjectFlag to a given decorator using monkey-patching.
       * Since DI decorators can be used in providers `deps` array (when provider is configured using
       * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we
       * attach the flag to make it available both as a static property and as a field on decorator
       * instance.
       *
       * @param decorator Provided DI decorator.
       * @param flag InjectFlag that should be applied.
       */


      function attachInjectFlag(decorator, flag) {
        decorator[DI_DECORATOR_FLAG] = flag;
        decorator.prototype[DI_DECORATOR_FLAG] = flag;
        return decorator;
      }
      /**
       * Reads monkey-patched property that contains InjectFlag attached to a decorator.
       *
       * @param token Token that may contain monkey-patched DI flags property.
       */


      function getInjectFlag(token) {
        return token[DI_DECORATOR_FLAG];
      }

      function catchInjectorError(e, token, injectorErrorName, source) {
        var tokenPath = e[NG_TEMP_TOKEN_PATH];

        if (token[SOURCE]) {
          tokenPath.unshift(token[SOURCE]);
        }

        e.message = formatError('\n' + e.message, tokenPath, injectorErrorName, source);
        e[NG_TOKEN_PATH] = tokenPath;
        e[NG_TEMP_TOKEN_PATH] = null;
        throw e;
      }

      function formatError(text, obj, injectorErrorName) {
        var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        text = text && text.charAt(0) === '\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;
        var context = stringify(obj);

        if (Array.isArray(obj)) {
          context = obj.map(stringify).join(' -> ');
        } else if (typeof obj === 'object') {
          var parts = [];

          for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
              var value = obj[key];
              parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));
            }
          }

          context = "{".concat(parts.join(', '), "}");
        }

        return "".concat(injectorErrorName).concat(source ? '(' + source + ')' : '', "[").concat(context, "]: ").concat(text.replace(NEW_LINE, '\n  '));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ɵ0$3 = function ɵ0$3(token) {
        return {
          token: token
        };
      };
      /**
       * Inject decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */


      var _Inject = attachInjectFlag( // Disable tslint because `DecoratorFlags` is a const enum which gets inlined.
      // tslint:disable-next-line: no-toplevel-property-access
      makeParamDecorator('Inject', ɵ0$3), -1
      /* Inject */
      );
      /**
       * Optional decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */


      var _Optional = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
      // tslint:disable-next-line: no-toplevel-property-access
      attachInjectFlag(makeParamDecorator('Optional'), 8
      /* Optional */
      );
      /**
       * Self decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */


      var _Self = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
      // tslint:disable-next-line: no-toplevel-property-access
      attachInjectFlag(makeParamDecorator('Self'), 2
      /* Self */
      );
      /**
       * `SkipSelf` decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */


      var _SkipSelf = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
      // tslint:disable-next-line: no-toplevel-property-access
      attachInjectFlag(makeParamDecorator('SkipSelf'), 4
      /* SkipSelf */
      );
      /**
       * Host decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */


      var _Host = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
      // tslint:disable-next-line: no-toplevel-property-access
      attachInjectFlag(makeParamDecorator('Host'), 1
      /* Host */
      );
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _reflect = null;

      function getReflect() {
        return _reflect = _reflect || new ReflectionCapabilities();
      }

      function reflectDependencies(type) {
        return convertDependencies(getReflect().parameters(type));
      }

      function convertDependencies(deps) {
        return deps.map(function (dep) {
          return reflectDependency(dep);
        });
      }

      function reflectDependency(dep) {
        var meta = {
          token: null,
          attribute: null,
          host: false,
          optional: false,
          self: false,
          skipSelf: false
        };

        if (Array.isArray(dep) && dep.length > 0) {
          for (var j = 0; j < dep.length; j++) {
            var param = dep[j];

            if (param === undefined) {
              // param may be undefined if type of dep is not set by ngtsc
              continue;
            }

            var proto = Object.getPrototypeOf(param);

            if (param instanceof _Optional || proto.ngMetadataName === 'Optional') {
              meta.optional = true;
            } else if (param instanceof _SkipSelf || proto.ngMetadataName === 'SkipSelf') {
              meta.skipSelf = true;
            } else if (param instanceof _Self || proto.ngMetadataName === 'Self') {
              meta.self = true;
            } else if (param instanceof _Host || proto.ngMetadataName === 'Host') {
              meta.host = true;
            } else if (param instanceof _Inject) {
              meta.token = param.token;
            } else if (param instanceof _Attribute) {
              if (param.attributeName === undefined) {
                throw new Error("Attribute name must be defined.");
              }

              meta.attribute = param.attributeName;
            } else {
              meta.token = param;
            }
          }
        } else if (dep === undefined || Array.isArray(dep) && dep.length === 0) {
          meta.token = null;
        } else {
          meta.token = dep;
        }

        return meta;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Used to resolve resource URLs on `@Component` when used with JIT compilation.
       *
       * Example:
       * ```
       * @Component({
       *   selector: 'my-comp',
       *   templateUrl: 'my-comp.html', // This requires asynchronous resolution
       * })
       * class MyComponent{
       * }
       *
       * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process
       * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.
       *
       * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into
       * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.
       *
       * // Use browser's `fetch()` function as the default resource resolution strategy.
       * resolveComponentResources(fetch).then(() => {
       *   // After resolution all URLs have been converted into `template` strings.
       *   renderComponent(MyComponent);
       * });
       *
       * ```
       *
       * NOTE: In AOT the resolution happens during compilation, and so there should be no need
       * to call this method outside JIT mode.
       *
       * @param resourceResolver a function which is responsible for returning a `Promise` to the
       * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.
       */


      function resolveComponentResources(resourceResolver) {
        // Store all promises which are fetching the resources.
        var componentResolved = []; // Cache so that we don't fetch the same resource more than once.

        var urlMap = new Map();

        function cachedResourceResolve(url) {
          var promise = urlMap.get(url);

          if (!promise) {
            var resp = resourceResolver(url);
            urlMap.set(url, promise = resp.then(unwrapResponse));
          }

          return promise;
        }

        componentResourceResolutionQueue.forEach(function (component, type) {
          var promises = [];

          if (component.templateUrl) {
            promises.push(cachedResourceResolve(component.templateUrl).then(function (template) {
              component.template = template;
            }));
          }

          var styleUrls = component.styleUrls;
          var styles = component.styles || (component.styles = []);
          var styleOffset = component.styles.length;
          styleUrls && styleUrls.forEach(function (styleUrl, index) {
            styles.push(''); // pre-allocate array.

            promises.push(cachedResourceResolve(styleUrl).then(function (style) {
              styles[styleOffset + index] = style;
              styleUrls.splice(styleUrls.indexOf(styleUrl), 1);

              if (styleUrls.length == 0) {
                component.styleUrls = undefined;
              }
            }));
          });
          var fullyResolved = Promise.all(promises).then(function () {
            return componentDefResolved(type);
          });
          componentResolved.push(fullyResolved);
        });
        clearResolutionOfComponentResourcesQueue();
        return Promise.all(componentResolved).then(function () {
          return undefined;
        });
      }

      var componentResourceResolutionQueue = new Map(); // Track when existing ɵcmp for a Type is waiting on resources.

      var componentDefPendingResolution = new Set();

      function maybeQueueResolutionOfComponentResources(type, metadata) {
        if (componentNeedsResolution(metadata)) {
          componentResourceResolutionQueue.set(type, metadata);
          componentDefPendingResolution.add(type);
        }
      }

      function isComponentDefPendingResolution(type) {
        return componentDefPendingResolution.has(type);
      }

      function componentNeedsResolution(component) {
        return !!(component.templateUrl && !component.hasOwnProperty('template') || component.styleUrls && component.styleUrls.length);
      }

      function clearResolutionOfComponentResourcesQueue() {
        var old = componentResourceResolutionQueue;
        componentResourceResolutionQueue = new Map();
        return old;
      }

      function restoreComponentResolutionQueue(queue) {
        componentDefPendingResolution.clear();
        queue.forEach(function (_, type) {
          return componentDefPendingResolution.add(type);
        });
        componentResourceResolutionQueue = queue;
      }

      function isComponentResourceResolutionQueueEmpty() {
        return componentResourceResolutionQueue.size === 0;
      }

      function unwrapResponse(response) {
        return typeof response == 'string' ? response : response.text();
      }

      function componentDefResolved(type) {
        componentDefPendingResolution["delete"](type);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The Trusted Types policy, or null if Trusted Types are not
       * enabled/supported, or undefined if the policy has not been created yet.
       */


      var policy;
      /**
       * Returns the Trusted Types policy, or null if Trusted Types are not
       * enabled/supported. The first call to this function will create the policy.
       */

      function getPolicy() {
        if (policy === undefined) {
          policy = null;

          if (_global.trustedTypes) {
            try {
              policy = _global.trustedTypes.createPolicy('angular', {
                createHTML: function createHTML(s) {
                  return s;
                },
                createScript: function createScript(s) {
                  return s;
                },
                createScriptURL: function createScriptURL(s) {
                  return s;
                }
              });
            } catch (_a) {// trustedTypes.createPolicy throws if called with a name that is
              // already registered, even in report-only mode. Until the API changes,
              // catch the error not to break the applications functionally. In such
              // cases, the code will fall back to using strings.
            }
          }
        }

        return policy;
      }
      /**
       * Unsafely promote a string to a TrustedHTML, falling back to strings when
       * Trusted Types are not available.
       * @security This is a security-sensitive function; any use of this function
       * must go through security review. In particular, it must be assured that the
       * provided string will never cause an XSS vulnerability if used in a context
       * that will be interpreted as HTML by a browser, e.g. when assigning to
       * element.innerHTML.
       */


      function trustedHTMLFromString(html) {
        var _a;

        return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createHTML(html)) || html;
      }
      /**
       * Unsafely promote a string to a TrustedScript, falling back to strings when
       * Trusted Types are not available.
       * @security In particular, it must be assured that the provided string will
       * never cause an XSS vulnerability if used in a context that will be
       * interpreted and executed as a script by a browser, e.g. when calling eval.
       */


      function trustedScriptFromString(script) {
        var _a;

        return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createScript(script)) || script;
      }
      /**
       * Unsafely promote a string to a TrustedScriptURL, falling back to strings
       * when Trusted Types are not available.
       * @security This is a security-sensitive function; any use of this function
       * must go through security review. In particular, it must be assured that the
       * provided string will never cause an XSS vulnerability if used in a context
       * that will cause a browser to load and execute a resource, e.g. when
       * assigning to script.src.
       */


      function trustedScriptURLFromString(url) {
        var _a;

        return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createScriptURL(url)) || url;
      }
      /**
       * Unsafely call the Function constructor with the given string arguments. It
       * is only available in development mode, and should be stripped out of
       * production code.
       * @security This is a security-sensitive function; any use of this function
       * must go through security review. In particular, it must be assured that it
       * is only called from development code, as use in production code can lead to
       * XSS vulnerabilities.
       */


      function newTrustedFunctionForDev() {
        if (typeof ngDevMode === 'undefined') {
          throw new Error('newTrustedFunctionForDev should never be called in production');
        }

        for (var _len7 = arguments.length, args = new Array(_len7), _key8 = 0; _key8 < _len7; _key8++) {
          args[_key8] = arguments[_key8];
        }

        if (!_global.trustedTypes) {
          // In environments that don't support Trusted Types, fall back to the most
          // straightforward implementation:
          return _construct(Function, args);
        } // Chrome currently does not support passing TrustedScript to the Function
        // constructor. The following implements the workaround proposed on the page
        // below, where the Chromium bug is also referenced:
        // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor


        var fnArgs = args.slice(0, -1).join(',');
        var fnBody = args[args.length - 1];
        var body = "(function anonymous(".concat(fnArgs, "\n) { ").concat(fnBody, "\n})"); // Using eval directly confuses the compiler and prevents this module from
        // being stripped out of JS binaries even if not used. The global['eval']
        // indirection fixes that.

        var fn = _global['eval'](trustedScriptFromString(body));

        if (fn.bind === undefined) {
          // Workaround for a browser bug that only exists in Chrome 83, where passing
          // a TrustedScript to eval just returns the TrustedScript back without
          // evaluating it. In that case, fall back to the most straightforward
          // implementation:
          return _construct(Function, args);
        } // To completely mimic the behavior of calling "new Function", two more
        // things need to happen:
        // 1. Stringifying the resulting function should return its source code


        fn.toString = function () {
          return body;
        }; // 2. When calling the resulting function, `this` should refer to `global`


        return fn.bind(_global); // When Trusted Types support in Function constructors is widely available,
        // the implementation of this function can be simplified to:
        // return new Function(...args.map(a => trustedScriptFromString(a)));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The Trusted Types policy, or null if Trusted Types are not
       * enabled/supported, or undefined if the policy has not been created yet.
       */


      var policy$1;
      /**
       * Returns the Trusted Types policy, or null if Trusted Types are not
       * enabled/supported. The first call to this function will create the policy.
       */

      function getPolicy$1() {
        if (policy$1 === undefined) {
          policy$1 = null;

          if (_global.trustedTypes) {
            try {
              policy$1 = _global.trustedTypes.createPolicy('angular#unsafe-bypass', {
                createHTML: function createHTML(s) {
                  return s;
                },
                createScript: function createScript(s) {
                  return s;
                },
                createScriptURL: function createScriptURL(s) {
                  return s;
                }
              });
            } catch (_a) {// trustedTypes.createPolicy throws if called with a name that is
              // already registered, even in report-only mode. Until the API changes,
              // catch the error not to break the applications functionally. In such
              // cases, the code will fall back to using strings.
            }
          }
        }

        return policy$1;
      }
      /**
       * Unsafely promote a string to a TrustedHTML, falling back to strings when
       * Trusted Types are not available.
       * @security This is a security-sensitive function; any use of this function
       * must go through security review. In particular, it must be assured that it
       * is only passed strings that come directly from custom sanitizers or the
       * bypassSecurityTrust* functions.
       */


      function trustedHTMLFromStringBypass(html) {
        var _a;

        return ((_a = getPolicy$1()) === null || _a === void 0 ? void 0 : _a.createHTML(html)) || html;
      }
      /**
       * Unsafely promote a string to a TrustedScript, falling back to strings when
       * Trusted Types are not available.
       * @security This is a security-sensitive function; any use of this function
       * must go through security review. In particular, it must be assured that it
       * is only passed strings that come directly from custom sanitizers or the
       * bypassSecurityTrust* functions.
       */


      function trustedScriptFromStringBypass(script) {
        var _a;

        return ((_a = getPolicy$1()) === null || _a === void 0 ? void 0 : _a.createScript(script)) || script;
      }
      /**
       * Unsafely promote a string to a TrustedScriptURL, falling back to strings
       * when Trusted Types are not available.
       * @security This is a security-sensitive function; any use of this function
       * must go through security review. In particular, it must be assured that it
       * is only passed strings that come directly from custom sanitizers or the
       * bypassSecurityTrust* functions.
       */


      function trustedScriptURLFromStringBypass(url) {
        var _a;

        return ((_a = getPolicy$1()) === null || _a === void 0 ? void 0 : _a.createScriptURL(url)) || url;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SafeValueImpl = /*#__PURE__*/function () {
        function SafeValueImpl(changingThisBreaksApplicationSecurity) {
          _classCallCheck2(this, SafeValueImpl);

          this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
        }

        _createClass2(SafeValueImpl, [{
          key: "toString",
          value: function toString() {
            return "SafeValue must use [property]=binding: ".concat(this.changingThisBreaksApplicationSecurity) + " (see https://g.co/ng/security#xss)";
          }
        }]);

        return SafeValueImpl;
      }();

      var SafeHtmlImpl = /*#__PURE__*/function (_SafeValueImpl) {
        _inherits(SafeHtmlImpl, _SafeValueImpl);

        var _super9 = _createSuper(SafeHtmlImpl);

        function SafeHtmlImpl() {
          _classCallCheck2(this, SafeHtmlImpl);

          return _super9.apply(this, arguments);
        }

        _createClass2(SafeHtmlImpl, [{
          key: "getTypeName",
          value: function getTypeName() {
            return "HTML"
            /* Html */
            ;
          }
        }]);

        return SafeHtmlImpl;
      }(SafeValueImpl);

      var SafeStyleImpl = /*#__PURE__*/function (_SafeValueImpl2) {
        _inherits(SafeStyleImpl, _SafeValueImpl2);

        var _super10 = _createSuper(SafeStyleImpl);

        function SafeStyleImpl() {
          _classCallCheck2(this, SafeStyleImpl);

          return _super10.apply(this, arguments);
        }

        _createClass2(SafeStyleImpl, [{
          key: "getTypeName",
          value: function getTypeName() {
            return "Style"
            /* Style */
            ;
          }
        }]);

        return SafeStyleImpl;
      }(SafeValueImpl);

      var SafeScriptImpl = /*#__PURE__*/function (_SafeValueImpl3) {
        _inherits(SafeScriptImpl, _SafeValueImpl3);

        var _super11 = _createSuper(SafeScriptImpl);

        function SafeScriptImpl() {
          _classCallCheck2(this, SafeScriptImpl);

          return _super11.apply(this, arguments);
        }

        _createClass2(SafeScriptImpl, [{
          key: "getTypeName",
          value: function getTypeName() {
            return "Script"
            /* Script */
            ;
          }
        }]);

        return SafeScriptImpl;
      }(SafeValueImpl);

      var SafeUrlImpl = /*#__PURE__*/function (_SafeValueImpl4) {
        _inherits(SafeUrlImpl, _SafeValueImpl4);

        var _super12 = _createSuper(SafeUrlImpl);

        function SafeUrlImpl() {
          _classCallCheck2(this, SafeUrlImpl);

          return _super12.apply(this, arguments);
        }

        _createClass2(SafeUrlImpl, [{
          key: "getTypeName",
          value: function getTypeName() {
            return "URL"
            /* Url */
            ;
          }
        }]);

        return SafeUrlImpl;
      }(SafeValueImpl);

      var SafeResourceUrlImpl = /*#__PURE__*/function (_SafeValueImpl5) {
        _inherits(SafeResourceUrlImpl, _SafeValueImpl5);

        var _super13 = _createSuper(SafeResourceUrlImpl);

        function SafeResourceUrlImpl() {
          _classCallCheck2(this, SafeResourceUrlImpl);

          return _super13.apply(this, arguments);
        }

        _createClass2(SafeResourceUrlImpl, [{
          key: "getTypeName",
          value: function getTypeName() {
            return "ResourceURL"
            /* ResourceUrl */
            ;
          }
        }]);

        return SafeResourceUrlImpl;
      }(SafeValueImpl);

      function unwrapSafeValue(value) {
        return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity : value;
      }

      function allowSanitizationBypassAndThrow(value, type) {
        var actualType = getSanitizationBypassType(value);

        if (actualType != null && actualType !== type) {
          // Allow ResourceURLs in URL contexts, they are strictly more trusted.
          if (actualType === "ResourceURL"
          /* ResourceUrl */
          && type === "URL"
          /* Url */
          ) return true;
          throw new Error("Required a safe ".concat(type, ", got a ").concat(actualType, " (see https://g.co/ng/security#xss)"));
        }

        return actualType === type;
      }

      function getSanitizationBypassType(value) {
        return value instanceof SafeValueImpl && value.getTypeName() || null;
      }
      /**
       * Mark `html` string as trusted.
       *
       * This function wraps the trusted string in `String` and brands it in a way which makes it
       * recognizable to {@link htmlSanitizer} to be trusted implicitly.
       *
       * @param trustedHtml `html` string which needs to be implicitly trusted.
       * @returns a `html` which has been branded to be implicitly trusted.
       */


      function bypassSanitizationTrustHtml(trustedHtml) {
        return new SafeHtmlImpl(trustedHtml);
      }
      /**
       * Mark `style` string as trusted.
       *
       * This function wraps the trusted string in `String` and brands it in a way which makes it
       * recognizable to {@link styleSanitizer} to be trusted implicitly.
       *
       * @param trustedStyle `style` string which needs to be implicitly trusted.
       * @returns a `style` hich has been branded to be implicitly trusted.
       */


      function bypassSanitizationTrustStyle(trustedStyle) {
        return new SafeStyleImpl(trustedStyle);
      }
      /**
       * Mark `script` string as trusted.
       *
       * This function wraps the trusted string in `String` and brands it in a way which makes it
       * recognizable to {@link scriptSanitizer} to be trusted implicitly.
       *
       * @param trustedScript `script` string which needs to be implicitly trusted.
       * @returns a `script` which has been branded to be implicitly trusted.
       */


      function bypassSanitizationTrustScript(trustedScript) {
        return new SafeScriptImpl(trustedScript);
      }
      /**
       * Mark `url` string as trusted.
       *
       * This function wraps the trusted string in `String` and brands it in a way which makes it
       * recognizable to {@link urlSanitizer} to be trusted implicitly.
       *
       * @param trustedUrl `url` string which needs to be implicitly trusted.
       * @returns a `url`  which has been branded to be implicitly trusted.
       */


      function bypassSanitizationTrustUrl(trustedUrl) {
        return new SafeUrlImpl(trustedUrl);
      }
      /**
       * Mark `url` string as trusted.
       *
       * This function wraps the trusted string in `String` and brands it in a way which makes it
       * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.
       *
       * @param trustedResourceUrl `url` string which needs to be implicitly trusted.
       * @returns a `url` which has been branded to be implicitly trusted.
       */


      function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {
        return new SafeResourceUrlImpl(trustedResourceUrl);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML
       * that needs sanitizing.
       * Depending upon browser support we use one of two strategies for doing this.
       * Default: DOMParser strategy
       * Fallback: InertDocument strategy
       */


      function getInertBodyHelper(defaultDoc) {
        var inertDocumentHelper = new InertDocumentHelper(defaultDoc);
        return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;
      }
      /**
       * Uses DOMParser to create and fill an inert body element.
       * This is the default strategy used in browsers that support it.
       */


      var DOMParserHelper = /*#__PURE__*/function () {
        function DOMParserHelper(inertDocumentHelper) {
          _classCallCheck2(this, DOMParserHelper);

          this.inertDocumentHelper = inertDocumentHelper;
        }

        _createClass2(DOMParserHelper, [{
          key: "getInertBodyElement",
          value: function getInertBodyElement(html) {
            // We add these extra elements to ensure that the rest of the content is parsed as expected
            // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the
            // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags
            // in `html` from consuming the otherwise explicit `</body>` tag.
            html = '<body><remove></remove>' + html;

            try {
              var body = new window.DOMParser().parseFromString(trustedHTMLFromString(html), 'text/html').body;

              if (body === null) {
                // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only
                // becomes available in the following tick of the JS engine. In that case we fall back to
                // the `inertDocumentHelper` instead.
                return this.inertDocumentHelper.getInertBodyElement(html);
              }

              body.removeChild(body.firstChild);
              return body;
            } catch (_a) {
              return null;
            }
          }
        }]);

        return DOMParserHelper;
      }();
      /**
       * Use an HTML5 `template` element, if supported, or an inert body element created via
       * `createHtmlDocument` to create and fill an inert DOM element.
       * This is the fallback strategy if the browser does not support DOMParser.
       */


      var InertDocumentHelper = /*#__PURE__*/function () {
        function InertDocumentHelper(defaultDoc) {
          _classCallCheck2(this, InertDocumentHelper);

          this.defaultDoc = defaultDoc;
          this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');

          if (this.inertDocument.body == null) {
            // usually there should be only one body element in the document, but IE doesn't have any, so
            // we need to create one.
            var inertHtml = this.inertDocument.createElement('html');
            this.inertDocument.appendChild(inertHtml);
            var inertBodyElement = this.inertDocument.createElement('body');
            inertHtml.appendChild(inertBodyElement);
          }
        }

        _createClass2(InertDocumentHelper, [{
          key: "getInertBodyElement",
          value: function getInertBodyElement(html) {
            // Prefer using <template> element if supported.
            var templateEl = this.inertDocument.createElement('template');

            if ('content' in templateEl) {
              templateEl.innerHTML = trustedHTMLFromString(html);
              return templateEl;
            } // Note that previously we used to do something like `this.inertDocument.body.innerHTML = html`
            // and we returned the inert `body` node. This was changed, because IE seems to treat setting
            // `innerHTML` on an inserted element differently, compared to one that hasn't been inserted
            // yet. In particular, IE appears to split some of the text into multiple text nodes rather
            // than keeping them in a single one which ends up messing with Ivy's i18n parsing further
            // down the line. This has been worked around by creating a new inert `body` and using it as
            // the root node in which we insert the HTML.


            var inertBody = this.inertDocument.createElement('body');
            inertBody.innerHTML = trustedHTMLFromString(html); // Support: IE 11 only
            // strip custom-namespaced attributes on IE<=11

            if (this.defaultDoc.documentMode) {
              this.stripCustomNsAttrs(inertBody);
            }

            return inertBody;
          }
          /**
           * When IE11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
           * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.
           * 'ns1:xlink:foo').
           *
           * This is undesirable since we don't want to allow any of these custom attributes. This method
           * strips them all.
           */

        }, {
          key: "stripCustomNsAttrs",
          value: function stripCustomNsAttrs(el) {
            var elAttrs = el.attributes; // loop backwards so that we can support removals.

            for (var i = elAttrs.length - 1; 0 < i; i--) {
              var attrib = elAttrs.item(i);
              var attrName = attrib.name;

              if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
                el.removeAttribute(attrName);
              }
            }

            var childNode = el.firstChild;

            while (childNode) {
              if (childNode.nodeType === Node.ELEMENT_NODE) this.stripCustomNsAttrs(childNode);
              childNode = childNode.nextSibling;
            }
          }
        }]);

        return InertDocumentHelper;
      }();
      /**
       * We need to determine whether the DOMParser exists in the global context and
       * supports parsing HTML; HTML parsing support is not as wide as other formats, see
       * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.
       *
       * @suppress {uselessCode}
       */


      function isDOMParserAvailable() {
        try {
          return !!new window.DOMParser().parseFromString(trustedHTMLFromString(''), 'text/html');
        } catch (_a) {
          return false;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A pattern that recognizes a commonly useful subset of URLs that are safe.
       *
       * This regular expression matches a subset of URLs that will not cause script
       * execution if used in URL context within a HTML document. Specifically, this
       * regular expression matches if (comment from here on and regex copied from
       * Soy's EscapingConventions):
       * (1) Either an allowed protocol (http, https, mailto or ftp).
       * (2) or no protocol.  A protocol must be followed by a colon. The below
       *     allows that by allowing colons only after one of the characters [/?#].
       *     A colon after a hash (#) must be in the fragment.
       *     Otherwise, a colon after a (?) must be in a query.
       *     Otherwise, a colon after a single solidus (/) must be in a path.
       *     Otherwise, a colon after a double solidus (//) must be in the authority
       *     (before port).
       *
       * The pattern disallows &, used in HTML entity declarations before
       * one of the characters in [/?#]. This disallows HTML entities used in the
       * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
       * It also disallows HTML entities in the first path part of a relative path,
       * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
       * that. More importantly, it disallows masking of a colon,
       * e.g. "javascript&#58;...".
       *
       * This regular expression was taken from the Closure sanitization library.
       */


      var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi;
      /* A pattern that matches safe srcset values */

      var SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;
      /** A pattern that matches safe data URLs. Only matches image, video and audio types. */

      var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;

      function _sanitizeUrl(url) {
        url = String(url);
        if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;

        if (typeof ngDevMode === 'undefined' || ngDevMode) {
          console.warn("WARNING: sanitizing unsafe URL value ".concat(url, " (see https://g.co/ng/security#xss)"));
        }

        return 'unsafe:' + url;
      }

      function sanitizeSrcset(srcset) {
        srcset = String(srcset);
        return srcset.split(',').map(function (srcset) {
          return _sanitizeUrl(srcset.trim());
        }).join(', ');
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function tagSet(tags) {
        var res = {};

        var _iterator3 = _createForOfIteratorHelper(tags.split(',')),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var t = _step3.value;
            res[t] = true;
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return res;
      }

      function merge() {
        var res = {};

        for (var _len8 = arguments.length, sets = new Array(_len8), _key9 = 0; _key9 < _len8; _key9++) {
          sets[_key9] = arguments[_key9];
        }

        for (var _i9 = 0, _sets = sets; _i9 < _sets.length; _i9++) {
          var s = _sets[_i9];

          for (var v in s) {
            if (s.hasOwnProperty(v)) res[v] = true;
          }
        }

        return res;
      } // Good source of info about elements and attributes
      // https://html.spec.whatwg.org/#semantics
      // https://simon.html5.org/html-elements
      // Safe Void Elements - HTML5
      // https://html.spec.whatwg.org/#void-elements


      var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr'); // Elements that you can, intentionally, leave open (and which close themselves)
      // https://html.spec.whatwg.org/#optional-tags

      var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
      var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
      var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS); // Safe Block Elements - HTML5

      var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul')); // Inline Elements - HTML5

      var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
      var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS); // Attributes that have href and hence need to be sanitized

      var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href'); // Attributes that have special href set hence need to be sanitized

      var SRCSET_ATTRS = tagSet('srcset');
      var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width'); // Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)

      var ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' + 'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' + 'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' + 'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' + 'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' + 'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' + 'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext'); // NB: This currently consciously doesn't support SVG. SVG sanitization has had several security
      // issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
      // innerHTML is required, SVG attributes should be added here.
      // NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
      // can be sanitized, but they increase security surface area without a legitimate use case, so they
      // are left out here.

      var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS, ARIA_ATTRS); // Elements whose content should not be traversed/preserved, if the elements themselves are invalid.
      //
      // Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)
      // `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we
      // don't want to preserve the content, if the elements themselves are going to be removed.

      var SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');
      /**
       * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
       * attributes.
       */

      var SanitizingHtmlSerializer = /*#__PURE__*/function () {
        function SanitizingHtmlSerializer() {
          _classCallCheck2(this, SanitizingHtmlSerializer);

          // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just
          // because characters were re-encoded.
          this.sanitizedSomething = false;
          this.buf = [];
        }

        _createClass2(SanitizingHtmlSerializer, [{
          key: "sanitizeChildren",
          value: function sanitizeChildren(el) {
            // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
            // However this code never accesses properties off of `document` before deleting its contents
            // again, so it shouldn't be vulnerable to DOM clobbering.
            var current = el.firstChild;
            var traverseContent = true;

            while (current) {
              if (current.nodeType === Node.ELEMENT_NODE) {
                traverseContent = this.startElement(current);
              } else if (current.nodeType === Node.TEXT_NODE) {
                this.chars(current.nodeValue);
              } else {
                // Strip non-element, non-text nodes.
                this.sanitizedSomething = true;
              }

              if (traverseContent && current.firstChild) {
                current = current.firstChild;
                continue;
              }

              while (current) {
                // Leaving the element. Walk up and to the right, closing tags as we go.
                if (current.nodeType === Node.ELEMENT_NODE) {
                  this.endElement(current);
                }

                var next = this.checkClobberedElement(current, current.nextSibling);

                if (next) {
                  current = next;
                  break;
                }

                current = this.checkClobberedElement(current, current.parentNode);
              }
            }

            return this.buf.join('');
          }
          /**
           * Sanitizes an opening element tag (if valid) and returns whether the element's contents should
           * be traversed. Element content must always be traversed (even if the element itself is not
           * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.
           *
           * @param element The element to sanitize.
           * @return True if the element's contents should be traversed.
           */

        }, {
          key: "startElement",
          value: function startElement(element) {
            var tagName = element.nodeName.toLowerCase();

            if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
              this.sanitizedSomething = true;
              return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);
            }

            this.buf.push('<');
            this.buf.push(tagName);
            var elAttrs = element.attributes;

            for (var i = 0; i < elAttrs.length; i++) {
              var elAttr = elAttrs.item(i);
              var attrName = elAttr.name;
              var lower = attrName.toLowerCase();

              if (!VALID_ATTRS.hasOwnProperty(lower)) {
                this.sanitizedSomething = true;
                continue;
              }

              var value = elAttr.value; // TODO(martinprobst): Special case image URIs for data:image/...

              if (URI_ATTRS[lower]) value = _sanitizeUrl(value);
              if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);
              this.buf.push(' ', attrName, '="', encodeEntities(value), '"');
            }

            this.buf.push('>');
            return true;
          }
        }, {
          key: "endElement",
          value: function endElement(current) {
            var tagName = current.nodeName.toLowerCase();

            if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
              this.buf.push('</');
              this.buf.push(tagName);
              this.buf.push('>');
            }
          }
        }, {
          key: "chars",
          value: function chars(_chars) {
            this.buf.push(encodeEntities(_chars));
          }
        }, {
          key: "checkClobberedElement",
          value: function checkClobberedElement(node, nextNode) {
            if (nextNode && (node.compareDocumentPosition(nextNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {
              throw new Error("Failed to sanitize html because the element is clobbered: ".concat(node.outerHTML));
            }

            return nextNode;
          }
        }]);

        return SanitizingHtmlSerializer;
      }(); // Regular Expressions for parsing tags and attributes


      var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g; // ! to ~ is the ASCII range.

      var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
      /**
       * Escapes all potentially dangerous characters, so that the
       * resulting string can be safely inserted into attribute or
       * element text.
       * @param value
       */

      function encodeEntities(value) {
        return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (match) {
          var hi = match.charCodeAt(0);
          var low = match.charCodeAt(1);
          return '&#' + ((hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000) + ';';
        }).replace(NON_ALPHANUMERIC_REGEXP, function (match) {
          return '&#' + match.charCodeAt(0) + ';';
        }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
      }

      var inertBodyHelper;
      /**
       * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
       * the DOM in a browser environment.
       */

      function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {
        var inertBodyElement = null;

        try {
          inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc); // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).

          var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
          inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml); // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
          // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.

          var mXSSAttempts = 5;
          var parsedHtml = unsafeHtml;

          do {
            if (mXSSAttempts === 0) {
              throw new Error('Failed to sanitize html because the input is unstable');
            }

            mXSSAttempts--;
            unsafeHtml = parsedHtml;
            parsedHtml = inertBodyElement.innerHTML;
            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
          } while (unsafeHtml !== parsedHtml);

          var sanitizer = new SanitizingHtmlSerializer();
          var safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);

          if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {
            console.warn('WARNING: sanitizing HTML stripped some content, see https://g.co/ng/security#xss');
          }

          return trustedHTMLFromString(safeHtml);
        } finally {
          // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
          if (inertBodyElement) {
            var parent = getTemplateContent(inertBodyElement) || inertBodyElement;

            while (parent.firstChild) {
              parent.removeChild(parent.firstChild);
            }
          }
        }
      }

      function getTemplateContent(el) {
        return 'content' in el
        /** Microsoft/TypeScript#21517 */
        && isTemplateElement(el) ? el.content : null;
      }

      function isTemplateElement(el) {
        return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property
       * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly
       * handled.
       *
       * See DomSanitizer for more details on security in Angular applications.
       *
       * @publicApi
       */


      var _SecurityContext;

      (function (SecurityContext) {
        SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
        SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
        SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
        SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
        SecurityContext[SecurityContext["URL"] = 4] = "URL";
        SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
      })(_SecurityContext || (_SecurityContext = {}));
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing
       * dangerous content.
       *
       * This method parses the `html` and locates potentially dangerous content (such as urls and
       * javascript) and removes it.
       *
       * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.
       *
       * @param unsafeHtml untrusted `html`, typically from the user.
       * @returns `html` string which is safe to display to user, because all of the dangerous javascript
       * and urls have been removed.
       *
       * @codeGenApi
       */


      function _ɵɵsanitizeHtml(unsafeHtml) {
        var sanitizer = getSanitizer();

        if (sanitizer) {
          return trustedHTMLFromStringBypass(sanitizer.sanitize(_SecurityContext.HTML, unsafeHtml) || '');
        }

        if (allowSanitizationBypassAndThrow(unsafeHtml, "HTML"
        /* Html */
        )) {
          return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));
        }

        return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));
      }
      /**
       * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing
       * dangerous content.
       *
       * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.
       *
       * @param unsafeStyle untrusted `style`, typically from the user.
       * @returns `style` string which is safe to bind to the `style` properties.
       *
       * @codeGenApi
       */


      function _ɵɵsanitizeStyle(unsafeStyle) {
        var sanitizer = getSanitizer();

        if (sanitizer) {
          return sanitizer.sanitize(_SecurityContext.STYLE, unsafeStyle) || '';
        }

        if (allowSanitizationBypassAndThrow(unsafeStyle, "Style"
        /* Style */
        )) {
          return unwrapSafeValue(unsafeStyle);
        }

        return renderStringify(unsafeStyle);
      }
      /**
       * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing
       * dangerous
       * content.
       *
       * This method parses the `url` and locates potentially dangerous content (such as javascript) and
       * removes it.
       *
       * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.
       *
       * @param unsafeUrl untrusted `url`, typically from the user.
       * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because
       * all of the dangerous javascript has been removed.
       *
       * @codeGenApi
       */


      function _ɵɵsanitizeUrl(unsafeUrl) {
        var sanitizer = getSanitizer();

        if (sanitizer) {
          return sanitizer.sanitize(_SecurityContext.URL, unsafeUrl) || '';
        }

        if (allowSanitizationBypassAndThrow(unsafeUrl, "URL"
        /* Url */
        )) {
          return unwrapSafeValue(unsafeUrl);
        }

        return _sanitizeUrl(renderStringify(unsafeUrl));
      }
      /**
       * A `url` sanitizer which only lets trusted `url`s through.
       *
       * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.
       *
       * @param unsafeResourceUrl untrusted `url`, typically from the user.
       * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because
       * only trusted `url`s have been allowed to pass.
       *
       * @codeGenApi
       */


      function _ɵɵsanitizeResourceUrl(unsafeResourceUrl) {
        var sanitizer = getSanitizer();

        if (sanitizer) {
          return trustedScriptURLFromStringBypass(sanitizer.sanitize(_SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '');
        }

        if (allowSanitizationBypassAndThrow(unsafeResourceUrl, "ResourceURL"
        /* ResourceUrl */
        )) {
          return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));
        }

        throw new Error('unsafe value used in a resource URL context (see https://g.co/ng/security#xss)');
      }
      /**
       * A `script` sanitizer which only lets trusted javascript through.
       *
       * This passes only `script`s marked trusted by calling {@link
       * bypassSanitizationTrustScript}.
       *
       * @param unsafeScript untrusted `script`, typically from the user.
       * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,
       * because only trusted `scripts` have been allowed to pass.
       *
       * @codeGenApi
       */


      function _ɵɵsanitizeScript(unsafeScript) {
        var sanitizer = getSanitizer();

        if (sanitizer) {
          return trustedScriptFromStringBypass(sanitizer.sanitize(_SecurityContext.SCRIPT, unsafeScript) || '');
        }

        if (allowSanitizationBypassAndThrow(unsafeScript, "Script"
        /* Script */
        )) {
          return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));
        }

        throw new Error('unsafe value used in a script context');
      }
      /**
       * A template tag function for promoting the associated constant literal to a
       * TrustedHTML. Interpolation is explicitly not allowed.
       *
       * @param html constant template literal containing trusted HTML.
       * @returns TrustedHTML wrapping `html`.
       *
       * @security This is a security-sensitive function and should only be used to
       * convert constant values of attributes and properties found in
       * application-provided Angular templates to TrustedHTML.
       *
       * @codeGenApi
       */


      function _ɵɵtrustConstantHtml(html) {
        // The following runtime check ensures that the function was called as a
        // template tag (e.g. ɵɵtrustConstantHtml`content`), without any interpolation
        // (e.g. not ɵɵtrustConstantHtml`content ${variable}`). A TemplateStringsArray
        // is an array with a `raw` property that is also an array. The associated
        // template literal has no interpolation if and only if the length of the
        // TemplateStringsArray is 1.
        if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {
          throw new Error("Unexpected interpolation in trusted HTML constant: ".concat(html.join('?')));
        }

        return trustedHTMLFromString(html[0]);
      }
      /**
       * A template tag function for promoting the associated constant literal to a
       * TrustedScriptURL. Interpolation is explicitly not allowed.
       *
       * @param url constant template literal containing a trusted script URL.
       * @returns TrustedScriptURL wrapping `url`.
       *
       * @security This is a security-sensitive function and should only be used to
       * convert constant values of attributes and properties found in
       * application-provided Angular templates to TrustedScriptURL.
       *
       * @codeGenApi
       */


      function _ɵɵtrustConstantResourceUrl(url) {
        // The following runtime check ensures that the function was called as a
        // template tag (e.g. ɵɵtrustConstantResourceUrl`content`), without any
        // interpolation (e.g. not ɵɵtrustConstantResourceUrl`content ${variable}`). A
        // TemplateStringsArray is an array with a `raw` property that is also an
        // array. The associated template literal has no interpolation if and only if
        // the length of the TemplateStringsArray is 1.
        if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {
          throw new Error("Unexpected interpolation in trusted URL constant: ".concat(url.join('?')));
        }

        return trustedScriptURLFromString(url[0]);
      }
      /**
       * Detects which sanitizer to use for URL property, based on tag name and prop name.
       *
       * The rules are based on the RESOURCE_URL context config from
       * `packages/compiler/src/schema/dom_security_schema.ts`.
       * If tag and prop names don't match Resource URL schema, use URL sanitizer.
       */


      function getUrlSanitizer(tag, prop) {
        if (prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' || tag === 'media' || tag === 'script') || prop === 'href' && (tag === 'base' || tag === 'link')) {
          return _ɵɵsanitizeResourceUrl;
        }

        return _ɵɵsanitizeUrl;
      }
      /**
       * Sanitizes URL, selecting sanitizer function based on tag and property names.
       *
       * This function is used in case we can't define security context at compile time, when only prop
       * name is available. This happens when we generate host bindings for Directives/Components. The
       * host element is unknown at compile time, so we defer calculation of specific sanitizer to
       * runtime.
       *
       * @param unsafeUrl untrusted `url`, typically from the user.
       * @param tag target element tag name.
       * @param prop name of the property that contains the value.
       * @returns `url` string which is safe to bind.
       *
       * @codeGenApi
       */


      function _ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {
        return getUrlSanitizer(tag, prop)(unsafeUrl);
      }

      function validateAgainstEventProperties(name) {
        if (name.toLowerCase().startsWith('on')) {
          var msg = "Binding to event property '".concat(name, "' is disallowed for security reasons, ") + "please use (".concat(name.slice(2), ")=...") + "\nIf '".concat(name, "' is a directive input, make sure the directive is imported by the") + " current module.";
          throw new Error(msg);
        }
      }

      function validateAgainstEventAttributes(name) {
        if (name.toLowerCase().startsWith('on')) {
          var msg = "Binding to event attribute '".concat(name, "' is disallowed for security reasons, ") + "please use (".concat(name.slice(2), ")=...");
          throw new Error(msg);
        }
      }

      function getSanitizer() {
        var lView = getLView();
        return lView && lView[SANITIZER];
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Returns the matching `LContext` data for a given DOM node, directive or component instance.
       *
       * This function will examine the provided DOM element, component, or directive instance\'s
       * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched
       * value will be that of the newly created `LContext`.
       *
       * If the monkey-patched value is the `LView` instance then the context value for that
       * target will be created and the monkey-patch reference will be updated. Therefore when this
       * function is called it may mutate the provided element\'s, component\'s or any of the associated
       * directive\'s monkey-patch values.
       *
       * If the monkey-patch value is not detected then the code will walk up the DOM until an element
       * is found which contains a monkey-patch reference. When that occurs then the provided element
       * will be updated with a new context (which is then returned). If the monkey-patch value is not
       * detected for a component/directive instance then it will throw an error (all components and
       * directives should be automatically monkey-patched by ivy).
       *
       * @param target Component, Directive or DOM Node.
       */


      function getLContext(target) {
        var mpValue = readPatchedData(target);

        if (mpValue) {
          // only when it's an array is it considered an LView instance
          // ... otherwise it's an already constructed LContext instance
          if (Array.isArray(mpValue)) {
            var lView = mpValue;
            var nodeIndex;
            var component = undefined;
            var directives = undefined;

            if (isComponentInstance(target)) {
              nodeIndex = findViaComponent(lView, target);

              if (nodeIndex == -1) {
                throw new Error('The provided component was not found in the application');
              }

              component = target;
            } else if (isDirectiveInstance(target)) {
              nodeIndex = findViaDirective(lView, target);

              if (nodeIndex == -1) {
                throw new Error('The provided directive was not found in the application');
              }

              directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);
            } else {
              nodeIndex = findViaNativeElement(lView, target);

              if (nodeIndex == -1) {
                return null;
              }
            } // the goal is not to fill the entire context full of data because the lookups
            // are expensive. Instead, only the target data (the element, component, container, ICU
            // expression or directive details) are filled into the context. If called multiple times
            // with different target values then the missing target data will be filled in.


            var _native2 = unwrapRNode(lView[nodeIndex]);

            var existingCtx = readPatchedData(_native2);
            var context = existingCtx && !Array.isArray(existingCtx) ? existingCtx : createLContext(lView, nodeIndex, _native2); // only when the component has been discovered then update the monkey-patch

            if (component && context.component === undefined) {
              context.component = component;
              attachPatchData(context.component, context);
            } // only when the directives have been discovered then update the monkey-patch


            if (directives && context.directives === undefined) {
              context.directives = directives;

              for (var i = 0; i < directives.length; i++) {
                attachPatchData(directives[i], context);
              }
            }

            attachPatchData(context["native"], context);
            mpValue = context;
          }
        } else {
          var rElement = target;
          ngDevMode && assertDomNode(rElement); // if the context is not found then we need to traverse upwards up the DOM
          // to find the nearest element that has already been monkey patched with data

          var parent = rElement;

          while (parent = parent.parentNode) {
            var parentContext = readPatchedData(parent);

            if (parentContext) {
              var _lView2 = void 0;

              if (Array.isArray(parentContext)) {
                _lView2 = parentContext;
              } else {
                _lView2 = parentContext.lView;
              } // the edge of the app was also reached here through another means
              // (maybe because the DOM was changed manually).


              if (!_lView2) {
                return null;
              }

              var index = findViaNativeElement(_lView2, rElement);

              if (index >= 0) {
                var _native3 = unwrapRNode(_lView2[index]);

                var _context = createLContext(_lView2, index, _native3);

                attachPatchData(_native3, _context);
                mpValue = _context;
                break;
              }
            }
          }
        }

        return mpValue || null;
      }
      /**
       * Creates an empty instance of a `LContext` context
       */


      function createLContext(lView, nodeIndex, _native4) {
        return {
          lView: lView,
          nodeIndex: nodeIndex,
          "native": _native4,
          component: undefined,
          directives: undefined,
          localRefs: undefined
        };
      }
      /**
       * Takes a component instance and returns the view for that component.
       *
       * @param componentInstance
       * @returns The component's view
       */


      function getComponentViewByInstance(componentInstance) {
        var lView = readPatchedData(componentInstance);
        var view;

        if (Array.isArray(lView)) {
          var nodeIndex = findViaComponent(lView, componentInstance);
          view = getComponentLViewByIndex(nodeIndex, lView);
          var context = createLContext(lView, nodeIndex, view[HOST]);
          context.component = componentInstance;
          attachPatchData(componentInstance, context);
          attachPatchData(context["native"], context);
        } else {
          var _context2 = lView;
          view = getComponentLViewByIndex(_context2.nodeIndex, _context2.lView);
        }

        return view;
      }
      /**
       * This property will be monkey-patched on elements, components and directives.
       */


      var MONKEY_PATCH_KEY_NAME = '__ngContext__';
      /**
       * Assigns the given data to the given target (which could be a component,
       * directive or DOM node instance) using monkey-patching.
       */

      function attachPatchData(target, data) {
        ngDevMode && assertDefined(target, 'Target expected');
        target[MONKEY_PATCH_KEY_NAME] = data;
      }
      /**
       * Returns the monkey-patch value data present on the target (which could be
       * a component, directive or a DOM node).
       */


      function readPatchedData(target) {
        ngDevMode && assertDefined(target, 'Target expected');
        return target[MONKEY_PATCH_KEY_NAME] || null;
      }

      function readPatchedLView(target) {
        var value = readPatchedData(target);

        if (value) {
          return Array.isArray(value) ? value : value.lView;
        }

        return null;
      }

      function isComponentInstance(instance) {
        return instance && instance.constructor && instance.constructor.ɵcmp;
      }

      function isDirectiveInstance(instance) {
        return instance && instance.constructor && instance.constructor.ɵdir;
      }
      /**
       * Locates the element within the given LView and returns the matching index
       */


      function findViaNativeElement(lView, target) {
        var tView = lView[TVIEW];

        for (var i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
          if (unwrapRNode(lView[i]) === target) {
            return i;
          }
        }

        return -1;
      }
      /**
       * Locates the next tNode (child, sibling or parent).
       */


      function traverseNextElement(tNode) {
        if (tNode.child) {
          return tNode.child;
        } else if (tNode.next) {
          return tNode.next;
        } else {
          // Let's take the following template: <div><span>text</span></div><component/>
          // After checking the text node, we need to find the next parent that has a "next" TNode,
          // in this case the parent `div`, so that we can find the component.
          while (tNode.parent && !tNode.parent.next) {
            tNode = tNode.parent;
          }

          return tNode.parent && tNode.parent.next;
        }
      }
      /**
       * Locates the component within the given LView and returns the matching index
       */


      function findViaComponent(lView, componentInstance) {
        var componentIndices = lView[TVIEW].components;

        if (componentIndices) {
          for (var i = 0; i < componentIndices.length; i++) {
            var elementComponentIndex = componentIndices[i];
            var componentView = getComponentLViewByIndex(elementComponentIndex, lView);

            if (componentView[CONTEXT] === componentInstance) {
              return elementComponentIndex;
            }
          }
        } else {
          var rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);
          var rootComponent = rootComponentView[CONTEXT];

          if (rootComponent === componentInstance) {
            // we are dealing with the root element here therefore we know that the
            // element is the very first element after the HEADER data in the lView
            return HEADER_OFFSET;
          }
        }

        return -1;
      }
      /**
       * Locates the directive within the given LView and returns the matching index
       */


      function findViaDirective(lView, directiveInstance) {
        // if a directive is monkey patched then it will (by default)
        // have a reference to the LView of the current view. The
        // element bound to the directive being search lives somewhere
        // in the view data. We loop through the nodes and check their
        // list of directives for the instance.
        var tNode = lView[TVIEW].firstChild;

        while (tNode) {
          var directiveIndexStart = tNode.directiveStart;
          var directiveIndexEnd = tNode.directiveEnd;

          for (var i = directiveIndexStart; i < directiveIndexEnd; i++) {
            if (lView[i] === directiveInstance) {
              return tNode.index;
            }
          }

          tNode = traverseNextElement(tNode);
        }

        return -1;
      }
      /**
       * Returns a list of directives extracted from the given view based on the
       * provided list of directive index values.
       *
       * @param nodeIndex The node index
       * @param lView The target view data
       * @param includeComponents Whether or not to include components in returned directives
       */


      function getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {
        var tNode = lView[TVIEW].data[nodeIndex];
        var directiveStartIndex = tNode.directiveStart;
        if (directiveStartIndex == 0) return EMPTY_ARRAY;
        var directiveEndIndex = tNode.directiveEnd;
        if (!includeComponents && tNode.flags & 2
        /* isComponentHost */
        ) directiveStartIndex++;
        return lView.slice(directiveStartIndex, directiveEndIndex);
      }

      function getComponentAtNodeIndex(nodeIndex, lView) {
        var tNode = lView[TVIEW].data[nodeIndex];
        var directiveStartIndex = tNode.directiveStart;
        return tNode.flags & 2
        /* isComponentHost */
        ? lView[directiveStartIndex] : null;
      }
      /**
       * Returns a map of local references (local reference name => element or directive instance) that
       * exist on a given element.
       */


      function discoverLocalRefs(lView, nodeIndex) {
        var tNode = lView[TVIEW].data[nodeIndex];

        if (tNode && tNode.localNames) {
          var result = {};
          var localIndex = tNode.index + 1;

          for (var i = 0; i < tNode.localNames.length; i += 2) {
            result[tNode.localNames[i]] = lView[localIndex];
            localIndex++;
          }

          return result;
        }

        return null;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ERROR_TYPE = 'ngType';
      var ERROR_DEBUG_CONTEXT = 'ngDebugContext';
      var ERROR_ORIGINAL_ERROR = 'ngOriginalError';
      var ERROR_LOGGER = 'ngErrorLogger';

      function wrappedError(message, originalError) {
        var msg = "".concat(message, " caused by: ").concat(originalError instanceof Error ? originalError.message : originalError);
        var error = Error(msg);
        error[ERROR_ORIGINAL_ERROR] = originalError;
        return error;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function getType(error) {
        return error[ERROR_TYPE];
      }

      function getDebugContext(error) {
        return error[ERROR_DEBUG_CONTEXT];
      }

      function getOriginalError(error) {
        return error[ERROR_ORIGINAL_ERROR];
      }

      function getErrorLogger(error) {
        return error[ERROR_LOGGER] || defaultErrorLogger;
      }

      function defaultErrorLogger(console) {
        for (var _len9 = arguments.length, values = new Array(_len9 > 1 ? _len9 - 1 : 0), _key10 = 1; _key10 < _len9; _key10++) {
          values[_key10 - 1] = arguments[_key10];
        }

        console.error.apply(console, values);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Provides a hook for centralized exception handling.
       *
       * The default implementation of `ErrorHandler` prints error messages to the `console`. To
       * intercept error handling, write a custom exception handler that replaces this default as
       * appropriate for your app.
       *
       * @usageNotes
       * ### Example
       *
       * ```
       * class MyErrorHandler implements ErrorHandler {
       *   handleError(error) {
       *     // do something with the exception
       *   }
       * }
       *
       * @NgModule({
       *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
       * })
       * class MyModule {}
       * ```
       *
       * @publicApi
       */


      var _ErrorHandler = /*#__PURE__*/function () {
        function _ErrorHandler() {
          _classCallCheck2(this, _ErrorHandler);

          /**
           * @internal
           */
          this._console = console;
        }

        _createClass2(_ErrorHandler, [{
          key: "handleError",
          value: function handleError(error) {
            var originalError = this._findOriginalError(error);

            var context = this._findContext(error); // Note: Browser consoles show the place from where console.error was called.
            // We can use this to give users additional information about the error.


            var errorLogger = getErrorLogger(error);
            errorLogger(this._console, "ERROR", error);

            if (originalError) {
              errorLogger(this._console, "ORIGINAL ERROR", originalError);
            }

            if (context) {
              errorLogger(this._console, 'ERROR CONTEXT', context);
            }
          }
          /** @internal */

        }, {
          key: "_findContext",
          value: function _findContext(error) {
            if (error) {
              return getDebugContext(error) ? getDebugContext(error) : this._findContext(getOriginalError(error));
            }

            return null;
          }
          /** @internal */

        }, {
          key: "_findOriginalError",
          value: function _findOriginalError(error) {
            var e = getOriginalError(error);

            while (e && getOriginalError(e)) {
              e = getOriginalError(e);
            }

            return e;
          }
        }]);

        return _ErrorHandler;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Defines a schema that allows an NgModule to contain the following:
       * - Non-Angular elements named with dash case (`-`).
       * - Element properties named with dash case (`-`).
       * Dash case is the naming convention for custom elements.
       *
       * @publicApi
       */


      var _CUSTOM_ELEMENTS_SCHEMA = {
        name: 'custom-elements'
      };
      /**
       * Defines a schema that allows any property on any element.
       *
       * @publicApi
       */

      var _NO_ERRORS_SCHEMA = {
        name: 'no-errors-schema'
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Disallowed strings in the comment.
       *
       * see: https://html.spec.whatwg.org/multipage/syntax.html#comments
       */

      var COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;
      /**
       * Delimiter in the disallowed strings which needs to be wrapped with zero with character.
       */

      var COMMENT_DELIMITER = /(<|>)/;
      var COMMENT_DELIMITER_ESCAPED = "\u200B$1\u200B";
      /**
       * Escape the content of comment strings so that it can be safely inserted into a comment node.
       *
       * The issue is that HTML does not specify any way to escape comment end text inside the comment.
       * Consider: `<!-- The way you close a comment is with ">", and "->" at the beginning or by "-->" or
       * "--!>" at the end. -->`. Above the `"-->"` is meant to be text not an end to the comment. This
       * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)
       *
       * see: https://html.spec.whatwg.org/multipage/syntax.html#comments
       *
       * ```
       * div.innerHTML = div.innerHTML
       * ```
       *
       * One would expect that the above code would be safe to do, but it turns out that because comment
       * text is not escaped, the comment may contain text which will prematurely close the comment
       * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which
       * may contain such text and expect them to be safe.)
       *
       * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and
       * surrounding them with `_>_` where the `_` is a zero width space `\u200B`. The result is that if a
       * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the
       * text it will render normally but it will not cause the HTML parser to close/open the comment.
       *
       * @param value text to make safe for comment node by escaping the comment open/close character
       *     sequence.
       */

      function escapeCommentText(value) {
        return value.replace(COMMENT_DISALLOWED, function (text) {
          return text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED);
        });
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * THIS FILE CONTAINS CODE WHICH SHOULD BE TREE SHAKEN AND NEVER CALLED FROM PRODUCTION CODE!!!
       */

      /**
       * Creates an `Array` construction with a given name. This is useful when
       * looking for memory consumption to see what time of array it is.
       *
       *
       * @param name Name to give to the constructor
       * @returns A subclass of `Array` if possible. This can only be done in
       *          environments which support `class` construct.
       */


      function createNamedArrayType(name) {
        // This should never be called in prod mode, so let's verify that is the case.
        if (ngDevMode) {
          try {
            // If this function were compromised the following could lead to arbitrary
            // script execution. We bless it with Trusted Types anyway since this
            // function is stripped out of production binaries.
            return newTrustedFunctionForDev('Array', "return class ".concat(name, " extends Array{}"))(Array);
          } catch (e) {
            // If it does not work just give up and fall back to regular Array.
            return Array;
          }
        } else {
          throw new Error('Looks like we are in \'prod mode\', but we are creating a named Array type, which is wrong! Check your code');
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function normalizeDebugBindingName(name) {
        // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
        name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));
        return "ng-reflect-".concat(name);
      }

      var CAMEL_CASE_REGEXP = /([A-Z])/g;

      function camelCaseToDashCase(input) {
        return input.replace(CAMEL_CASE_REGEXP, function () {
          for (var _len10 = arguments.length, m = new Array(_len10), _key11 = 0; _key11 < _len10; _key11++) {
            m[_key11] = arguments[_key11];
          }

          return '-' + m[1].toLowerCase();
        });
      }

      function normalizeDebugBindingValue(value) {
        try {
          // Limit the size of the value as otherwise the DOM just gets polluted.
          return value != null ? value.toString().slice(0, 30) : value;
        } catch (e) {
          return '[ERROR] Exception while trying to serialize the value';
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ɵ0$4 = function ɵ0$4() {
        return (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only
        setTimeout // everything else
        ).bind(_global);
      };

      var defaultScheduler = ɵ0$4();
      /**
       *
       * @codeGenApi
       */

      function _ɵɵresolveWindow(element) {
        return element.ownerDocument.defaultView;
      }
      /**
       *
       * @codeGenApi
       */


      function _ɵɵresolveDocument(element) {
        return element.ownerDocument;
      }
      /**
       *
       * @codeGenApi
       */


      function _ɵɵresolveBody(element) {
        return element.ownerDocument.body;
      }
      /**
       * The special delimiter we use to separate property names, prefixes, and suffixes
       * in property binding metadata. See storeBindingMetadata().
       *
       * We intentionally use the Unicode "REPLACEMENT CHARACTER" (U+FFFD) as a delimiter
       * because it is a very uncommon character that is unlikely to be part of a user's
       * property names or interpolation strings. If it is in fact used in a property
       * binding, DebugElement.properties will not return the correct value for that
       * binding. However, there should be no runtime effect for real applications.
       *
       * This character is typically rendered as a question mark inside of a diamond.
       * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)
       *
       */


      var INTERPOLATION_DELIMITER = "\uFFFD";
      /**
       * Unwrap a value which might be behind a closure (for forward declaration reasons).
       */

      function maybeUnwrapFn(value) {
        if (value instanceof Function) {
          return value();
        } else {
          return value;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Called when there are multiple component selectors that match a given node */


      function throwMultipleComponentError(tNode) {
        throw new RuntimeError("300"
        /* MULTIPLE_COMPONENTS_MATCH */
        , "Multiple components match node with tagname ".concat(tNode.value));
      }
      /** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */


      function throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName) {
        var field = propName ? " for '".concat(propName, "'") : '';
        var msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value".concat(field, ": '").concat(oldValue, "'. Current value: '").concat(currValue, "'.");

        if (creationMode) {
          msg += " It seems like the view has been created after its parent and its children have been dirty checked." + " Has it been created in a change detection hook?";
        } // TODO: include debug context, see `viewDebugError` function in
        // `packages/core/src/view/errors.ts` for reference.


        throw new RuntimeError("100"
        /* EXPRESSION_CHANGED_AFTER_CHECKED */
        , msg);
      }

      function constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {
        var _meta$split = meta.split(INTERPOLATION_DELIMITER),
            _meta$split2 = _toArray(_meta$split),
            propName = _meta$split2[0],
            prefix = _meta$split2[1],
            chunks = _meta$split2.slice(2);

        var oldValue = prefix,
            newValue = prefix;

        for (var i = 0; i < chunks.length; i++) {
          var slotIdx = rootIndex + i;
          oldValue += "".concat(lView[slotIdx]).concat(chunks[i]);
          newValue += "".concat(slotIdx === expressionIndex ? changedValue : lView[slotIdx]).concat(chunks[i]);
        }

        return {
          propName: propName,
          oldValue: oldValue,
          newValue: newValue
        };
      }
      /**
       * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:
       * - property name (for property bindings or interpolations)
       * - old and new values, enriched using information from metadata
       *
       * More information on the metadata storage format can be found in `storePropertyBindingMetadata`
       * function description.
       */


      function getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {
        var tData = lView[TVIEW].data;
        var metadata = tData[bindingIndex];

        if (typeof metadata === 'string') {
          // metadata for property interpolation
          if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {
            return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);
          } // metadata for property binding


          return {
            propName: metadata,
            oldValue: oldValue,
            newValue: newValue
          };
        } // metadata is not available for this expression, check if this expression is a part of the
        // property interpolation by going from the current binding index left and look for a string that
        // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:
        // [..., 'id�Prefix � and � suffix', null, null, null, ...]


        if (metadata === null) {
          var idx = bindingIndex - 1;

          while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {
            idx--;
          }

          var meta = tData[idx];

          if (typeof meta === 'string') {
            var matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g')); // first interpolation delimiter separates property name from interpolation parts (in case of
            // property interpolations), so we subtract one from total number of found delimiters

            if (matches && matches.length - 1 > bindingIndex - idx) {
              return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);
            }
          }
        }

        return {
          propName: undefined,
          oldValue: oldValue,
          newValue: newValue
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Flags for renderer-specific style modifiers.
       * @publicApi
       */


      var _RendererStyleFlags;

      (function (RendererStyleFlags2) {
        // TODO(misko): This needs to be refactored into a separate file so that it can be imported from
        // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails
        // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.

        /**
         * Marks a style as important.
         */
        RendererStyleFlags2[RendererStyleFlags2["Important"] = 1] = "Important";
        /**
         * Marks a style as using dash case naming (this-is-dash-case).
         */

        RendererStyleFlags2[RendererStyleFlags2["DashCase"] = 2] = "DashCase";
      })(_RendererStyleFlags || (_RendererStyleFlags = {}));
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _icuContainerIterate;
      /**
       * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.
       */


      function icuContainerIterate(tIcuContainerNode, lView) {
        return _icuContainerIterate(tIcuContainerNode, lView);
      }
      /**
       * Ensures that `IcuContainerVisitor`'s implementation is present.
       *
       * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the
       * bundler to tree shake ICU logic and only load it if ICU instruction is executed.
       */


      function ensureIcuContainerVisitorLoaded(loader) {
        if (_icuContainerIterate === undefined) {
          // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it
          // can be inlined into call-site.
          _icuContainerIterate = loader();
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Note: This hack is necessary so we don't erroneously get a circular dependency
      // failure based on types.


      var unusedValueExportToPlacateAjd$5 = 1;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of
       * that LContainer, which is an LView
       * @param lView the lView whose parent to get
       */

      function getLViewParent(lView) {
        ngDevMode && assertLView(lView);
        var parent = lView[PARENT];
        return isLContainer(parent) ? parent[PARENT] : parent;
      }
      /**
       * Retrieve the root view from any component or `LView` by walking the parent `LView` until
       * reaching the root `LView`.
       *
       * @param componentOrLView any component or `LView`
       */


      function getRootView(componentOrLView) {
        ngDevMode && assertDefined(componentOrLView, 'component');
        var lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);

        while (lView && !(lView[FLAGS] & 512
        /* IsRoot */
        )) {
          lView = getLViewParent(lView);
        }

        ngDevMode && assertLView(lView);
        return lView;
      }
      /**
       * Returns the `RootContext` instance that is associated with
       * the application where the target is situated. It does this by walking the parent views until it
       * gets to the root view, then getting the context off of that.
       *
       * @param viewOrComponent the `LView` or component to get the root context for.
       */


      function getRootContext(viewOrComponent) {
        var rootView = getRootView(viewOrComponent);
        ngDevMode && assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');
        return rootView[CONTEXT];
      }
      /**
       * Gets the first `LContainer` in the LView or `null` if none exists.
       */


      function getFirstLContainer(lView) {
        return getNearestLContainer(lView[CHILD_HEAD]);
      }
      /**
       * Gets the next `LContainer` that is a sibling of the given container.
       */


      function getNextLContainer(container) {
        return getNearestLContainer(container[NEXT]);
      }

      function getNearestLContainer(viewOrContainer) {
        while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {
          viewOrContainer = viewOrContainer[NEXT];
        }

        return viewOrContainer;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var unusedValueToPlacateAjd = unusedValueExportToPlacateAjd$1 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$5 + unusedValueExportToPlacateAjd$2 + unusedValueExportToPlacateAjd;
      /**
       * NOTE: for performance reasons, the possible actions are inlined within the function instead of
       * being passed as an argument.
       */

      function applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {
        // If this slot was allocated for a text node dynamically created by i18n, the text node itself
        // won't be created until i18nApply() in the update block, so this node should be skipped.
        // For more info, see "ICU expressions should work inside an ngTemplateOutlet inside an ngFor"
        // in `i18n_spec.ts`.
        if (lNodeToHandle != null) {
          var lContainer;
          var isComponent = false; // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is
          // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if
          // it has LContainer so that we can process all of those cases appropriately.

          if (isLContainer(lNodeToHandle)) {
            lContainer = lNodeToHandle;
          } else if (isLView(lNodeToHandle)) {
            isComponent = true;
            ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');
            lNodeToHandle = lNodeToHandle[HOST];
          }

          var rNode = unwrapRNode(lNodeToHandle);
          ngDevMode && !isProceduralRenderer(renderer) && assertDomNode(rNode);

          if (action === 0
          /* Create */
          && parent !== null) {
            if (beforeNode == null) {
              nativeAppendChild(renderer, parent, rNode);
            } else {
              nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
            }
          } else if (action === 1
          /* Insert */
          && parent !== null) {
            nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
          } else if (action === 2
          /* Detach */
          ) {
              nativeRemoveNode(renderer, rNode, isComponent);
            } else if (action === 3
          /* Destroy */
          ) {
              ngDevMode && ngDevMode.rendererDestroyNode++;
              renderer.destroyNode(rNode);
            }

          if (lContainer != null) {
            applyContainer(renderer, action, lContainer, parent, beforeNode);
          }
        }
      }

      function createTextNode(renderer, value) {
        ngDevMode && ngDevMode.rendererCreateTextNode++;
        ngDevMode && ngDevMode.rendererSetText++;
        return isProceduralRenderer(renderer) ? renderer.createText(value) : renderer.createTextNode(value);
      }

      function updateTextNode(renderer, rNode, value) {
        ngDevMode && ngDevMode.rendererSetText++;
        isProceduralRenderer(renderer) ? renderer.setValue(rNode, value) : rNode.textContent = value;
      }

      function createCommentNode(renderer, value) {
        ngDevMode && ngDevMode.rendererCreateComment++; // isProceduralRenderer check is not needed because both `Renderer2` and `Renderer3` have the same
        // method name.

        return renderer.createComment(escapeCommentText(value));
      }
      /**
       * Creates a native element from a tag name, using a renderer.
       * @param renderer A renderer to use
       * @param name the tag name
       * @param namespace Optional namespace for element.
       * @returns the element created
       */


      function createElementNode(renderer, name, namespace) {
        ngDevMode && ngDevMode.rendererCreateElement++;

        if (isProceduralRenderer(renderer)) {
          return renderer.createElement(name, namespace);
        } else {
          return namespace === null ? renderer.createElement(name) : renderer.createElementNS(namespace, name);
        }
      }
      /**
       * Removes all DOM elements associated with a view.
       *
       * Because some root nodes of the view may be containers, we sometimes need
       * to propagate deeply into the nested containers to remove all elements in the
       * views beneath it.
       *
       * @param tView The `TView' of the `LView` from which elements should be added or removed
       * @param lView The view from which elements should be added or removed
       */


      function removeViewFromContainer(tView, lView) {
        var renderer = lView[RENDERER];
        applyView(tView, lView, renderer, 2
        /* Detach */
        , null, null);
        lView[HOST] = null;
        lView[T_HOST] = null;
      }
      /**
       * Adds all DOM elements associated with a view.
       *
       * Because some root nodes of the view may be containers, we sometimes need
       * to propagate deeply into the nested containers to add all elements in the
       * views beneath it.
       *
       * @param tView The `TView' of the `LView` from which elements should be added or removed
       * @param parentTNode The `TNode` where the `LView` should be attached to.
       * @param renderer Current renderer to use for DOM manipulations.
       * @param lView The view from which elements should be added or removed
       * @param parentNativeNode The parent `RElement` where it should be inserted into.
       * @param beforeNode The node before which elements should be added, if insert mode
       */


      function addViewToContainer(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {
        lView[HOST] = parentNativeNode;
        lView[T_HOST] = parentTNode;
        applyView(tView, lView, renderer, 1
        /* Insert */
        , parentNativeNode, beforeNode);
      }
      /**
       * Detach a `LView` from the DOM by detaching its nodes.
       *
       * @param tView The `TView' of the `LView` to be detached
       * @param lView the `LView` to be detached.
       */


      function renderDetachView(tView, lView) {
        applyView(tView, lView, lView[RENDERER], 2
        /* Detach */
        , null, null);
      }
      /**
       * Traverses down and up the tree of views and containers to remove listeners and
       * call onDestroy callbacks.
       *
       * Notes:
       *  - Because it's used for onDestroy calls, it needs to be bottom-up.
       *  - Must process containers instead of their views to avoid splicing
       *  when views are destroyed and re-added.
       *  - Using a while loop because it's faster than recursion
       *  - Destroy only called on movement to sibling or movement to parent (laterally or up)
       *
       *  @param rootView The view to destroy
       */


      function destroyViewTree(rootView) {
        // If the view has no children, we can clean it up and return early.
        var lViewOrLContainer = rootView[CHILD_HEAD];

        if (!lViewOrLContainer) {
          return cleanUpView(rootView[TVIEW], rootView);
        }

        while (lViewOrLContainer) {
          var next = null;

          if (isLView(lViewOrLContainer)) {
            // If LView, traverse down to child.
            next = lViewOrLContainer[CHILD_HEAD];
          } else {
            ngDevMode && assertLContainer(lViewOrLContainer); // If container, traverse down to its first LView.

            var firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];
            if (firstView) next = firstView;
          }

          if (!next) {
            // Only clean up view when moving to the side or up, as destroy hooks
            // should be called in order from the bottom up.
            while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {
              if (isLView(lViewOrLContainer)) {
                cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
              }

              lViewOrLContainer = lViewOrLContainer[PARENT];
            }

            if (lViewOrLContainer === null) lViewOrLContainer = rootView;

            if (isLView(lViewOrLContainer)) {
              cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
            }

            next = lViewOrLContainer && lViewOrLContainer[NEXT];
          }

          lViewOrLContainer = next;
        }
      }
      /**
       * Inserts a view into a container.
       *
       * This adds the view to the container's array of active views in the correct
       * position. It also adds the view's elements to the DOM if the container isn't a
       * root node of another view (in that case, the view's elements will be added when
       * the container's parent view is added later).
       *
       * @param tView The `TView' of the `LView` to insert
       * @param lView The view to insert
       * @param lContainer The container into which the view should be inserted
       * @param index Which index in the container to insert the child view into
       */


      function insertView(tView, lView, lContainer, index) {
        ngDevMode && assertLView(lView);
        ngDevMode && assertLContainer(lContainer);
        var indexInContainer = CONTAINER_HEADER_OFFSET + index;
        var containerLength = lContainer.length;

        if (index > 0) {
          // This is a new view, we need to add it to the children.
          lContainer[indexInContainer - 1][NEXT] = lView;
        }

        if (index < containerLength - CONTAINER_HEADER_OFFSET) {
          lView[NEXT] = lContainer[indexInContainer];
          addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);
        } else {
          lContainer.push(lView);
          lView[NEXT] = null;
        }

        lView[PARENT] = lContainer; // track views where declaration and insertion points are different

        var declarationLContainer = lView[DECLARATION_LCONTAINER];

        if (declarationLContainer !== null && lContainer !== declarationLContainer) {
          trackMovedView(declarationLContainer, lView);
        } // notify query that a new view has been added


        var lQueries = lView[QUERIES];

        if (lQueries !== null) {
          lQueries.insertView(tView);
        } // Sets the attached flag


        lView[FLAGS] |= 128
        /* Attached */
        ;
      }
      /**
       * Track views created from the declaration container (TemplateRef) and inserted into a
       * different LContainer.
       */


      function trackMovedView(declarationContainer, lView) {
        ngDevMode && assertDefined(lView, 'LView required');
        ngDevMode && assertLContainer(declarationContainer);
        var movedViews = declarationContainer[MOVED_VIEWS];
        var insertedLContainer = lView[PARENT];
        ngDevMode && assertLContainer(insertedLContainer);
        var insertedComponentLView = insertedLContainer[PARENT][DECLARATION_COMPONENT_VIEW];
        ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');
        var declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];
        ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');

        if (declaredComponentLView !== insertedComponentLView) {
          // At this point the declaration-component is not same as insertion-component; this means that
          // this is a transplanted view. Mark the declared lView as having transplanted views so that
          // those views can participate in CD.
          declarationContainer[HAS_TRANSPLANTED_VIEWS] = true;
        }

        if (movedViews === null) {
          declarationContainer[MOVED_VIEWS] = [lView];
        } else {
          movedViews.push(lView);
        }
      }

      function detachMovedView(declarationContainer, lView) {
        ngDevMode && assertLContainer(declarationContainer);
        ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');
        var movedViews = declarationContainer[MOVED_VIEWS];
        var declarationViewIndex = movedViews.indexOf(lView);
        var insertionLContainer = lView[PARENT];
        ngDevMode && assertLContainer(insertionLContainer); // If the view was marked for refresh but then detached before it was checked (where the flag
        // would be cleared and the counter decremented), we need to decrement the view counter here
        // instead.

        if (lView[FLAGS] & 1024
        /* RefreshTransplantedView */
        ) {
            lView[FLAGS] &= ~1024
            /* RefreshTransplantedView */
            ;
            updateTransplantedViewCount(insertionLContainer, -1);
          }

        movedViews.splice(declarationViewIndex, 1);
      }
      /**
       * Detaches a view from a container.
       *
       * This method removes the view from the container's array of active views. It also
       * removes the view's elements from the DOM.
       *
       * @param lContainer The container from which to detach a view
       * @param removeIndex The index of the view to detach
       * @returns Detached LView instance.
       */


      function detachView(lContainer, removeIndex) {
        if (lContainer.length <= CONTAINER_HEADER_OFFSET) return;
        var indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;
        var viewToDetach = lContainer[indexInContainer];

        if (viewToDetach) {
          var declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];

          if (declarationLContainer !== null && declarationLContainer !== lContainer) {
            detachMovedView(declarationLContainer, viewToDetach);
          }

          if (removeIndex > 0) {
            lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];
          }

          var removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);
          removeViewFromContainer(viewToDetach[TVIEW], viewToDetach); // notify query that a view has been removed

          var lQueries = removedLView[QUERIES];

          if (lQueries !== null) {
            lQueries.detachView(removedLView[TVIEW]);
          }

          viewToDetach[PARENT] = null;
          viewToDetach[NEXT] = null; // Unsets the attached flag

          viewToDetach[FLAGS] &= ~128
          /* Attached */
          ;
        }

        return viewToDetach;
      }
      /**
       * A standalone function which destroys an LView,
       * conducting clean up (e.g. removing listeners, calling onDestroys).
       *
       * @param tView The `TView' of the `LView` to be destroyed
       * @param lView The view to be destroyed.
       */


      function destroyLView(tView, lView) {
        if (!(lView[FLAGS] & 256
        /* Destroyed */
        )) {
          var renderer = lView[RENDERER];

          if (isProceduralRenderer(renderer) && renderer.destroyNode) {
            applyView(tView, lView, renderer, 3
            /* Destroy */
            , null, null);
          }

          destroyViewTree(lView);
        }
      }
      /**
       * Calls onDestroys hooks for all directives and pipes in a given view and then removes all
       * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks
       * can be propagated to @Output listeners.
       *
       * @param tView `TView` for the `LView` to clean up.
       * @param lView The LView to clean up
       */


      function cleanUpView(tView, lView) {
        if (!(lView[FLAGS] & 256
        /* Destroyed */
        )) {
          // Usually the Attached flag is removed when the view is detached from its parent, however
          // if it's a root view, the flag won't be unset hence why we're also removing on destroy.
          lView[FLAGS] &= ~128
          /* Attached */
          ; // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook
          // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If
          // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.
          // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is
          // really more of an "afterDestroy" hook if you think about it.

          lView[FLAGS] |= 256
          /* Destroyed */
          ;
          executeOnDestroys(tView, lView);
          processCleanups(tView, lView); // For component views only, the local renderer is destroyed at clean up time.

          if (lView[TVIEW].type === 1
          /* Component */
          && isProceduralRenderer(lView[RENDERER])) {
            ngDevMode && ngDevMode.rendererDestroy++;
            lView[RENDERER].destroy();
          }

          var declarationContainer = lView[DECLARATION_LCONTAINER]; // we are dealing with an embedded view that is still inserted into a container

          if (declarationContainer !== null && isLContainer(lView[PARENT])) {
            // and this is a projected view
            if (declarationContainer !== lView[PARENT]) {
              detachMovedView(declarationContainer, lView);
            } // For embedded views still attached to a container: remove query result from this view.


            var lQueries = lView[QUERIES];

            if (lQueries !== null) {
              lQueries.detachView(tView);
            }
          }
        }
      }
      /** Removes listeners and unsubscribes from output subscriptions */


      function processCleanups(tView, lView) {
        var tCleanup = tView.cleanup;
        var lCleanup = lView[CLEANUP]; // `LCleanup` contains both share information with `TCleanup` as well as instance specific
        // information appended at the end. We need to know where the end of the `TCleanup` information
        // is, and we track this with `lastLCleanupIndex`.

        var lastLCleanupIndex = -1;

        if (tCleanup !== null) {
          for (var i = 0; i < tCleanup.length - 1; i += 2) {
            if (typeof tCleanup[i] === 'string') {
              // This is a native DOM listener
              var idxOrTargetGetter = tCleanup[i + 1];
              var target = typeof idxOrTargetGetter === 'function' ? idxOrTargetGetter(lView) : unwrapRNode(lView[idxOrTargetGetter]);
              var listener = lCleanup[lastLCleanupIndex = tCleanup[i + 2]];
              var useCaptureOrSubIdx = tCleanup[i + 3];

              if (typeof useCaptureOrSubIdx === 'boolean') {
                // native DOM listener registered with Renderer3
                target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);
              } else {
                if (useCaptureOrSubIdx >= 0) {
                  // unregister
                  lCleanup[lastLCleanupIndex = useCaptureOrSubIdx]();
                } else {
                  // Subscription
                  lCleanup[lastLCleanupIndex = -useCaptureOrSubIdx].unsubscribe();
                }
              }

              i += 2;
            } else {
              // This is a cleanup function that is grouped with the index of its context
              var context = lCleanup[lastLCleanupIndex = tCleanup[i + 1]];
              tCleanup[i].call(context);
            }
          }
        }

        if (lCleanup !== null) {
          for (var _i10 = lastLCleanupIndex + 1; _i10 < lCleanup.length; _i10++) {
            var instanceCleanupFn = lCleanup[_i10];
            ngDevMode && assertFunction(instanceCleanupFn, 'Expecting instance cleanup function.');
            instanceCleanupFn();
          }

          lView[CLEANUP] = null;
        }
      }
      /** Calls onDestroy hooks for this view */


      function executeOnDestroys(tView, lView) {
        var destroyHooks;

        if (tView != null && (destroyHooks = tView.destroyHooks) != null) {
          for (var i = 0; i < destroyHooks.length; i += 2) {
            var context = lView[destroyHooks[i]]; // Only call the destroy hook if the context has been requested.

            if (!(context instanceof NodeInjectorFactory)) {
              var toCall = destroyHooks[i + 1];

              if (Array.isArray(toCall)) {
                for (var j = 0; j < toCall.length; j += 2) {
                  var callContext = context[toCall[j]];
                  var hook = toCall[j + 1];
                  profiler(4
                  /* LifecycleHookStart */
                  , callContext, hook);

                  try {
                    hook.call(callContext);
                  } finally {
                    profiler(5
                    /* LifecycleHookEnd */
                    , callContext, hook);
                  }
                }
              } else {
                profiler(4
                /* LifecycleHookStart */
                , context, toCall);

                try {
                  toCall.call(context);
                } finally {
                  profiler(5
                  /* LifecycleHookEnd */
                  , context, toCall);
                }
              }
            }
          }
        }
      }
      /**
       * Returns a native element if a node can be inserted into the given parent.
       *
       * There are two reasons why we may not be able to insert a element immediately.
       * - Projection: When creating a child content element of a component, we have to skip the
       *   insertion because the content of a component will be projected.
       *   `<component><content>delayed due to projection</content></component>`
       * - Parent container is disconnected: This can happen when we are inserting a view into
       *   parent container, which itself is disconnected. For example the parent container is part
       *   of a View which has not be inserted or is made for projection but has not been inserted
       *   into destination.
       *
       * @param tView: Current `TView`.
       * @param tNode: `TNode` for which we wish to retrieve render parent.
       * @param lView: Current `LView`.
       */


      function getParentRElement(tView, tNode, lView) {
        return getClosestRElement(tView, tNode.parent, lView);
      }
      /**
       * Get closest `RElement` or `null` if it can't be found.
       *
       * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.
       * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).
       * If `TNode` is `null` then return host `RElement`:
       *   - return `null` if projection
       *   - return `null` if parent container is disconnected (we have no parent.)
       *
       * @param tView: Current `TView`.
       * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is
       *     needed).
       * @param lView: Current `LView`.
       * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)
       */


      function getClosestRElement(tView, tNode, lView) {
        var parentTNode = tNode; // Skip over element and ICU containers as those are represented by a comment node and
        // can't be used as a render parent.

        while (parentTNode !== null && parentTNode.type & (8
        /* ElementContainer */
        | 32
        /* Icu */
        )) {
          tNode = parentTNode;
          parentTNode = tNode.parent;
        } // If the parent tNode is null, then we are inserting across views: either into an embedded view
        // or a component view.


        if (parentTNode === null) {
          // We are inserting a root element of the component view into the component host element and
          // it should always be eager.
          return lView[HOST];
        } else {
          ngDevMode && assertTNodeType(parentTNode, 3
          /* AnyRNode */
          | 4
          /* Container */
          );

          if (parentTNode.flags & 2
          /* isComponentHost */
          ) {
              ngDevMode && assertTNodeForLView(parentTNode, lView);
              var encapsulation = tView.data[parentTNode.directiveStart].encapsulation; // We've got a parent which is an element in the current view. We just need to verify if the
              // parent element is not a component. Component's content nodes are not inserted immediately
              // because they will be projected, and so doing insert at this point would be wasteful.
              // Since the projection would then move it to its final destination. Note that we can't
              // make this assumption when using the Shadow DOM, because the native projection placeholders
              // (<content> or <slot>) have to be in place as elements are being inserted.

              if (encapsulation === _ViewEncapsulation.None || encapsulation === _ViewEncapsulation.Emulated) {
                return null;
              }
            }

          return getNativeByTNode(parentTNode, lView);
        }
      }
      /**
       * Inserts a native node before another native node for a given parent using {@link Renderer3}.
       * This is a utility function that can be used when native nodes were determined - it abstracts an
       * actual renderer being used.
       */


      function nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {
        ngDevMode && ngDevMode.rendererInsertBefore++;

        if (isProceduralRenderer(renderer)) {
          renderer.insertBefore(parent, child, beforeNode, isMove);
        } else {
          parent.insertBefore(child, beforeNode, isMove);
        }
      }

      function nativeAppendChild(renderer, parent, child) {
        ngDevMode && ngDevMode.rendererAppendChild++;
        ngDevMode && assertDefined(parent, 'parent node must be defined');

        if (isProceduralRenderer(renderer)) {
          renderer.appendChild(parent, child);
        } else {
          parent.appendChild(child);
        }
      }

      function nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {
        if (beforeNode !== null) {
          nativeInsertBefore(renderer, parent, child, beforeNode, isMove);
        } else {
          nativeAppendChild(renderer, parent, child);
        }
      }
      /** Removes a node from the DOM given its native parent. */


      function nativeRemoveChild(renderer, parent, child, isHostElement) {
        if (isProceduralRenderer(renderer)) {
          renderer.removeChild(parent, child, isHostElement);
        } else {
          parent.removeChild(child);
        }
      }
      /**
       * Returns a native parent of a given native node.
       */


      function nativeParentNode(renderer, node) {
        return isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode;
      }
      /**
       * Returns a native sibling of a given native node.
       */


      function nativeNextSibling(renderer, node) {
        return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;
      }
      /**
       * Find a node in front of which `currentTNode` should be inserted.
       *
       * This method determines the `RNode` in front of which we should insert the `currentRNode`. This
       * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.
       *
       * @param parentTNode parent `TNode`
       * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)
       * @param lView current `LView`
       */


      function getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {
        return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);
      }
      /**
       * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into
       * account)
       *
       * This method determines the `RNode` in front of which we should insert the `currentRNode`. This
       * does not take `TNode.insertBeforeIndex` into account.
       *
       * @param parentTNode parent `TNode`
       * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)
       * @param lView current `LView`
       */


      function getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {
        if (parentTNode.type & (8
        /* ElementContainer */
        | 32
        /* Icu */
        )) {
          return getNativeByTNode(parentTNode, lView);
        }

        return null;
      }
      /**
       * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.
       *
       * This function will only be set if i18n code runs.
       */


      var _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;
      /**
       * Tree shakable boundary for `processI18nInsertBefore` function.
       *
       * This function will only be set if i18n code runs.
       */

      var _processI18nInsertBefore;

      function setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore) {
        _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;
        _processI18nInsertBefore = processI18nInsertBefore;
      }
      /**
       * Appends the `child` native node (or a collection of nodes) to the `parent`.
       *
       * @param tView The `TView' to be appended
       * @param lView The current LView
       * @param childRNode The native child (or children) that should be appended
       * @param childTNode The TNode of the child element
       */


      function appendChild(tView, lView, childRNode, childTNode) {
        var parentRNode = getParentRElement(tView, childTNode, lView);
        var renderer = lView[RENDERER];
        var parentTNode = childTNode.parent || lView[T_HOST];
        var anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);

        if (parentRNode != null) {
          if (Array.isArray(childRNode)) {
            for (var i = 0; i < childRNode.length; i++) {
              nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);
            }
          } else {
            nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);
          }
        }

        _processI18nInsertBefore !== undefined && _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);
      }
      /**
       * Returns the first native node for a given LView, starting from the provided TNode.
       *
       * Native nodes are returned in the order in which those appear in the native tree (DOM).
       */


      function getFirstNativeNode(lView, tNode) {
        if (tNode !== null) {
          ngDevMode && assertTNodeType(tNode, 3
          /* AnyRNode */
          | 12
          /* AnyContainer */
          | 32
          /* Icu */
          | 16
          /* Projection */
          );
          var tNodeType = tNode.type;

          if (tNodeType & 3
          /* AnyRNode */
          ) {
              return getNativeByTNode(tNode, lView);
            } else if (tNodeType & 4
          /* Container */
          ) {
              return getBeforeNodeForView(-1, lView[tNode.index]);
            } else if (tNodeType & 8
          /* ElementContainer */
          ) {
              var elIcuContainerChild = tNode.child;

              if (elIcuContainerChild !== null) {
                return getFirstNativeNode(lView, elIcuContainerChild);
              } else {
                var rNodeOrLContainer = lView[tNode.index];

                if (isLContainer(rNodeOrLContainer)) {
                  return getBeforeNodeForView(-1, rNodeOrLContainer);
                } else {
                  return unwrapRNode(rNodeOrLContainer);
                }
              }
            } else if (tNodeType & 32
          /* Icu */
          ) {
              var nextRNode = icuContainerIterate(tNode, lView);
              var rNode = nextRNode(); // If the ICU container has no nodes, than we use the ICU anchor as the node.

              return rNode || unwrapRNode(lView[tNode.index]);
            } else {
            var projectionNodes = getProjectionNodes(lView, tNode);

            if (projectionNodes !== null) {
              if (Array.isArray(projectionNodes)) {
                return projectionNodes[0];
              }

              var parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
              ngDevMode && assertParentView(parentView);
              return getFirstNativeNode(parentView, projectionNodes);
            } else {
              return getFirstNativeNode(lView, tNode.next);
            }
          }
        }

        return null;
      }

      function getProjectionNodes(lView, tNode) {
        if (tNode !== null) {
          var componentView = lView[DECLARATION_COMPONENT_VIEW];
          var componentHost = componentView[T_HOST];
          var slotIdx = tNode.projection;
          ngDevMode && assertProjectionSlots(lView);
          return componentHost.projection[slotIdx];
        }

        return null;
      }

      function getBeforeNodeForView(viewIndexInContainer, lContainer) {
        var nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;

        if (nextViewIndex < lContainer.length) {
          var lView = lContainer[nextViewIndex];
          var firstTNodeOfView = lView[TVIEW].firstChild;

          if (firstTNodeOfView !== null) {
            return getFirstNativeNode(lView, firstTNodeOfView);
          }
        }

        return lContainer[NATIVE];
      }
      /**
       * Removes a native node itself using a given renderer. To remove the node we are looking up its
       * parent from the native tree as not all platforms / browsers support the equivalent of
       * node.remove().
       *
       * @param renderer A renderer to be used
       * @param rNode The native node that should be removed
       * @param isHostElement A flag indicating if a node to be removed is a host of a component.
       */


      function nativeRemoveNode(renderer, rNode, isHostElement) {
        ngDevMode && ngDevMode.rendererRemoveNode++;
        var nativeParent = nativeParentNode(renderer, rNode);

        if (nativeParent) {
          nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);
        }
      }
      /**
       * Performs the operation of `action` on the node. Typically this involves inserting or removing
       * nodes on the LView or projection boundary.
       */


      function applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {
        while (tNode != null) {
          ngDevMode && assertTNodeForLView(tNode, lView);
          ngDevMode && assertTNodeType(tNode, 3
          /* AnyRNode */
          | 12
          /* AnyContainer */
          | 16
          /* Projection */
          | 32
          /* Icu */
          );
          var rawSlotValue = lView[tNode.index];
          var tNodeType = tNode.type;

          if (isProjection) {
            if (action === 0
            /* Create */
            ) {
                rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);
                tNode.flags |= 4
                /* isProjected */
                ;
              }
          }

          if ((tNode.flags & 64
          /* isDetached */
          ) !== 64
          /* isDetached */
          ) {
              if (tNodeType & 8
              /* ElementContainer */
              ) {
                  applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);
                  applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
                } else if (tNodeType & 32
              /* Icu */
              ) {
                  var nextRNode = icuContainerIterate(tNode, lView);
                  var rNode = void 0;

                  while (rNode = nextRNode()) {
                    applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
                  }

                  applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
                } else if (tNodeType & 16
              /* Projection */
              ) {
                  applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);
                } else {
                ngDevMode && assertTNodeType(tNode, 3
                /* AnyRNode */
                | 4
                /* Container */
                );
                applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
              }
            }

          tNode = isProjection ? tNode.projectionNext : tNode.next;
        }
      }

      function applyView(tView, lView, renderer, action, parentRElement, beforeNode) {
        applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);
      }
      /**
       * `applyProjection` performs operation on the projection.
       *
       * Inserting a projection requires us to locate the projected nodes from the parent component. The
       * complication is that those nodes themselves could be re-projected from their parent component.
       *
       * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed
       * @param lView The `LView` which needs to be inserted, detached, destroyed.
       * @param tProjectionNode node to project
       */


      function applyProjection(tView, lView, tProjectionNode) {
        var renderer = lView[RENDERER];
        var parentRNode = getParentRElement(tView, tProjectionNode, lView);
        var parentTNode = tProjectionNode.parent || lView[T_HOST];
        var beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);
        applyProjectionRecursive(renderer, 0
        /* Create */
        , lView, tProjectionNode, parentRNode, beforeNode);
      }
      /**
       * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,
       * detach, destroy)
       *
       * Inserting a projection requires us to locate the projected nodes from the parent component. The
       * complication is that those nodes themselves could be re-projected from their parent component.
       *
       * @param renderer Render to use
       * @param action action to perform (insert, detach, destroy)
       * @param lView The LView which needs to be inserted, detached, destroyed.
       * @param tProjectionNode node to project
       * @param parentRElement parent DOM element for insertion/removal.
       * @param beforeNode Before which node the insertions should happen.
       */


      function applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {
        var componentLView = lView[DECLARATION_COMPONENT_VIEW];
        var componentNode = componentLView[T_HOST];
        ngDevMode && assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');
        var nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];

        if (Array.isArray(nodeToProjectOrRNodes)) {
          // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we
          // need to support passing projectable nodes, so we cheat and put them in the TNode
          // of the Host TView. (Yes we put instance info at the T Level). We can get away with it
          // because we know that that TView is not shared and therefore it will not be a problem.
          // This should be refactored and cleaned up.
          for (var i = 0; i < nodeToProjectOrRNodes.length; i++) {
            var rNode = nodeToProjectOrRNodes[i];
            applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
          }
        } else {
          var nodeToProject = nodeToProjectOrRNodes;
          var projectedComponentLView = componentLView[PARENT];
          applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);
        }
      }
      /**
       * `applyContainer` performs an operation on the container and its views as specified by
       * `action` (insert, detach, destroy)
       *
       * Inserting a Container is complicated by the fact that the container may have Views which
       * themselves have containers or projections.
       *
       * @param renderer Renderer to use
       * @param action action to perform (insert, detach, destroy)
       * @param lContainer The LContainer which needs to be inserted, detached, destroyed.
       * @param parentRElement parent DOM element for insertion/removal.
       * @param beforeNode Before which node the insertions should happen.
       */


      function applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {
        ngDevMode && assertLContainer(lContainer);
        var anchor = lContainer[NATIVE]; // LContainer has its own before node.

        var _native5 = unwrapRNode(lContainer); // An LContainer can be created dynamically on any node by injecting ViewContainerRef.
        // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor
        // node (comment in the DOM) that will be different from the LContainer's host node. In this
        // particular case we need to execute action on 2 nodes:
        // - container's host node (this is done in the executeActionOnElementOrContainer)
        // - container's host node (this is done here)


        if (anchor !== _native5) {
          // This is very strange to me (Misko). I would expect that the native is same as anchor. I
          // don't see a reason why they should be different, but they are.
          //
          // If they are we need to process the second anchor as well.
          applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);
        }

        for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
          var lView = lContainer[i];
          applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);
        }
      }
      /**
       * Writes class/style to element.
       *
       * @param renderer Renderer to use.
       * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)
       * @param rNode The Node to write to.
       * @param prop Property to write to. This would be the class/style name.
       * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add
       *        otherwise).
       */


      function applyStyling(renderer, isClassBased, rNode, prop, value) {
        var isProcedural = isProceduralRenderer(renderer);

        if (isClassBased) {
          // We actually want JS true/false here because any truthy value should add the class
          if (!value) {
            ngDevMode && ngDevMode.rendererRemoveClass++;

            if (isProcedural) {
              renderer.removeClass(rNode, prop);
            } else {
              rNode.classList.remove(prop);
            }
          } else {
            ngDevMode && ngDevMode.rendererAddClass++;

            if (isProcedural) {
              renderer.addClass(rNode, prop);
            } else {
              ngDevMode && assertDefined(rNode.classList, 'HTMLElement expected');
              rNode.classList.add(prop);
            }
          }
        } else {
          var flags = prop.indexOf('-') === -1 ? undefined : _RendererStyleFlags.DashCase;

          if (value == null
          /** || value === undefined */
          ) {
              ngDevMode && ngDevMode.rendererRemoveStyle++;

              if (isProcedural) {
                renderer.removeStyle(rNode, prop, flags);
              } else {
                rNode.style.removeProperty(prop);
              }
            } else {
            // A value is important if it ends with `!important`. The style
            // parser strips any semicolons at the end of the value.
            var isImportant = typeof value === 'string' ? value.endsWith('!important') : false;

            if (isImportant) {
              // !important has to be stripped from the value for it to be valid.
              value = value.slice(0, -10);
              flags |= _RendererStyleFlags.Important;
            }

            ngDevMode && ngDevMode.rendererSetStyle++;

            if (isProcedural) {
              renderer.setStyle(rNode, prop, value, flags);
            } else {
              ngDevMode && assertDefined(rNode.style, 'HTMLElement expected');
              rNode.style.setProperty(prop, value, isImportant ? 'important' : '');
            }
          }
        }
      }
      /**
       * Write `cssText` to `RElement`.
       *
       * This function does direct write without any reconciliation. Used for writing initial values, so
       * that static styling values do not pull in the style parser.
       *
       * @param renderer Renderer to use
       * @param element The element which needs to be updated.
       * @param newValue The new class list to write.
       */


      function writeDirectStyle(renderer, element, newValue) {
        ngDevMode && assertString(newValue, '\'newValue\' should be a string');

        if (isProceduralRenderer(renderer)) {
          renderer.setAttribute(element, 'style', newValue);
        } else {
          element.style.cssText = newValue;
        }

        ngDevMode && ngDevMode.rendererSetStyle++;
      }
      /**
       * Write `className` to `RElement`.
       *
       * This function does direct write without any reconciliation. Used for writing initial values, so
       * that static styling values do not pull in the style parser.
       *
       * @param renderer Renderer to use
       * @param element The element which needs to be updated.
       * @param newValue The new class list to write.
       */


      function writeDirectClass(renderer, element, newValue) {
        ngDevMode && assertString(newValue, '\'newValue\' should be a string');

        if (isProceduralRenderer(renderer)) {
          if (newValue === '') {
            // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.
            renderer.removeAttribute(element, 'class');
          } else {
            renderer.setAttribute(element, 'class', newValue);
          }
        } else {
          element.className = newValue;
        }

        ngDevMode && ngDevMode.rendererSetClassName++;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Returns an index of `classToSearch` in `className` taking token boundaries into account.
       *
       * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)
       *
       * @param className A string containing classes (whitespace separated)
       * @param classToSearch A class name to locate
       * @param startingIndex Starting location of search
       * @returns an index of the located class (or -1 if not found)
       */


      function classIndexOf(className, classToSearch, startingIndex) {
        ngDevMode && assertNotEqual(classToSearch, '', 'can not look for "" string.');
        var end = className.length;

        while (true) {
          var foundIndex = className.indexOf(classToSearch, startingIndex);
          if (foundIndex === -1) return foundIndex;

          if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32
          /* SPACE */
          ) {
              // Ensure that it has leading whitespace
              var length = classToSearch.length;

              if (foundIndex + length === end || className.charCodeAt(foundIndex + length) <= 32
              /* SPACE */
              ) {
                  // Ensure that it has trailing whitespace
                  return foundIndex;
                }
            } // False positive, keep searching from where we left off.


          startingIndex = foundIndex + 1;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var unusedValueToPlacateAjd$1 = unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$5;
      var NG_TEMPLATE_SELECTOR = 'ng-template';
      /**
       * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)
       *
       * @param attrs `TAttributes` to search through.
       * @param cssClassToMatch class to match (lowercase)
       * @param isProjectionMode Whether or not class matching should look into the attribute `class` in
       *    addition to the `AttributeMarker.Classes`.
       */

      function isCssClassMatching(attrs, cssClassToMatch, isProjectionMode) {
        // TODO(misko): The fact that this function needs to know about `isProjectionMode` seems suspect.
        // It is strange to me that sometimes the class information comes in form of `class` attribute
        // and sometimes in form of `AttributeMarker.Classes`. Some investigation is needed to determine
        // if that is the right behavior.
        ngDevMode && assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');
        var i = 0;

        while (i < attrs.length) {
          var item = attrs[i++];

          if (isProjectionMode && item === 'class') {
            item = attrs[i];

            if (classIndexOf(item.toLowerCase(), cssClassToMatch, 0) !== -1) {
              return true;
            }
          } else if (item === 1
          /* Classes */
          ) {
              // We found the classes section. Start searching for the class.
              while (i < attrs.length && typeof (item = attrs[i++]) == 'string') {
                // while we have strings
                if (item.toLowerCase() === cssClassToMatch) return true;
              }

              return false;
            }
        }

        return false;
      }
      /**
       * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).
       *
       * @param tNode current TNode
       */


      function isInlineTemplate(tNode) {
        return tNode.type === 4
        /* Container */
        && tNode.value !== NG_TEMPLATE_SELECTOR;
      }
      /**
       * Function that checks whether a given tNode matches tag-based selector and has a valid type.
       *
       * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular
       * directive matching mode:
       * - in the "directive matching" mode we do _not_ take TContainer's tagName into account if it is
       * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a
       * tag name was extracted from * syntax so we would match the same directive twice);
       * - in the "projection" mode, we use a tag name potentially extracted from the * syntax processing
       * (applicable to TNodeType.Container only).
       */


      function hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {
        var tagNameToCompare = tNode.type === 4
        /* Container */
        && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;
        return currentSelector === tagNameToCompare;
      }
      /**
       * A utility function to match an Ivy node static data against a simple CSS selector
       *
       * @param node static data of the node to match
       * @param selector The selector to try matching against the node.
       * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing
       * directive matching.
       * @returns true if node matches the selector.
       */


      function isNodeMatchingSelector(tNode, selector, isProjectionMode) {
        ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');
        var mode = 4
        /* ELEMENT */
        ;
        var nodeAttrs = tNode.attrs || []; // Find the index of first attribute that has no value, only a name.

        var nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs); // When processing ":not" selectors, we skip to the next ":not" if the
        // current one doesn't match

        var skipToNextSelector = false;

        for (var i = 0; i < selector.length; i++) {
          var current = selector[i];

          if (typeof current === 'number') {
            // If we finish processing a :not selector and it hasn't failed, return false
            if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {
              return false;
            } // If we are skipping to the next :not() and this mode flag is positive,
            // it's a part of the current :not() selector, and we should keep skipping


            if (skipToNextSelector && isPositive(current)) continue;
            skipToNextSelector = false;
            mode = current | mode & 1
            /* NOT */
            ;
            continue;
          }

          if (skipToNextSelector) continue;

          if (mode & 4
          /* ELEMENT */
          ) {
              mode = 2
              /* ATTRIBUTE */
              | mode & 1
              /* NOT */
              ;

              if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) || current === '' && selector.length === 1) {
                if (isPositive(mode)) return false;
                skipToNextSelector = true;
              }
            } else {
            var selectorAttrValue = mode & 8
            /* CLASS */
            ? current : selector[++i]; // special case for matching against classes when a tNode has been instantiated with
            // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])

            if (mode & 8
            /* CLASS */
            && tNode.attrs !== null) {
              if (!isCssClassMatching(tNode.attrs, selectorAttrValue, isProjectionMode)) {
                if (isPositive(mode)) return false;
                skipToNextSelector = true;
              }

              continue;
            }

            var attrName = mode & 8
            /* CLASS */
            ? 'class' : current;
            var attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);

            if (attrIndexInNode === -1) {
              if (isPositive(mode)) return false;
              skipToNextSelector = true;
              continue;
            }

            if (selectorAttrValue !== '') {
              var nodeAttrValue = void 0;

              if (attrIndexInNode > nameOnlyMarkerIdx) {
                nodeAttrValue = '';
              } else {
                ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0
                /* NamespaceURI */
                , 'We do not match directives on namespaced attributes'); // we lowercase the attribute value to be able to match
                // selectors without case-sensitivity
                // (selectors are already in lowercase when generated)

                nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();
              }

              var compareAgainstClassName = mode & 8
              /* CLASS */
              ? nodeAttrValue : null;

              if (compareAgainstClassName && classIndexOf(compareAgainstClassName, selectorAttrValue, 0) !== -1 || mode & 2
              /* ATTRIBUTE */
              && selectorAttrValue !== nodeAttrValue) {
                if (isPositive(mode)) return false;
                skipToNextSelector = true;
              }
            }
          }
        }

        return isPositive(mode) || skipToNextSelector;
      }

      function isPositive(mode) {
        return (mode & 1
        /* NOT */
        ) === 0;
      }
      /**
       * Examines the attribute's definition array for a node to find the index of the
       * attribute that matches the given `name`.
       *
       * NOTE: This will not match namespaced attributes.
       *
       * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.
       * The following table summarizes which types of attributes we attempt to match:
       *
       * ===========================================================================================================
       * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n
       * Attributes
       * ===========================================================================================================
       * Inline + Projection     | YES               | YES                 | NO                  | YES
       * -----------------------------------------------------------------------------------------------------------
       * Inline + Directive      | NO                | NO                  | YES                 | NO
       * -----------------------------------------------------------------------------------------------------------
       * Non-inline + Projection | YES               | YES                 | NO                  | YES
       * -----------------------------------------------------------------------------------------------------------
       * Non-inline + Directive  | YES               | YES                 | NO                  | YES
       * ===========================================================================================================
       *
       * @param name the name of the attribute to find
       * @param attrs the attribute array to examine
       * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)
       * rather than a manually expanded template node (e.g `<ng-template>`).
       * @param isProjectionMode true if we are matching against content projection otherwise we are
       * matching against directives.
       */


      function findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {
        if (attrs === null) return -1;
        var i = 0;

        if (isProjectionMode || !isInlineTemplate) {
          var bindingsMode = false;

          while (i < attrs.length) {
            var maybeAttrName = attrs[i];

            if (maybeAttrName === name) {
              return i;
            } else if (maybeAttrName === 3
            /* Bindings */
            || maybeAttrName === 6
            /* I18n */
            ) {
                bindingsMode = true;
              } else if (maybeAttrName === 1
            /* Classes */
            || maybeAttrName === 2
            /* Styles */
            ) {
                var value = attrs[++i]; // We should skip classes here because we have a separate mechanism for
                // matching classes in projection mode.

                while (typeof value === 'string') {
                  value = attrs[++i];
                }

                continue;
              } else if (maybeAttrName === 4
            /* Template */
            ) {
                // We do not care about Template attributes in this scenario.
                break;
              } else if (maybeAttrName === 0
            /* NamespaceURI */
            ) {
                // Skip the whole namespaced attribute and value. This is by design.
                i += 4;
                continue;
              } // In binding mode there are only names, rather than name-value pairs.


            i += bindingsMode ? 1 : 2;
          } // We did not match the attribute


          return -1;
        } else {
          return matchTemplateAttribute(attrs, name);
        }
      }

      function isNodeMatchingSelectorList(tNode, selector) {
        var isProjectionMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        for (var i = 0; i < selector.length; i++) {
          if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {
            return true;
          }
        }

        return false;
      }

      function getProjectAsAttrValue(tNode) {
        var nodeAttrs = tNode.attrs;

        if (nodeAttrs != null) {
          var ngProjectAsAttrIdx = nodeAttrs.indexOf(5
          /* ProjectAs */
          ); // only check for ngProjectAs in attribute names, don't accidentally match attribute's value
          // (attribute names are stored at even indexes)

          if ((ngProjectAsAttrIdx & 1) === 0) {
            return nodeAttrs[ngProjectAsAttrIdx + 1];
          }
        }

        return null;
      }

      function getNameOnlyMarkerIndex(nodeAttrs) {
        for (var i = 0; i < nodeAttrs.length; i++) {
          var nodeAttr = nodeAttrs[i];

          if (isNameOnlyAttributeMarker(nodeAttr)) {
            return i;
          }
        }

        return nodeAttrs.length;
      }

      function matchTemplateAttribute(attrs, name) {
        var i = attrs.indexOf(4
        /* Template */
        );

        if (i > -1) {
          i++;

          while (i < attrs.length) {
            var attr = attrs[i]; // Return in case we checked all template attrs and are switching to the next section in the
            // attrs array (that starts with a number that represents an attribute marker).

            if (typeof attr === 'number') return -1;
            if (attr === name) return i;
            i++;
          }
        }

        return -1;
      }
      /**
       * Checks whether a selector is inside a CssSelectorList
       * @param selector Selector to be checked.
       * @param list List in which to look for the selector.
       */


      function isSelectorInSelectorList(selector, list) {
        selectorListLoop: for (var i = 0; i < list.length; i++) {
          var currentSelectorInList = list[i];

          if (selector.length !== currentSelectorInList.length) {
            continue;
          }

          for (var j = 0; j < selector.length; j++) {
            if (selector[j] !== currentSelectorInList[j]) {
              continue selectorListLoop;
            }
          }

          return true;
        }

        return false;
      }

      function maybeWrapInNotSelector(isNegativeMode, chunk) {
        return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;
      }

      function stringifyCSSSelector(selector) {
        var result = selector[0];
        var i = 1;
        var mode = 2
        /* ATTRIBUTE */
        ;
        var currentChunk = '';
        var isNegativeMode = false;

        while (i < selector.length) {
          var valueOrMarker = selector[i];

          if (typeof valueOrMarker === 'string') {
            if (mode & 2
            /* ATTRIBUTE */
            ) {
                var attrValue = selector[++i];
                currentChunk += '[' + valueOrMarker + (attrValue.length > 0 ? '="' + attrValue + '"' : '') + ']';
              } else if (mode & 8
            /* CLASS */
            ) {
                currentChunk += '.' + valueOrMarker;
              } else if (mode & 4
            /* ELEMENT */
            ) {
                currentChunk += ' ' + valueOrMarker;
              }
          } else {
            //
            // Append current chunk to the final result in case we come across SelectorFlag, which
            // indicates that the previous section of a selector is over. We need to accumulate content
            // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.
            // ```
            //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']
            // ```
            // should be transformed to `.classA :not(.classB .classC)`.
            //
            // Note: for negative selector part, we accumulate content between flags until we find the
            // next negative flag. This is needed to support a case where `:not()` rule contains more than
            // one chunk, e.g. the following selector:
            // ```
            //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']
            // ```
            // should be stringified to `:not(p.foo) :not(.bar)`
            //
            if (currentChunk !== '' && !isPositive(valueOrMarker)) {
              result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
              currentChunk = '';
            }

            mode = valueOrMarker; // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative
            // mode is maintained for remaining chunks of a selector.

            isNegativeMode = isNegativeMode || !isPositive(mode);
          }

          i++;
        }

        if (currentChunk !== '') {
          result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
        }

        return result;
      }
      /**
       * Generates string representation of CSS selector in parsed form.
       *
       * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing
       * additional parsing at runtime (for example, for directive matching). However in some cases (for
       * example, while bootstrapping a component), a string version of the selector is required to query
       * for the host element on the page. This function takes the parsed form of a selector and returns
       * its string representation.
       *
       * @param selectorList selector in parsed form
       * @returns string representation of a given selector
       */


      function stringifyCSSSelectorList(selectorList) {
        return selectorList.map(stringifyCSSSelector).join(',');
      }
      /**
       * Extracts attributes and classes information from a given CSS selector.
       *
       * This function is used while creating a component dynamically. In this case, the host element
       * (that is created dynamically) should contain attributes and classes specified in component's CSS
       * selector.
       *
       * @param selector CSS selector in parsed form (in a form of array)
       * @returns object with `attrs` and `classes` fields that contain extracted information
       */


      function extractAttrsAndClassesFromSelector(selector) {
        var attrs = [];
        var classes = [];
        var i = 1;
        var mode = 2
        /* ATTRIBUTE */
        ;

        while (i < selector.length) {
          var valueOrMarker = selector[i];

          if (typeof valueOrMarker === 'string') {
            if (mode === 2
            /* ATTRIBUTE */
            ) {
                if (valueOrMarker !== '') {
                  attrs.push(valueOrMarker, selector[++i]);
                }
              } else if (mode === 8
            /* CLASS */
            ) {
                classes.push(valueOrMarker);
              }
          } else {
            // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative
            // mode is maintained for remaining chunks of a selector. Since attributes and classes are
            // extracted only for "positive" part of the selector, we can stop here.
            if (!isPositive(mode)) break;
            mode = valueOrMarker;
          }

          i++;
        }

        return {
          attrs: attrs,
          classes: classes
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** A special value which designates that a value has not changed. */


      var NO_CHANGE = typeof ngDevMode === 'undefined' || ngDevMode ? {
        __brand__: 'NO_CHANGE'
      } : {};
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Advances to an element for later binding instructions.
       *
       * Used in conjunction with instructions like {@link property} to act on elements with specified
       * indices, for example those created with {@link element} or {@link elementStart}.
       *
       * ```ts
       * (rf: RenderFlags, ctx: any) => {
       *   if (rf & 1) {
       *     text(0, 'Hello');
       *     text(1, 'Goodbye')
       *     element(2, 'div');
       *   }
       *   if (rf & 2) {
       *     advance(2); // Advance twice to the <div>.
       *     property('title', 'test');
       *   }
       *  }
       * ```
       * @param delta Number of elements to advance forwards by.
       *
       * @codeGenApi
       */

      function _ɵɵadvance(delta) {
        ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');
        selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, isInCheckNoChangesMode());
      }

      function selectIndexInternal(tView, lView, index, checkNoChangesMode) {
        ngDevMode && assertIndexInDeclRange(lView, index); // Flush the initial hooks for elements in the view that have been added up to this point.
        // PERF WARNING: do NOT extract this to a separate function without running benchmarks

        if (!checkNoChangesMode) {
          var hooksInitPhaseCompleted = (lView[FLAGS] & 3
          /* InitPhaseStateMask */
          ) === 3
          /* InitPhaseCompleted */
          ;

          if (hooksInitPhaseCompleted) {
            var preOrderCheckHooks = tView.preOrderCheckHooks;

            if (preOrderCheckHooks !== null) {
              executeCheckHooks(lView, preOrderCheckHooks, index);
            }
          } else {
            var preOrderHooks = tView.preOrderHooks;

            if (preOrderHooks !== null) {
              executeInitAndCheckHooks(lView, preOrderHooks, 0
              /* OnInitHooksToBeRun */
              , index);
            }
          }
        } // We must set the selected index *after* running the hooks, because hooks may have side-effects
        // that cause other template functions to run, thus updating the selected index, which is global
        // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index
        // will be altered by the time we leave the `ɵɵadvance` instruction.


        setSelectedIndex(index);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function toTStylingRange(prev, next) {
        ngDevMode && assertNumberInRange(prev, 0, 32767
        /* UNSIGNED_MASK */
        );
        ngDevMode && assertNumberInRange(next, 0, 32767
        /* UNSIGNED_MASK */
        );
        return prev << 17
        /* PREV_SHIFT */
        | next << 2
        /* NEXT_SHIFT */
        ;
      }

      function getTStylingRangePrev(tStylingRange) {
        ngDevMode && assertNumber(tStylingRange, 'expected number');
        return tStylingRange >> 17
        /* PREV_SHIFT */
        & 32767
        /* UNSIGNED_MASK */
        ;
      }

      function getTStylingRangePrevDuplicate(tStylingRange) {
        ngDevMode && assertNumber(tStylingRange, 'expected number');
        return (tStylingRange & 2
        /* PREV_DUPLICATE */
        ) == 2
        /* PREV_DUPLICATE */
        ;
      }

      function setTStylingRangePrev(tStylingRange, previous) {
        ngDevMode && assertNumber(tStylingRange, 'expected number');
        ngDevMode && assertNumberInRange(previous, 0, 32767
        /* UNSIGNED_MASK */
        );
        return tStylingRange & ~4294836224
        /* PREV_MASK */
        | previous << 17
        /* PREV_SHIFT */
        ;
      }

      function setTStylingRangePrevDuplicate(tStylingRange) {
        ngDevMode && assertNumber(tStylingRange, 'expected number');
        return tStylingRange | 2
        /* PREV_DUPLICATE */
        ;
      }

      function getTStylingRangeNext(tStylingRange) {
        ngDevMode && assertNumber(tStylingRange, 'expected number');
        return (tStylingRange & 131068
        /* NEXT_MASK */
        ) >> 2
        /* NEXT_SHIFT */
        ;
      }

      function setTStylingRangeNext(tStylingRange, next) {
        ngDevMode && assertNumber(tStylingRange, 'expected number');
        ngDevMode && assertNumberInRange(next, 0, 32767
        /* UNSIGNED_MASK */
        );
        return tStylingRange & ~131068
        /* NEXT_MASK */
        | //
        next << 2
        /* NEXT_SHIFT */
        ;
      }

      function getTStylingRangeNextDuplicate(tStylingRange) {
        ngDevMode && assertNumber(tStylingRange, 'expected number');
        return (tStylingRange & 1
        /* NEXT_DUPLICATE */
        ) === 1
        /* NEXT_DUPLICATE */
        ;
      }

      function setTStylingRangeNextDuplicate(tStylingRange) {
        ngDevMode && assertNumber(tStylingRange, 'expected number');
        return tStylingRange | 1
        /* NEXT_DUPLICATE */
        ;
      }

      function getTStylingRangeTail(tStylingRange) {
        ngDevMode && assertNumber(tStylingRange, 'expected number');
        var next = getTStylingRangeNext(tStylingRange);
        return next === 0 ? getTStylingRangePrev(tStylingRange) : next;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Patch a `debug` property on top of the existing object.
       *
       * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`
       *
       * @param obj Object to patch
       * @param debug Value to patch
       */


      function attachDebugObject(obj, debug) {
        if (ngDevMode) {
          Object.defineProperty(obj, 'debug', {
            value: debug,
            enumerable: false
          });
        } else {
          throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');
        }
      }
      /**
       * Patch a `debug` property getter on top of the existing object.
       *
       * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`
       *
       * @param obj Object to patch
       * @param debugGetter Getter returning a value to patch
       */


      function attachDebugGetter(obj, debugGetter) {
        if (ngDevMode) {
          Object.defineProperty(obj, 'debug', {
            get: debugGetter,
            enumerable: false
          });
        } else {
          throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var NG_DEV_MODE = (typeof ngDevMode === 'undefined' || !!ngDevMode) && initNgDevMode();
      /*
       * This file contains conditionally attached classes which provide human readable (debug) level
       * information for `LView`, `LContainer` and other internal data structures. These data structures
       * are stored internally as array which makes it very difficult during debugging to reason about the
       * current state of the system.
       *
       * Patching the array with extra property does change the array's hidden class' but it does not
       * change the cost of access, therefore this patching should not have significant if any impact in
       * `ngDevMode` mode. (see: https://jsperf.com/array-vs-monkey-patch-array)
       *
       * So instead of seeing:
       * ```
       * Array(30) [Object, 659, null, …]
       * ```
       *
       * You get to see:
       * ```
       * LViewDebug {
       *   views: [...],
       *   flags: {attached: true, ...}
       *   nodes: [
       *     {html: '<div id="123">', ..., nodes: [
       *       {html: '<span>', ..., nodes: null}
       *     ]}
       *   ]
       * }
       * ```
       */

      var LVIEW_COMPONENT_CACHE;
      var LVIEW_EMBEDDED_CACHE;
      var LVIEW_ROOT;
      /**
       * This function clones a blueprint and creates LView.
       *
       * Simple slice will keep the same type, and we need it to be LView
       */

      function cloneToLViewFromTViewBlueprint(tView) {
        var debugTView = tView;
        var lView = getLViewToClone(debugTView.type, tView.template && tView.template.name);
        return lView.concat(tView.blueprint);
      }

      function getLViewToClone(type, name) {
        switch (type) {
          case 0
          /* Root */
          :
            if (LVIEW_ROOT === undefined) LVIEW_ROOT = new (createNamedArrayType('LRootView'))();
            return LVIEW_ROOT;

          case 1
          /* Component */
          :
            if (LVIEW_COMPONENT_CACHE === undefined) LVIEW_COMPONENT_CACHE = new Map();
            var componentArray = LVIEW_COMPONENT_CACHE.get(name);

            if (componentArray === undefined) {
              componentArray = new (createNamedArrayType('LComponentView' + nameSuffix(name)))();
              LVIEW_COMPONENT_CACHE.set(name, componentArray);
            }

            return componentArray;

          case 2
          /* Embedded */
          :
            if (LVIEW_EMBEDDED_CACHE === undefined) LVIEW_EMBEDDED_CACHE = new Map();
            var embeddedArray = LVIEW_EMBEDDED_CACHE.get(name);

            if (embeddedArray === undefined) {
              embeddedArray = new (createNamedArrayType('LEmbeddedView' + nameSuffix(name)))();
              LVIEW_EMBEDDED_CACHE.set(name, embeddedArray);
            }

            return embeddedArray;
        }
      }

      function nameSuffix(text) {
        if (text == null) return '';
        var index = text.lastIndexOf('_Template');
        return '_' + (index === -1 ? text : text.substr(0, index));
      }
      /**
       * This class is a debug version of Object literal so that we can have constructor name show up
       * in
       * debug tools in ngDevMode.
       */


      var TViewConstructor = /*#__PURE__*/function () {
        function TView(type, blueprint, template, queries, viewQuery, declTNode, data, bindingStartIndex, expandoStartIndex, hostBindingOpCodes, firstCreatePass, firstUpdatePass, staticViewQueries, staticContentQueries, preOrderHooks, preOrderCheckHooks, contentHooks, contentCheckHooks, viewHooks, viewCheckHooks, destroyHooks, cleanup, contentQueries, components, directiveRegistry, pipeRegistry, firstChild, schemas, consts, incompleteFirstPass, _decls, _vars) {
          _classCallCheck2(this, TView);

          this.type = type;
          this.blueprint = blueprint;
          this.template = template;
          this.queries = queries;
          this.viewQuery = viewQuery;
          this.declTNode = declTNode;
          this.data = data;
          this.bindingStartIndex = bindingStartIndex;
          this.expandoStartIndex = expandoStartIndex;
          this.hostBindingOpCodes = hostBindingOpCodes;
          this.firstCreatePass = firstCreatePass;
          this.firstUpdatePass = firstUpdatePass;
          this.staticViewQueries = staticViewQueries;
          this.staticContentQueries = staticContentQueries;
          this.preOrderHooks = preOrderHooks;
          this.preOrderCheckHooks = preOrderCheckHooks;
          this.contentHooks = contentHooks;
          this.contentCheckHooks = contentCheckHooks;
          this.viewHooks = viewHooks;
          this.viewCheckHooks = viewCheckHooks;
          this.destroyHooks = destroyHooks;
          this.cleanup = cleanup;
          this.contentQueries = contentQueries;
          this.components = components;
          this.directiveRegistry = directiveRegistry;
          this.pipeRegistry = pipeRegistry;
          this.firstChild = firstChild;
          this.schemas = schemas;
          this.consts = consts;
          this.incompleteFirstPass = incompleteFirstPass;
          this._decls = _decls;
          this._vars = _vars;
        }

        _createClass2(TView, [{
          key: "template_",
          get: function get() {
            var buf = [];
            processTNodeChildren(this.firstChild, buf);
            return buf.join('');
          }
        }, {
          key: "type_",
          get: function get() {
            return TViewTypeAsString[this.type] || "TViewType.?".concat(this.type, "?");
          }
        }]);

        return TView;
      }();

      var TNode = /*#__PURE__*/function () {
        function TNode(tView_, //
        type, //
        index, //
        insertBeforeIndex, //
        injectorIndex, //
        directiveStart, //
        directiveEnd, //
        directiveStylingLast, //
        propertyBindings, //
        flags, //
        providerIndexes, //
        value, //
        attrs, //
        mergedAttrs, //
        localNames, //
        initialInputs, //
        inputs, //
        outputs, //
        tViews, //
        next, //
        projectionNext, //
        child, //
        parent, //
        projection, //
        styles, //
        stylesWithoutHost, //
        residualStyles, //
        classes, //
        classesWithoutHost, //
        residualClasses, //
        classBindings, //
        styleBindings) {
          _classCallCheck2(this, TNode);

          this.tView_ = tView_;
          this.type = type;
          this.index = index;
          this.insertBeforeIndex = insertBeforeIndex;
          this.injectorIndex = injectorIndex;
          this.directiveStart = directiveStart;
          this.directiveEnd = directiveEnd;
          this.directiveStylingLast = directiveStylingLast;
          this.propertyBindings = propertyBindings;
          this.flags = flags;
          this.providerIndexes = providerIndexes;
          this.value = value;
          this.attrs = attrs;
          this.mergedAttrs = mergedAttrs;
          this.localNames = localNames;
          this.initialInputs = initialInputs;
          this.inputs = inputs;
          this.outputs = outputs;
          this.tViews = tViews;
          this.next = next;
          this.projectionNext = projectionNext;
          this.child = child;
          this.parent = parent;
          this.projection = projection;
          this.styles = styles;
          this.stylesWithoutHost = stylesWithoutHost;
          this.residualStyles = residualStyles;
          this.classes = classes;
          this.classesWithoutHost = classesWithoutHost;
          this.residualClasses = residualClasses;
          this.classBindings = classBindings;
          this.styleBindings = styleBindings;
        }
        /**
         * Return a human debug version of the set of `NodeInjector`s which will be consulted when
         * resolving tokens from this `TNode`.
         *
         * When debugging applications, it is often difficult to determine which `NodeInjector`s will be
         * consulted. This method shows a list of `DebugNode`s representing the `TNode`s which will be
         * consulted in order when resolving a token starting at this `TNode`.
         *
         * The original data is stored in `LView` and `TView` with a lot of offset indexes, and so it is
         * difficult to reason about.
         *
         * @param lView The `LView` instance for this `TNode`.
         */


        _createClass2(TNode, [{
          key: "debugNodeInjectorPath",
          value: function debugNodeInjectorPath(lView) {
            var path = [];
            var injectorIndex = getInjectorIndex(this, lView);

            if (injectorIndex === -1) {
              // Looks like the current `TNode` does not have `NodeInjector` associated with it => look for
              // parent NodeInjector.
              var parentLocation = getParentInjectorLocation(this, lView);

              if (parentLocation !== NO_PARENT_INJECTOR) {
                // We found a parent, so start searching from the parent location.
                injectorIndex = getParentInjectorIndex(parentLocation);
                lView = getParentInjectorView(parentLocation, lView);
              } else {// No parents have been found, so there are no `NodeInjector`s to consult.
              }
            }

            while (injectorIndex !== -1) {
              ngDevMode && assertNodeInjector(lView, injectorIndex);
              var tNode = lView[TVIEW].data[injectorIndex + 8
              /* TNODE */
              ];
              path.push(buildDebugNode(tNode, lView));
              var _parentLocation = lView[injectorIndex + 8
              /* PARENT */
              ];

              if (_parentLocation === NO_PARENT_INJECTOR) {
                injectorIndex = -1;
              } else {
                injectorIndex = getParentInjectorIndex(_parentLocation);
                lView = getParentInjectorView(_parentLocation, lView);
              }
            }

            return path;
          }
        }, {
          key: "type_",
          get: function get() {
            return toTNodeTypeAsString(this.type) || "TNodeType.?".concat(this.type, "?");
          }
        }, {
          key: "flags_",
          get: function get() {
            var flags = [];
            if (this.flags & 16
            /* hasClassInput */
            ) flags.push('TNodeFlags.hasClassInput');
            if (this.flags & 8
            /* hasContentQuery */
            ) flags.push('TNodeFlags.hasContentQuery');
            if (this.flags & 32
            /* hasStyleInput */
            ) flags.push('TNodeFlags.hasStyleInput');
            if (this.flags & 128
            /* hasHostBindings */
            ) flags.push('TNodeFlags.hasHostBindings');
            if (this.flags & 2
            /* isComponentHost */
            ) flags.push('TNodeFlags.isComponentHost');
            if (this.flags & 1
            /* isDirectiveHost */
            ) flags.push('TNodeFlags.isDirectiveHost');
            if (this.flags & 64
            /* isDetached */
            ) flags.push('TNodeFlags.isDetached');
            if (this.flags & 4
            /* isProjected */
            ) flags.push('TNodeFlags.isProjected');
            return flags.join('|');
          }
        }, {
          key: "template_",
          get: function get() {
            if (this.type & 1
            /* Text */
            ) return this.value;
            var buf = [];
            var tagName = typeof this.value === 'string' && this.value || this.type_;
            buf.push('<', tagName);

            if (this.flags) {
              buf.push(' ', this.flags_);
            }

            if (this.attrs) {
              for (var i = 0; i < this.attrs.length;) {
                var attrName = this.attrs[i++];

                if (typeof attrName == 'number') {
                  break;
                }

                var attrValue = this.attrs[i++];
                buf.push(' ', attrName, '="', attrValue, '"');
              }
            }

            buf.push('>');
            processTNodeChildren(this.child, buf);
            buf.push('</', tagName, '>');
            return buf.join('');
          }
        }, {
          key: "styleBindings_",
          get: function get() {
            return toDebugStyleBinding(this, false);
          }
        }, {
          key: "classBindings_",
          get: function get() {
            return toDebugStyleBinding(this, true);
          }
        }, {
          key: "providerIndexStart_",
          get: function get() {
            return this.providerIndexes & 1048575
            /* ProvidersStartIndexMask */
            ;
          }
        }, {
          key: "providerIndexEnd_",
          get: function get() {
            return this.providerIndexStart_ + (this.providerIndexes >>> 20
            /* CptViewProvidersCountShift */
            );
          }
        }]);

        return TNode;
      }();

      var TNodeDebug = TNode;

      function toDebugStyleBinding(tNode, isClassBased) {
        var tData = tNode.tView_.data;
        var bindings = [];
        var range = isClassBased ? tNode.classBindings : tNode.styleBindings;
        var prev = getTStylingRangePrev(range);
        var next = getTStylingRangeNext(range);
        var isTemplate = next !== 0;
        var cursor = isTemplate ? next : prev;

        while (cursor !== 0) {
          var itemKey = tData[cursor];
          var itemRange = tData[cursor + 1];
          bindings.unshift({
            key: itemKey,
            index: cursor,
            isTemplate: isTemplate,
            prevDuplicate: getTStylingRangePrevDuplicate(itemRange),
            nextDuplicate: getTStylingRangeNextDuplicate(itemRange),
            nextIndex: getTStylingRangeNext(itemRange),
            prevIndex: getTStylingRangePrev(itemRange)
          });
          if (cursor === prev) isTemplate = false;
          cursor = getTStylingRangePrev(itemRange);
        }

        bindings.push((isClassBased ? tNode.residualClasses : tNode.residualStyles) || null);
        return bindings;
      }

      function processTNodeChildren(tNode, buf) {
        while (tNode) {
          buf.push(tNode.template_);
          tNode = tNode.next;
        }
      }

      var TViewData = NG_DEV_MODE && createNamedArrayType('TViewData') || null;
      var TVIEWDATA_EMPTY; // can't initialize here or it will not be tree shaken, because
      // `LView` constructor could have side-effects.

      /**
       * This function clones a blueprint and creates TData.
       *
       * Simple slice will keep the same type, and we need it to be TData
       */

      function cloneToTViewData(list) {
        if (TVIEWDATA_EMPTY === undefined) TVIEWDATA_EMPTY = new TViewData();
        return TVIEWDATA_EMPTY.concat(list);
      }

      var LViewBlueprint = NG_DEV_MODE && createNamedArrayType('LViewBlueprint') || null;
      var MatchesArray = NG_DEV_MODE && createNamedArrayType('MatchesArray') || null;
      var TViewComponents = NG_DEV_MODE && createNamedArrayType('TViewComponents') || null;
      var TNodeLocalNames = NG_DEV_MODE && createNamedArrayType('TNodeLocalNames') || null;
      var TNodeInitialInputs = NG_DEV_MODE && createNamedArrayType('TNodeInitialInputs') || null;
      var TNodeInitialData = NG_DEV_MODE && createNamedArrayType('TNodeInitialData') || null;
      var LCleanup = NG_DEV_MODE && createNamedArrayType('LCleanup') || null;
      var TCleanup = NG_DEV_MODE && createNamedArrayType('TCleanup') || null;

      function attachLViewDebug(lView) {
        attachDebugObject(lView, new LViewDebug(lView));
      }

      function attachLContainerDebug(lContainer) {
        attachDebugObject(lContainer, new LContainerDebug(lContainer));
      }

      function toDebug(obj) {
        if (obj) {
          var debug = obj.debug;
          assertDefined(debug, 'Object does not have a debug representation.');
          return debug;
        } else {
          return obj;
        }
      }
      /**
       * Use this method to unwrap a native element in `LView` and convert it into HTML for easier
       * reading.
       *
       * @param value possibly wrapped native DOM node.
       * @param includeChildren If `true` then the serialized HTML form will include child elements
       * (same
       * as `outerHTML`). If `false` then the serialized HTML form will only contain the element
       * itself
       * (will not serialize child elements).
       */


      function toHtml(value) {
        var includeChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var node = unwrapRNode(value);

        if (node) {
          switch (node.nodeType) {
            case Node.TEXT_NODE:
              return node.textContent;

            case Node.COMMENT_NODE:
              return "<!--".concat(node.textContent, "-->");

            case Node.ELEMENT_NODE:
              var outerHTML = node.outerHTML;

              if (includeChildren) {
                return outerHTML;
              } else {
                var innerHTML = '>' + node.innerHTML + '<';
                return outerHTML.split(innerHTML)[0] + '>';
              }

          }
        }

        return null;
      }

      var LViewDebug = /*#__PURE__*/function () {
        function LViewDebug(_raw_lView) {
          _classCallCheck2(this, LViewDebug);

          this._raw_lView = _raw_lView;
        }
        /**
         * Flags associated with the `LView` unpacked into a more readable state.
         */


        _createClass2(LViewDebug, [{
          key: "flags",
          get: function get() {
            var flags = this._raw_lView[FLAGS];
            return {
              __raw__flags__: flags,
              initPhaseState: flags & 3
              /* InitPhaseStateMask */
              ,
              creationMode: !!(flags & 4
              /* CreationMode */
              ),
              firstViewPass: !!(flags & 8
              /* FirstLViewPass */
              ),
              checkAlways: !!(flags & 16
              /* CheckAlways */
              ),
              dirty: !!(flags & 64
              /* Dirty */
              ),
              attached: !!(flags & 128
              /* Attached */
              ),
              destroyed: !!(flags & 256
              /* Destroyed */
              ),
              isRoot: !!(flags & 512
              /* IsRoot */
              ),
              indexWithinInitPhase: flags >> 11
              /* IndexWithinInitPhaseShift */

            };
          }
        }, {
          key: "parent",
          get: function get() {
            return toDebug(this._raw_lView[PARENT]);
          }
        }, {
          key: "hostHTML",
          get: function get() {
            return toHtml(this._raw_lView[HOST], true);
          }
        }, {
          key: "html",
          get: function get() {
            return (this.nodes || []).map(mapToHTML).join('');
          }
        }, {
          key: "context",
          get: function get() {
            return this._raw_lView[CONTEXT];
          }
          /**
           * The tree of nodes associated with the current `LView`. The nodes have been normalized into
           * a tree structure with relevant details pulled out for readability.
           */

        }, {
          key: "nodes",
          get: function get() {
            var lView = this._raw_lView;
            var tNode = lView[TVIEW].firstChild;
            return toDebugNodes(tNode, lView);
          }
        }, {
          key: "template",
          get: function get() {
            return this.tView.template_;
          }
        }, {
          key: "tView",
          get: function get() {
            return this._raw_lView[TVIEW];
          }
        }, {
          key: "cleanup",
          get: function get() {
            return this._raw_lView[CLEANUP];
          }
        }, {
          key: "injector",
          get: function get() {
            return this._raw_lView[INJECTOR];
          }
        }, {
          key: "rendererFactory",
          get: function get() {
            return this._raw_lView[RENDERER_FACTORY];
          }
        }, {
          key: "renderer",
          get: function get() {
            return this._raw_lView[RENDERER];
          }
        }, {
          key: "sanitizer",
          get: function get() {
            return this._raw_lView[SANITIZER];
          }
        }, {
          key: "childHead",
          get: function get() {
            return toDebug(this._raw_lView[CHILD_HEAD]);
          }
        }, {
          key: "next",
          get: function get() {
            return toDebug(this._raw_lView[NEXT]);
          }
        }, {
          key: "childTail",
          get: function get() {
            return toDebug(this._raw_lView[CHILD_TAIL]);
          }
        }, {
          key: "declarationView",
          get: function get() {
            return toDebug(this._raw_lView[DECLARATION_VIEW]);
          }
        }, {
          key: "queries",
          get: function get() {
            return this._raw_lView[QUERIES];
          }
        }, {
          key: "tHost",
          get: function get() {
            return this._raw_lView[T_HOST];
          }
        }, {
          key: "decls",
          get: function get() {
            return toLViewRange(this.tView, this._raw_lView, HEADER_OFFSET, this.tView.bindingStartIndex);
          }
        }, {
          key: "vars",
          get: function get() {
            return toLViewRange(this.tView, this._raw_lView, this.tView.bindingStartIndex, this.tView.expandoStartIndex);
          }
        }, {
          key: "expando",
          get: function get() {
            return toLViewRange(this.tView, this._raw_lView, this.tView.expandoStartIndex, this._raw_lView.length);
          }
          /**
           * Normalized view of child views (and containers) attached at this location.
           */

        }, {
          key: "childViews",
          get: function get() {
            var childViews = [];
            var child = this.childHead;

            while (child) {
              childViews.push(child);
              child = child.next;
            }

            return childViews;
          }
        }]);

        return LViewDebug;
      }();

      function mapToHTML(node) {
        if (node.type === 'ElementContainer') {
          return (node.children || []).map(mapToHTML).join('');
        } else if (node.type === 'IcuContainer') {
          throw new Error('Not implemented');
        } else {
          return toHtml(node["native"], true) || '';
        }
      }

      function toLViewRange(tView, lView, start, end) {
        var content = [];

        for (var index = start; index < end; index++) {
          content.push({
            index: index,
            t: tView.data[index],
            l: lView[index]
          });
        }

        return {
          start: start,
          end: end,
          length: end - start,
          content: content
        };
      }
      /**
       * Turns a flat list of nodes into a tree by walking the associated `TNode` tree.
       *
       * @param tNode
       * @param lView
       */


      function toDebugNodes(tNode, lView) {
        if (tNode) {
          var debugNodes = [];
          var tNodeCursor = tNode;

          while (tNodeCursor) {
            debugNodes.push(buildDebugNode(tNodeCursor, lView));
            tNodeCursor = tNodeCursor.next;
          }

          return debugNodes;
        } else {
          return [];
        }
      }

      function buildDebugNode(tNode, lView) {
        var rawValue = lView[tNode.index];

        var _native6 = unwrapRNode(rawValue);

        var factories = [];
        var instances = [];
        var tView = lView[TVIEW];

        for (var i = tNode.directiveStart; i < tNode.directiveEnd; i++) {
          var def = tView.data[i];
          factories.push(def.type);
          instances.push(lView[i]);
        }

        return {
          html: toHtml(_native6),
          type: toTNodeTypeAsString(tNode.type),
          tNode: tNode,
          "native": _native6,
          children: toDebugNodes(tNode.child, lView),
          factories: factories,
          instances: instances,
          injector: buildNodeInjectorDebug(tNode, tView, lView),

          get injectorResolutionPath() {
            return tNode.debugNodeInjectorPath(lView);
          }

        };
      }

      function buildNodeInjectorDebug(tNode, tView, lView) {
        var viewProviders = [];

        for (var i = tNode.providerIndexStart_; i < tNode.providerIndexEnd_; i++) {
          viewProviders.push(tView.data[i]);
        }

        var providers = [];

        for (var _i11 = tNode.providerIndexEnd_; _i11 < tNode.directiveEnd; _i11++) {
          providers.push(tView.data[_i11]);
        }

        var nodeInjectorDebug = {
          bloom: toBloom(lView, tNode.injectorIndex),
          cumulativeBloom: toBloom(tView.data, tNode.injectorIndex),
          providers: providers,
          viewProviders: viewProviders,
          parentInjectorIndex: lView[tNode.providerIndexStart_ - 1]
        };
        return nodeInjectorDebug;
      }
      /**
       * Convert a number at `idx` location in `array` into binary representation.
       *
       * @param array
       * @param idx
       */


      function binary(array, idx) {
        var value = array[idx]; // If not a number we print 8 `?` to retain alignment but let user know that it was called on
        // wrong type.

        if (typeof value !== 'number') return '????????'; // We prefix 0s so that we have constant length number

        var text = '00000000' + value.toString(2);
        return text.substring(text.length - 8);
      }
      /**
       * Convert a bloom filter at location `idx` in `array` into binary representation.
       *
       * @param array
       * @param idx
       */


      function toBloom(array, idx) {
        if (idx < 0) {
          return 'NO_NODE_INJECTOR';
        }

        return "".concat(binary(array, idx + 7), "_").concat(binary(array, idx + 6), "_").concat(binary(array, idx + 5), "_").concat(binary(array, idx + 4), "_").concat(binary(array, idx + 3), "_").concat(binary(array, idx + 2), "_").concat(binary(array, idx + 1), "_").concat(binary(array, idx + 0));
      }

      var LContainerDebug = /*#__PURE__*/function () {
        function LContainerDebug(_raw_lContainer) {
          _classCallCheck2(this, LContainerDebug);

          this._raw_lContainer = _raw_lContainer;
        }

        _createClass2(LContainerDebug, [{
          key: "hasTransplantedViews",
          get: function get() {
            return this._raw_lContainer[HAS_TRANSPLANTED_VIEWS];
          }
        }, {
          key: "views",
          get: function get() {
            return this._raw_lContainer.slice(CONTAINER_HEADER_OFFSET).map(toDebug);
          }
        }, {
          key: "parent",
          get: function get() {
            return toDebug(this._raw_lContainer[PARENT]);
          }
        }, {
          key: "movedViews",
          get: function get() {
            return this._raw_lContainer[MOVED_VIEWS];
          }
        }, {
          key: "host",
          get: function get() {
            return this._raw_lContainer[HOST];
          }
        }, {
          key: "native",
          get: function get() {
            return this._raw_lContainer[NATIVE];
          }
        }, {
          key: "next",
          get: function get() {
            return toDebug(this._raw_lContainer[NEXT]);
          }
        }]);

        return LContainerDebug;
      }();

      var ɵ0$5 = function ɵ0$5() {
        return Promise.resolve(null);
      };
      /**
       * A permanent marker promise which signifies that the current CD tree is
       * clean.
       */


      var _CLEAN_PROMISE = ɵ0$5();
      /**
       * Invoke `HostBindingsFunction`s for view.
       *
       * This methods executes `TView.hostBindingOpCodes`. It is used to execute the
       * `HostBindingsFunction`s associated with the current `LView`.
       *
       * @param tView Current `TView`.
       * @param lView Current `LView`.
       */


      function processHostBindingOpCodes(tView, lView) {
        var hostBindingOpCodes = tView.hostBindingOpCodes;
        if (hostBindingOpCodes === null) return;

        try {
          for (var i = 0; i < hostBindingOpCodes.length; i++) {
            var opCode = hostBindingOpCodes[i];

            if (opCode < 0) {
              // Negative numbers are element indexes.
              setSelectedIndex(~opCode);
            } else {
              // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.
              var directiveIdx = opCode;
              var bindingRootIndx = hostBindingOpCodes[++i];
              var hostBindingFn = hostBindingOpCodes[++i];
              setBindingRootForHostBindings(bindingRootIndx, directiveIdx);
              var context = lView[directiveIdx];
              hostBindingFn(2
              /* Update */
              , context);
            }
          }
        } finally {
          setSelectedIndex(-1);
        }
      }
      /** Refreshes all content queries declared by directives in a given view */


      function refreshContentQueries(tView, lView) {
        var contentQueries = tView.contentQueries;

        if (contentQueries !== null) {
          for (var i = 0; i < contentQueries.length; i += 2) {
            var queryStartIdx = contentQueries[i];
            var directiveDefIdx = contentQueries[i + 1];

            if (directiveDefIdx !== -1) {
              var _directiveDef2 = tView.data[directiveDefIdx];
              ngDevMode && assertDefined(_directiveDef2, 'DirectiveDef not found.');
              ngDevMode && assertDefined(_directiveDef2.contentQueries, 'contentQueries function should be defined');
              setCurrentQueryIndex(queryStartIdx);

              _directiveDef2.contentQueries(2
              /* Update */
              , lView[directiveDefIdx], directiveDefIdx);
            }
          }
        }
      }
      /** Refreshes child components in the current view (update mode). */


      function refreshChildComponents(hostLView, components) {
        for (var i = 0; i < components.length; i++) {
          refreshComponent(hostLView, components[i]);
        }
      }
      /** Renders child components in the current view (creation mode). */


      function renderChildComponents(hostLView, components) {
        for (var i = 0; i < components.length; i++) {
          renderComponent(hostLView, components[i]);
        }
      }

      function createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector) {
        var lView = ngDevMode ? cloneToLViewFromTViewBlueprint(tView) : tView.blueprint.slice();
        lView[HOST] = host;
        lView[FLAGS] = flags | 4
        /* CreationMode */
        | 128
        /* Attached */
        | 8
        /* FirstLViewPass */
        ;
        resetPreOrderHookFlags(lView);
        ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);
        lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;
        lView[CONTEXT] = context;
        lView[RENDERER_FACTORY] = rendererFactory || parentLView && parentLView[RENDERER_FACTORY];
        ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');
        lView[RENDERER] = renderer || parentLView && parentLView[RENDERER];
        ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');
        lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null;
        lView[INJECTOR] = injector || parentLView && parentLView[INJECTOR] || null;
        lView[T_HOST] = tHostNode;
        ngDevMode && assertEqual(tView.type == 2
        /* Embedded */
        ? parentLView !== null : true, true, 'Embedded views must have parentLView');
        lView[DECLARATION_COMPONENT_VIEW] = tView.type == 2
        /* Embedded */
        ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;
        ngDevMode && attachLViewDebug(lView);
        return lView;
      }

      function getOrCreateTNode(tView, index, type, name, attrs) {
        ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
        // `view_engine_compatibility` for additional context.
        assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\'t be in the LView header.'); // Keep this function short, so that the VM will inline it.

        ngDevMode && assertPureTNodeType(type);
        var tNode = tView.data[index];

        if (tNode === null) {
          tNode = createTNodeAtIndex(tView, index, type, name, attrs);

          if (isInI18nBlock()) {
            // If we are in i18n block then all elements should be pre declared through `Placeholder`
            // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.
            // If the `TNode` was not pre-declared than it means it was not mentioned which means it was
            // removed, so we mark it as detached.
            tNode.flags |= 64
            /* isDetached */
            ;
          }
        } else if (tNode.type & 64
        /* Placeholder */
        ) {
            tNode.type = type;
            tNode.value = name;
            tNode.attrs = attrs;
            var parent = getCurrentParentTNode();
            tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;
            ngDevMode && assertTNodeForTView(tNode, tView);
            ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');
          }

        setCurrentTNode(tNode, true);
        return tNode;
      }

      function createTNodeAtIndex(tView, index, type, name, attrs) {
        var currentTNode = getCurrentTNodePlaceholderOk();
        var isParent = isCurrentTNodeParent();
        var parent = isParent ? currentTNode : currentTNode && currentTNode.parent; // Parents cannot cross component boundaries because components will be used in multiple places.

        var tNode = tView.data[index] = createTNode(tView, parent, type, index, name, attrs); // Assign a pointer to the first child node of a given view. The first node is not always the one
        // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has
        // the index 1 or more, so we can't just check node index.

        if (tView.firstChild === null) {
          tView.firstChild = tNode;
        }

        if (currentTNode !== null) {
          if (isParent) {
            // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?
            if (currentTNode.child == null && tNode.parent !== null) {
              // We are in the same view, which means we are adding content node to the parent view.
              currentTNode.child = tNode;
            }
          } else {
            if (currentTNode.next === null) {
              // In the case of i18n the `currentTNode` may already be linked, in which case we don't want
              // to break the links which i18n created.
              currentTNode.next = tNode;
            }
          }
        }

        return tNode;
      }
      /**
       * When elements are created dynamically after a view blueprint is created (e.g. through
       * i18nApply()), we need to adjust the blueprint for future
       * template passes.
       *
       * @param tView `TView` associated with `LView`
       * @param lView The `LView` containing the blueprint to adjust
       * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0
       * @param initialValue Initial value to store in blueprint
       */


      function allocExpando(tView, lView, numSlotsToAlloc, initialValue) {
        if (numSlotsToAlloc === 0) return -1;

        if (ngDevMode) {
          assertFirstCreatePass(tView);
          assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');
          assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');
          assertEqual(tView.data.length, tView.blueprint.length, 'Expecting Blueprint to be same size as TView');
          assertFirstUpdatePass(tView);
        }

        var allocIdx = lView.length;

        for (var i = 0; i < numSlotsToAlloc; i++) {
          lView.push(initialValue);
          tView.blueprint.push(initialValue);
          tView.data.push(null);
        }

        return allocIdx;
      } //////////////////////////
      //// Render
      //////////////////////////

      /**
       * Processes a view in the creation mode. This includes a number of steps in a specific order:
       * - creating view query functions (if any);
       * - executing a template function in the creation mode;
       * - updating static queries (if any);
       * - creating child components defined in a given view.
       */


      function renderView(tView, lView, context) {
        ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');
        enterView(lView);

        try {
          var viewQuery = tView.viewQuery;

          if (viewQuery !== null) {
            executeViewQueryFn(1
            /* Create */
            , viewQuery, context);
          } // Execute a template associated with this view, if it exists. A template function might not be
          // defined for the root component views.


          var templateFn = tView.template;

          if (templateFn !== null) {
            executeTemplate(tView, lView, templateFn, 1
            /* Create */
            , context);
          } // This needs to be set before children are processed to support recursive components.
          // This must be set to false immediately after the first creation run because in an
          // ngFor loop, all the views will be created together before update mode runs and turns
          // off firstCreatePass. If we don't set it here, instances will perform directive
          // matching, etc again and again.


          if (tView.firstCreatePass) {
            tView.firstCreatePass = false;
          } // We resolve content queries specifically marked as `static` in creation mode. Dynamic
          // content queries are resolved during change detection (i.e. update mode), after embedded
          // views are refreshed (see block above).


          if (tView.staticContentQueries) {
            refreshContentQueries(tView, lView);
          } // We must materialize query results before child components are processed
          // in case a child component has projected a container. The LContainer needs
          // to exist so the embedded views are properly attached by the container.


          if (tView.staticViewQueries) {
            executeViewQueryFn(2
            /* Update */
            , tView.viewQuery, context);
          } // Render child component views.


          var components = tView.components;

          if (components !== null) {
            renderChildComponents(lView, components);
          }
        } catch (error) {
          // If we didn't manage to get past the first template pass due to
          // an error, mark the view as corrupted so we can try to recover.
          if (tView.firstCreatePass) {
            tView.incompleteFirstPass = true;
          }

          throw error;
        } finally {
          lView[FLAGS] &= ~4
          /* CreationMode */
          ;
          leaveView();
        }
      }
      /**
       * Processes a view in update mode. This includes a number of steps in a specific order:
       * - executing a template function in update mode;
       * - executing hooks;
       * - refreshing queries;
       * - setting host bindings;
       * - refreshing child (embedded and component) views.
       */


      function refreshView(tView, lView, templateFn, context) {
        ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');
        var flags = lView[FLAGS];
        if ((flags & 256
        /* Destroyed */
        ) === 256
        /* Destroyed */
        ) return;
        enterView(lView); // Check no changes mode is a dev only mode used to verify that bindings have not changed
        // since they were assigned. We do not want to execute lifecycle hooks in that mode.

        var isInCheckNoChangesPass = isInCheckNoChangesMode();

        try {
          resetPreOrderHookFlags(lView);
          setBindingIndex(tView.bindingStartIndex);

          if (templateFn !== null) {
            executeTemplate(tView, lView, templateFn, 2
            /* Update */
            , context);
          }

          var hooksInitPhaseCompleted = (flags & 3
          /* InitPhaseStateMask */
          ) === 3
          /* InitPhaseCompleted */
          ; // execute pre-order hooks (OnInit, OnChanges, DoCheck)
          // PERF WARNING: do NOT extract this to a separate function without running benchmarks

          if (!isInCheckNoChangesPass) {
            if (hooksInitPhaseCompleted) {
              var preOrderCheckHooks = tView.preOrderCheckHooks;

              if (preOrderCheckHooks !== null) {
                executeCheckHooks(lView, preOrderCheckHooks, null);
              }
            } else {
              var preOrderHooks = tView.preOrderHooks;

              if (preOrderHooks !== null) {
                executeInitAndCheckHooks(lView, preOrderHooks, 0
                /* OnInitHooksToBeRun */
                , null);
              }

              incrementInitPhaseFlags(lView, 0
              /* OnInitHooksToBeRun */
              );
            }
          } // First mark transplanted views that are declared in this lView as needing a refresh at their
          // insertion points. This is needed to avoid the situation where the template is defined in this
          // `LView` but its declaration appears after the insertion component.


          markTransplantedViewsForRefresh(lView);
          refreshEmbeddedViews(lView); // Content query results must be refreshed before content hooks are called.

          if (tView.contentQueries !== null) {
            refreshContentQueries(tView, lView);
          } // execute content hooks (AfterContentInit, AfterContentChecked)
          // PERF WARNING: do NOT extract this to a separate function without running benchmarks


          if (!isInCheckNoChangesPass) {
            if (hooksInitPhaseCompleted) {
              var contentCheckHooks = tView.contentCheckHooks;

              if (contentCheckHooks !== null) {
                executeCheckHooks(lView, contentCheckHooks);
              }
            } else {
              var contentHooks = tView.contentHooks;

              if (contentHooks !== null) {
                executeInitAndCheckHooks(lView, contentHooks, 1
                /* AfterContentInitHooksToBeRun */
                );
              }

              incrementInitPhaseFlags(lView, 1
              /* AfterContentInitHooksToBeRun */
              );
            }
          }

          processHostBindingOpCodes(tView, lView); // Refresh child component views.

          var components = tView.components;

          if (components !== null) {
            refreshChildComponents(lView, components);
          } // View queries must execute after refreshing child components because a template in this view
          // could be inserted in a child component. If the view query executes before child component
          // refresh, the template might not yet be inserted.


          var viewQuery = tView.viewQuery;

          if (viewQuery !== null) {
            executeViewQueryFn(2
            /* Update */
            , viewQuery, context);
          } // execute view hooks (AfterViewInit, AfterViewChecked)
          // PERF WARNING: do NOT extract this to a separate function without running benchmarks


          if (!isInCheckNoChangesPass) {
            if (hooksInitPhaseCompleted) {
              var viewCheckHooks = tView.viewCheckHooks;

              if (viewCheckHooks !== null) {
                executeCheckHooks(lView, viewCheckHooks);
              }
            } else {
              var viewHooks = tView.viewHooks;

              if (viewHooks !== null) {
                executeInitAndCheckHooks(lView, viewHooks, 2
                /* AfterViewInitHooksToBeRun */
                );
              }

              incrementInitPhaseFlags(lView, 2
              /* AfterViewInitHooksToBeRun */
              );
            }
          }

          if (tView.firstUpdatePass === true) {
            // We need to make sure that we only flip the flag on successful `refreshView` only
            // Don't do this in `finally` block.
            // If we did this in `finally` block then an exception could block the execution of styling
            // instructions which in turn would be unable to insert themselves into the styling linked
            // list. The result of this would be that if the exception would not be throw on subsequent CD
            // the styling would be unable to process it data and reflect to the DOM.
            tView.firstUpdatePass = false;
          } // Do not reset the dirty state when running in check no changes mode. We don't want components
          // to behave differently depending on whether check no changes is enabled or not. For example:
          // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to
          // refresh a `NgClass` binding should work. If we would reset the dirty state in the check
          // no changes cycle, the component would be not be dirty for the next update pass. This would
          // be different in production mode where the component dirty state is not reset.


          if (!isInCheckNoChangesPass) {
            lView[FLAGS] &= ~(64
            /* Dirty */
            | 8
            /* FirstLViewPass */
            );
          }

          if (lView[FLAGS] & 1024
          /* RefreshTransplantedView */
          ) {
              lView[FLAGS] &= ~1024
              /* RefreshTransplantedView */
              ;
              updateTransplantedViewCount(lView[PARENT], -1);
            }
        } finally {
          leaveView();
        }
      }

      function renderComponentOrTemplate(tView, lView, templateFn, context) {
        var rendererFactory = lView[RENDERER_FACTORY];
        var normalExecutionPath = !isInCheckNoChangesMode();
        var creationModeIsActive = isCreationMode(lView);

        try {
          if (normalExecutionPath && !creationModeIsActive && rendererFactory.begin) {
            rendererFactory.begin();
          }

          if (creationModeIsActive) {
            renderView(tView, lView, context);
          }

          refreshView(tView, lView, templateFn, context);
        } finally {
          if (normalExecutionPath && !creationModeIsActive && rendererFactory.end) {
            rendererFactory.end();
          }
        }
      }

      function executeTemplate(tView, lView, templateFn, rf, context) {
        var prevSelectedIndex = getSelectedIndex();
        var isUpdatePhase = rf & 2
        /* Update */
        ;

        try {
          setSelectedIndex(-1);

          if (isUpdatePhase && lView.length > HEADER_OFFSET) {
            // When we're updating, inherently select 0 so we don't
            // have to generate that instruction for most update blocks.
            selectIndexInternal(tView, lView, HEADER_OFFSET, isInCheckNoChangesMode());
          }

          var preHookType = isUpdatePhase ? 2
          /* TemplateUpdateStart */
          : 0
          /* TemplateCreateStart */
          ;
          profiler(preHookType, context);
          templateFn(rf, context);
        } finally {
          setSelectedIndex(prevSelectedIndex);
          var postHookType = isUpdatePhase ? 3
          /* TemplateUpdateEnd */
          : 1
          /* TemplateCreateEnd */
          ;
          profiler(postHookType, context);
        }
      } //////////////////////////
      //// Element
      //////////////////////////


      function executeContentQueries(tView, tNode, lView) {
        if (isContentQueryHost(tNode)) {
          var start = tNode.directiveStart;
          var end = tNode.directiveEnd;

          for (var directiveIndex = start; directiveIndex < end; directiveIndex++) {
            var def = tView.data[directiveIndex];

            if (def.contentQueries) {
              def.contentQueries(1
              /* Create */
              , lView[directiveIndex], directiveIndex);
            }
          }
        }
      }
      /**
       * Creates directive instances.
       */


      function createDirectivesInstances(tView, lView, tNode) {
        if (!getBindingsEnabled()) return;
        instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));

        if ((tNode.flags & 128
        /* hasHostBindings */
        ) === 128
        /* hasHostBindings */
        ) {
            invokeDirectivesHostBindings(tView, lView, tNode);
          }
      }
      /**
       * Takes a list of local names and indices and pushes the resolved local variable values
       * to LView in the same order as they are loaded in the template with load().
       */


      function saveResolvedLocalsInData(viewData, tNode) {
        var localRefExtractor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getNativeByTNode;
        var localNames = tNode.localNames;

        if (localNames !== null) {
          var localIndex = tNode.index + 1;

          for (var i = 0; i < localNames.length; i += 2) {
            var index = localNames[i + 1];
            var value = index === -1 ? localRefExtractor(tNode, viewData) : viewData[index];
            viewData[localIndex++] = value;
          }
        }
      }
      /**
       * Gets TView from a template function or creates a new TView
       * if it doesn't already exist.
       *
       * @param def ComponentDef
       * @returns TView
       */


      function getOrCreateTComponentView(def) {
        var tView = def.tView; // Create a TView if there isn't one, or recreate it if the first create pass didn't
        // complete successfully since we can't know for sure whether it's in a usable shape.

        if (tView === null || tView.incompleteFirstPass) {
          // Declaration node here is null since this function is called when we dynamically create a
          // component and hence there is no declaration.
          var declTNode = null;
          return def.tView = createTView(1
          /* Component */
          , declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts);
        }

        return tView;
      }
      /**
       * Creates a TView instance
       *
       * @param type Type of `TView`.
       * @param declTNode Declaration location of this `TView`.
       * @param templateFn Template function
       * @param decls The number of nodes, local refs, and pipes in this template
       * @param directives Registry of directives for this view
       * @param pipes Registry of pipes for this view
       * @param viewQuery View queries for this view
       * @param schemas Schemas for this view
       * @param consts Constants for this view
       */


      function createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory) {
        ngDevMode && ngDevMode.tView++;
        var bindingStartIndex = HEADER_OFFSET + decls; // This length does not yet contain host bindings from child directives because at this point,
        // we don't know which directives are active on this template. As soon as a directive is matched
        // that has a host binding, we will update the blueprint with that def's hostVars count.

        var initialViewLength = bindingStartIndex + vars;
        var blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);
        var consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;
        var tView = blueprint[TVIEW] = ngDevMode ? new TViewConstructor(type, // type: TViewType,
        blueprint, // blueprint: LView,
        templateFn, // template: ComponentTemplate<{}>|null,
        null, // queries: TQueries|null
        viewQuery, // viewQuery: ViewQueriesFunction<{}>|null,
        declTNode, // declTNode: TNode|null,
        cloneToTViewData(blueprint).fill(null, bindingStartIndex), // data: TData,
        bindingStartIndex, // bindingStartIndex: number,
        initialViewLength, // expandoStartIndex: number,
        null, // hostBindingOpCodes: HostBindingOpCodes,
        true, // firstCreatePass: boolean,
        true, // firstUpdatePass: boolean,
        false, // staticViewQueries: boolean,
        false, // staticContentQueries: boolean,
        null, // preOrderHooks: HookData|null,
        null, // preOrderCheckHooks: HookData|null,
        null, // contentHooks: HookData|null,
        null, // contentCheckHooks: HookData|null,
        null, // viewHooks: HookData|null,
        null, // viewCheckHooks: HookData|null,
        null, // destroyHooks: DestroyHookData|null,
        null, // cleanup: any[]|null,
        null, // contentQueries: number[]|null,
        null, // components: number[]|null,
        typeof directives === 'function' ? //
        directives() : //
        directives, // directiveRegistry: DirectiveDefList|null,
        typeof pipes === 'function' ? pipes() : pipes, // pipeRegistry: PipeDefList|null,
        null, // firstChild: TNode|null,
        schemas, // schemas: SchemaMetadata[]|null,
        consts, // consts: TConstants|null
        false, // incompleteFirstPass: boolean
        decls, // ngDevMode only: decls
        vars) : {
          type: type,
          blueprint: blueprint,
          template: templateFn,
          queries: null,
          viewQuery: viewQuery,
          declTNode: declTNode,
          data: blueprint.slice().fill(null, bindingStartIndex),
          bindingStartIndex: bindingStartIndex,
          expandoStartIndex: initialViewLength,
          hostBindingOpCodes: null,
          firstCreatePass: true,
          firstUpdatePass: true,
          staticViewQueries: false,
          staticContentQueries: false,
          preOrderHooks: null,
          preOrderCheckHooks: null,
          contentHooks: null,
          contentCheckHooks: null,
          viewHooks: null,
          viewCheckHooks: null,
          destroyHooks: null,
          cleanup: null,
          contentQueries: null,
          components: null,
          directiveRegistry: typeof directives === 'function' ? directives() : directives,
          pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,
          firstChild: null,
          schemas: schemas,
          consts: consts,
          incompleteFirstPass: false
        };

        if (ngDevMode) {
          // For performance reasons it is important that the tView retains the same shape during runtime.
          // (To make sure that all of the code is monomorphic.) For this reason we seal the object to
          // prevent class transitions.
          Object.seal(tView);
        }

        return tView;
      }

      function createViewBlueprint(bindingStartIndex, initialViewLength) {
        var blueprint = ngDevMode ? new LViewBlueprint() : [];

        for (var i = 0; i < initialViewLength; i++) {
          blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);
        }

        return blueprint;
      }

      function createError(text, token) {
        return new Error("Renderer: ".concat(text, " [").concat(stringifyForError(token), "]"));
      }

      function assertHostNodeExists(rElement, elementOrSelector) {
        if (!rElement) {
          if (typeof elementOrSelector === 'string') {
            throw createError('Host node with selector not found:', elementOrSelector);
          } else {
            throw createError('Host node is required:', elementOrSelector);
          }
        }
      }
      /**
       * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.
       *
       * @param rendererFactory Factory function to create renderer instance.
       * @param elementOrSelector Render element or CSS selector to locate the element.
       * @param encapsulation View Encapsulation defined for component that requests host element.
       */


      function locateHostElement(renderer, elementOrSelector, encapsulation) {
        if (isProceduralRenderer(renderer)) {
          // When using native Shadow DOM, do not clear host element to allow native slot projection
          var preserveContent = encapsulation === _ViewEncapsulation.ShadowDom;
          return renderer.selectRootElement(elementOrSelector, preserveContent);
        }

        var rElement = typeof elementOrSelector === 'string' ? renderer.querySelector(elementOrSelector) : elementOrSelector;
        ngDevMode && assertHostNodeExists(rElement, elementOrSelector); // Always clear host element's content when Renderer3 is in use. For procedural renderer case we
        // make it depend on whether ShadowDom encapsulation is used (in which case the content should be
        // preserved to allow native slot projection). ShadowDom encapsulation requires procedural
        // renderer, and procedural renderer case is handled above.

        rElement.textContent = '';
        return rElement;
      }
      /**
       * Saves context for this cleanup function in LView.cleanupInstances.
       *
       * On the first template pass, saves in TView:
       * - Cleanup function
       * - Index of context we just saved in LView.cleanupInstances
       *
       * This function can also be used to store instance specific cleanup fns. In that case the `context`
       * is `null` and the function is store in `LView` (rather than it `TView`).
       */


      function storeCleanupWithContext(tView, lView, context, cleanupFn) {
        var lCleanup = getOrCreateLViewCleanup(lView);

        if (context === null) {
          // If context is null that this is instance specific callback. These callbacks can only be
          // inserted after template shared instances. For this reason in ngDevMode we freeze the TView.
          if (ngDevMode) {
            Object.freeze(getOrCreateTViewCleanup(tView));
          }

          lCleanup.push(cleanupFn);
        } else {
          lCleanup.push(context);

          if (tView.firstCreatePass) {
            getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);
          }
        }
      }

      function createTNode(tView, tParent, type, index, value, attrs) {
        ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
        // `view_engine_compatibility` for additional context.
        assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\'t be in the LView header.');
        ngDevMode && assertNotSame(attrs, undefined, '\'undefined\' is not valid value for \'attrs\'');
        ngDevMode && ngDevMode.tNode++;
        ngDevMode && tParent && assertTNodeForTView(tParent, tView);
        var injectorIndex = tParent ? tParent.injectorIndex : -1;
        var tNode = ngDevMode ? new TNodeDebug(tView, // tView_: TView
        type, // type: TNodeType
        index, // index: number
        null, // insertBeforeIndex: null|-1|number|number[]
        injectorIndex, // injectorIndex: number
        -1, // directiveStart: number
        -1, // directiveEnd: number
        -1, // directiveStylingLast: number
        null, // propertyBindings: number[]|null
        0, // flags: TNodeFlags
        0, // providerIndexes: TNodeProviderIndexes
        value, // value: string|null
        attrs, // attrs: (string|AttributeMarker|(string|SelectorFlags)[])[]|null
        null, // mergedAttrs
        null, // localNames: (string|number)[]|null
        undefined, // initialInputs: (string[]|null)[]|null|undefined
        null, // inputs: PropertyAliases|null
        null, // outputs: PropertyAliases|null
        null, // tViews: ITView|ITView[]|null
        null, // next: ITNode|null
        null, // projectionNext: ITNode|null
        null, // child: ITNode|null
        tParent, // parent: TElementNode|TContainerNode|null
        null, // projection: number|(ITNode|RNode[])[]|null
        null, // styles: string|null
        null, // stylesWithoutHost: string|null
        undefined, // residualStyles: string|null
        null, // classes: string|null
        null, // classesWithoutHost: string|null
        undefined, // residualClasses: string|null
        0, // classBindings: TStylingRange;
        0) : {
          type: type,
          index: index,
          insertBeforeIndex: null,
          injectorIndex: injectorIndex,
          directiveStart: -1,
          directiveEnd: -1,
          directiveStylingLast: -1,
          propertyBindings: null,
          flags: 0,
          providerIndexes: 0,
          value: value,
          attrs: attrs,
          mergedAttrs: null,
          localNames: null,
          initialInputs: undefined,
          inputs: null,
          outputs: null,
          tViews: null,
          next: null,
          projectionNext: null,
          child: null,
          parent: tParent,
          projection: null,
          styles: null,
          stylesWithoutHost: null,
          residualStyles: undefined,
          classes: null,
          classesWithoutHost: null,
          residualClasses: undefined,
          classBindings: 0,
          styleBindings: 0
        };

        if (ngDevMode) {
          // For performance reasons it is important that the tNode retains the same shape during runtime.
          // (To make sure that all of the code is monomorphic.) For this reason we seal the object to
          // prevent class transitions.
          Object.seal(tNode);
        }

        return tNode;
      }

      function generatePropertyAliases(inputAliasMap, directiveDefIdx, propStore) {
        for (var publicName in inputAliasMap) {
          if (inputAliasMap.hasOwnProperty(publicName)) {
            propStore = propStore === null ? {} : propStore;
            var internalName = inputAliasMap[publicName];

            if (propStore.hasOwnProperty(publicName)) {
              propStore[publicName].push(directiveDefIdx, internalName);
            } else {
              propStore[publicName] = [directiveDefIdx, internalName];
            }
          }
        }

        return propStore;
      }
      /**
       * Initializes data structures required to work with directive inputs and outputs.
       * Initialization is done for all directives matched on a given TNode.
       */


      function initializeInputAndOutputAliases(tView, tNode) {
        ngDevMode && assertFirstCreatePass(tView);
        var start = tNode.directiveStart;
        var end = tNode.directiveEnd;
        var tViewData = tView.data;
        var tNodeAttrs = tNode.attrs;
        var inputsFromAttrs = ngDevMode ? new TNodeInitialInputs() : [];
        var inputsStore = null;
        var outputsStore = null;

        for (var i = start; i < end; i++) {
          var _directiveDef3 = tViewData[i];
          var directiveInputs = _directiveDef3.inputs; // Do not use unbound attributes as inputs to structural directives, since structural
          // directive inputs can only be set using microsyntax (e.g. `<div *dir="exp">`).
          // TODO(FW-1930): microsyntax expressions may also contain unbound/static attributes, which
          // should be set for inline templates.

          var initialInputs = tNodeAttrs !== null && !isInlineTemplate(tNode) ? generateInitialInputs(directiveInputs, tNodeAttrs) : null;
          inputsFromAttrs.push(initialInputs);
          inputsStore = generatePropertyAliases(directiveInputs, i, inputsStore);
          outputsStore = generatePropertyAliases(_directiveDef3.outputs, i, outputsStore);
        }

        if (inputsStore !== null) {
          if (inputsStore.hasOwnProperty('class')) {
            tNode.flags |= 16
            /* hasClassInput */
            ;
          }

          if (inputsStore.hasOwnProperty('style')) {
            tNode.flags |= 32
            /* hasStyleInput */
            ;
          }
        }

        tNode.initialInputs = inputsFromAttrs;
        tNode.inputs = inputsStore;
        tNode.outputs = outputsStore;
      }
      /**
       * Mapping between attributes names that don't correspond to their element property names.
       *
       * Performance note: this function is written as a series of if checks (instead of, say, a property
       * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of
       * mapping property names. Do NOT change without benchmarking.
       *
       * Note: this mapping has to be kept in sync with the equally named mapping in the template
       * type-checking machinery of ngtsc.
       */


      function mapPropName(name) {
        if (name === 'class') return 'className';
        if (name === 'for') return 'htmlFor';
        if (name === 'formaction') return 'formAction';
        if (name === 'innerHtml') return 'innerHTML';
        if (name === 'readonly') return 'readOnly';
        if (name === 'tabindex') return 'tabIndex';
        return name;
      }

      function elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, nativeOnly) {
        ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
        var element = getNativeByTNode(tNode, lView);
        var inputData = tNode.inputs;
        var dataValue;

        if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {
          setInputsForProperty(tView, lView, dataValue, propName, value);
          if (isComponentHost(tNode)) markDirtyIfOnPush(lView, tNode.index);

          if (ngDevMode) {
            setNgReflectProperties(lView, element, tNode.type, dataValue, value);
          }
        } else if (tNode.type & 3
        /* AnyRNode */
        ) {
            propName = mapPropName(propName);

            if (ngDevMode) {
              validateAgainstEventProperties(propName);

              if (!validateProperty(tView, element, propName, tNode)) {
                // Return here since we only log warnings for unknown properties.
                logUnknownPropertyError(propName, tNode);
                return;
              }

              ngDevMode.rendererSetProperty++;
            } // It is assumed that the sanitizer is only added when the compiler determines that the
            // property is risky, so sanitization can be done without further checks.


            value = sanitizer != null ? sanitizer(value, tNode.value || '', propName) : value;

            if (isProceduralRenderer(renderer)) {
              renderer.setProperty(element, propName, value);
            } else if (!isAnimationProp(propName)) {
              element.setProperty ? element.setProperty(propName, value) : element[propName] = value;
            }
          } else if (tNode.type & 12
        /* AnyContainer */
        ) {
            // If the node is a container and the property didn't
            // match any of the inputs or schemas we should throw.
            if (ngDevMode && !matchingSchemas(tView, tNode.value)) {
              logUnknownPropertyError(propName, tNode);
            }
          }
      }
      /** If node is an OnPush component, marks its LView dirty. */


      function markDirtyIfOnPush(lView, viewIndex) {
        ngDevMode && assertLView(lView);
        var childComponentLView = getComponentLViewByIndex(viewIndex, lView);

        if (!(childComponentLView[FLAGS] & 16
        /* CheckAlways */
        )) {
          childComponentLView[FLAGS] |= 64
          /* Dirty */
          ;
        }
      }

      function setNgReflectProperty(lView, element, type, attrName, value) {
        var renderer = lView[RENDERER];
        attrName = normalizeDebugBindingName(attrName);
        var debugValue = normalizeDebugBindingValue(value);

        if (type & 3
        /* AnyRNode */
        ) {
            if (value == null) {
              isProceduralRenderer(renderer) ? renderer.removeAttribute(element, attrName) : element.removeAttribute(attrName);
            } else {
              isProceduralRenderer(renderer) ? renderer.setAttribute(element, attrName, debugValue) : element.setAttribute(attrName, debugValue);
            }
          } else {
          var textContent = escapeCommentText("bindings=".concat(JSON.stringify(_defineProperty({}, attrName, debugValue), null, 2)));

          if (isProceduralRenderer(renderer)) {
            renderer.setValue(element, textContent);
          } else {
            element.textContent = textContent;
          }
        }
      }

      function setNgReflectProperties(lView, element, type, dataValue, value) {
        if (type & (3
        /* AnyRNode */
        | 4
        /* Container */
        )) {
          /**
           * dataValue is an array containing runtime input or output names for the directives:
           * i+0: directive instance index
           * i+1: privateName
           *
           * e.g. [0, 'change', 'change-minified']
           * we want to set the reflected property with the privateName: dataValue[i+1]
           */
          for (var i = 0; i < dataValue.length; i += 2) {
            setNgReflectProperty(lView, element, type, dataValue[i + 1], value);
          }
        }
      }

      function validateProperty(tView, element, propName, tNode) {
        // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT
        // mode where this check happens at compile time. In JIT mode, `schemas` is always present and
        // defined as an array (as an empty array in case `schemas` field is not defined) and we should
        // execute the check below.
        if (tView.schemas === null) return true; // The property is considered valid if the element matches the schema, it exists on the element
        // or it is synthetic, and we are in a browser context (web worker nodes should be skipped).

        if (matchingSchemas(tView, tNode.value) || propName in element || isAnimationProp(propName)) {
          return true;
        } // Note: `typeof Node` returns 'function' in most browsers, but on IE it is 'object' so we
        // need to account for both here, while being careful for `typeof null` also returning 'object'.


        return typeof Node === 'undefined' || Node === null || !(element instanceof Node);
      }

      function matchingSchemas(tView, tagName) {
        var schemas = tView.schemas;

        if (schemas !== null) {
          for (var i = 0; i < schemas.length; i++) {
            var schema = schemas[i];

            if (schema === _NO_ERRORS_SCHEMA || schema === _CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {
              return true;
            }
          }
        }

        return false;
      }
      /**
       * Logs an error that a property is not supported on an element.
       * @param propName Name of the invalid property.
       * @param tNode Node on which we encountered the property.
       */


      function logUnknownPropertyError(propName, tNode) {
        var message = "Can't bind to '".concat(propName, "' since it isn't a known property of '").concat(tNode.value, "'.");
        console.error(formatRuntimeError("303"
        /* UNKNOWN_BINDING */
        , message));
      }
      /**
       * Instantiate a root component.
       */


      function instantiateRootComponent(tView, lView, def) {
        var rootTNode = getCurrentTNode();

        if (tView.firstCreatePass) {
          if (def.providersResolver) def.providersResolver(def);
          var directiveIndex = allocExpando(tView, lView, 1, null);
          ngDevMode && assertEqual(directiveIndex, rootTNode.directiveStart, 'Because this is a root component the allocated expando should match the TNode component.');
          configureViewWithDirective(tView, rootTNode, lView, directiveIndex, def);
        }

        var directive = getNodeInjectable(lView, tView, rootTNode.directiveStart, rootTNode);
        attachPatchData(directive, lView);

        var _native7 = getNativeByTNode(rootTNode, lView);

        if (_native7) {
          attachPatchData(_native7, lView);
        }

        return directive;
      }
      /**
       * Resolve the matched directives on a node.
       */


      function resolveDirectives(tView, lView, tNode, localRefs) {
        // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in
        // tsickle.
        ngDevMode && assertFirstCreatePass(tView);
        var hasDirectives = false;

        if (getBindingsEnabled()) {
          var directiveDefs = findDirectiveDefMatches(tView, lView, tNode);
          var exportsMap = localRefs === null ? null : {
            '': -1
          };

          if (directiveDefs !== null) {
            hasDirectives = true;
            initTNodeFlags(tNode, tView.data.length, directiveDefs.length); // When the same token is provided by several directives on the same node, some rules apply in
            // the viewEngine:
            // - viewProviders have priority over providers
            // - the last directive in NgModule.declarations has priority over the previous one
            // So to match these rules, the order in which providers are added in the arrays is very
            // important.

            for (var i = 0; i < directiveDefs.length; i++) {
              var def = directiveDefs[i];
              if (def.providersResolver) def.providersResolver(def);
            }

            var preOrderHooksFound = false;
            var preOrderCheckHooksFound = false;
            var directiveIdx = allocExpando(tView, lView, directiveDefs.length, null);
            ngDevMode && assertSame(directiveIdx, tNode.directiveStart, 'TNode.directiveStart should point to just allocated space');

            for (var _i12 = 0; _i12 < directiveDefs.length; _i12++) {
              var _def2 = directiveDefs[_i12]; // Merge the attrs in the order of matches. This assumes that the first directive is the
              // component itself, so that the component has the least priority.

              tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, _def2.hostAttrs);
              configureViewWithDirective(tView, tNode, lView, directiveIdx, _def2);
              saveNameToExportMap(directiveIdx, _def2, exportsMap);
              if (_def2.contentQueries !== null) tNode.flags |= 8
              /* hasContentQuery */
              ;
              if (_def2.hostBindings !== null || _def2.hostAttrs !== null || _def2.hostVars !== 0) tNode.flags |= 128
              /* hasHostBindings */
              ;
              var lifeCycleHooks = _def2.type.prototype; // Only push a node index into the preOrderHooks array if this is the first
              // pre-order hook found on this node.

              if (!preOrderHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {
                // We will push the actual hook function into this array later during dir instantiation.
                // We cannot do it now because we must ensure hooks are registered in the same
                // order that directives are created (i.e. injection order).
                (tView.preOrderHooks || (tView.preOrderHooks = [])).push(tNode.index);
                preOrderHooksFound = true;
              }

              if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {
                (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(tNode.index);
                preOrderCheckHooksFound = true;
              }

              directiveIdx++;
            }

            initializeInputAndOutputAliases(tView, tNode);
          }

          if (exportsMap) cacheMatchingLocalNames(tNode, localRefs, exportsMap);
        } // Merge the template attrs last so that they have the highest priority.


        tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);
        return hasDirectives;
      }
      /**
       * Add `hostBindings` to the `TView.hostBindingOpCodes`.
       *
       * @param tView `TView` to which the `hostBindings` should be added.
       * @param tNode `TNode` the element which contains the directive
       * @param lView `LView` current `LView`
       * @param directiveIdx Directive index in view.
       * @param directiveVarsIdx Where will the directive's vars be stored
       * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.
       */


      function registerHostBindingOpCodes(tView, tNode, lView, directiveIdx, directiveVarsIdx, def) {
        ngDevMode && assertFirstCreatePass(tView);
        var hostBindings = def.hostBindings;

        if (hostBindings) {
          var hostBindingOpCodes = tView.hostBindingOpCodes;

          if (hostBindingOpCodes === null) {
            hostBindingOpCodes = tView.hostBindingOpCodes = [];
          }

          var elementIndx = ~tNode.index;

          if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {
            // Conditionally add select element so that we are more efficient in execution.
            // NOTE: this is strictly not necessary and it trades code size for runtime perf.
            // (We could just always add it.)
            hostBindingOpCodes.push(elementIndx);
          }

          hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);
        }
      }
      /**
       * Returns the last selected element index in the `HostBindingOpCodes`
       *
       * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only
       * if it changes. This method returns the last index (or '0' if not found.)
       *
       * Selected element index are only the ones which are negative.
       */


      function lastSelectedElementIdx(hostBindingOpCodes) {
        var i = hostBindingOpCodes.length;

        while (i > 0) {
          var value = hostBindingOpCodes[--i];

          if (typeof value === 'number' && value < 0) {
            return value;
          }
        }

        return 0;
      }
      /**
       * Instantiate all the directives that were previously resolved on the current node.
       */


      function instantiateAllDirectives(tView, lView, tNode, _native8) {
        var start = tNode.directiveStart;
        var end = tNode.directiveEnd;

        if (!tView.firstCreatePass) {
          getOrCreateNodeInjectorForNode(tNode, lView);
        }

        attachPatchData(_native8, lView);
        var initialInputs = tNode.initialInputs;

        for (var i = start; i < end; i++) {
          var def = tView.data[i];
          var isComponent = isComponentDef(def);

          if (isComponent) {
            ngDevMode && assertTNodeType(tNode, 3
            /* AnyRNode */
            );
            addComponentLogic(lView, tNode, def);
          }

          var directive = getNodeInjectable(lView, tView, i, tNode);
          attachPatchData(directive, lView);

          if (initialInputs !== null) {
            setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);
          }

          if (isComponent) {
            var componentView = getComponentLViewByIndex(tNode.index, lView);
            componentView[CONTEXT] = directive;
          }
        }
      }

      function invokeDirectivesHostBindings(tView, lView, tNode) {
        var start = tNode.directiveStart;
        var end = tNode.directiveEnd;
        var firstCreatePass = tView.firstCreatePass;
        var elementIndex = tNode.index;
        var currentDirectiveIndex = getCurrentDirectiveIndex();

        try {
          setSelectedIndex(elementIndex);

          for (var dirIndex = start; dirIndex < end; dirIndex++) {
            var def = tView.data[dirIndex];
            var directive = lView[dirIndex];
            setCurrentDirectiveIndex(dirIndex);

            if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {
              invokeHostBindingsInCreationMode(def, directive);
            }
          }
        } finally {
          setSelectedIndex(-1);
          setCurrentDirectiveIndex(currentDirectiveIndex);
        }
      }
      /**
       * Invoke the host bindings in creation mode.
       *
       * @param def `DirectiveDef` which may contain the `hostBindings` function.
       * @param directive Instance of directive.
       */


      function invokeHostBindingsInCreationMode(def, directive) {
        if (def.hostBindings !== null) {
          def.hostBindings(1
          /* Create */
          , directive);
        }
      }
      /**
       * Matches the current node against all available selectors.
       * If a component is matched (at most one), it is returned in first position in the array.
       */


      function findDirectiveDefMatches(tView, viewData, tNode) {
        ngDevMode && assertFirstCreatePass(tView);
        ngDevMode && assertTNodeType(tNode, 3
        /* AnyRNode */
        | 12
        /* AnyContainer */
        );
        var registry = tView.directiveRegistry;
        var matches = null;

        if (registry) {
          for (var i = 0; i < registry.length; i++) {
            var def = registry[i];

            if (isNodeMatchingSelectorList(tNode, def.selectors,
            /* isProjectionMode */
            false)) {
              matches || (matches = ngDevMode ? new MatchesArray() : []);
              diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, viewData), tView, def.type);

              if (isComponentDef(def)) {
                if (ngDevMode) {
                  assertTNodeType(tNode, 2
                  /* Element */
                  , "\"".concat(tNode.value, "\" tags cannot be used as component hosts. ") + "Please use a different tag to activate the ".concat(stringify(def.type), " component."));
                  if (tNode.flags & 2
                  /* isComponentHost */
                  ) throwMultipleComponentError(tNode);
                }

                markAsComponentHost(tView, tNode); // The component is always stored first with directives after.

                matches.unshift(def);
              } else {
                matches.push(def);
              }
            }
          }
        }

        return matches;
      }
      /**
       * Marks a given TNode as a component's host. This consists of:
       * - setting appropriate TNode flags;
       * - storing index of component's host element so it will be queued for view refresh during CD.
       */


      function markAsComponentHost(tView, hostTNode) {
        ngDevMode && assertFirstCreatePass(tView);
        hostTNode.flags |= 2
        /* isComponentHost */
        ;
        (tView.components || (tView.components = ngDevMode ? new TViewComponents() : [])).push(hostTNode.index);
      }
      /** Caches local names and their matching directive indices for query and template lookups. */


      function cacheMatchingLocalNames(tNode, localRefs, exportsMap) {
        if (localRefs) {
          var localNames = tNode.localNames = ngDevMode ? new TNodeLocalNames() : []; // Local names must be stored in tNode in the same order that localRefs are defined
          // in the template to ensure the data is loaded in the same slots as their refs
          // in the template (for template queries).

          for (var i = 0; i < localRefs.length; i += 2) {
            var index = exportsMap[localRefs[i + 1]];
            if (index == null) throw new RuntimeError("301"
            /* EXPORT_NOT_FOUND */
            , "Export of name '".concat(localRefs[i + 1], "' not found!"));
            localNames.push(localRefs[i], index);
          }
        }
      }
      /**
       * Builds up an export map as directives are created, so local refs can be quickly mapped
       * to their directive instances.
       */


      function saveNameToExportMap(directiveIdx, def, exportsMap) {
        if (exportsMap) {
          if (def.exportAs) {
            for (var i = 0; i < def.exportAs.length; i++) {
              exportsMap[def.exportAs[i]] = directiveIdx;
            }
          }

          if (isComponentDef(def)) exportsMap[''] = directiveIdx;
        }
      }
      /**
       * Initializes the flags on the current node, setting all indices to the initial index,
       * the directive count to 0, and adding the isComponent flag.
       * @param index the initial index
       */


      function initTNodeFlags(tNode, index, numberOfDirectives) {
        ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');
        tNode.flags |= 1
        /* isDirectiveHost */
        ; // When the first directive is created on a node, save the index

        tNode.directiveStart = index;
        tNode.directiveEnd = index + numberOfDirectives;
        tNode.providerIndexes = index;
      }
      /**
       * Setup directive for instantiation.
       *
       * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well
       * as `LView`. `TView` gets the `DirectiveDef`.
       *
       * @param tView `TView`
       * @param tNode `TNode`
       * @param lView `LView`
       * @param directiveIndex Index where the directive will be stored in the Expando.
       * @param def `DirectiveDef`
       */


      function configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {
        ngDevMode && assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');
        tView.data[directiveIndex] = def;
        var directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));
        var nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);
        tView.blueprint[directiveIndex] = nodeInjectorFactory;
        lView[directiveIndex] = nodeInjectorFactory;
        registerHostBindingOpCodes(tView, tNode, lView, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);
      }

      function addComponentLogic(lView, hostTNode, def) {
        var _native9 = getNativeByTNode(hostTNode, lView);

        var tView = getOrCreateTComponentView(def); // Only component views should be added to the view tree directly. Embedded views are
        // accessed through their containers because they may be removed / re-added later.

        var rendererFactory = lView[RENDERER_FACTORY];
        var componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 64
        /* Dirty */
        : 16
        /* CheckAlways */
        , _native9, hostTNode, rendererFactory, rendererFactory.createRenderer(_native9, def), null, null)); // Component view will always be created before any injected LContainers,
        // so this is a regular element, wrap it with the component view

        lView[hostTNode.index] = componentView;
      }

      function elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {
        if (ngDevMode) {
          assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
          validateAgainstEventAttributes(name);
          assertTNodeType(tNode, 2
          /* Element */
          , "Attempted to set attribute `".concat(name, "` on a container node. ") + "Host bindings are not valid on ng-container or ng-template.");
        }

        var element = getNativeByTNode(tNode, lView);
        setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);
      }

      function setElementAttribute(renderer, element, namespace, tagName, name, value, sanitizer) {
        if (value == null) {
          ngDevMode && ngDevMode.rendererRemoveAttribute++;
          isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name, namespace) : element.removeAttribute(name);
        } else {
          ngDevMode && ngDevMode.rendererSetAttribute++;
          var strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);

          if (isProceduralRenderer(renderer)) {
            renderer.setAttribute(element, name, strValue, namespace);
          } else {
            namespace ? element.setAttributeNS(namespace, name, strValue) : element.setAttribute(name, strValue);
          }
        }
      }
      /**
       * Sets initial input properties on directive instances from attribute data
       *
       * @param lView Current LView that is being processed.
       * @param directiveIndex Index of the directive in directives array
       * @param instance Instance of the directive on which to set the initial inputs
       * @param def The directive def that contains the list of inputs
       * @param tNode The static data for this node
       */


      function setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {
        var initialInputs = initialInputData[directiveIndex];

        if (initialInputs !== null) {
          var setInput = def.setInput;

          for (var i = 0; i < initialInputs.length;) {
            var publicName = initialInputs[i++];
            var privateName = initialInputs[i++];
            var value = initialInputs[i++];

            if (setInput !== null) {
              def.setInput(instance, value, publicName, privateName);
            } else {
              instance[privateName] = value;
            }

            if (ngDevMode) {
              var nativeElement = getNativeByTNode(tNode, lView);
              setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);
            }
          }
        }
      }
      /**
       * Generates initialInputData for a node and stores it in the template's static storage
       * so subsequent template invocations don't have to recalculate it.
       *
       * initialInputData is an array containing values that need to be set as input properties
       * for directives on this node, but only once on creation. We need this array to support
       * the case where you set an @Input property of a directive using attribute-like syntax.
       * e.g. if you have a `name` @Input, you can set it once like this:
       *
       * <my-component name="Bess"></my-component>
       *
       * @param inputs The list of inputs from the directive def
       * @param attrs The static attrs on this node
       */


      function generateInitialInputs(inputs, attrs) {
        var inputsToStore = null;
        var i = 0;

        while (i < attrs.length) {
          var attrName = attrs[i];

          if (attrName === 0
          /* NamespaceURI */
          ) {
              // We do not allow inputs on namespaced attributes.
              i += 4;
              continue;
            } else if (attrName === 5
          /* ProjectAs */
          ) {
              // Skip over the `ngProjectAs` value.
              i += 2;
              continue;
            } // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.


          if (typeof attrName === 'number') break;

          if (inputs.hasOwnProperty(attrName)) {
            if (inputsToStore === null) inputsToStore = [];
            inputsToStore.push(attrName, inputs[attrName], attrs[i + 1]);
          }

          i += 2;
        }

        return inputsToStore;
      } //////////////////////////
      //// ViewContainer & View
      //////////////////////////
      // Not sure why I need to do `any` here but TS complains later.


      var LContainerArray = (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode() && createNamedArrayType('LContainer');
      /**
       * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.
       *
       * @param hostNative The host element for the LContainer
       * @param hostTNode The host TNode for the LContainer
       * @param currentView The parent view of the LContainer
       * @param native The native comment element
       * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case
       * @returns LContainer
       */

      function createLContainer(hostNative, currentView, _native10, tNode) {
        ngDevMode && assertLView(currentView);
        ngDevMode && !isProceduralRenderer(currentView[RENDERER]) && assertDomNode(_native10); // https://jsperf.com/array-literal-vs-new-array-really

        var lContainer = new (ngDevMode ? LContainerArray : Array)(hostNative, // host native
        true, // Boolean `true` in this position signifies that this is an `LContainer`
        false, // has transplanted views
        currentView, // parent
        null, // next
        0, // transplanted views to refresh count
        tNode, // t_host
        _native10, // native,
        null, // view refs
        null);
        ngDevMode && assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, 'Should allocate correct number of slots for LContainer header.');
        ngDevMode && attachLContainerDebug(lContainer);
        return lContainer;
      }
      /**
       * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes
       * them by executing an associated template function.
       */


      function refreshEmbeddedViews(lView) {
        for (var lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
          for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
            var embeddedLView = lContainer[i];
            var embeddedTView = embeddedLView[TVIEW];
            ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');

            if (viewAttachedToChangeDetector(embeddedLView)) {
              refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);
            }
          }
        }
      }
      /**
       * Mark transplanted views as needing to be refreshed at their insertion points.
       *
       * @param lView The `LView` that may have transplanted views.
       */


      function markTransplantedViewsForRefresh(lView) {
        for (var lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
          if (!lContainer[HAS_TRANSPLANTED_VIEWS]) continue;
          var movedViews = lContainer[MOVED_VIEWS];
          ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');

          for (var i = 0; i < movedViews.length; i++) {
            var movedLView = movedViews[i];
            var insertionLContainer = movedLView[PARENT];
            ngDevMode && assertLContainer(insertionLContainer); // We don't want to increment the counter if the moved LView was already marked for
            // refresh.

            if ((movedLView[FLAGS] & 1024
            /* RefreshTransplantedView */
            ) === 0) {
              updateTransplantedViewCount(insertionLContainer, 1);
            } // Note, it is possible that the `movedViews` is tracking views that are transplanted *and*
            // those that aren't (declaration component === insertion component). In the latter case,
            // it's fine to add the flag, as we will clear it immediately in
            // `refreshEmbeddedViews` for the view currently being refreshed.


            movedLView[FLAGS] |= 1024
            /* RefreshTransplantedView */
            ;
          }
        }
      } /////////////

      /**
       * Refreshes components by entering the component view and processing its bindings, queries, etc.
       *
       * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)
       */


      function refreshComponent(hostLView, componentHostIdx) {
        ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');
        var componentView = getComponentLViewByIndex(componentHostIdx, hostLView); // Only attached components that are CheckAlways or OnPush and dirty should be refreshed

        if (viewAttachedToChangeDetector(componentView)) {
          var tView = componentView[TVIEW];

          if (componentView[FLAGS] & (16
          /* CheckAlways */
          | 64
          /* Dirty */
          )) {
            refreshView(tView, componentView, tView.template, componentView[CONTEXT]);
          } else if (componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
            // Only attached components that are CheckAlways or OnPush and dirty should be refreshed
            refreshContainsDirtyView(componentView);
          }
        }
      }
      /**
       * Refreshes all transplanted views marked with `LViewFlags.RefreshTransplantedView` that are
       * children or descendants of the given lView.
       *
       * @param lView The lView which contains descendant transplanted views that need to be refreshed.
       */


      function refreshContainsDirtyView(lView) {
        for (var lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
          for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
            var embeddedLView = lContainer[i];

            if (embeddedLView[FLAGS] & 1024
            /* RefreshTransplantedView */
            ) {
                var embeddedTView = embeddedLView[TVIEW];
                ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');
                refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);
              } else if (embeddedLView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
              refreshContainsDirtyView(embeddedLView);
            }
          }
        }

        var tView = lView[TVIEW]; // Refresh child component views.

        var components = tView.components;

        if (components !== null) {
          for (var _i13 = 0; _i13 < components.length; _i13++) {
            var componentView = getComponentLViewByIndex(components[_i13], lView); // Only attached components that are CheckAlways or OnPush and dirty should be refreshed

            if (viewAttachedToChangeDetector(componentView) && componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
              refreshContainsDirtyView(componentView);
            }
          }
        }
      }

      function renderComponent(hostLView, componentHostIdx) {
        ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');
        var componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
        var componentTView = componentView[TVIEW];
        syncViewWithBlueprint(componentTView, componentView);
        renderView(componentTView, componentView, componentView[CONTEXT]);
      }
      /**
       * Syncs an LView instance with its blueprint if they have gotten out of sync.
       *
       * Typically, blueprints and their view instances should always be in sync, so the loop here
       * will be skipped. However, consider this case of two components side-by-side:
       *
       * App template:
       * ```
       * <comp></comp>
       * <comp></comp>
       * ```
       *
       * The following will happen:
       * 1. App template begins processing.
       * 2. First <comp> is matched as a component and its LView is created.
       * 3. Second <comp> is matched as a component and its LView is created.
       * 4. App template completes processing, so it's time to check child templates.
       * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.
       * 6. Second <comp> template is checked. Its blueprint has been updated by the first
       * <comp> template, but its LView was created before this update, so it is out of sync.
       *
       * Note that embedded views inside ngFor loops will never be out of sync because these views
       * are processed as soon as they are created.
       *
       * @param tView The `TView` that contains the blueprint for syncing
       * @param lView The view to sync
       */


      function syncViewWithBlueprint(tView, lView) {
        for (var i = lView.length; i < tView.blueprint.length; i++) {
          lView.push(tView.blueprint[i]);
        }
      }
      /**
       * Adds LView or LContainer to the end of the current view tree.
       *
       * This structure will be used to traverse through nested views to remove listeners
       * and call onDestroy callbacks.
       *
       * @param lView The view where LView or LContainer should be added
       * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header
       * @param lViewOrLContainer The LView or LContainer to add to the view tree
       * @returns The state passed in
       */


      function addToViewTree(lView, lViewOrLContainer) {
        // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer
        // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out
        // of order, the change detection will run out of order, as the act of retrieving the the
        // LContainer from the RNode is what adds it to the queue.
        if (lView[CHILD_HEAD]) {
          lView[CHILD_TAIL][NEXT] = lViewOrLContainer;
        } else {
          lView[CHILD_HEAD] = lViewOrLContainer;
        }

        lView[CHILD_TAIL] = lViewOrLContainer;
        return lViewOrLContainer;
      } ///////////////////////////////
      //// Change detection
      ///////////////////////////////

      /**
       * Marks current view and all ancestors dirty.
       *
       * Returns the root view because it is found as a byproduct of marking the view tree
       * dirty, and can be used by methods that consume markViewDirty() to easily schedule
       * change detection. Otherwise, such methods would need to traverse up the view tree
       * an additional time to get the root view and schedule a tick on it.
       *
       * @param lView The starting LView to mark dirty
       * @returns the root LView
       */


      function markViewDirty(lView) {
        while (lView) {
          lView[FLAGS] |= 64
          /* Dirty */
          ;
          var parent = getLViewParent(lView); // Stop traversing up as soon as you find a root view that wasn't attached to any container

          if (isRootView(lView) && !parent) {
            return lView;
          } // continue otherwise


          lView = parent;
        }

        return null;
      }
      /**
       * Used to schedule change detection on the whole application.
       *
       * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.
       * It is usually called indirectly by calling `markDirty` when the view needs to be
       * re-rendered.
       *
       * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple
       * `scheduleTick` requests. The scheduling function can be overridden in
       * `renderComponent`'s `scheduler` option.
       */


      function scheduleTick(rootContext, flags) {
        var nothingScheduled = rootContext.flags === 0
        /* Empty */
        ;

        if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {
          // https://github.com/angular/angular/issues/39296
          // should only attach the flags when really scheduling a tick
          rootContext.flags |= flags;
          var res;
          rootContext.clean = new Promise(function (r) {
            return res = r;
          });
          rootContext.scheduler(function () {
            if (rootContext.flags & 1
            /* DetectChanges */
            ) {
                rootContext.flags &= ~1
                /* DetectChanges */
                ;
                tickRootContext(rootContext);
              }

            if (rootContext.flags & 2
            /* FlushPlayers */
            ) {
                rootContext.flags &= ~2
                /* FlushPlayers */
                ;
                var playerHandler = rootContext.playerHandler;

                if (playerHandler) {
                  playerHandler.flushPlayers();
                }
              }

            rootContext.clean = _CLEAN_PROMISE;
            res(null);
          });
        }
      }

      function tickRootContext(rootContext) {
        for (var i = 0; i < rootContext.components.length; i++) {
          var rootComponent = rootContext.components[i];
          var lView = readPatchedLView(rootComponent);
          var tView = lView[TVIEW];
          renderComponentOrTemplate(tView, lView, tView.template, rootComponent);
        }
      }

      function detectChangesInternal(tView, lView, context) {
        var rendererFactory = lView[RENDERER_FACTORY];
        if (rendererFactory.begin) rendererFactory.begin();

        try {
          refreshView(tView, lView, tView.template, context);
        } catch (error) {
          handleError(lView, error);
          throw error;
        } finally {
          if (rendererFactory.end) rendererFactory.end();
        }
      }
      /**
       * Synchronously perform change detection on a root view and its components.
       *
       * @param lView The view which the change detection should be performed on.
       */


      function detectChangesInRootView(lView) {
        tickRootContext(lView[CONTEXT]);
      }

      function checkNoChangesInternal(tView, view, context) {
        setIsInCheckNoChangesMode(true);

        try {
          detectChangesInternal(tView, view, context);
        } finally {
          setIsInCheckNoChangesMode(false);
        }
      }
      /**
       * Checks the change detector on a root view and its components, and throws if any changes are
       * detected.
       *
       * This is used in development mode to verify that running change detection doesn't
       * introduce other changes.
       *
       * @param lView The view which the change detection should be checked on.
       */


      function checkNoChangesInRootView(lView) {
        setIsInCheckNoChangesMode(true);

        try {
          detectChangesInRootView(lView);
        } finally {
          setIsInCheckNoChangesMode(false);
        }
      }

      function executeViewQueryFn(flags, viewQueryFn, component) {
        ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');
        setCurrentQueryIndex(0);
        viewQueryFn(flags, component);
      } ///////////////////////////////
      //// Bindings & interpolations
      ///////////////////////////////

      /**
       * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.
       *
       * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:
       * - a bound property name;
       * - a static parts of interpolated strings;
       *
       * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a
       * property binding metadata will be stored in `TView.data` at the same index as a bound value in
       * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the
       * following format:
       * - `propertyName` for bound properties;
       * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for
       * interpolated properties.
       *
       * @param tData `TData` where meta-data will be saved;
       * @param tNode `TNode` that is a target of the binding;
       * @param propertyName bound property name;
       * @param bindingIndex binding index in `LView`
       * @param interpolationParts static interpolation parts (for property interpolations)
       */


      function storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex) {
        // Binding meta-data are stored only the first time a given property instruction is processed.
        // Since we don't have a concept of the "first update pass" we need to check for presence of the
        // binding meta-data to decide if one should be stored (or if was stored already).
        if (tData[bindingIndex] === null) {
          if (tNode.inputs == null || !tNode.inputs[propertyName]) {
            var propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);
            propBindingIdxs.push(bindingIndex);
            var bindingMetadata = propertyName;

            for (var _len11 = arguments.length, interpolationParts = new Array(_len11 > 4 ? _len11 - 4 : 0), _key12 = 4; _key12 < _len11; _key12++) {
              interpolationParts[_key12 - 4] = arguments[_key12];
            }

            if (interpolationParts.length > 0) {
              bindingMetadata += INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);
            }

            tData[bindingIndex] = bindingMetadata;
          }
        }
      }

      var CLEAN_PROMISE = _CLEAN_PROMISE;

      function getOrCreateLViewCleanup(view) {
        // top level variables should not be exported for performance reasons (PERF_NOTES.md)
        return view[CLEANUP] || (view[CLEANUP] = ngDevMode ? new LCleanup() : []);
      }

      function getOrCreateTViewCleanup(tView) {
        return tView.cleanup || (tView.cleanup = ngDevMode ? new TCleanup() : []);
      }
      /**
       * There are cases where the sub component's renderer needs to be included
       * instead of the current renderer (see the componentSyntheticHost* instructions).
       */


      function loadComponentRenderer(currentDef, tNode, lView) {
        // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root
        // component (see packages/core/src/render3/component.ts). This is not consistent with the process
        // of creating inner components, when current directive index is available in the state. In order
        // to avoid relying on current def being `null` (thus special-casing root component creation), the
        // process of creating root component should be unified with the process of creating inner
        // components.
        if (currentDef === null || isComponentDef(currentDef)) {
          lView = unwrapLView(lView[tNode.index]);
        }

        return lView[RENDERER];
      }
      /** Handles an error thrown in an LView. */


      function handleError(lView, error) {
        var injector = lView[INJECTOR];
        var errorHandler = injector ? injector.get(_ErrorHandler, null) : null;
        errorHandler && errorHandler.handleError(error);
      }
      /**
       * Set the inputs of directives at the current node to corresponding value.
       *
       * @param tView The current TView
       * @param lView the `LView` which contains the directives.
       * @param inputs mapping between the public "input" name and privately-known,
       *        possibly minified, property names to write to.
       * @param value Value to set.
       */


      function setInputsForProperty(tView, lView, inputs, publicName, value) {
        for (var i = 0; i < inputs.length;) {
          var index = inputs[i++];
          var privateName = inputs[i++];
          var instance = lView[index];
          ngDevMode && assertIndexInRange(lView, index);
          var def = tView.data[index];

          if (def.setInput !== null) {
            def.setInput(instance, value, publicName, privateName);
          } else {
            instance[privateName] = value;
          }
        }
      }
      /**
       * Updates a text binding at a given index in a given LView.
       */


      function textBindingInternal(lView, index, value) {
        ngDevMode && assertString(value, 'Value should be a string');
        ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');
        ngDevMode && assertIndexInRange(lView, index);
        var element = getNativeByIndex(index, lView);
        ngDevMode && assertDefined(element, 'native element should exist');
        updateTextNode(lView[RENDERER], element, value);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Compute the static styling (class/style) from `TAttributes`.
       *
       * This function should be called during `firstCreatePass` only.
       *
       * @param tNode The `TNode` into which the styling information should be loaded.
       * @param attrs `TAttributes` containing the styling information.
       * @param writeToHost Where should the resulting static styles be written?
       *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`
       *   - `true` Write to `TNode.styles` / `TNode.classes`
       */


      function computeStaticStyling(tNode, attrs, writeToHost) {
        ngDevMode && assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');
        var styles = writeToHost ? tNode.styles : null;
        var classes = writeToHost ? tNode.classes : null;
        var mode = 0;

        if (attrs !== null) {
          for (var i = 0; i < attrs.length; i++) {
            var value = attrs[i];

            if (typeof value === 'number') {
              mode = value;
            } else if (mode == 1
            /* Classes */
            ) {
                classes = concatStringsWithSpace(classes, value);
              } else if (mode == 2
            /* Styles */
            ) {
                var style = value;
                var styleValue = attrs[++i];
                styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');
              }
          }
        }

        writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;
        writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Synchronously perform change detection on a component (and possibly its sub-components).
       *
       * This function triggers change detection in a synchronous way on a component.
       *
       * @param component The component which the change detection should be performed on.
       */


      function detectChanges(component) {
        var view = getComponentViewByInstance(component);
        detectChangesInternal(view[TVIEW], view, component);
      }
      /**
       * Marks the component as dirty (needing change detection). Marking a component dirty will
       * schedule a change detection on it at some point in the future.
       *
       * Marking an already dirty component as dirty won't do anything. Only one outstanding change
       * detection can be scheduled per component tree.
       *
       * @param component Component to mark as dirty.
       */


      function markDirty(component) {
        ngDevMode && assertDefined(component, 'component');
        var rootView = markViewDirty(getComponentViewByInstance(component));
        ngDevMode && assertDefined(rootView[CONTEXT], 'rootContext should be defined');
        scheduleTick(rootView[CONTEXT], 1
        /* DetectChanges */
        );
      }
      /**
       * Used to perform change detection on the whole application.
       *
       * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`
       * executes lifecycle hooks and conditionally checks components based on their
       * `ChangeDetectionStrategy` and dirtiness.
       *
       * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally
       * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a
       * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can
       * be changed when calling `renderComponent` and providing the `scheduler` option.
       */


      function tick(component) {
        var rootView = getRootView(component);
        var rootContext = rootView[CONTEXT];
        tickRootContext(rootContext);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.
       *
       * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a
       * project.
       *
       * @publicApi
       */


      var INJECTOR$1 = new _InjectionToken('INJECTOR', // Dissable tslint because this is const enum which gets inlined not top level prop access.
      // tslint:disable-next-line: no-toplevel-property-access
      -1
      /* Injector */
      );
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var NullInjector = /*#__PURE__*/function () {
        function NullInjector() {
          _classCallCheck2(this, NullInjector);
        }

        _createClass2(NullInjector, [{
          key: "get",
          value: function get(token) {
            var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THROW_IF_NOT_FOUND;

            if (notFoundValue === THROW_IF_NOT_FOUND) {
              var error = new Error("NullInjectorError: No provider for ".concat(stringify(token), "!"));
              error.name = 'NullInjectorError';
              throw error;
            }

            return notFoundValue;
          }
        }]);

        return NullInjector;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * An internal token whose presence in an injector indicates that the injector should treat itself
       * as a root scoped injector when processing requests for unknown tokens which may indicate
       * they are provided in the root scope.
       */


      var INJECTOR_SCOPE = new _InjectionToken('Set Injector scope.');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Marker which indicates that a value has not yet been created from the factory function.
       */

      var NOT_YET = {};
      /**
       * Marker which indicates that the factory function for a token is in the process of being called.
       *
       * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates
       * injection of a dependency has recursively attempted to inject the original token, and there is
       * a circular dependency among the providers.
       */

      var CIRCULAR = {};
      /**
       * A lazily initialized NullInjector.
       */

      var NULL_INJECTOR = undefined;

      function getNullInjector() {
        if (NULL_INJECTOR === undefined) {
          NULL_INJECTOR = new NullInjector();
        }

        return NULL_INJECTOR;
      }
      /**
       * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.
       *
       * @publicApi
       */


      function createInjector(defType) {
        var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var additionalProviders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var name = arguments.length > 3 ? arguments[3] : undefined;
        var injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);

        injector._resolveInjectorDefTypes();

        return injector;
      }
      /**
       * Creates a new injector without eagerly resolving its injector types. Can be used in places
       * where resolving the injector types immediately can lead to an infinite loop. The injector types
       * should be resolved at a later point by calling `_resolveInjectorDefTypes`.
       */


      function createInjectorWithoutInjectorInstances(defType) {
        var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var additionalProviders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var name = arguments.length > 3 ? arguments[3] : undefined;
        return new R3Injector(defType, additionalProviders, parent || getNullInjector(), name);
      }

      var R3Injector = /*#__PURE__*/function () {
        function R3Injector(def, additionalProviders, parent) {
          var _this71 = this;

          var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

          _classCallCheck2(this, R3Injector);

          this.parent = parent;
          /**
           * Map of tokens to records which contain the instances of those tokens.
           * - `null` value implies that we don't have the record. Used by tree-shakable injectors
           * to prevent further searches.
           */

          this.records = new Map();
          /**
           * The transitive set of `InjectorType`s which define this injector.
           */

          this.injectorDefTypes = new Set();
          /**
           * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.
           */

          this.onDestroy = new Set();
          this._destroyed = false;
          var dedupStack = []; // Start off by creating Records for every provider declared in every InjectorType
          // included transitively in additional providers then do the same for `def`. This order is
          // important because `def` may include providers that override ones in additionalProviders.

          additionalProviders && deepForEach(additionalProviders, function (provider) {
            return _this71.processProvider(provider, def, additionalProviders);
          });
          deepForEach([def], function (injectorDef) {
            return _this71.processInjectorType(injectorDef, [], dedupStack);
          }); // Make sure the INJECTOR token provides this injector.

          this.records.set(INJECTOR$1, makeRecord(undefined, this)); // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide
          // any injectable scoped to APP_ROOT_SCOPE.

          var record = this.records.get(INJECTOR_SCOPE);
          this.scope = record != null ? record.value : null; // Source name, used for debugging

          this.source = source || (typeof def === 'object' ? null : stringify(def));
        }
        /**
         * Flag indicating that this injector was previously destroyed.
         */


        _createClass2(R3Injector, [{
          key: "destroyed",
          get: function get() {
            return this._destroyed;
          }
          /**
           * Destroy the injector and release references to every instance or provider associated with it.
           *
           * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a
           * hook was found.
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this.assertNotDestroyed(); // Set destroyed = true first, in case lifecycle hooks re-enter destroy().

            this._destroyed = true;

            try {
              // Call all the lifecycle hooks.
              this.onDestroy.forEach(function (service) {
                return service.ngOnDestroy();
              });
            } finally {
              // Release all references.
              this.records.clear();
              this.onDestroy.clear();
              this.injectorDefTypes.clear();
            }
          }
        }, {
          key: "get",
          value: function get(token) {
            var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THROW_IF_NOT_FOUND;
            var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _InjectFlags.Default;
            this.assertNotDestroyed(); // Set the injection context.

            var previousInjector = setCurrentInjector(this);

            try {
              // Check for the SkipSelf flag.
              if (!(flags & _InjectFlags.SkipSelf)) {
                // SkipSelf isn't set, check if the record belongs to this injector.
                var record = this.records.get(token);

                if (record === undefined) {
                  // No record, but maybe the token is scoped to this injector. Look for an injectable
                  // def with a scope matching this injector.
                  var def = couldBeInjectableType(token) && getInjectableDef(token);

                  if (def && this.injectableDefInScope(def)) {
                    // Found an injectable def and it's scoped to this injector. Pretend as if it was here
                    // all along.
                    record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);
                  } else {
                    record = null;
                  }

                  this.records.set(token, record);
                } // If a record was found, get the instance for it and return it.


                if (record != null
                /* NOT null || undefined */
                ) {
                    return this.hydrate(token, record);
                  }
              } // Select the next injector based on the Self flag - if self is set, the next injector is
              // the NullInjector, otherwise it's the parent.


              var nextInjector = !(flags & _InjectFlags.Self) ? this.parent : getNullInjector(); // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue
              // is undefined, the value is null, otherwise it's the notFoundValue.

              notFoundValue = flags & _InjectFlags.Optional && notFoundValue === THROW_IF_NOT_FOUND ? null : notFoundValue;
              return nextInjector.get(token, notFoundValue);
            } catch (e) {
              if (e.name === 'NullInjectorError') {
                var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
                path.unshift(stringify(token));

                if (previousInjector) {
                  // We still have a parent injector, keep throwing
                  throw e;
                } else {
                  // Format & throw the final error message when we don't have any previous injector
                  return catchInjectorError(e, token, 'R3InjectorError', this.source);
                }
              } else {
                throw e;
              }
            } finally {
              // Lastly, clean up the state by restoring the previous injector.
              setCurrentInjector(previousInjector);
            }
          }
          /** @internal */

        }, {
          key: "_resolveInjectorDefTypes",
          value: function _resolveInjectorDefTypes() {
            var _this72 = this;

            this.injectorDefTypes.forEach(function (defType) {
              return _this72.get(defType);
            });
          }
        }, {
          key: "toString",
          value: function toString() {
            var tokens = [],
                records = this.records;
            records.forEach(function (v, token) {
              return tokens.push(stringify(token));
            });
            return "R3Injector[".concat(tokens.join(', '), "]");
          }
        }, {
          key: "assertNotDestroyed",
          value: function assertNotDestroyed() {
            if (this._destroyed) {
              throw new Error('Injector has already been destroyed.');
            }
          }
          /**
           * Add an `InjectorType` or `InjectorTypeWithProviders` and all of its transitive providers
           * to this injector.
           *
           * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,
           * the function will return "true" to indicate that the providers of the type definition need
           * to be processed. This allows us to process providers of injector types after all imports of
           * an injector definition are processed. (following View Engine semantics: see FW-1349)
           */

        }, {
          key: "processInjectorType",
          value: function processInjectorType(defOrWrappedDef, parents, dedupStack) {
            var _this73 = this;

            defOrWrappedDef = _resolveForwardRef(defOrWrappedDef);
            if (!defOrWrappedDef) return false; // Either the defOrWrappedDef is an InjectorType (with injector def) or an
            // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic
            // read, so care is taken to only do the read once.
            // First attempt to read the injector def (`ɵinj`).

            var def = getInjectorDef(defOrWrappedDef); // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.

            var ngModule = def == null && defOrWrappedDef.ngModule || undefined; // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,
            // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type
            // is the `ngModule`.

            var defType = ngModule === undefined ? defOrWrappedDef : ngModule; // Check for circular dependencies.

            if (ngDevMode && parents.indexOf(defType) !== -1) {
              var defName = stringify(defType);
              var path = parents.map(stringify);
              throwCyclicDependencyError(defName, path);
            } // Check for multiple imports of the same module


            var isDuplicate = dedupStack.indexOf(defType) !== -1; // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual
            // `InjectorDef` is on its `ngModule`.

            if (ngModule !== undefined) {
              def = getInjectorDef(ngModule);
            } // If no definition was found, it might be from exports. Remove it.


            if (def == null) {
              return false;
            } // Add providers in the same way that @NgModule resolution did:
            // First, include providers from any imports.


            if (def.imports != null && !isDuplicate) {
              // Before processing defType's imports, add it to the set of parents. This way, if it ends
              // up deeply importing itself, this can be detected.
              ngDevMode && parents.push(defType); // Add it to the set of dedups. This way we can detect multiple imports of the same module

              dedupStack.push(defType);
              var importTypesWithProviders;

              try {
                deepForEach(def.imports, function (imported) {
                  if (_this73.processInjectorType(imported, parents, dedupStack)) {
                    if (importTypesWithProviders === undefined) importTypesWithProviders = []; // If the processed import is an injector type with providers, we store it in the
                    // list of import types with providers, so that we can process those afterwards.

                    importTypesWithProviders.push(imported);
                  }
                });
              } finally {
                // Remove it from the parents set when finished.
                ngDevMode && parents.pop();
              } // Imports which are declared with providers (TypeWithProviders) need to be processed
              // after all imported modules are processed. This is similar to how View Engine
              // processes/merges module imports in the metadata resolver. See: FW-1349.


              if (importTypesWithProviders !== undefined) {
                var _loop3 = function _loop3(i) {
                  var _importTypesWithProvi = importTypesWithProviders[i],
                      ngModule = _importTypesWithProvi.ngModule,
                      providers = _importTypesWithProvi.providers;
                  deepForEach(providers, function (provider) {
                    return _this73.processProvider(provider, ngModule, providers || EMPTY_ARRAY);
                  });
                };

                for (var i = 0; i < importTypesWithProviders.length; i++) {
                  _loop3(i);
                }
              }
            } // Track the InjectorType and add a provider for it. It's important that this is done after the
            // def's imports.


            this.injectorDefTypes.add(defType);

            var factory = getFactoryDef(defType) || function () {
              return new defType();
            };

            this.records.set(defType, makeRecord(factory, NOT_YET)); // Next, include providers listed on the definition itself.

            var defProviders = def.providers;

            if (defProviders != null && !isDuplicate) {
              var injectorType = defOrWrappedDef;
              deepForEach(defProviders, function (provider) {
                return _this73.processProvider(provider, injectorType, defProviders);
              });
            }

            return ngModule !== undefined && defOrWrappedDef.providers !== undefined;
          }
          /**
           * Process a `SingleProvider` and add it.
           */

        }, {
          key: "processProvider",
          value: function processProvider(provider, ngModuleType, providers) {
            // Determine the token from the provider. Either it's its own token, or has a {provide: ...}
            // property.
            provider = _resolveForwardRef(provider);
            var token = isTypeProvider(provider) ? provider : _resolveForwardRef(provider && provider.provide); // Construct a `Record` for the provider.

            var record = providerToRecord(provider, ngModuleType, providers);

            if (!isTypeProvider(provider) && provider.multi === true) {
              // If the provider indicates that it's a multi-provider, process it specially.
              // First check whether it's been defined already.
              var multiRecord = this.records.get(token);

              if (multiRecord) {
                // It has. Throw a nice error if
                if (ngDevMode && multiRecord.multi === undefined) {
                  throwMixedMultiProviderError();
                }
              } else {
                multiRecord = makeRecord(undefined, NOT_YET, true);

                multiRecord.factory = function () {
                  return injectArgs(multiRecord.multi);
                };

                this.records.set(token, multiRecord);
              }

              token = provider;
              multiRecord.multi.push(provider);
            } else {
              var existing = this.records.get(token);

              if (ngDevMode && existing && existing.multi !== undefined) {
                throwMixedMultiProviderError();
              }
            }

            this.records.set(token, record);
          }
        }, {
          key: "hydrate",
          value: function hydrate(token, record) {
            if (ngDevMode && record.value === CIRCULAR) {
              throwCyclicDependencyError(stringify(token));
            } else if (record.value === NOT_YET) {
              record.value = CIRCULAR;
              record.value = record.factory();
            }

            if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {
              this.onDestroy.add(record.value);
            }

            return record.value;
          }
        }, {
          key: "injectableDefInScope",
          value: function injectableDefInScope(def) {
            if (!def.providedIn) {
              return false;
            }

            var providedIn = _resolveForwardRef(def.providedIn);

            if (typeof providedIn === 'string') {
              return providedIn === 'any' || providedIn === this.scope;
            } else {
              return this.injectorDefTypes.has(providedIn);
            }
          }
        }]);

        return R3Injector;
      }();

      function injectableDefOrInjectorDefFactory(token) {
        // Most tokens will have an injectable def directly on them, which specifies a factory directly.
        var injectableDef = getInjectableDef(token);
        var factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);

        if (factory !== null) {
          return factory;
        } // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.
        // If it's missing that, it's an error.


        if (token instanceof _InjectionToken) {
          throw new Error("Token ".concat(stringify(token), " is missing a \u0275prov definition."));
        } // Undecorated types can sometimes be created if they have no constructor arguments.


        if (token instanceof Function) {
          return getUndecoratedInjectableFactory(token);
        } // There was no way to resolve a factory for this token.


        throw new Error('unreachable');
      }

      function getUndecoratedInjectableFactory(token) {
        // If the token has parameters then it has dependencies that we cannot resolve implicitly.
        var paramLength = token.length;

        if (paramLength > 0) {
          var args = newArray(paramLength, '?');
          throw new Error("Can't resolve all parameters for ".concat(stringify(token), ": (").concat(args.join(', '), ")."));
        } // The constructor function appears to have no parameters.
        // This might be because it inherits from a super-class. In which case, use an injectable
        // def from an ancestor if there is one.
        // Otherwise this really is a simple class with no dependencies, so return a factory that
        // just instantiates the zero-arg constructor.


        var inheritedInjectableDef = getInheritedInjectableDef(token);

        if (inheritedInjectableDef !== null) {
          return function () {
            return inheritedInjectableDef.factory(token);
          };
        } else {
          return function () {
            return new token();
          };
        }
      }

      function providerToRecord(provider, ngModuleType, providers) {
        if (isValueProvider(provider)) {
          return makeRecord(undefined, provider.useValue);
        } else {
          var factory = providerToFactory(provider, ngModuleType, providers);
          return makeRecord(factory, NOT_YET);
        }
      }
      /**
       * Converts a `SingleProvider` into a factory function.
       *
       * @param provider provider to convert to factory
       */


      function providerToFactory(provider, ngModuleType, providers) {
        var factory = undefined;

        if (isTypeProvider(provider)) {
          var unwrappedProvider = _resolveForwardRef(provider);

          return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);
        } else {
          if (isValueProvider(provider)) {
            factory = function factory() {
              return _resolveForwardRef(provider.useValue);
            };
          } else if (isFactoryProvider(provider)) {
            factory = function factory() {
              return provider.useFactory.apply(provider, _toConsumableArray(injectArgs(provider.deps || [])));
            };
          } else if (isExistingProvider(provider)) {
            factory = function factory() {
              return _ɵɵinject(_resolveForwardRef(provider.useExisting));
            };
          } else {
            var classRef = _resolveForwardRef(provider && (provider.useClass || provider.provide));

            if (ngDevMode && !classRef) {
              throwInvalidProviderError(ngModuleType, providers, provider);
            }

            if (hasDeps(provider)) {
              factory = function factory() {
                return _construct(classRef, _toConsumableArray(injectArgs(provider.deps)));
              };
            } else {
              return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);
            }
          }
        }

        return factory;
      }

      function makeRecord(factory, value) {
        var multi = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        return {
          factory: factory,
          value: value,
          multi: multi ? [] : undefined
        };
      }

      function isValueProvider(value) {
        return value !== null && typeof value == 'object' && USE_VALUE in value;
      }

      function isExistingProvider(value) {
        return !!(value && value.useExisting);
      }

      function isFactoryProvider(value) {
        return !!(value && value.useFactory);
      }

      function isTypeProvider(value) {
        return typeof value === 'function';
      }

      function isClassProvider(value) {
        return !!value.useClass;
      }

      function hasDeps(value) {
        return !!value.deps;
      }

      function hasOnDestroy(value) {
        return value !== null && typeof value === 'object' && typeof value.ngOnDestroy === 'function';
      }

      function couldBeInjectableType(value) {
        return typeof value === 'function' || typeof value === 'object' && value instanceof _InjectionToken;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function INJECTOR_IMPL__PRE_R3__(providers, parent, name) {
        return new StaticInjector(providers, parent, name);
      }

      function INJECTOR_IMPL__POST_R3__(providers, parent, name) {
        return createInjector({
          name: name
        }, parent, providers, name);
      }

      var INJECTOR_IMPL = INJECTOR_IMPL__POST_R3__;
      /**
       * Concrete injectors implement this interface. Injectors are configured
       * with [providers](guide/glossary#provider) that associate
       * dependencies of various types with [injection tokens](guide/glossary#di-token).
       *
       * @see ["DI Providers"](guide/dependency-injection-providers).
       * @see `StaticProvider`
       *
       * @usageNotes
       *
       *  The following example creates a service injector instance.
       *
       * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}
       *
       * ### Usage example
       *
       * {@example core/di/ts/injector_spec.ts region='Injector'}
       *
       * `Injector` returns itself when given `Injector` as a token:
       *
       * {@example core/di/ts/injector_spec.ts region='injectInjector'}
       *
       * @publicApi
       */

      var _Injector = /*#__PURE__*/function () {
        function _Injector() {
          _classCallCheck2(this, _Injector);
        }

        _createClass2(_Injector, null, [{
          key: "create",
          value: function create(options, parent) {
            if (Array.isArray(options)) {
              return INJECTOR_IMPL(options, parent, '');
            } else {
              return INJECTOR_IMPL(options.providers, options.parent, options.name || '');
            }
          }
        }]);

        return _Injector;
      }();

      _Injector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;
      _Injector.NULL = new NullInjector();
      /** @nocollapse */

      _Injector.ɵprov = _ɵɵdefineInjectable({
        token: _Injector,
        providedIn: 'any',
        factory: function factory() {
          return _ɵɵinject(INJECTOR$1);
        }
      });
      /**
       * @internal
       * @nocollapse
       */

      _Injector.__NG_ELEMENT_ID__ = -1
      /* Injector */
      ;

      var IDENT = function IDENT(value) {
        return value;
      };

      var ɵ0$6 = IDENT;
      var EMPTY = [];
      var CIRCULAR$1 = IDENT;

      var MULTI_PROVIDER_FN = function MULTI_PROVIDER_FN() {
        return Array.prototype.slice.call(arguments);
      };

      var ɵ1$1 = MULTI_PROVIDER_FN;
      var NO_NEW_LINE$1 = 'ɵ';

      var StaticInjector = /*#__PURE__*/function () {
        function StaticInjector(providers) {
          var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Injector.NULL;
          var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

          _classCallCheck2(this, StaticInjector);

          this.parent = parent;
          this.source = source;
          var records = this._records = new Map();
          records.set(_Injector, {
            token: _Injector,
            fn: IDENT,
            deps: EMPTY,
            value: this,
            useNew: false
          });
          records.set(INJECTOR$1, {
            token: INJECTOR$1,
            fn: IDENT,
            deps: EMPTY,
            value: this,
            useNew: false
          });
          this.scope = recursivelyProcessProviders(records, providers);
        }

        _createClass2(StaticInjector, [{
          key: "get",
          value: function get(token, notFoundValue) {
            var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _InjectFlags.Default;
            var records = this._records;
            var record = records.get(token);

            if (record === undefined) {
              // This means we have never seen this record, see if it is tree shakable provider.
              var injectableDef = getInjectableDef(token);

              if (injectableDef) {
                var providedIn = injectableDef && _resolveForwardRef(injectableDef.providedIn);

                if (providedIn === 'any' || providedIn != null && providedIn === this.scope) {
                  records.set(token, record = resolveProvider({
                    provide: token,
                    useFactory: injectableDef.factory,
                    deps: EMPTY
                  }));
                }
              }

              if (record === undefined) {
                // Set record to null to make sure that we don't go through expensive lookup above again.
                records.set(token, null);
              }
            }

            var lastInjector = setCurrentInjector(this);

            try {
              return tryResolveToken(token, record, records, this.parent, notFoundValue, flags);
            } catch (e) {
              return catchInjectorError(e, token, 'StaticInjectorError', this.source);
            } finally {
              setCurrentInjector(lastInjector);
            }
          }
        }, {
          key: "toString",
          value: function toString() {
            var tokens = [],
                records = this._records;
            records.forEach(function (v, token) {
              return tokens.push(stringify(token));
            });
            return "StaticInjector[".concat(tokens.join(', '), "]");
          }
        }]);

        return StaticInjector;
      }();

      function resolveProvider(provider) {
        var deps = computeDeps(provider);
        var fn = IDENT;
        var value = EMPTY;
        var useNew = false;

        var provide = _resolveForwardRef(provider.provide);

        if (USE_VALUE in provider) {
          // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.
          value = provider.useValue;
        } else if (provider.useFactory) {
          fn = provider.useFactory;
        } else if (provider.useExisting) {// Just use IDENT
        } else if (provider.useClass) {
          useNew = true;
          fn = _resolveForwardRef(provider.useClass);
        } else if (typeof provide == 'function') {
          useNew = true;
          fn = provide;
        } else {
          throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);
        }

        return {
          deps: deps,
          fn: fn,
          useNew: useNew,
          value: value
        };
      }

      function multiProviderMixError(token) {
        return staticError('Cannot mix multi providers and regular providers', token);
      }

      function recursivelyProcessProviders(records, provider) {
        var scope = null;

        if (provider) {
          provider = _resolveForwardRef(provider);

          if (Array.isArray(provider)) {
            // if we have an array recurse into the array
            for (var i = 0; i < provider.length; i++) {
              scope = recursivelyProcessProviders(records, provider[i]) || scope;
            }
          } else if (typeof provider === 'function') {
            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful
            // error messages
            throw staticError('Function/Class not supported', provider);
          } else if (provider && typeof provider === 'object' && provider.provide) {
            // At this point we have what looks like a provider: {provide: ?, ....}
            var token = _resolveForwardRef(provider.provide);

            var resolvedProvider = resolveProvider(provider);

            if (provider.multi === true) {
              // This is a multi provider.
              var multiProvider = records.get(token);

              if (multiProvider) {
                if (multiProvider.fn !== MULTI_PROVIDER_FN) {
                  throw multiProviderMixError(token);
                }
              } else {
                // Create a placeholder factory which will look up the constituents of the multi provider.
                records.set(token, multiProvider = {
                  token: provider.provide,
                  deps: [],
                  useNew: false,
                  fn: MULTI_PROVIDER_FN,
                  value: EMPTY
                });
              } // Treat the provider as the token.


              token = provider;
              multiProvider.deps.push({
                token: token,
                options: 6
                /* Default */

              });
            }

            var record = records.get(token);

            if (record && record.fn == MULTI_PROVIDER_FN) {
              throw multiProviderMixError(token);
            }

            if (token === INJECTOR_SCOPE) {
              scope = resolvedProvider.value;
            }

            records.set(token, resolvedProvider);
          } else {
            throw staticError('Unexpected provider', provider);
          }
        }

        return scope;
      }

      function tryResolveToken(token, record, records, parent, notFoundValue, flags) {
        try {
          return resolveToken(token, record, records, parent, notFoundValue, flags);
        } catch (e) {
          // ensure that 'e' is of type Error.
          if (!(e instanceof Error)) {
            e = new Error(e);
          }

          var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
          path.unshift(token);

          if (record && record.value == CIRCULAR$1) {
            // Reset the Circular flag.
            record.value = EMPTY;
          }

          throw e;
        }
      }

      function resolveToken(token, record, records, parent, notFoundValue, flags) {
        var value;

        if (record && !(flags & _InjectFlags.SkipSelf)) {
          // If we don't have a record, this implies that we don't own the provider hence don't know how
          // to resolve it.
          value = record.value;

          if (value == CIRCULAR$1) {
            throw Error(NO_NEW_LINE$1 + 'Circular dependency');
          } else if (value === EMPTY) {
            record.value = CIRCULAR$1;
            var obj = undefined;
            var useNew = record.useNew;
            var fn = record.fn;
            var depRecords = record.deps;
            var deps = EMPTY;

            if (depRecords.length) {
              deps = [];

              for (var i = 0; i < depRecords.length; i++) {
                var depRecord = depRecords[i];
                var options = depRecord.options;
                var childRecord = options & 2
                /* CheckSelf */
                ? records.get(depRecord.token) : undefined;
                deps.push(tryResolveToken( // Current Token to resolve
                depRecord.token, // A record which describes how to resolve the token.
                // If undefined, this means we don't have such a record
                childRecord, // Other records we know about.
                records, // If we don't know how to resolve dependency and we should not check parent for it,
                // than pass in Null injector.
                !childRecord && !(options & 4
                /* CheckParent */
                ) ? _Injector.NULL : parent, options & 1
                /* Optional */
                ? null : _Injector.THROW_IF_NOT_FOUND, _InjectFlags.Default));
              }
            }

            record.value = value = useNew ? _construct(fn, _toConsumableArray(deps)) : fn.apply(obj, deps);
          }
        } else if (!(flags & _InjectFlags.Self)) {
          value = parent.get(token, notFoundValue, _InjectFlags.Default);
        } else if (!(flags & _InjectFlags.Optional)) {
          value = _Injector.NULL.get(token, notFoundValue);
        } else {
          value = _Injector.NULL.get(token, typeof notFoundValue !== 'undefined' ? notFoundValue : null);
        }

        return value;
      }

      function computeDeps(provider) {
        var deps = EMPTY;
        var providerDeps = provider.deps;

        if (providerDeps && providerDeps.length) {
          deps = [];

          for (var i = 0; i < providerDeps.length; i++) {
            var options = 6
            /* Default */
            ;

            var token = _resolveForwardRef(providerDeps[i]);

            if (Array.isArray(token)) {
              for (var j = 0, annotations = token; j < annotations.length; j++) {
                var annotation = annotations[j];

                if (annotation instanceof _Optional || annotation == _Optional) {
                  options = options | 1
                  /* Optional */
                  ;
                } else if (annotation instanceof _SkipSelf || annotation == _SkipSelf) {
                  options = options & ~2
                  /* CheckSelf */
                  ;
                } else if (annotation instanceof _Self || annotation == _Self) {
                  options = options & ~4
                  /* CheckParent */
                  ;
                } else if (annotation instanceof _Inject) {
                  token = annotation.token;
                } else {
                  token = _resolveForwardRef(annotation);
                }
              }
            }

            deps.push({
              token: token,
              options: options
            });
          }
        } else if (provider.useExisting) {
          var _token = _resolveForwardRef(provider.useExisting);

          deps = [{
            token: _token,
            options: 6
            /* Default */

          }];
        } else if (!providerDeps && !(USE_VALUE in provider)) {
          // useValue & useExisting are the only ones which are exempt from deps all others need it.
          throw staticError('\'deps\' required', provider);
        }

        return deps;
      }

      function staticError(text, obj) {
        return new Error(formatError(text, obj, 'StaticInjectorError'));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Retrieves the component instance associated with a given DOM element.
       *
       * @usageNotes
       * Given the following DOM structure:
       *
       * ```html
       * <app-root>
       *   <div>
       *     <child-comp></child-comp>
       *   </div>
       * </app-root>
       * ```
       *
       * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`
       * associated with this DOM element.
       *
       * Calling the function on `<app-root>` will return the `MyApp` instance.
       *
       *
       * @param element DOM element from which the component should be retrieved.
       * @returns Component instance associated with the element or `null` if there
       *    is no component associated with it.
       *
       * @publicApi
       * @globalApi ng
       */


      function getComponent(element) {
        assertDomElement(element);
        var context = getLContext(element);
        if (context === null) return null;

        if (context.component === undefined) {
          context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);
        }

        return context.component;
      }
      /**
       * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded
       * view that the element is part of. Otherwise retrieves the instance of the component whose view
       * owns the element (in this case, the result is the same as calling `getOwningComponent`).
       *
       * @param element Element for which to get the surrounding component instance.
       * @returns Instance of the component that is around the element or null if the element isn't
       *    inside any component.
       *
       * @publicApi
       * @globalApi ng
       */


      function getContext(element) {
        assertDomElement(element);
        var context = getLContext(element);
        return context === null ? null : context.lView[CONTEXT];
      }
      /**
       * Retrieves the component instance whose view contains the DOM element.
       *
       * For example, if `<child-comp>` is used in the template of `<app-comp>`
       * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`
       * would return `<app-comp>`.
       *
       * @param elementOrDir DOM element, component or directive instance
       *    for which to retrieve the root components.
       * @returns Component instance whose view owns the DOM element or null if the element is not
       *    part of a component view.
       *
       * @publicApi
       * @globalApi ng
       */


      function getOwningComponent(elementOrDir) {
        var context = getLContext(elementOrDir);
        if (context === null) return null;
        var lView = context.lView;
        var parent;
        ngDevMode && assertLView(lView);

        while (lView[TVIEW].type === 2
        /* Embedded */
        && (parent = getLViewParent(lView))) {
          lView = parent;
        }

        return lView[FLAGS] & 512
        /* IsRoot */
        ? null : lView[CONTEXT];
      }
      /**
       * Retrieves all root components associated with a DOM element, directive or component instance.
       * Root components are those which have been bootstrapped by Angular.
       *
       * @param elementOrDir DOM element, component or directive instance
       *    for which to retrieve the root components.
       * @returns Root components associated with the target object.
       *
       * @publicApi
       * @globalApi ng
       */


      function getRootComponents(elementOrDir) {
        return _toConsumableArray(getRootContext(elementOrDir).components);
      }
      /**
       * Retrieves an `Injector` associated with an element, component or directive instance.
       *
       * @param elementOrDir DOM element, component or directive instance for which to
       *    retrieve the injector.
       * @returns Injector associated with the element, component or directive instance.
       *
       * @publicApi
       * @globalApi ng
       */


      function getInjector(elementOrDir) {
        var context = getLContext(elementOrDir);
        if (context === null) return _Injector.NULL;
        var tNode = context.lView[TVIEW].data[context.nodeIndex];
        return new NodeInjector(tNode, context.lView);
      }
      /**
       * Retrieve a set of injection tokens at a given DOM node.
       *
       * @param element Element for which the injection tokens should be retrieved.
       */


      function getInjectionTokens(element) {
        var context = getLContext(element);
        if (context === null) return [];
        var lView = context.lView;
        var tView = lView[TVIEW];
        var tNode = tView.data[context.nodeIndex];
        var providerTokens = [];
        var startIndex = tNode.providerIndexes & 1048575
        /* ProvidersStartIndexMask */
        ;
        var endIndex = tNode.directiveEnd;

        for (var i = startIndex; i < endIndex; i++) {
          var value = tView.data[i];

          if (isDirectiveDefHack(value)) {
            // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a
            // design flaw.  We should always store same type so that we can be monomorphic. The issue
            // is that for Components/Directives we store the def instead the type. The correct behavior
            // is that we should always be storing injectable type in this location.
            value = value.type;
          }

          providerTokens.push(value);
        }

        return providerTokens;
      }
      /**
       * Retrieves directive instances associated with a given DOM node. Does not include
       * component instances.
       *
       * @usageNotes
       * Given the following DOM structure:
       *
       * ```html
       * <app-root>
       *   <button my-button></button>
       *   <my-comp></my-comp>
       * </app-root>
       * ```
       *
       * Calling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`
       * directive that is associated with the DOM node.
       *
       * Calling `getDirectives` on `<my-comp>` will return an empty array.
       *
       * @param node DOM node for which to get the directives.
       * @returns Array of directives associated with the node.
       *
       * @publicApi
       * @globalApi ng
       */


      function getDirectives(node) {
        // Skip text nodes because we can't have directives associated with them.
        if (node instanceof Text) {
          return [];
        }

        var context = getLContext(node);

        if (context === null) {
          return [];
        }

        var lView = context.lView;
        var tView = lView[TVIEW];
        var nodeIndex = context.nodeIndex;

        if (!(tView === null || tView === void 0 ? void 0 : tView.data[nodeIndex])) {
          return [];
        }

        if (context.directives === undefined) {
          context.directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);
        } // The `directives` in this case are a named array called `LComponentView`. Clone the
        // result so we don't expose an internal data structure in the user's console.


        return context.directives === null ? [] : _toConsumableArray(context.directives);
      }
      /**
       * Returns the debug (partial) metadata for a particular directive or component instance.
       * The function accepts an instance of a directive or component and returns the corresponding
       * metadata.
       *
       * @param directiveOrComponentInstance Instance of a directive or component
       * @returns metadata of the passed directive or component
       *
       * @publicApi
       * @globalApi ng
       */


      function getDirectiveMetadata(directiveOrComponentInstance) {
        var constructor = directiveOrComponentInstance.constructor;

        if (!constructor) {
          throw new Error('Unable to find the instance constructor');
        } // In case a component inherits from a directive, we may have component and directive metadata
        // To ensure we don't get the metadata of the directive, we want to call `getComponentDef` first.


        var componentDef = getComponentDef(constructor);

        if (componentDef) {
          return {
            inputs: componentDef.inputs,
            outputs: componentDef.outputs,
            encapsulation: componentDef.encapsulation,
            changeDetection: componentDef.onPush ? _ChangeDetectionStrategy.OnPush : _ChangeDetectionStrategy.Default
          };
        }

        var directiveDef = getDirectiveDef(constructor);

        if (directiveDef) {
          return {
            inputs: directiveDef.inputs,
            outputs: directiveDef.outputs
          };
        }

        return null;
      }
      /**
       * Retrieve map of local references.
       *
       * The references are retrieved as a map of local reference name to element or directive instance.
       *
       * @param target DOM element, component or directive instance for which to retrieve
       *    the local references.
       */


      function getLocalRefs(target) {
        var context = getLContext(target);
        if (context === null) return {};

        if (context.localRefs === undefined) {
          context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);
        }

        return context.localRefs || {};
      }
      /**
       * Retrieves the host element of a component or directive instance.
       * The host element is the DOM element that matched the selector of the directive.
       *
       * @param componentOrDirective Component or directive instance for which the host
       *     element should be retrieved.
       * @returns Host element of the target.
       *
       * @publicApi
       * @globalApi ng
       */


      function getHostElement(componentOrDirective) {
        return getLContext(componentOrDirective)["native"];
      }
      /**
       * Retrieves the rendered text for a given component.
       *
       * This function retrieves the host element of a component and
       * and then returns the `textContent` for that element. This implies
       * that the text returned will include re-projected content of
       * the component as well.
       *
       * @param component The component to return the content text for.
       */


      function getRenderedText(component) {
        var hostElement = getHostElement(component);
        return hostElement.textContent || '';
      }
      /**
       * Retrieves a list of event listeners associated with a DOM element. The list does include host
       * listeners, but it does not include event listeners defined outside of the Angular context
       * (e.g. through `addEventListener`).
       *
       * @usageNotes
       * Given the following DOM structure:
       *
       * ```html
       * <app-root>
       *   <div (click)="doSomething()"></div>
       * </app-root>
       * ```
       *
       * Calling `getListeners` on `<div>` will return an object that looks as follows:
       *
       * ```ts
       * {
       *   name: 'click',
       *   element: <div>,
       *   callback: () => doSomething(),
       *   useCapture: false
       * }
       * ```
       *
       * @param element Element for which the DOM listeners should be retrieved.
       * @returns Array of event listeners on the DOM element.
       *
       * @publicApi
       * @globalApi ng
       */


      function getListeners(element) {
        assertDomElement(element);
        var lContext = getLContext(element);
        if (lContext === null) return [];
        var lView = lContext.lView;
        var tView = lView[TVIEW];
        var lCleanup = lView[CLEANUP];
        var tCleanup = tView.cleanup;
        var listeners = [];

        if (tCleanup && lCleanup) {
          for (var i = 0; i < tCleanup.length;) {
            var firstParam = tCleanup[i++];
            var secondParam = tCleanup[i++];

            if (typeof firstParam === 'string') {
              var name = firstParam;
              var listenerElement = unwrapRNode(lView[secondParam]);
              var callback = lCleanup[tCleanup[i++]];
              var useCaptureOrIndx = tCleanup[i++]; // if useCaptureOrIndx is boolean then report it as is.
              // if useCaptureOrIndx is positive number then it in unsubscribe method
              // if useCaptureOrIndx is negative number then it is a Subscription

              var type = typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0 ? 'dom' : 'output';
              var useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;

              if (element == listenerElement) {
                listeners.push({
                  element: element,
                  name: name,
                  callback: callback,
                  useCapture: useCapture,
                  type: type
                });
              }
            }
          }
        }

        listeners.sort(sortListeners);
        return listeners;
      }

      function sortListeners(a, b) {
        if (a.name == b.name) return 0;
        return a.name < b.name ? -1 : 1;
      }
      /**
       * This function should not exist because it is megamorphic and only mostly correct.
       *
       * See call site for more info.
       */


      function isDirectiveDefHack(obj) {
        return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;
      }
      /**
       * Returns the attached `DebugNode` instance for an element in the DOM.
       *
       * @param element DOM element which is owned by an existing component's view.
       */


      function getDebugNode(element) {
        if (ngDevMode && !(element instanceof Node)) {
          throw new Error('Expecting instance of DOM Element');
        }

        var lContext = getLContext(element);

        if (lContext === null) {
          return null;
        }

        var lView = lContext.lView;
        var nodeIndex = lContext.nodeIndex;

        if (nodeIndex !== -1) {
          var valueInLView = lView[nodeIndex]; // this means that value in the lView is a component with its own
          // data. In this situation the TNode is not accessed at the same spot.

          var tNode = isLView(valueInLView) ? valueInLView[T_HOST] : getTNode(lView[TVIEW], nodeIndex);
          ngDevMode && assertEqual(tNode.index, nodeIndex, 'Expecting that TNode at index is same as index');
          return buildDebugNode(tNode, lView);
        }

        return null;
      }
      /**
       * Retrieve the component `LView` from component/element.
       *
       * NOTE: `LView` is a private and should not be leaked outside.
       *       Don't export this method to `ng.*` on window.
       *
       * @param target DOM element or component instance for which to retrieve the LView.
       */


      function getComponentLView(target) {
        var lContext = getLContext(target);
        var nodeIndx = lContext.nodeIndex;
        var lView = lContext.lView;
        var componentLView = lView[nodeIndx];
        ngDevMode && assertLView(componentLView);
        return componentLView;
      }
      /** Asserts that a value is a DOM Element. */


      function assertDomElement(value) {
        if (typeof Element !== 'undefined' && !(value instanceof Element)) {
          throw new Error('Expecting instance of DOM Element');
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Marks a component for check (in case of OnPush components) and synchronously
       * performs change detection on the application this component belongs to.
       *
       * @param component Component to {@link ChangeDetectorRef#markForCheck mark for check}.
       *
       * @publicApi
       * @globalApi ng
       */


      function applyChanges(component) {
        markDirty(component);
        getRootComponents(component).forEach(function (rootComponent) {
          return detectChanges(rootComponent);
        });
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * This file introduces series of globally accessible debug tools
       * to allow for the Angular debugging story to function.
       *
       * To see this in action run the following command:
       *
       *   bazel run --config=ivy
       *   //packages/core/test/bundling/todo:devserver
       *
       *  Then load `localhost:5432` and start using the console tools.
       */

      /**
       * This value reflects the property on the window where the dev
       * tools are patched (window.ng).
       * */


      var GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';
      var _published = false;
      /**
       * Publishes a collection of default debug tools onto`window.ng`.
       *
       * These functions are available globally when Angular is in development
       * mode and are automatically stripped away from prod mode is on.
       */

      function publishDefaultGlobalUtils() {
        if (!_published) {
          _published = true;
          /**
           * Warning: this function is *INTERNAL* and should not be relied upon in application's code.
           * The contract of the function might be changed in any release and/or the function can be
           * removed completely.
           */

          publishGlobalUtil('ɵsetProfiler', setProfiler);
          publishGlobalUtil('getDirectiveMetadata', getDirectiveMetadata);
          publishGlobalUtil('getComponent', getComponent);
          publishGlobalUtil('getContext', getContext);
          publishGlobalUtil('getListeners', getListeners);
          publishGlobalUtil('getOwningComponent', getOwningComponent);
          publishGlobalUtil('getHostElement', getHostElement);
          publishGlobalUtil('getInjector', getInjector);
          publishGlobalUtil('getRootComponents', getRootComponents);
          publishGlobalUtil('getDirectives', getDirectives);
          publishGlobalUtil('applyChanges', applyChanges);
        }
      }
      /**
       * Publishes the given function to `window.ng` so that it can be
       * used from the browser console when an application is not in production.
       */


      function publishGlobalUtil(name, fn) {
        if (typeof COMPILED === 'undefined' || !COMPILED) {
          // Note: we can't export `ng` when using closure enhanced optimization as:
          // - closure declares globals itself for minified names, which sometimes clobber our `ng` global
          // - we can't declare a closure extern as the namespace `ng` is already used within Google
          //   for typings for AngularJS (via `goog.provide('ng....')`).
          var w = _global;
          ngDevMode && assertDefined(fn, 'function not defined');

          if (w) {
            var container = w[GLOBAL_PUBLISH_EXPANDO_KEY];

            if (!container) {
              container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};
            }

            container[name] = fn;
          }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ɵ0$7 = function ɵ0$7(token, notFoundValue) {
        throwProviderNotFoundError(token, 'NullInjector');
      }; // TODO: A hack to not pull in the NullInjector from @angular/core.


      var NULL_INJECTOR$1 = {
        get: ɵ0$7
      };
      /**
       * Bootstraps a Component into an existing host element and returns an instance
       * of the component.
       *
       * Use this function to bootstrap a component into the DOM tree. Each invocation
       * of this function will create a separate tree of components, injectors and
       * change detection cycles and lifetimes. To dynamically insert a new component
       * into an existing tree such that it shares the same injection, change detection
       * and object lifetime, use {@link ViewContainer#createComponent}.
       *
       * @param componentType Component to bootstrap
       * @param options Optional parameters which control bootstrapping
       */

      function renderComponent$1(componentType
      /* Type as workaround for: Microsoft/TypeScript/issues/4881 */
      ) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        ngDevMode && publishDefaultGlobalUtils();
        ngDevMode && assertComponentType(componentType);
        var rendererFactory = opts.rendererFactory || domRendererFactory3;
        var sanitizer = opts.sanitizer || null;
        var componentDef = getComponentDef(componentType);
        if (componentDef.type != componentType) componentDef.type = componentType; // The first index of the first selector is the tag name.

        var componentTag = componentDef.selectors[0][0];
        var hostRenderer = rendererFactory.createRenderer(null, null);
        var hostRNode = locateHostElement(hostRenderer, opts.host || componentTag, componentDef.encapsulation);
        var rootFlags = componentDef.onPush ? 64
        /* Dirty */
        | 512
        /* IsRoot */
        : 16
        /* CheckAlways */
        | 512
        /* IsRoot */
        ;
        var rootContext = createRootContext(opts.scheduler, opts.playerHandler);
        var renderer = rendererFactory.createRenderer(hostRNode, componentDef);
        var rootTView = createTView(0
        /* Root */
        , null, null, 1, 0, null, null, null, null, null);
        var rootView = createLView(null, rootTView, rootContext, rootFlags, null, null, rendererFactory, renderer, null, opts.injector || null);
        enterView(rootView);
        var component;

        try {
          if (rendererFactory.begin) rendererFactory.begin();
          var componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);
          component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null); // create mode pass

          renderView(rootTView, rootView, null); // update mode pass

          refreshView(rootTView, rootView, null, null);
        } finally {
          leaveView();
          if (rendererFactory.end) rendererFactory.end();
        }

        return component;
      }
      /**
       * Creates the root component view and the root component node.
       *
       * @param rNode Render host element.
       * @param def ComponentDef
       * @param rootView The parent view where the host node is stored
       * @param rendererFactory Factory to be used for creating child renderers.
       * @param hostRenderer The current renderer
       * @param sanitizer The sanitizer, if provided
       *
       * @returns Component view created
       */


      function createRootComponentView(rNode, def, rootView, rendererFactory, hostRenderer, sanitizer) {
        var tView = rootView[TVIEW];
        var index = HEADER_OFFSET;
        ngDevMode && assertIndexInRange(rootView, index);
        rootView[index] = rNode; // '#host' is added here as we don't know the real host DOM name (we don't want to read it) and at
        // the same time we want to communicate the debug `TNode` that this is a special `TNode`
        // representing a host element.

        var tNode = getOrCreateTNode(tView, index, 2
        /* Element */
        , '#host', null);
        var mergedAttrs = tNode.mergedAttrs = def.hostAttrs;

        if (mergedAttrs !== null) {
          computeStaticStyling(tNode, mergedAttrs, true);

          if (rNode !== null) {
            setUpAttributes(hostRenderer, rNode, mergedAttrs);

            if (tNode.classes !== null) {
              writeDirectClass(hostRenderer, rNode, tNode.classes);
            }

            if (tNode.styles !== null) {
              writeDirectStyle(hostRenderer, rNode, tNode.styles);
            }
          }
        }

        var viewRenderer = rendererFactory.createRenderer(rNode, def);
        var componentView = createLView(rootView, getOrCreateTComponentView(def), null, def.onPush ? 64
        /* Dirty */
        : 16
        /* CheckAlways */
        , rootView[index], tNode, rendererFactory, viewRenderer, sanitizer || null, null);

        if (tView.firstCreatePass) {
          diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), tView, def.type);
          markAsComponentHost(tView, tNode);
          initTNodeFlags(tNode, rootView.length, 1);
        }

        addToViewTree(rootView, componentView); // Store component view at node index, with node as the HOST

        return rootView[index] = componentView;
      }
      /**
       * Creates a root component and sets it up with features and host bindings. Shared by
       * renderComponent() and ViewContainerRef.createComponent().
       */


      function createRootComponent(componentView, componentDef, rootLView, rootContext, hostFeatures) {
        var tView = rootLView[TVIEW]; // Create directive instance with factory() and store at next index in viewData

        var component = instantiateRootComponent(tView, rootLView, componentDef);
        rootContext.components.push(component);
        componentView[CONTEXT] = component;
        hostFeatures && hostFeatures.forEach(function (feature) {
          return feature(component, componentDef);
        }); // We want to generate an empty QueryList for root content queries for backwards
        // compatibility with ViewEngine.

        if (componentDef.contentQueries) {
          var tNode = getCurrentTNode();
          ngDevMode && assertDefined(tNode, 'TNode expected');
          componentDef.contentQueries(1
          /* Create */
          , component, tNode.directiveStart);
        }

        var rootTNode = getCurrentTNode();
        ngDevMode && assertDefined(rootTNode, 'tNode should have been already created');

        if (tView.firstCreatePass && (componentDef.hostBindings !== null || componentDef.hostAttrs !== null)) {
          setSelectedIndex(rootTNode.index);
          var rootTView = rootLView[TVIEW];
          registerHostBindingOpCodes(rootTView, rootTNode, rootLView, rootTNode.directiveStart, rootTNode.directiveEnd, componentDef);
          invokeHostBindingsInCreationMode(componentDef, component);
        }

        return component;
      }

      function createRootContext(scheduler, playerHandler) {
        return {
          components: [],
          scheduler: scheduler || defaultScheduler,
          clean: CLEAN_PROMISE,
          playerHandler: playerHandler || null,
          flags: 0
          /* Empty */

        };
      }
      /**
       * Used to enable lifecycle hooks on the root component.
       *
       * Include this feature when calling `renderComponent` if the root component
       * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't
       * be called properly.
       *
       * Example:
       *
       * ```
       * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});
       * ```
       */


      function LifecycleHooksFeature(component, def) {
        var lView = readPatchedLView(component);
        ngDevMode && assertDefined(lView, 'LView is required');
        var tView = lView[TVIEW];
        var tNode = getCurrentTNode();
        ngDevMode && assertDefined(tNode, 'TNode is required');
        registerPostOrderHooks(tView, tNode);
      }
      /**
       * Wait on component until it is rendered.
       *
       * This function returns a `Promise` which is resolved when the component's
       * change detection is executed. This is determined by finding the scheduler
       * associated with the `component`'s render tree and waiting until the scheduler
       * flushes. If nothing is scheduled, the function returns a resolved promise.
       *
       * Example:
       * ```
       * await whenRendered(myComponent);
       * ```
       *
       * @param component Component to wait upon
       * @returns Promise which resolves when the component is rendered.
       */


      function whenRendered(component) {
        return getRootContext(component).clean;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function getSuperType(type) {
        return Object.getPrototypeOf(type.prototype).constructor;
      }
      /**
       * Merges the definition from a super class to a sub class.
       * @param definition The definition that is a SubClass of another directive of component
       *
       * @codeGenApi
       */


      function _ɵɵInheritDefinitionFeature(definition) {
        var superType = getSuperType(definition.type);
        var shouldInheritFields = true;
        var inheritanceChain = [definition];

        while (superType) {
          var superDef = undefined;

          if (isComponentDef(definition)) {
            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
            superDef = superType.ɵcmp || superType.ɵdir;
          } else {
            if (superType.ɵcmp) {
              throw new Error('Directives cannot inherit Components');
            } // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.


            superDef = superType.ɵdir;
          }

          if (superDef) {
            if (shouldInheritFields) {
              inheritanceChain.push(superDef); // Some fields in the definition may be empty, if there were no values to put in them that
              // would've justified object creation. Unwrap them if necessary.

              var writeableDef = definition;
              writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);
              writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);
              writeableDef.outputs = maybeUnwrapEmpty(definition.outputs); // Merge hostBindings

              var superHostBindings = superDef.hostBindings;
              superHostBindings && inheritHostBindings(definition, superHostBindings); // Merge queries

              var superViewQuery = superDef.viewQuery;
              var superContentQueries = superDef.contentQueries;
              superViewQuery && inheritViewQuery(definition, superViewQuery);
              superContentQueries && inheritContentQueries(definition, superContentQueries); // Merge inputs and outputs

              fillProperties(definition.inputs, superDef.inputs);
              fillProperties(definition.declaredInputs, superDef.declaredInputs);
              fillProperties(definition.outputs, superDef.outputs); // Merge animations metadata.
              // If `superDef` is a Component, the `data` field is present (defaults to an empty object).

              if (isComponentDef(superDef) && superDef.data.animation) {
                // If super def is a Component, the `definition` is also a Component, since Directives can
                // not inherit Components (we throw an error above and cannot reach this code).
                var defData = definition.data;
                defData.animation = (defData.animation || []).concat(superDef.data.animation);
              }
            } // Run parent features


            var features = superDef.features;

            if (features) {
              for (var i = 0; i < features.length; i++) {
                var feature = features[i];

                if (feature && feature.ngInherit) {
                  feature(definition);
                } // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this
                // def already has all the necessary information inherited from its super class(es), so we
                // can stop merging fields from super classes. However we need to iterate through the
                // prototype chain to look for classes that might contain other "features" (like
                // NgOnChanges), which we should invoke for the original `definition`. We set the
                // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance
                // logic and only invoking functions from the "features" list.


                if (feature === _ɵɵInheritDefinitionFeature) {
                  shouldInheritFields = false;
                }
              }
            }
          }

          superType = Object.getPrototypeOf(superType);
        }

        mergeHostAttrsAcrossInheritance(inheritanceChain);
      }
      /**
       * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.
       *
       * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing
       * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child
       * type.
       */


      function mergeHostAttrsAcrossInheritance(inheritanceChain) {
        var hostVars = 0;
        var hostAttrs = null; // We process the inheritance order from the base to the leaves here.

        for (var i = inheritanceChain.length - 1; i >= 0; i--) {
          var def = inheritanceChain[i]; // For each `hostVars`, we need to add the superclass amount.

          def.hostVars = hostVars += def.hostVars; // for each `hostAttrs` we need to merge it with superclass.

          def.hostAttrs = mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));
        }
      }

      function maybeUnwrapEmpty(value) {
        if (value === EMPTY_OBJ) {
          return {};
        } else if (value === EMPTY_ARRAY) {
          return [];
        } else {
          return value;
        }
      }

      function inheritViewQuery(definition, superViewQuery) {
        var prevViewQuery = definition.viewQuery;

        if (prevViewQuery) {
          definition.viewQuery = function (rf, ctx) {
            superViewQuery(rf, ctx);
            prevViewQuery(rf, ctx);
          };
        } else {
          definition.viewQuery = superViewQuery;
        }
      }

      function inheritContentQueries(definition, superContentQueries) {
        var prevContentQueries = definition.contentQueries;

        if (prevContentQueries) {
          definition.contentQueries = function (rf, ctx, directiveIndex) {
            superContentQueries(rf, ctx, directiveIndex);
            prevContentQueries(rf, ctx, directiveIndex);
          };
        } else {
          definition.contentQueries = superContentQueries;
        }
      }

      function inheritHostBindings(definition, superHostBindings) {
        var prevHostBindings = definition.hostBindings;

        if (prevHostBindings) {
          definition.hostBindings = function (rf, ctx) {
            superHostBindings(rf, ctx);
            prevHostBindings(rf, ctx);
          };
        } else {
          definition.hostBindings = superHostBindings;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Fields which exist on either directive or component definitions, and need to be copied from
       * parent to child classes by the `ɵɵCopyDefinitionFeature`.
       */


      var COPY_DIRECTIVE_FIELDS = [// The child class should use the providers of its parent.
      'providersResolver' // Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such
      // as inputs, outputs, and host binding functions.
      ];
      /**
       * Fields which exist only on component definitions, and need to be copied from parent to child
       * classes by the `ɵɵCopyDefinitionFeature`.
       *
       * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,
       * since those should go in `COPY_DIRECTIVE_FIELDS` above.
       */

      var COPY_COMPONENT_FIELDS = [// The child class should use the template function of its parent, including all template
      // semantics.
      'template', 'decls', 'consts', 'vars', 'onPush', 'ngContentSelectors', // The child class should use the CSS styles of its parent, including all styling semantics.
      'styles', 'encapsulation', // The child class should be checked by the runtime in the same way as its parent.
      'schemas'];
      /**
       * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a
       * definition.
       *
       * This exists primarily to support ngcc migration of an existing View Engine pattern, where an
       * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it
       * generates a skeleton definition on the child class, and applies this feature.
       *
       * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,
       * including things like the component template function.
       *
       * @param definition The definition of a child class which inherits from a parent class with its
       * own definition.
       *
       * @codeGenApi
       */

      function _ɵɵCopyDefinitionFeature(definition) {
        var superType = getSuperType(definition.type);
        var superDef = undefined;

        if (isComponentDef(definition)) {
          // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
          superDef = superType.ɵcmp;
        } else {
          // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
          superDef = superType.ɵdir;
        } // Needed because `definition` fields are readonly.


        var defAny = definition; // Copy over any fields that apply to either directives or components.

        var _iterator4 = _createForOfIteratorHelper(COPY_DIRECTIVE_FIELDS),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _field = _step4.value;
            defAny[_field] = superDef[_field];
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        if (isComponentDef(superDef)) {
          // Copy over any component-specific fields.
          var _iterator5 = _createForOfIteratorHelper(COPY_COMPONENT_FIELDS),
              _step5;

          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var field = _step5.value;
              defAny[field] = superDef[field];
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _symbolIterator = null;

      function getSymbolIterator() {
        if (!_symbolIterator) {
          var _Symbol = _global['Symbol'];

          if (_Symbol && _Symbol.iterator) {
            _symbolIterator = _Symbol.iterator;
          } else {
            // es6-shim specific logic
            var keys = Object.getOwnPropertyNames(Map.prototype);

            for (var i = 0; i < keys.length; ++i) {
              var key = keys[i];

              if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
                _symbolIterator = key;
              }
            }
          }
        }

        return _symbolIterator;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function devModeEqual(a, b) {
        var isListLikeIterableA = isListLikeIterable(a);
        var isListLikeIterableB = isListLikeIterable(b);

        if (isListLikeIterableA && isListLikeIterableB) {
          return areIterablesEqual(a, b, devModeEqual);
        } else {
          var isAObject = a && (typeof a === 'object' || typeof a === 'function');
          var isBObject = b && (typeof b === 'object' || typeof b === 'function');

          if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
            return true;
          } else {
            return Object.is(a, b);
          }
        }
      }
      /**
       * Indicates that the result of a {@link Pipe} transformation has changed even though the
       * reference has not changed.
       *
       * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value
       * is stored.
       *
       * Example:
       *
       * ```
       * if (this._latestValue === this._latestReturnedValue) {
       *    return this._latestReturnedValue;
       *  } else {
       *    this._latestReturnedValue = this._latestValue;
       *    return WrappedValue.wrap(this._latestValue); // this will force update
       *  }
       * ```
       *
       * @publicApi
       * @deprecated from v10 stop using. (No replacement, deemed unnecessary.)
       */


      var _WrappedValue = /*#__PURE__*/function () {
        function _WrappedValue(value) {
          _classCallCheck2(this, _WrappedValue);

          this.wrapped = value;
        }
        /** Creates a wrapped value. */


        _createClass2(_WrappedValue, null, [{
          key: "wrap",
          value: function wrap(value) {
            return new _WrappedValue(value);
          }
          /**
           * Returns the underlying value of a wrapped value.
           * Returns the given `value` when it is not wrapped.
           **/

        }, {
          key: "unwrap",
          value: function unwrap(value) {
            return _WrappedValue.isWrapped(value) ? value.wrapped : value;
          }
          /** Returns true if `value` is a wrapped value. */

        }, {
          key: "isWrapped",
          value: function isWrapped(value) {
            return value instanceof _WrappedValue;
          }
        }]);

        return _WrappedValue;
      }();

      function isListLikeIterable(obj) {
        if (!isJsObject(obj)) return false;
        return Array.isArray(obj) || !(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]
        getSymbolIterator() in obj; // JS Iterable have a Symbol.iterator prop
      }

      function areIterablesEqual(a, b, comparator) {
        var iterator1 = a[getSymbolIterator()]();
        var iterator2 = b[getSymbolIterator()]();

        while (true) {
          var item1 = iterator1.next();
          var item2 = iterator2.next();
          if (item1.done && item2.done) return true;
          if (item1.done || item2.done) return false;
          if (!comparator(item1.value, item2.value)) return false;
        }
      }

      function iterateListLike(obj, fn) {
        if (Array.isArray(obj)) {
          for (var i = 0; i < obj.length; i++) {
            fn(obj[i]);
          }
        } else {
          var iterator = obj[getSymbolIterator()]();
          var item;

          while (!(item = iterator.next()).done) {
            fn(item.value);
          }
        }
      }

      function isJsObject(o) {
        return o !== null && (typeof o === 'function' || typeof o === 'object');
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // TODO(misko): consider inlining

      /** Updates binding and returns the value. */


      function updateBinding(lView, bindingIndex, value) {
        return lView[bindingIndex] = value;
      }
      /** Gets the current binding value. */


      function getBinding(lView, bindingIndex) {
        ngDevMode && assertIndexInRange(lView, bindingIndex);
        ngDevMode && assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');
        return lView[bindingIndex];
      }
      /**
       * Updates binding if changed, then returns whether it was updated.
       *
       * This function also checks the `CheckNoChangesMode` and throws if changes are made.
       * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE
       * behavior.
       *
       * @param lView current `LView`
       * @param bindingIndex The binding in the `LView` to check
       * @param value New value to check against `lView[bindingIndex]`
       * @returns `true` if the bindings has changed. (Throws if binding has changed during
       *          `CheckNoChangesMode`)
       */


      function bindingUpdated(lView, bindingIndex, value) {
        ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
        ngDevMode && assertLessThan(bindingIndex, lView.length, "Slot should have been initialized to NO_CHANGE");
        var oldValue = lView[bindingIndex];

        if (Object.is(oldValue, value)) {
          return false;
        } else {
          if (ngDevMode && isInCheckNoChangesMode()) {
            // View engine didn't report undefined values as changed on the first checkNoChanges pass
            // (before the change detection was run).
            var oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;

            if (!devModeEqual(oldValueToCompare, value)) {
              var details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);
              throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName);
            } // There was a change, but the `devModeEqual` decided that the change is exempt from an error.
            // For this reason we exit as if no change. The early exit is needed to prevent the changed
            // value to be written into `LView` (If we would write the new value that we would not see it
            // as change on next CD.)


            return false;
          }

          lView[bindingIndex] = value;
          return true;
        }
      }
      /** Updates 2 bindings if changed, then returns whether either was updated. */


      function bindingUpdated2(lView, bindingIndex, exp1, exp2) {
        var different = bindingUpdated(lView, bindingIndex, exp1);
        return bindingUpdated(lView, bindingIndex + 1, exp2) || different;
      }
      /** Updates 3 bindings if changed, then returns whether any was updated. */


      function bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {
        var different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
        return bindingUpdated(lView, bindingIndex + 2, exp3) || different;
      }
      /** Updates 4 bindings if changed, then returns whether any was updated. */


      function bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {
        var different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
        return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Updates the value of or removes a bound attribute on an Element.
       *
       * Used in the case of `[attr.title]="value"`
       *
       * @param name name The name of the attribute.
       * @param value value The attribute is removed when value is `null` or `undefined`.
       *                  Otherwise the attribute value is set to the stringified value.
       * @param sanitizer An optional function used to sanitize the value.
       * @param namespace Optional namespace to use when setting the attribute.
       *
       * @codeGenApi
       */


      function _ɵɵattribute(name, value, sanitizer, namespace) {
        var lView = getLView();
        var bindingIndex = nextBindingIndex();

        if (bindingUpdated(lView, bindingIndex, value)) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);
        }

        return _ɵɵattribute;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Create interpolation bindings with a variable number of expressions.
       *
       * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.
       * Those are faster because there is no need to create an array of expressions and iterate over it.
       *
       * `values`:
       * - has static text at even indexes,
       * - has evaluated expressions at odd indexes.
       *
       * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.
       */


      function interpolationV(lView, values) {
        ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');
        ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');
        var isBindingUpdated = false;
        var bindingIndex = getBindingIndex();

        for (var i = 1; i < values.length; i += 2) {
          // Check if bindings (odd indexes) have changed
          isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;
        }

        setBindingIndex(bindingIndex);

        if (!isBindingUpdated) {
          return NO_CHANGE;
        } // Build the updated content


        var content = values[0];

        for (var _i14 = 1; _i14 < values.length; _i14 += 2) {
          content += renderStringify(values[_i14]) + values[_i14 + 1];
        }

        return content;
      }
      /**
       * Creates an interpolation binding with 1 expression.
       *
       * @param prefix static value used for concatenation only.
       * @param v0 value checked for change.
       * @param suffix static value used for concatenation only.
       */


      function interpolation1(lView, prefix, v0, suffix) {
        var different = bindingUpdated(lView, nextBindingIndex(), v0);
        return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;
      }
      /**
       * Creates an interpolation binding with 2 expressions.
       */


      function interpolation2(lView, prefix, v0, i0, v1, suffix) {
        var bindingIndex = getBindingIndex();
        var different = bindingUpdated2(lView, bindingIndex, v0, v1);
        incrementBindingIndex(2);
        return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;
      }
      /**
       * Creates an interpolation binding with 3 expressions.
       */


      function interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {
        var bindingIndex = getBindingIndex();
        var different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);
        incrementBindingIndex(3);
        return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix : NO_CHANGE;
      }
      /**
       * Create an interpolation binding with 4 expressions.
       */


      function interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
        var bindingIndex = getBindingIndex();
        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
        incrementBindingIndex(4);
        return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + suffix : NO_CHANGE;
      }
      /**
       * Creates an interpolation binding with 5 expressions.
       */


      function interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
        var bindingIndex = getBindingIndex();
        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
        different = bindingUpdated(lView, bindingIndex + 4, v4) || different;
        incrementBindingIndex(5);
        return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix : NO_CHANGE;
      }
      /**
       * Creates an interpolation binding with 6 expressions.
       */


      function interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
        var bindingIndex = getBindingIndex();
        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
        different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;
        incrementBindingIndex(6);
        return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix : NO_CHANGE;
      }
      /**
       * Creates an interpolation binding with 7 expressions.
       */


      function interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
        var bindingIndex = getBindingIndex();
        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
        different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;
        incrementBindingIndex(7);
        return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + suffix : NO_CHANGE;
      }
      /**
       * Creates an interpolation binding with 8 expressions.
       */


      function interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
        var bindingIndex = getBindingIndex();
        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
        different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;
        incrementBindingIndex(8);
        return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix : NO_CHANGE;
      }
      /**
       *
       * Update an interpolated attribute on an element with single bound value surrounded by text.
       *
       * Used when the value passed to a property has 1 interpolated value in it:
       *
       * ```html
       * <div attr.title="prefix{{v0}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');
       * ```
       *
       * @param attrName The name of the attribute to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵattributeInterpolate(attrName, prefix, v0, suffix, sanitizer, namespace) {
        var lView = getLView();
        var interpolatedValue = interpolation1(lView, prefix, v0, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 1, prefix, suffix);
        }

        return _ɵɵattributeInterpolate;
      }
      /**
       *
       * Update an interpolated attribute on an element with 2 bound values surrounded by text.
       *
       * Used when the value passed to a property has 2 interpolated values in it:
       *
       * ```html
       * <div attr.title="prefix{{v0}}-{{v1}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');
       * ```
       *
       * @param attrName The name of the attribute to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵattributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {
        var lView = getLView();
        var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 2, prefix, i0, suffix);
        }

        return _ɵɵattributeInterpolate2;
      }
      /**
       *
       * Update an interpolated attribute on an element with 3 bound values surrounded by text.
       *
       * Used when the value passed to a property has 3 interpolated values in it:
       *
       * ```html
       * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵattributeInterpolate3(
       * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');
       * ```
       *
       * @param attrName The name of the attribute to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵattributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {
        var lView = getLView();
        var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);
        }

        return _ɵɵattributeInterpolate3;
      }
      /**
       *
       * Update an interpolated attribute on an element with 4 bound values surrounded by text.
       *
       * Used when the value passed to a property has 4 interpolated values in it:
       *
       * ```html
       * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵattributeInterpolate4(
       * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
       * ```
       *
       * @param attrName The name of the attribute to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵattributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {
        var lView = getLView();
        var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
        }

        return _ɵɵattributeInterpolate4;
      }
      /**
       *
       * Update an interpolated attribute on an element with 5 bound values surrounded by text.
       *
       * Used when the value passed to a property has 5 interpolated values in it:
       *
       * ```html
       * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵattributeInterpolate5(
       * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
       * ```
       *
       * @param attrName The name of the attribute to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵattributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {
        var lView = getLView();
        var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
        }

        return _ɵɵattributeInterpolate5;
      }
      /**
       *
       * Update an interpolated attribute on an element with 6 bound values surrounded by text.
       *
       * Used when the value passed to a property has 6 interpolated values in it:
       *
       * ```html
       * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵattributeInterpolate6(
       *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
       * ```
       *
       * @param attrName The name of the attribute to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵattributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {
        var lView = getLView();
        var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
        }

        return _ɵɵattributeInterpolate6;
      }
      /**
       *
       * Update an interpolated attribute on an element with 7 bound values surrounded by text.
       *
       * Used when the value passed to a property has 7 interpolated values in it:
       *
       * ```html
       * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵattributeInterpolate7(
       *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
       * ```
       *
       * @param attrName The name of the attribute to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵattributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {
        var lView = getLView();
        var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
        }

        return _ɵɵattributeInterpolate7;
      }
      /**
       *
       * Update an interpolated attribute on an element with 8 bound values surrounded by text.
       *
       * Used when the value passed to a property has 8 interpolated values in it:
       *
       * ```html
       * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵattributeInterpolate8(
       *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
       * ```
       *
       * @param attrName The name of the attribute to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param i6 Static value used for concatenation only.
       * @param v7 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵattributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {
        var lView = getLView();
        var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
        }

        return _ɵɵattributeInterpolate8;
      }
      /**
       * Update an interpolated attribute on an element with 9 or more bound values surrounded by text.
       *
       * Used when the number of interpolated values exceeds 8.
       *
       * ```html
       * <div
       *  title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵattributeInterpolateV(
       *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
       *  'suffix']);
       * ```
       *
       * @param attrName The name of the attribute to update.
       * @param values The collection of values and the strings in-between those values, beginning with
       * a string prefix and ending with a string suffix.
       * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵattributeInterpolateV(attrName, values, sanitizer, namespace) {
        var lView = getLView();
        var interpolated = interpolationV(lView, values);

        if (interpolated !== NO_CHANGE) {
          var tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);

          if (ngDevMode) {
            var interpolationInBetween = [values[0]]; // prefix

            for (var i = 2; i < values.length; i += 2) {
              interpolationInBetween.push(values[i]);
            }

            storePropertyBindingMetadata.apply(void 0, [getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - interpolationInBetween.length + 1].concat(interpolationInBetween));
          }
        }

        return _ɵɵattributeInterpolateV;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) {
        ngDevMode && assertFirstCreatePass(tView);
        ngDevMode && ngDevMode.firstCreatePass++;
        var tViewConsts = tView.consts; // TODO(pk): refactor getOrCreateTNode to have the "create" only version

        var tNode = getOrCreateTNode(tView, index, 4
        /* Container */
        , tagName || null, getConstant(tViewConsts, attrsIndex));
        resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
        registerPostOrderHooks(tView, tNode);
        var embeddedTView = tNode.tViews = createTView(2
        /* Embedded */
        , tNode, templateFn, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, tView.schemas, tViewConsts);

        if (tView.queries !== null) {
          tView.queries.template(tView, tNode);
          embeddedTView.queries = tView.queries.embeddedTView(tNode);
        }

        return tNode;
      }
      /**
       * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.
       *
       * <ng-template #foo>
       *    <div></div>
       * </ng-template>
       *
       * @param index The index of the container in the data array
       * @param templateFn Inline template
       * @param decls The number of nodes, local refs, and pipes for this template
       * @param vars The number of bindings for this template
       * @param tagName The name of the container element, if applicable
       * @param attrsIndex Index of template attributes in the `consts` array.
       * @param localRefs Index of the local references in the `consts` array.
       * @param localRefExtractor A function which extracts local-refs values from the template.
       *        Defaults to the current element associated with the local-ref.
       *
       * @codeGenApi
       */


      function _ɵɵtemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {
        var lView = getLView();
        var tView = getTView();
        var adjustedIndex = index + HEADER_OFFSET;
        var tNode = tView.firstCreatePass ? templateFirstCreatePass(adjustedIndex, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
        setCurrentTNode(tNode, false);
        var comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');
        appendChild(tView, lView, comment, tNode);
        attachPatchData(comment, lView);
        addToViewTree(lView, lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode));

        if (isDirectiveHost(tNode)) {
          createDirectivesInstances(tView, lView, tNode);
        }

        if (localRefsIndex != null) {
          saveResolvedLocalsInData(lView, tNode, localRefExtractor);
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Store a value in the `data` at a given `index`. */


      function store(tView, lView, index, value) {
        // We don't store any static data for local variables, so the first time
        // we see the template, we should store as null to avoid a sparse array
        if (index >= tView.data.length) {
          tView.data[index] = null;
          tView.blueprint[index] = null;
        }

        lView[index] = value;
      }
      /**
       * Retrieves a local reference from the current contextViewData.
       *
       * If the reference to retrieve is in a parent view, this instruction is used in conjunction
       * with a nextContext() call, which walks up the tree and updates the contextViewData instance.
       *
       * @param index The index of the local ref in contextViewData.
       *
       * @codeGenApi
       */


      function _ɵɵreference(index) {
        var contextLView = getContextLView();
        return load(contextLView, HEADER_OFFSET + index);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.
       *
       * This should be kept up to date with the public exports of @angular/core.
       */


      var angularCoreDiEnv = {
        'ɵɵdefineInjectable': _ɵɵdefineInjectable,
        'ɵɵdefineInjector': _ɵɵdefineInjector,
        'ɵɵinject': _ɵɵinject,
        'ɵɵinvalidFactoryDep': _ɵɵinvalidFactoryDep,
        'resolveForwardRef': _resolveForwardRef
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting
       * injectable def (`ɵprov`) onto the injectable type.
       */

      function compileInjectable(type, meta) {
        var ngInjectableDef = null;
        var ngFactoryDef = null; // if NG_PROV_DEF is already defined on this class then don't overwrite it

        if (!type.hasOwnProperty(NG_PROV_DEF)) {
          Object.defineProperty(type, NG_PROV_DEF, {
            get: function get() {
              if (ngInjectableDef === null) {
                ngInjectableDef = getCompilerFacade().compileInjectable(angularCoreDiEnv, "ng:///".concat(type.name, "/\u0275prov.js"), getInjectableMetadata(type, meta));
              }

              return ngInjectableDef;
            }
          });
        } // if NG_FACTORY_DEF is already defined on this class then don't overwrite it


        if (!type.hasOwnProperty(NG_FACTORY_DEF)) {
          Object.defineProperty(type, NG_FACTORY_DEF, {
            get: function get() {
              if (ngFactoryDef === null) {
                var compiler = getCompilerFacade();
                ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, "ng:///".concat(type.name, "/\u0275fac.js"), {
                  name: type.name,
                  type: type,
                  typeArgumentCount: 0,
                  deps: reflectDependencies(type),
                  target: compiler.FactoryTarget.Injectable
                });
              }

              return ngFactoryDef;
            },
            // Leave this configurable so that the factories from directives or pipes can take precedence.
            configurable: true
          });
        }
      }

      var ɵ0$8 = getClosureSafeProperty;
      var USE_VALUE$1 = getClosureSafeProperty({
        provide: String,
        useValue: ɵ0$8
      });

      function isUseClassProvider(meta) {
        return meta.useClass !== undefined;
      }

      function isUseValueProvider(meta) {
        return USE_VALUE$1 in meta;
      }

      function isUseFactoryProvider(meta) {
        return meta.useFactory !== undefined;
      }

      function isUseExistingProvider(meta) {
        return meta.useExisting !== undefined;
      }

      function getInjectableMetadata(type, srcMeta) {
        // Allow the compilation of a class with a `@Injectable()` decorator without parameters
        var meta = srcMeta || {
          providedIn: null
        };
        var compilerMeta = {
          name: type.name,
          type: type,
          typeArgumentCount: 0,
          providedIn: meta.providedIn
        };

        if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {
          compilerMeta.deps = convertDependencies(meta.deps);
        } // Check to see if the user explicitly provided a `useXxxx` property.


        if (isUseClassProvider(meta)) {
          compilerMeta.useClass = meta.useClass;
        } else if (isUseValueProvider(meta)) {
          compilerMeta.useValue = meta.useValue;
        } else if (isUseFactoryProvider(meta)) {
          compilerMeta.useFactory = meta.useFactory;
        } else if (isUseExistingProvider(meta)) {
          compilerMeta.useExisting = meta.useExisting;
        }

        return compilerMeta;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ɵ0$9 = getClosureSafeProperty;
      var USE_VALUE$2 = getClosureSafeProperty({
        provide: String,
        useValue: ɵ0$9
      });

      function convertInjectableProviderToFactory(type, provider) {
        if (!provider) {
          var reflectionCapabilities = new ReflectionCapabilities();
          var deps = reflectionCapabilities.parameters(type); // TODO - convert to flags.

          return function () {
            return _construct(type, _toConsumableArray(injectArgs(deps)));
          };
        }

        if (USE_VALUE$2 in provider) {
          var valueProvider = provider;
          return function () {
            return valueProvider.useValue;
          };
        } else if (provider.useExisting) {
          var existingProvider = provider;
          return function () {
            return _ɵɵinject(_resolveForwardRef(existingProvider.useExisting));
          };
        } else if (provider.useFactory) {
          var factoryProvider = provider;
          return function () {
            return factoryProvider.useFactory.apply(factoryProvider, _toConsumableArray(injectArgs(factoryProvider.deps || EMPTY_ARRAY)));
          };
        } else if (provider.useClass) {
          var classProvider = provider;
          var _deps = provider.deps;

          if (!_deps) {
            var _reflectionCapabilities = new ReflectionCapabilities();

            _deps = _reflectionCapabilities.parameters(type);
          }

          return function () {
            return _construct(_resolveForwardRef(classProvider.useClass), _toConsumableArray(injectArgs(_deps)));
          };
        } else {
          var _deps2 = provider.deps;

          if (!_deps2) {
            var _reflectionCapabilities2 = new ReflectionCapabilities();

            _deps2 = _reflectionCapabilities2.parameters(type);
          }

          return function () {
            return _construct(type, _toConsumableArray(injectArgs(_deps2)));
          };
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ɵ0$a = function ɵ0$a(type, meta) {
        return SWITCH_COMPILE_INJECTABLE(type, meta);
      };
      /**
       * Injectable decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */


      var _Injectable = makeDecorator('Injectable', undefined, undefined, undefined, ɵ0$a);
      /**
       * Supports @Injectable() in JIT mode for Render2.
       */


      function render2CompileInjectable(injectableType, options) {
        if (options && options.providedIn !== undefined && !getInjectableDef(injectableType)) {
          injectableType.ɵprov = _ɵɵdefineInjectable({
            token: injectableType,
            providedIn: options.providedIn,
            factory: convertInjectableProviderToFactory(injectableType, options)
          });
        }
      }

      var SWITCH_COMPILE_INJECTABLE__POST_R3__ = compileInjectable;
      var SWITCH_COMPILE_INJECTABLE__PRE_R3__ = render2CompileInjectable;
      var SWITCH_COMPILE_INJECTABLE = SWITCH_COMPILE_INJECTABLE__POST_R3__;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      function findFirstClosedCycle(keys) {
        var res = [];

        for (var i = 0; i < keys.length; ++i) {
          if (res.indexOf(keys[i]) > -1) {
            res.push(keys[i]);
            return res;
          }

          res.push(keys[i]);
        }

        return res;
      }

      function constructResolvingPath(keys) {
        if (keys.length > 1) {
          var reversed = findFirstClosedCycle(keys.slice().reverse());
          var tokenStrs = reversed.map(function (k) {
            return stringify(k.token);
          });
          return ' (' + tokenStrs.join(' -> ') + ')';
        }

        return '';
      }

      function injectionError(injector, key, constructResolvingMessage, originalError) {
        var keys = [key];
        var errMsg = constructResolvingMessage(keys);
        var error = originalError ? wrappedError(errMsg, originalError) : Error(errMsg);
        error.addKey = addKey;
        error.keys = keys;
        error.injectors = [injector];
        error.constructResolvingMessage = constructResolvingMessage;
        error[ERROR_ORIGINAL_ERROR] = originalError;
        return error;
      }

      function addKey(injector, key) {
        this.injectors.push(injector);
        this.keys.push(key); // Note: This updated message won't be reflected in the `.stack` property

        this.message = this.constructResolvingMessage(this.keys);
      }
      /**
       * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the
       * {@link Injector} does not have a {@link Provider} for the given key.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * class A {
       *   constructor(b:B) {}
       * }
       *
       * expect(() => Injector.resolveAndCreate([A])).toThrowError();
       * ```
       */


      function noProviderError(injector, key) {
        return injectionError(injector, key, function (keys) {
          var first = stringify(keys[0].token);
          return "No provider for ".concat(first, "!").concat(constructResolvingPath(keys));
        });
      }
      /**
       * Thrown when dependencies form a cycle.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * var injector = Injector.resolveAndCreate([
       *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
       *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
       * ]);
       *
       * expect(() => injector.get("one")).toThrowError();
       * ```
       *
       * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
       */


      function cyclicDependencyError(injector, key) {
        return injectionError(injector, key, function (keys) {
          return "Cannot instantiate cyclic dependency!".concat(constructResolvingPath(keys));
        });
      }
      /**
       * Thrown when a constructing type returns with an Error.
       *
       * The `InstantiationError` class contains the original error plus the dependency graph which caused
       * this object to be instantiated.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * class A {
       *   constructor() {
       *     throw new Error('message');
       *   }
       * }
       *
       * var injector = Injector.resolveAndCreate([A]);
      
       * try {
       *   injector.get(A);
       * } catch (e) {
       *   expect(e instanceof InstantiationError).toBe(true);
       *   expect(e.originalException.message).toEqual("message");
       *   expect(e.originalStack).toBeDefined();
       * }
       * ```
       */


      function instantiationError(injector, originalException, originalStack, key) {
        return injectionError(injector, key, function (keys) {
          var first = stringify(keys[0].token);
          return "".concat(originalException.message, ": Error during instantiation of ").concat(first, "!").concat(constructResolvingPath(keys), ".");
        }, originalException);
      }
      /**
       * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
       * creation.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
       * ```
       */


      function invalidProviderError(provider) {
        return Error("Invalid provider - only instances of Provider and Type are allowed, got: ".concat(provider));
      }
      /**
       * Thrown when the class has no annotation information.
       *
       * Lack of annotation information prevents the {@link Injector} from determining which dependencies
       * need to be injected into the constructor.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * class A {
       *   constructor(b) {}
       * }
       *
       * expect(() => Injector.resolveAndCreate([A])).toThrowError();
       * ```
       *
       * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
       *
       * ```typescript
       * class B {}
       *
       * class A {
       *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
       * }
       *
       * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
       * ```
       *
       */


      function noAnnotationError(typeOrFunc, params) {
        var signature = [];

        for (var i = 0, ii = params.length; i < ii; i++) {
          var parameter = params[i];

          if (!parameter || parameter.length == 0) {
            signature.push('?');
          } else {
            signature.push(parameter.map(stringify).join(' '));
          }
        }

        return Error('Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' + signature.join(', ') + '). ' + 'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' + stringify(typeOrFunc) + '\' is decorated with Injectable.');
      }
      /**
       * Thrown when getting an object by index.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * class A {}
       *
       * var injector = Injector.resolveAndCreate([A]);
       *
       * expect(() => injector.getAt(100)).toThrowError();
       * ```
       *
       */


      function outOfBoundsError(index) {
        return Error("Index ".concat(index, " is out-of-bounds."));
      } // TODO: add a working example after alpha38 is released

      /**
       * Thrown when a multi provider and a regular provider are bound to the same token.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * expect(() => Injector.resolveAndCreate([
       *   { provide: "Strings", useValue: "string1", multi: true},
       *   { provide: "Strings", useValue: "string2", multi: false}
       * ])).toThrowError();
       * ```
       */


      function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
        return Error("Cannot mix multi providers and regular providers, got: ".concat(provider1, " ").concat(provider2));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A unique object used for retrieving items from the {@link ReflectiveInjector}.
       *
       * Keys have:
       * - a system-wide unique `id`.
       * - a `token`.
       *
       * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows
       * the
       * injector to store created objects in a more efficient way.
       *
       * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when
       * resolving
       * providers.
       *
       * @deprecated No replacement
       * @publicApi
       */


      var _ReflectiveKey = /*#__PURE__*/function () {
        /**
         * Private
         */
        function _ReflectiveKey(token, id) {
          _classCallCheck2(this, _ReflectiveKey);

          this.token = token;
          this.id = id;

          if (!token) {
            throw new Error('Token must be defined!');
          }

          this.displayName = stringify(this.token);
        }
        /**
         * Retrieves a `Key` for a token.
         */


        _createClass2(_ReflectiveKey, null, [{
          key: "get",
          value: function get(token) {
            return _globalKeyRegistry.get(_resolveForwardRef(token));
          }
          /**
           * @returns the number of keys registered in the system.
           */

        }, {
          key: "numberOfKeys",
          get: function get() {
            return _globalKeyRegistry.numberOfKeys;
          }
        }]);

        return _ReflectiveKey;
      }();

      var KeyRegistry = /*#__PURE__*/function () {
        function KeyRegistry() {
          _classCallCheck2(this, KeyRegistry);

          this._allKeys = new Map();
        }

        _createClass2(KeyRegistry, [{
          key: "get",
          value: function get(token) {
            if (token instanceof _ReflectiveKey) return token;

            if (this._allKeys.has(token)) {
              return this._allKeys.get(token);
            }

            var newKey = new _ReflectiveKey(token, _ReflectiveKey.numberOfKeys);

            this._allKeys.set(token, newKey);

            return newKey;
          }
        }, {
          key: "numberOfKeys",
          get: function get() {
            return this._allKeys.size;
          }
        }]);

        return KeyRegistry;
      }();

      var _globalKeyRegistry = new KeyRegistry();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Provides access to reflection data about symbols. Used internally by Angular
       * to power dependency injection and compilation.
       */


      var Reflector = /*#__PURE__*/function () {
        function Reflector(reflectionCapabilities) {
          _classCallCheck2(this, Reflector);

          this.reflectionCapabilities = reflectionCapabilities;
        }

        _createClass2(Reflector, [{
          key: "updateCapabilities",
          value: function updateCapabilities(caps) {
            this.reflectionCapabilities = caps;
          }
        }, {
          key: "factory",
          value: function factory(type) {
            return this.reflectionCapabilities.factory(type);
          }
        }, {
          key: "parameters",
          value: function parameters(typeOrFunc) {
            return this.reflectionCapabilities.parameters(typeOrFunc);
          }
        }, {
          key: "annotations",
          value: function annotations(typeOrFunc) {
            return this.reflectionCapabilities.annotations(typeOrFunc);
          }
        }, {
          key: "propMetadata",
          value: function propMetadata(typeOrFunc) {
            return this.reflectionCapabilities.propMetadata(typeOrFunc);
          }
        }, {
          key: "hasLifecycleHook",
          value: function hasLifecycleHook(type, lcProperty) {
            return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
          }
        }, {
          key: "getter",
          value: function getter(name) {
            return this.reflectionCapabilities.getter(name);
          }
        }, {
          key: "setter",
          value: function setter(name) {
            return this.reflectionCapabilities.setter(name);
          }
        }, {
          key: "method",
          value: function method(name) {
            return this.reflectionCapabilities.method(name);
          }
        }, {
          key: "importUri",
          value: function importUri(type) {
            return this.reflectionCapabilities.importUri(type);
          }
        }, {
          key: "resourceUri",
          value: function resourceUri(type) {
            return this.reflectionCapabilities.resourceUri(type);
          }
        }, {
          key: "resolveIdentifier",
          value: function resolveIdentifier(name, moduleUrl, members, runtime) {
            return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
          }
        }, {
          key: "resolveEnum",
          value: function resolveEnum(identifier, name) {
            return this.reflectionCapabilities.resolveEnum(identifier, name);
          }
        }]);

        return Reflector;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The {@link Reflector} used internally in Angular to access metadata
       * about symbols.
       */


      var reflector = new Reflector(new ReflectionCapabilities());
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * `Dependency` is used by the framework to extend DI.
       * This is internal to Angular and should not be used directly.
       */

      var ReflectiveDependency = /*#__PURE__*/function () {
        function ReflectiveDependency(key, optional, visibility) {
          _classCallCheck2(this, ReflectiveDependency);

          this.key = key;
          this.optional = optional;
          this.visibility = visibility;
        }

        _createClass2(ReflectiveDependency, null, [{
          key: "fromKey",
          value: function fromKey(key) {
            return new ReflectiveDependency(key, false, null);
          }
        }]);

        return ReflectiveDependency;
      }();

      var _EMPTY_LIST = [];

      var ResolvedReflectiveProvider_ = function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
        _classCallCheck2(this, ResolvedReflectiveProvider_);

        this.key = key;
        this.resolvedFactories = resolvedFactories;
        this.multiProvider = multiProvider;
        this.resolvedFactory = this.resolvedFactories[0];
      };
      /**
       * An internal resolved representation of a factory function created by resolving `Provider`.
       * @publicApi
       */


      var _ResolvedReflectiveFactory = function _ResolvedReflectiveFactory(
      /**
       * Factory function which can return an instance of an object represented by a key.
       */
      factory,
      /**
       * Arguments (dependencies) to the `factory` function.
       */
      dependencies) {
        _classCallCheck2(this, _ResolvedReflectiveFactory);

        this.factory = factory;
        this.dependencies = dependencies;
      };
      /**
       * Resolve a single provider.
       */


      function resolveReflectiveFactory(provider) {
        var factoryFn;
        var resolvedDeps;

        if (provider.useClass) {
          var useClass = _resolveForwardRef(provider.useClass);

          factoryFn = reflector.factory(useClass);
          resolvedDeps = _dependenciesFor(useClass);
        } else if (provider.useExisting) {
          factoryFn = function factoryFn(aliasInstance) {
            return aliasInstance;
          };

          resolvedDeps = [ReflectiveDependency.fromKey(_ReflectiveKey.get(provider.useExisting))];
        } else if (provider.useFactory) {
          factoryFn = provider.useFactory;
          resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
        } else {
          factoryFn = function factoryFn() {
            return provider.useValue;
          };

          resolvedDeps = _EMPTY_LIST;
        }

        return new _ResolvedReflectiveFactory(factoryFn, resolvedDeps);
      }
      /**
       * Converts the `Provider` into `ResolvedProvider`.
       *
       * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider
       * syntax.
       */


      function resolveReflectiveProvider(provider) {
        return new ResolvedReflectiveProvider_(_ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);
      }
      /**
       * Resolve a list of Providers.
       */


      function resolveReflectiveProviders(providers) {
        var normalized = _normalizeProviders(providers, []);

        var resolved = normalized.map(resolveReflectiveProvider);
        var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
        return Array.from(resolvedProviderMap.values());
      }
      /**
       * Merges a list of ResolvedProviders into a list where each key is contained exactly once and
       * multi providers have been merged.
       */


      function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
        for (var i = 0; i < providers.length; i++) {
          var provider = providers[i];
          var existing = normalizedProvidersMap.get(provider.key.id);

          if (existing) {
            if (provider.multiProvider !== existing.multiProvider) {
              throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
            }

            if (provider.multiProvider) {
              for (var j = 0; j < provider.resolvedFactories.length; j++) {
                existing.resolvedFactories.push(provider.resolvedFactories[j]);
              }
            } else {
              normalizedProvidersMap.set(provider.key.id, provider);
            }
          } else {
            var resolvedProvider = void 0;

            if (provider.multiProvider) {
              resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
            } else {
              resolvedProvider = provider;
            }

            normalizedProvidersMap.set(provider.key.id, resolvedProvider);
          }
        }

        return normalizedProvidersMap;
      }

      function _normalizeProviders(providers, res) {
        providers.forEach(function (b) {
          if (b instanceof _Type) {
            res.push({
              provide: b,
              useClass: b
            });
          } else if (b && typeof b == 'object' && b.provide !== undefined) {
            res.push(b);
          } else if (Array.isArray(b)) {
            _normalizeProviders(b, res);
          } else {
            throw invalidProviderError(b);
          }
        });
        return res;
      }

      function constructDependencies(typeOrFunc, dependencies) {
        if (!dependencies) {
          return _dependenciesFor(typeOrFunc);
        } else {
          var params = dependencies.map(function (t) {
            return [t];
          });
          return dependencies.map(function (t) {
            return _extractToken(typeOrFunc, t, params);
          });
        }
      }

      function _dependenciesFor(typeOrFunc) {
        var params = reflector.parameters(typeOrFunc);
        if (!params) return [];

        if (params.some(function (p) {
          return p == null;
        })) {
          throw noAnnotationError(typeOrFunc, params);
        }

        return params.map(function (p) {
          return _extractToken(typeOrFunc, p, params);
        });
      }

      function _extractToken(typeOrFunc, metadata, params) {
        var token = null;
        var optional = false;

        if (!Array.isArray(metadata)) {
          if (metadata instanceof _Inject) {
            return _createDependency(metadata.token, optional, null);
          } else {
            return _createDependency(metadata, optional, null);
          }
        }

        var visibility = null;

        for (var i = 0; i < metadata.length; ++i) {
          var paramMetadata = metadata[i];

          if (paramMetadata instanceof _Type) {
            token = paramMetadata;
          } else if (paramMetadata instanceof _Inject) {
            token = paramMetadata.token;
          } else if (paramMetadata instanceof _Optional) {
            optional = true;
          } else if (paramMetadata instanceof _Self || paramMetadata instanceof _SkipSelf) {
            visibility = paramMetadata;
          } else if (paramMetadata instanceof _InjectionToken) {
            token = paramMetadata;
          }
        }

        token = _resolveForwardRef(token);

        if (token != null) {
          return _createDependency(token, optional, visibility);
        } else {
          throw noAnnotationError(typeOrFunc, params);
        }
      }

      function _createDependency(token, optional, visibility) {
        return new ReflectiveDependency(_ReflectiveKey.get(token), optional, visibility);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Threshold for the dynamic version


      var UNDEFINED = {};
      /**
       * A ReflectiveDependency injection container used for instantiating objects and resolving
       * dependencies.
       *
       * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
       * constructor dependencies.
       *
       * In typical use, application code asks for the dependencies in the constructor and they are
       * resolved by the `Injector`.
       *
       * @usageNotes
       * ### Example
       *
       * The following example creates an `Injector` configured to create `Engine` and `Car`.
       *
       * ```typescript
       * @Injectable()
       * class Engine {
       * }
       *
       * @Injectable()
       * class Car {
       *   constructor(public engine:Engine) {}
       * }
       *
       * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
       * var car = injector.get(Car);
       * expect(car instanceof Car).toBe(true);
       * expect(car.engine instanceof Engine).toBe(true);
       * ```
       *
       * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
       * resolve all of the object's dependencies automatically.
       *
       * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.
       * @publicApi
       */

      var _ReflectiveInjector = /*#__PURE__*/function () {
        function _ReflectiveInjector() {
          _classCallCheck2(this, _ReflectiveInjector);
        }

        _createClass2(_ReflectiveInjector, null, [{
          key: "resolve",
          value:
          /**
           * Turns an array of provider definitions into an array of resolved providers.
           *
           * A resolution is a process of flattening multiple nested arrays and converting individual
           * providers into an array of `ResolvedReflectiveProvider`s.
           *
           * @usageNotes
           * ### Example
           *
           * ```typescript
           * @Injectable()
           * class Engine {
           * }
           *
           * @Injectable()
           * class Car {
           *   constructor(public engine:Engine) {}
           * }
           *
           * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
           *
           * expect(providers.length).toEqual(2);
           *
           * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
           * expect(providers[0].key.displayName).toBe("Car");
           * expect(providers[0].dependencies.length).toEqual(1);
           * expect(providers[0].factory).toBeDefined();
           *
           * expect(providers[1].key.displayName).toBe("Engine");
           * });
           * ```
           *
           */
          function resolve(providers) {
            return resolveReflectiveProviders(providers);
          }
          /**
           * Resolves an array of providers and creates an injector from those providers.
           *
           * The passed-in providers can be an array of `Type`, `Provider`,
           * or a recursive array of more providers.
           *
           * @usageNotes
           * ### Example
           *
           * ```typescript
           * @Injectable()
           * class Engine {
           * }
           *
           * @Injectable()
           * class Car {
           *   constructor(public engine:Engine) {}
           * }
           *
           * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
           * expect(injector.get(Car) instanceof Car).toBe(true);
           * ```
           */

        }, {
          key: "resolveAndCreate",
          value: function resolveAndCreate(providers, parent) {
            var ResolvedReflectiveProviders = _ReflectiveInjector.resolve(providers);

            return _ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
          }
          /**
           * Creates an injector from previously resolved providers.
           *
           * This API is the recommended way to construct injectors in performance-sensitive parts.
           *
           * @usageNotes
           * ### Example
           *
           * ```typescript
           * @Injectable()
           * class Engine {
           * }
           *
           * @Injectable()
           * class Car {
           *   constructor(public engine:Engine) {}
           * }
           *
           * var providers = ReflectiveInjector.resolve([Car, Engine]);
           * var injector = ReflectiveInjector.fromResolvedProviders(providers);
           * expect(injector.get(Car) instanceof Car).toBe(true);
           * ```
           */

        }, {
          key: "fromResolvedProviders",
          value: function fromResolvedProviders(providers, parent) {
            return new ReflectiveInjector_(providers, parent);
          }
        }]);

        return _ReflectiveInjector;
      }();

      var ReflectiveInjector_ = /*#__PURE__*/function () {
        /**
         * Private
         */
        function ReflectiveInjector_(_providers, _parent) {
          _classCallCheck2(this, ReflectiveInjector_);

          /** @internal */
          this._constructionCounter = 0;
          this._providers = _providers;
          this.parent = _parent || null;
          var len = _providers.length;
          this.keyIds = [];
          this.objs = [];

          for (var i = 0; i < len; i++) {
            this.keyIds[i] = _providers[i].key.id;
            this.objs[i] = UNDEFINED;
          }
        }

        _createClass2(ReflectiveInjector_, [{
          key: "get",
          value: function get(token) {
            var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THROW_IF_NOT_FOUND;
            return this._getByKey(_ReflectiveKey.get(token), null, notFoundValue);
          }
        }, {
          key: "resolveAndCreateChild",
          value: function resolveAndCreateChild(providers) {
            var ResolvedReflectiveProviders = _ReflectiveInjector.resolve(providers);

            return this.createChildFromResolved(ResolvedReflectiveProviders);
          }
        }, {
          key: "createChildFromResolved",
          value: function createChildFromResolved(providers) {
            var inj = new ReflectiveInjector_(providers);
            inj.parent = this;
            return inj;
          }
        }, {
          key: "resolveAndInstantiate",
          value: function resolveAndInstantiate(provider) {
            return this.instantiateResolved(_ReflectiveInjector.resolve([provider])[0]);
          }
        }, {
          key: "instantiateResolved",
          value: function instantiateResolved(provider) {
            return this._instantiateProvider(provider);
          }
        }, {
          key: "getProviderAtIndex",
          value: function getProviderAtIndex(index) {
            if (index < 0 || index >= this._providers.length) {
              throw outOfBoundsError(index);
            }

            return this._providers[index];
          }
          /** @internal */

        }, {
          key: "_new",
          value: function _new(provider) {
            if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
              throw cyclicDependencyError(this, provider.key);
            }

            return this._instantiateProvider(provider);
          }
        }, {
          key: "_getMaxNumberOfObjects",
          value: function _getMaxNumberOfObjects() {
            return this.objs.length;
          }
        }, {
          key: "_instantiateProvider",
          value: function _instantiateProvider(provider) {
            if (provider.multiProvider) {
              var res = [];

              for (var i = 0; i < provider.resolvedFactories.length; ++i) {
                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
              }

              return res;
            } else {
              return this._instantiate(provider, provider.resolvedFactories[0]);
            }
          }
        }, {
          key: "_instantiate",
          value: function _instantiate(provider, ResolvedReflectiveFactory) {
            var _this74 = this;

            var factory = ResolvedReflectiveFactory.factory;
            var deps;

            try {
              deps = ResolvedReflectiveFactory.dependencies.map(function (dep) {
                return _this74._getByReflectiveDependency(dep);
              });
            } catch (e) {
              if (e.addKey) {
                e.addKey(this, provider.key);
              }

              throw e;
            }

            var obj;

            try {
              obj = factory.apply(void 0, _toConsumableArray(deps));
            } catch (e) {
              throw instantiationError(this, e, e.stack, provider.key);
            }

            return obj;
          }
        }, {
          key: "_getByReflectiveDependency",
          value: function _getByReflectiveDependency(dep) {
            return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
          }
        }, {
          key: "_getByKey",
          value: function _getByKey(key, visibility, notFoundValue) {
            if (key === ReflectiveInjector_.INJECTOR_KEY) {
              return this;
            }

            if (visibility instanceof _Self) {
              return this._getByKeySelf(key, notFoundValue);
            } else {
              return this._getByKeyDefault(key, notFoundValue, visibility);
            }
          }
        }, {
          key: "_getObjByKeyId",
          value: function _getObjByKeyId(keyId) {
            for (var i = 0; i < this.keyIds.length; i++) {
              if (this.keyIds[i] === keyId) {
                if (this.objs[i] === UNDEFINED) {
                  this.objs[i] = this._new(this._providers[i]);
                }

                return this.objs[i];
              }
            }

            return UNDEFINED;
          }
          /** @internal */

        }, {
          key: "_throwOrNull",
          value: function _throwOrNull(key, notFoundValue) {
            if (notFoundValue !== THROW_IF_NOT_FOUND) {
              return notFoundValue;
            } else {
              throw noProviderError(this, key);
            }
          }
          /** @internal */

        }, {
          key: "_getByKeySelf",
          value: function _getByKeySelf(key, notFoundValue) {
            var obj = this._getObjByKeyId(key.id);

            return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);
          }
          /** @internal */

        }, {
          key: "_getByKeyDefault",
          value: function _getByKeyDefault(key, notFoundValue, visibility) {
            var inj;

            if (visibility instanceof _SkipSelf) {
              inj = this.parent;
            } else {
              inj = this;
            }

            while (inj instanceof ReflectiveInjector_) {
              var inj_ = inj;

              var obj = inj_._getObjByKeyId(key.id);

              if (obj !== UNDEFINED) return obj;
              inj = inj_.parent;
            }

            if (inj !== null) {
              return inj.get(key.token, notFoundValue);
            } else {
              return this._throwOrNull(key, notFoundValue);
            }
          }
        }, {
          key: "displayName",
          get: function get() {
            var providers = _mapProviders(this, function (b) {
              return ' "' + b.key.displayName + '" ';
            }).join(', ');

            return "ReflectiveInjector(providers: [".concat(providers, "])");
          }
        }, {
          key: "toString",
          value: function toString() {
            return this.displayName;
          }
        }]);

        return ReflectiveInjector_;
      }();

      ReflectiveInjector_.INJECTOR_KEY = _ReflectiveKey.get(_Injector);

      function _mapProviders(injector, fn) {
        var res = [];

        for (var i = 0; i < injector._providers.length; ++i) {
          res[i] = fn(injector.getProviderAtIndex(i));
        }

        return res;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function _ɵɵdirectiveInject(token) {
        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _InjectFlags.Default;
        var lView = getLView(); // Fall back to inject() if view hasn't been created. This situation can happen in tests
        // if inject utilities are used before bootstrapping.

        if (lView === null) {
          // Verify that we will not get into infinite loop.
          ngDevMode && assertInjectImplementationNotEqual(_ɵɵdirectiveInject);
          return _ɵɵinject(token, flags);
        }

        var tNode = getCurrentTNode();
        return getOrCreateInjectable(tNode, lView, _resolveForwardRef(token), flags);
      }
      /**
       * Throws an error indicating that a factory function could not be generated by the compiler for a
       * particular class.
       *
       * This instruction allows the actual error message to be optimized away when ngDevMode is turned
       * off, saving bytes of generated code while still providing a good experience in dev mode.
       *
       * The name of the class is not mentioned here, but will be in the generated factory function name
       * and thus in the stack trace.
       *
       * @codeGenApi
       */


      function _ɵɵinvalidFactory() {
        var msg = ngDevMode ? "This constructor was not compatible with Dependency Injection." : 'invalid';
        throw new Error(msg);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Update a property on a selected element.
       *
       * Operates on the element selected by index via the {@link select} instruction.
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled
       *
       * @param propName Name of property. Because it is going to DOM, this is not subject to
       *        renaming as part of minification.
       * @param value New value to write.
       * @param sanitizer An optional function used to sanitize the value.
       * @returns This function returns itself so that it may be chained
       * (e.g. `property('name', ctx.name)('title', ctx.title)`)
       *
       * @codeGenApi
       */


      function _ɵɵproperty(propName, value, sanitizer) {
        var lView = getLView();
        var bindingIndex = nextBindingIndex();

        if (bindingUpdated(lView, bindingIndex, value)) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
        }

        return _ɵɵproperty;
      }
      /**
       * Given `<div style="..." my-dir>` and `MyDir` with `@Input('style')` we need to write to
       * directive input.
       */


      function setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {
        var inputs = tNode.inputs;
        var property = isClassBased ? 'class' : 'style'; // We support both 'class' and `className` hence the fallback.

        setInputsForProperty(tView, lView, inputs[property], property, value);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function elementStartFirstCreatePass(index, tView, lView, _native11, name, attrsIndex, localRefsIndex) {
        ngDevMode && assertFirstCreatePass(tView);
        ngDevMode && ngDevMode.firstCreatePass++;
        var tViewConsts = tView.consts;
        var attrs = getConstant(tViewConsts, attrsIndex);
        var tNode = getOrCreateTNode(tView, index, 2
        /* Element */
        , name, attrs);
        var hasDirectives = resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
        ngDevMode && logUnknownElementError(tView, _native11, tNode, hasDirectives);

        if (tNode.attrs !== null) {
          computeStaticStyling(tNode, tNode.attrs, false);
        }

        if (tNode.mergedAttrs !== null) {
          computeStaticStyling(tNode, tNode.mergedAttrs, true);
        }

        if (tView.queries !== null) {
          tView.queries.elementStart(tView, tNode);
        }

        return tNode;
      }
      /**
       * Create DOM element. The instruction must later be followed by `elementEnd()` call.
       *
       * @param index Index of the element in the LView array
       * @param name Name of the DOM Node
       * @param attrsIndex Index of the element's attributes in the `consts` array.
       * @param localRefsIndex Index of the element's local references in the `consts` array.
       *
       * Attributes and localRefs are passed as an array of strings where elements with an even index
       * hold an attribute name and elements with an odd index hold an attribute value, ex.:
       * ['id', 'warning5', 'class', 'alert']
       *
       * @codeGenApi
       */


      function _ɵɵelementStart(index, name, attrsIndex, localRefsIndex) {
        var lView = getLView();
        var tView = getTView();
        var adjustedIndex = HEADER_OFFSET + index;
        ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'elements should be created before any bindings');
        ngDevMode && assertIndexInRange(lView, adjustedIndex);
        var renderer = lView[RENDERER];

        var _native12 = lView[adjustedIndex] = createElementNode(renderer, name, getNamespace());

        var tNode = tView.firstCreatePass ? elementStartFirstCreatePass(adjustedIndex, tView, lView, _native12, name, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
        setCurrentTNode(tNode, true);
        var mergedAttrs = tNode.mergedAttrs;

        if (mergedAttrs !== null) {
          setUpAttributes(renderer, _native12, mergedAttrs);
        }

        var classes = tNode.classes;

        if (classes !== null) {
          writeDirectClass(renderer, _native12, classes);
        }

        var styles = tNode.styles;

        if (styles !== null) {
          writeDirectStyle(renderer, _native12, styles);
        }

        if ((tNode.flags & 64
        /* isDetached */
        ) !== 64
        /* isDetached */
        ) {
            // In the i18n case, the translation may have removed this element, so only add it if it is not
            // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.
            appendChild(tView, lView, _native12, tNode);
          } // any immediate children of a component or template container must be pre-emptively
        // monkey-patched with the component view data so that the element can be inspected
        // later on using any element discovery utility methods (see `element_discovery.ts`)


        if (getElementDepthCount() === 0) {
          attachPatchData(_native12, lView);
        }

        increaseElementDepthCount();

        if (isDirectiveHost(tNode)) {
          createDirectivesInstances(tView, lView, tNode);
          executeContentQueries(tView, tNode, lView);
        }

        if (localRefsIndex !== null) {
          saveResolvedLocalsInData(lView, tNode);
        }
      }
      /**
       * Mark the end of the element.
       *
       * @codeGenApi
       */


      function _ɵɵelementEnd() {
        var currentTNode = getCurrentTNode();
        ngDevMode && assertDefined(currentTNode, 'No parent node to close.');

        if (isCurrentTNodeParent()) {
          setCurrentTNodeAsNotParent();
        } else {
          ngDevMode && assertHasParent(getCurrentTNode());
          currentTNode = currentTNode.parent;
          setCurrentTNode(currentTNode, false);
        }

        var tNode = currentTNode;
        ngDevMode && assertTNodeType(tNode, 3
        /* AnyRNode */
        );
        decreaseElementDepthCount();
        var tView = getTView();

        if (tView.firstCreatePass) {
          registerPostOrderHooks(tView, currentTNode);

          if (isContentQueryHost(currentTNode)) {
            tView.queries.elementEnd(currentTNode);
          }
        }

        if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {
          setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);
        }

        if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {
          setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);
        }
      }
      /**
       * Creates an empty element using {@link elementStart} and {@link elementEnd}
       *
       * @param index Index of the element in the data array
       * @param name Name of the DOM Node
       * @param attrsIndex Index of the element's attributes in the `consts` array.
       * @param localRefsIndex Index of the element's local references in the `consts` array.
       *
       * @codeGenApi
       */


      function _ɵɵelement(index, name, attrsIndex, localRefsIndex) {
        _ɵɵelementStart(index, name, attrsIndex, localRefsIndex);

        _ɵɵelementEnd();
      }

      function logUnknownElementError(tView, element, tNode, hasDirectives) {
        var schemas = tView.schemas; // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT
        // mode where this check happens at compile time. In JIT mode, `schemas` is always present and
        // defined as an array (as an empty array in case `schemas` field is not defined) and we should
        // execute the check below.

        if (schemas === null) return;
        var tagName = tNode.value; // If the element matches any directive, it's considered as valid.

        if (!hasDirectives && tagName !== null) {
          // The element is unknown if it's an instance of HTMLUnknownElement or it isn't registered
          // as a custom element. Note that unknown elements with a dash in their name won't be instances
          // of HTMLUnknownElement in browsers that support web components.
          var isUnknown = // Note that we can't check for `typeof HTMLUnknownElement === 'function'`,
          // because while most browsers return 'function', IE returns 'object'.
          typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement && element instanceof HTMLUnknownElement || typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 && !customElements.get(tagName);

          if (isUnknown && !matchingSchemas(tView, tagName)) {
            var message = "'".concat(tagName, "' is not a known element:\n");
            message += "1. If '".concat(tagName, "' is an Angular component, then verify that it is part of this module.\n");

            if (tagName && tagName.indexOf('-') > -1) {
              message += "2. If '".concat(tagName, "' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.");
            } else {
              message += "2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
            }

            console.error(formatRuntimeError("304"
            /* UNKNOWN_ELEMENT */
            , message));
          }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {
        ngDevMode && ngDevMode.firstCreatePass++;
        var tViewConsts = tView.consts;
        var attrs = getConstant(tViewConsts, attrsIndex);
        var tNode = getOrCreateTNode(tView, index, 8
        /* ElementContainer */
        , 'ng-container', attrs); // While ng-container doesn't necessarily support styling, we use the style context to identify
        // and execute directives on the ng-container.

        if (attrs !== null) {
          computeStaticStyling(tNode, attrs, true);
        }

        var localRefs = getConstant(tViewConsts, localRefsIndex);
        resolveDirectives(tView, lView, tNode, localRefs);

        if (tView.queries !== null) {
          tView.queries.elementStart(tView, tNode);
        }

        return tNode;
      }
      /**
       * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.
       * The instruction must later be followed by `elementContainerEnd()` call.
       *
       * @param index Index of the element in the LView array
       * @param attrsIndex Index of the container attributes in the `consts` array.
       * @param localRefsIndex Index of the container's local references in the `consts` array.
       *
       * Even if this instruction accepts a set of attributes no actual attribute values are propagated to
       * the DOM (as a comment node can't have attributes). Attributes are here only for directive
       * matching purposes and setting initial inputs of directives.
       *
       * @codeGenApi
       */


      function _ɵɵelementContainerStart(index, attrsIndex, localRefsIndex) {
        var lView = getLView();
        var tView = getTView();
        var adjustedIndex = index + HEADER_OFFSET;
        ngDevMode && assertIndexInRange(lView, adjustedIndex);
        ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'element containers should be created before any bindings');
        var tNode = tView.firstCreatePass ? elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
        setCurrentTNode(tNode, true);
        ngDevMode && ngDevMode.rendererCreateComment++;

        var _native13 = lView[adjustedIndex] = lView[RENDERER].createComment(ngDevMode ? 'ng-container' : '');

        appendChild(tView, lView, _native13, tNode);
        attachPatchData(_native13, lView);

        if (isDirectiveHost(tNode)) {
          createDirectivesInstances(tView, lView, tNode);
          executeContentQueries(tView, tNode, lView);
        }

        if (localRefsIndex != null) {
          saveResolvedLocalsInData(lView, tNode);
        }
      }
      /**
       * Mark the end of the <ng-container>.
       *
       * @codeGenApi
       */


      function _ɵɵelementContainerEnd() {
        var currentTNode = getCurrentTNode();
        var tView = getTView();

        if (isCurrentTNodeParent()) {
          setCurrentTNodeAsNotParent();
        } else {
          ngDevMode && assertHasParent(currentTNode);
          currentTNode = currentTNode.parent;
          setCurrentTNode(currentTNode, false);
        }

        ngDevMode && assertTNodeType(currentTNode, 8
        /* ElementContainer */
        );

        if (tView.firstCreatePass) {
          registerPostOrderHooks(tView, currentTNode);

          if (isContentQueryHost(currentTNode)) {
            tView.queries.elementEnd(currentTNode);
          }
        }
      }
      /**
       * Creates an empty logical container using {@link elementContainerStart}
       * and {@link elementContainerEnd}
       *
       * @param index Index of the element in the LView array
       * @param attrsIndex Index of the container attributes in the `consts` array.
       * @param localRefsIndex Index of the container's local references in the `consts` array.
       *
       * @codeGenApi
       */


      function _ɵɵelementContainer(index, attrsIndex, localRefsIndex) {
        _ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);

        _ɵɵelementContainerEnd();
      }
      /**
       * Returns the current OpaqueViewState instance.
       *
       * Used in conjunction with the restoreView() instruction to save a snapshot
       * of the current view and restore it when listeners are invoked. This allows
       * walking the declaration view tree in listeners to get vars from parent views.
       *
       * @codeGenApi
       */


      function _ɵɵgetCurrentView() {
        return getLView();
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Determine if the argument is shaped like a Promise
       */


      function isPromise(obj) {
        // allow any Promise/A+ compliant thenable.
        // It's up to the caller to ensure that obj.then conforms to the spec
        return !!obj && typeof obj.then === 'function';
      }
      /**
       * Determine if the argument is a Subscribable
       */


      function isSubscribable(obj) {
        return !!obj && typeof obj.subscribe === 'function';
      }
      /**
       * Determine if the argument is an Observable
       *
       * Strictly this tests that the `obj` is `Subscribable`, since `Observable`
       * types need additional methods, such as `lift()`. But it is adequate for our
       * needs since within the Angular framework code we only ever need to use the
       * `subscribe()` method, and RxJS has mechanisms to wrap `Subscribable` objects
       * into `Observable` as needed.
       */


      var isObservable = isSubscribable;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Adds an event listener to the current node.
       *
       * If an output exists on one of the node's directives, it also subscribes to the output
       * and saves the subscription for later cleanup.
       *
       * @param eventName Name of the event
       * @param listenerFn The function to be called when event emits
       * @param useCapture Whether or not to use capture in event listener
       * @param eventTargetResolver Function that returns global target information in case this listener
       * should be attached to a global object like window, document or body
       *
       * @codeGenApi
       */

      function _ɵɵlistener(eventName, listenerFn, useCapture, eventTargetResolver) {
        var lView = getLView();
        var tView = getTView();
        var tNode = getCurrentTNode();
        listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, !!useCapture, eventTargetResolver);
        return _ɵɵlistener;
      }
      /**
       * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.
       *
       * This instruction is for compatibility purposes and is designed to ensure that a
       * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered
       * in the component's renderer. Normally all host listeners are evaluated with the
       * parent component's renderer, but, in the case of animation @triggers, they need
       * to be evaluated with the sub component's renderer (because that's where the
       * animation triggers are defined).
       *
       * Do not use this instruction as a replacement for `listener`. This instruction
       * only exists to ensure compatibility with the ViewEngine's host binding behavior.
       *
       * @param eventName Name of the event
       * @param listenerFn The function to be called when event emits
       * @param useCapture Whether or not to use capture in event listener
       * @param eventTargetResolver Function that returns global target information in case this listener
       * should be attached to a global object like window, document or body
       *
       * @codeGenApi
       */


      function _ɵɵsyntheticHostListener(eventName, listenerFn) {
        var tNode = getCurrentTNode();
        var lView = getLView();
        var tView = getTView();
        var currentDef = getCurrentDirectiveDef(tView.data);
        var renderer = loadComponentRenderer(currentDef, tNode, lView);
        listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, false);
        return _ɵɵsyntheticHostListener;
      }
      /**
       * A utility function that checks if a given element has already an event handler registered for an
       * event with a specified name. The TView.cleanup data structure is used to find out which events
       * are registered for a given element.
       */


      function findExistingListener(tView, lView, eventName, tNodeIdx) {
        var tCleanup = tView.cleanup;

        if (tCleanup != null) {
          for (var i = 0; i < tCleanup.length - 1; i += 2) {
            var cleanupEventName = tCleanup[i];

            if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {
              // We have found a matching event name on the same node but it might not have been
              // registered yet, so we must explicitly verify entries in the LView cleanup data
              // structures.
              var lCleanup = lView[CLEANUP];
              var listenerIdxInLCleanup = tCleanup[i + 2];
              return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;
            } // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or
            // 2-element entries (for directive and queries destroy hooks). As such we can encounter
            // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements
            // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check
            // documentation of TView.cleanup for more details of this data structure layout.


            if (typeof cleanupEventName === 'string') {
              i += 2;
            }
          }
        }

        return null;
      }

      function listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, useCapture, eventTargetResolver) {
        var isTNodeDirectiveHost = isDirectiveHost(tNode);
        var firstCreatePass = tView.firstCreatePass;
        var tCleanup = firstCreatePass && getOrCreateTViewCleanup(tView);
        var context = lView[CONTEXT]; // When the ɵɵlistener instruction was generated and is executed we know that there is either a
        // native listener or a directive output on this element. As such we we know that we will have to
        // register a listener and store its cleanup function on LView.

        var lCleanup = getOrCreateLViewCleanup(lView);
        ngDevMode && assertTNodeType(tNode, 3
        /* AnyRNode */
        | 12
        /* AnyContainer */
        );
        var processOutputs = true; // Adding a native event listener is applicable when:
        // - The corresponding TNode represents a DOM element.
        // - The event target has a resolver (usually resulting in a global object,
        //   such as `window` or `document`).

        if (tNode.type & 3
        /* AnyRNode */
        || eventTargetResolver) {
          var _native14 = getNativeByTNode(tNode, lView);

          var target = eventTargetResolver ? eventTargetResolver(_native14) : _native14;
          var lCleanupIndex = lCleanup.length;
          var idxOrTargetGetter = eventTargetResolver ? function (_lView) {
            return eventTargetResolver(unwrapRNode(_lView[tNode.index]));
          } : tNode.index; // In order to match current behavior, native DOM event listeners must be added for all
          // events (including outputs).

          if (isProceduralRenderer(renderer)) {
            // There might be cases where multiple directives on the same element try to register an event
            // handler function for the same event. In this situation we want to avoid registration of
            // several native listeners as each registration would be intercepted by NgZone and
            // trigger change detection. This would mean that a single user action would result in several
            // change detections being invoked. To avoid this situation we want to have only one call to
            // native handler registration (for the same element and same type of event).
            //
            // In order to have just one native event handler in presence of multiple handler functions,
            // we just register a first handler function as a native event listener and then chain
            // (coalesce) other handler functions on top of the first native handler function.
            var existingListener = null; // Please note that the coalescing described here doesn't happen for events specifying an
            // alternative target (ex. (document:click)) - this is to keep backward compatibility with the
            // view engine.
            // Also, we don't have to search for existing listeners is there are no directives
            // matching on a given node as we can't register multiple event handlers for the same event in
            // a template (this would mean having duplicate attributes).

            if (!eventTargetResolver && isTNodeDirectiveHost) {
              existingListener = findExistingListener(tView, lView, eventName, tNode.index);
            }

            if (existingListener !== null) {
              // Attach a new listener to coalesced listeners list, maintaining the order in which
              // listeners are registered. For performance reasons, we keep a reference to the last
              // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through
              // the entire set each time we need to add a new listener.
              var lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;
              lastListenerFn.__ngNextListenerFn__ = listenerFn;
              existingListener.__ngLastListenerFn__ = listenerFn;
              processOutputs = false;
            } else {
              listenerFn = wrapListener(tNode, lView, context, listenerFn, false
              /** preventDefault */
              );
              var cleanupFn = renderer.listen(target, eventName, listenerFn);
              ngDevMode && ngDevMode.rendererAddEventListener++;
              lCleanup.push(listenerFn, cleanupFn);
              tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);
            }
          } else {
            listenerFn = wrapListener(tNode, lView, context, listenerFn, true
            /** preventDefault */
            );
            target.addEventListener(eventName, listenerFn, useCapture);
            ngDevMode && ngDevMode.rendererAddEventListener++;
            lCleanup.push(listenerFn);
            tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, useCapture);
          }
        } else {
          // Even if there is no native listener to add, we still need to wrap the listener so that OnPush
          // ancestors are marked dirty when an event occurs.
          listenerFn = wrapListener(tNode, lView, context, listenerFn, false
          /** preventDefault */
          );
        } // subscribe to directive outputs


        var outputs = tNode.outputs;
        var props;

        if (processOutputs && outputs !== null && (props = outputs[eventName])) {
          var propsLength = props.length;

          if (propsLength) {
            for (var i = 0; i < propsLength; i += 2) {
              var index = props[i];
              ngDevMode && assertIndexInRange(lView, index);
              var minifiedName = props[i + 1];
              var directiveInstance = lView[index];
              var output = directiveInstance[minifiedName];

              if (ngDevMode && !isObservable(output)) {
                throw new Error("@Output ".concat(minifiedName, " not initialized in '").concat(directiveInstance.constructor.name, "'."));
              }

              var subscription = output.subscribe(listenerFn);
              var idx = lCleanup.length;
              lCleanup.push(listenerFn, subscription);
              tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));
            }
          }
        }
      }

      function executeListenerWithErrorHandling(lView, context, listenerFn, e) {
        try {
          profiler(6
          /* OutputStart */
          , context, listenerFn); // Only explicitly returning false from a listener should preventDefault

          return listenerFn(e) !== false;
        } catch (error) {
          handleError(lView, error);
          return false;
        } finally {
          profiler(7
          /* OutputEnd */
          , context, listenerFn);
        }
      }
      /**
       * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,
       * if applicable.
       *
       * @param tNode The TNode associated with this listener
       * @param lView The LView that contains this listener
       * @param listenerFn The listener function to call
       * @param wrapWithPreventDefault Whether or not to prevent default behavior
       * (the procedural renderer does this already, so in those cases, we should skip)
       */


      function wrapListener(tNode, lView, context, listenerFn, wrapWithPreventDefault) {
        // Note: we are performing most of the work in the listener function itself
        // to optimize listener registration.
        return function wrapListenerIn_markDirtyAndPreventDefault(e) {
          // Ivy uses `Function` as a special token that allows us to unwrap the function
          // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.
          if (e === Function) {
            return listenerFn;
          } // In order to be backwards compatible with View Engine, events on component host nodes
          // must also mark the component view itself dirty (i.e. the view that it owns).


          var startView = tNode.flags & 2
          /* isComponentHost */
          ? getComponentLViewByIndex(tNode.index, lView) : lView; // See interfaces/view.ts for more on LViewFlags.ManualOnPush

          if ((lView[FLAGS] & 32
          /* ManualOnPush */
          ) === 0) {
            markViewDirty(startView);
          }

          var result = executeListenerWithErrorHandling(lView, context, listenerFn, e); // A just-invoked listener function might have coalesced listeners so we need to check for
          // their presence and invoke as needed.

          var nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;

          while (nextListenerFn) {
            // We should prevent default if any of the listeners explicitly return false
            result = executeListenerWithErrorHandling(lView, context, nextListenerFn, e) && result;
            nextListenerFn = nextListenerFn.__ngNextListenerFn__;
          }

          if (wrapWithPreventDefault && result === false) {
            e.preventDefault(); // Necessary for legacy browsers that don't support preventDefault (e.g. IE)

            e.returnValue = false;
          }

          return result;
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Retrieves a context at the level specified and saves it as the global, contextViewData.
       * Will get the next level up if level is not specified.
       *
       * This is used to save contexts of parent views so they can be bound in embedded views, or
       * in conjunction with reference() to bind a ref from a parent view.
       *
       * @param level The relative level of the view from which to grab context compared to contextVewData
       * @returns context
       *
       * @codeGenApi
       */


      function _ɵɵnextContext() {
        var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        return nextContextImpl(level);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Checks a given node against matching projection slots and returns the
       * determined slot index. Returns "null" if no slot matched the given node.
       *
       * This function takes into account the parsed ngProjectAs selector from the
       * node's attributes. If present, it will check whether the ngProjectAs selector
       * matches any of the projection slot selectors.
       */


      function matchingProjectionSlotIndex(tNode, projectionSlots) {
        var wildcardNgContentIndex = null;
        var ngProjectAsAttrVal = getProjectAsAttrValue(tNode);

        for (var i = 0; i < projectionSlots.length; i++) {
          var slotValue = projectionSlots[i]; // The last wildcard projection slot should match all nodes which aren't matching
          // any selector. This is necessary to be backwards compatible with view engine.

          if (slotValue === '*') {
            wildcardNgContentIndex = i;
            continue;
          } // If we ran into an `ngProjectAs` attribute, we should match its parsed selector
          // to the list of selectors, otherwise we fall back to matching against the node.


          if (ngProjectAsAttrVal === null ? isNodeMatchingSelectorList(tNode, slotValue,
          /* isProjectionMode */
          true) : isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {
            return i; // first matching selector "captures" a given node
          }
        }

        return wildcardNgContentIndex;
      }
      /**
       * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.
       * It takes all the selectors from the entire component's template and decides where
       * each projected node belongs (it re-distributes nodes among "buckets" where each "bucket" is
       * backed by a selector).
       *
       * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,
       * un-parsed form.
       *
       * The parsed form is needed for efficient matching of a node against a given CSS selector.
       * The un-parsed, textual form is needed for support of the ngProjectAs attribute.
       *
       * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more
       * drawbacks:
       * - having only a textual form would require runtime parsing of CSS selectors;
       * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a
       * template author).
       *
       * @param projectionSlots? A collection of projection slots. A projection slot can be based
       *        on a parsed CSS selectors or set to the wildcard selector ("*") in order to match
       *        all nodes which do not match any selector. If not specified, a single wildcard
       *        selector projection slot will be defined.
       *
       * @codeGenApi
       */


      function _ɵɵprojectionDef(projectionSlots) {
        var componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];

        if (!componentNode.projection) {
          // If no explicit projection slots are defined, fall back to a single
          // projection slot with the wildcard selector.
          var numProjectionSlots = projectionSlots ? projectionSlots.length : 1;
          var projectionHeads = componentNode.projection = newArray(numProjectionSlots, null);
          var tails = projectionHeads.slice();
          var componentChild = componentNode.child;

          while (componentChild !== null) {
            var slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;

            if (slotIndex !== null) {
              if (tails[slotIndex]) {
                tails[slotIndex].projectionNext = componentChild;
              } else {
                projectionHeads[slotIndex] = componentChild;
              }

              tails[slotIndex] = componentChild;
            }

            componentChild = componentChild.next;
          }
        }
      }
      /**
       * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call
       * to the projectionDef instruction.
       *
       * @param nodeIndex
       * @param selectorIndex:
       *        - 0 when the selector is `*` (or unspecified as this is the default value),
       *        - 1 based index of the selector from the {@link projectionDef}
       *
       * @codeGenApi
       */


      function _ɵɵprojection(nodeIndex) {
        var selectorIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var attrs = arguments.length > 2 ? arguments[2] : undefined;
        var lView = getLView();
        var tView = getTView();
        var tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16
        /* Projection */
        , null, attrs || null); // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.

        if (tProjectionNode.projection === null) tProjectionNode.projection = selectorIndex; // `<ng-content>` has no content

        setCurrentTNodeAsNotParent();

        if ((tProjectionNode.flags & 64
        /* isDetached */
        ) !== 64
        /* isDetached */
        ) {
            // re-distribution of projectable nodes is stored on a component's view level
            applyProjection(tView, lView, tProjectionNode);
          }
      }
      /**
       *
       * Update an interpolated property on an element with a lone bound value
       *
       * Used when the value passed to a property has 1 interpolated value in it, an no additional text
       * surrounds that interpolated value:
       *
       * ```html
       * <div title="{{v0}}"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolate('title', v0);
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵpropertyInterpolate(propName, v0, sanitizer) {
        _ɵɵpropertyInterpolate2(propName, '', v0, '', sanitizer);

        return _ɵɵpropertyInterpolate;
      }
      /**
       *
       * Update an interpolated property on an element with single bound value surrounded by text.
       *
       * Used when the value passed to a property has 1 interpolated value in it:
       *
       * ```html
       * <div title="prefix{{v0}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵpropertyInterpolate2(propName, prefix, v0, suffix, sanitizer) {
        var lView = getLView();
        var interpolatedValue = interpolation1(lView, prefix, v0, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);
        }

        return _ɵɵpropertyInterpolate2;
      }
      /**
       *
       * Update an interpolated property on an element with 2 bound values surrounded by text.
       *
       * Used when the value passed to a property has 2 interpolated values in it:
       *
       * ```html
       * <div title="prefix{{v0}}-{{v1}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵpropertyInterpolate3(propName, prefix, v0, i0, v1, suffix, sanitizer) {
        var lView = getLView();
        var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);
        }

        return _ɵɵpropertyInterpolate3;
      }
      /**
       *
       * Update an interpolated property on an element with 3 bound values surrounded by text.
       *
       * Used when the value passed to a property has 3 interpolated values in it:
       *
       * ```html
       * <div title="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolate3(
       * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {
        var lView = getLView();
        var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);
        }

        return _ɵɵpropertyInterpolate4;
      }
      /**
       *
       * Update an interpolated property on an element with 4 bound values surrounded by text.
       *
       * Used when the value passed to a property has 4 interpolated values in it:
       *
       * ```html
       * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolate4(
       * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {
        var lView = getLView();
        var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
        }

        return _ɵɵpropertyInterpolate5;
      }
      /**
       *
       * Update an interpolated property on an element with 5 bound values surrounded by text.
       *
       * Used when the value passed to a property has 5 interpolated values in it:
       *
       * ```html
       * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolate5(
       * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {
        var lView = getLView();
        var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
        }

        return _ɵɵpropertyInterpolate6;
      }
      /**
       *
       * Update an interpolated property on an element with 6 bound values surrounded by text.
       *
       * Used when the value passed to a property has 6 interpolated values in it:
       *
       * ```html
       * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolate6(
       *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {
        var lView = getLView();
        var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
        }

        return _ɵɵpropertyInterpolate7;
      }
      /**
       *
       * Update an interpolated property on an element with 7 bound values surrounded by text.
       *
       * Used when the value passed to a property has 7 interpolated values in it:
       *
       * ```html
       * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolate7(
       *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {
        var lView = getLView();
        var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
        }

        return _ɵɵpropertyInterpolate8;
      }
      /**
       *
       * Update an interpolated property on an element with 8 bound values surrounded by text.
       *
       * Used when the value passed to a property has 8 interpolated values in it:
       *
       * ```html
       * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolate8(
       *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param i6 Static value used for concatenation only.
       * @param v7 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵpropertyInterpolate9(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {
        var lView = getLView();
        var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);

        if (interpolatedValue !== NO_CHANGE) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
        }

        return _ɵɵpropertyInterpolate9;
      }
      /**
       * Update an interpolated property on an element with 9 or more bound values surrounded by text.
       *
       * Used when the number of interpolated values exceeds 8.
       *
       * ```html
       * <div
       *  title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
       * ```
       *
       * Its compiled representation is::
       *
       * ```ts
       * ɵɵpropertyInterpolateV(
       *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
       *  'suffix']);
       * ```
       *
       * If the property name also exists as an input property on one of the element's directives,
       * the component property will be set instead of the element property. This check must
       * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
       *
       * @param propName The name of the property to update.
       * @param values The collection of values and the strings inbetween those values, beginning with a
       * string prefix and ending with a string suffix.
       * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
       * @param sanitizer An optional sanitizer function
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵpropertyInterpolateV(propName, values, sanitizer) {
        var lView = getLView();
        var interpolatedValue = interpolationV(lView, values);

        if (interpolatedValue !== NO_CHANGE) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);

          if (ngDevMode) {
            var interpolationInBetween = [values[0]]; // prefix

            for (var i = 2; i < values.length; i += 2) {
              interpolationInBetween.push(values[i]);
            }

            storePropertyBindingMetadata.apply(void 0, [tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1].concat(interpolationInBetween));
          }
        }

        return _ɵɵpropertyInterpolateV;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * NOTE: The word `styling` is used interchangeably as style or class styling.
       *
       * This file contains code to link styling instructions together so that they can be replayed in
       * priority order. The file exists because Ivy styling instruction execution order does not match
       * that of the priority order. The purpose of this code is to create a linked list so that the
       * instructions can be traversed in priority order when computing the styles.
       *
       * Assume we are dealing with the following code:
       * ```
       * @Component({
       *   template: `
       *     <my-cmp [style]=" {color: '#001'} "
       *             [style.color]=" #002 "
       *             dir-style-color-1
       *             dir-style-color-2> `
       * })
       * class ExampleComponent {
       *   static ngComp = ... {
       *     ...
       *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
       *     ɵɵstyleMap({color: '#001'});
       *     ɵɵstyleProp('color', '#002');
       *     ...
       *   }
       * }
       *
       * @Directive({
       *   selector: `[dir-style-color-1]',
       * })
       * class Style1Directive {
       *   @HostBinding('style') style = {color: '#005'};
       *   @HostBinding('style.color') color = '#006';
       *
       *   static ngDir = ... {
       *     ...
       *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
       *     ɵɵstyleMap({color: '#005'});
       *     ɵɵstyleProp('color', '#006');
       *     ...
       *   }
       * }
       *
       * @Directive({
       *   selector: `[dir-style-color-2]',
       * })
       * class Style2Directive {
       *   @HostBinding('style') style = {color: '#007'};
       *   @HostBinding('style.color') color = '#008';
       *
       *   static ngDir = ... {
       *     ...
       *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
       *     ɵɵstyleMap({color: '#007'});
       *     ɵɵstyleProp('color', '#008');
       *     ...
       *   }
       * }
       *
       * @Directive({
       *   selector: `my-cmp',
       * })
       * class MyComponent {
       *   @HostBinding('style') style = {color: '#003'};
       *   @HostBinding('style.color') color = '#004';
       *
       *   static ngComp = ... {
       *     ...
       *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
       *     ɵɵstyleMap({color: '#003'});
       *     ɵɵstyleProp('color', '#004');
       *     ...
       *   }
       * }
       * ```
       *
       * The Order of instruction execution is:
       *
       * NOTE: the comment binding location is for illustrative purposes only.
       *
       * ```
       * // Template: (ExampleComponent)
       *     ɵɵstyleMap({color: '#001'});   // Binding index: 10
       *     ɵɵstyleProp('color', '#002');  // Binding index: 12
       * // MyComponent
       *     ɵɵstyleMap({color: '#003'});   // Binding index: 20
       *     ɵɵstyleProp('color', '#004');  // Binding index: 22
       * // Style1Directive
       *     ɵɵstyleMap({color: '#005'});   // Binding index: 24
       *     ɵɵstyleProp('color', '#006');  // Binding index: 26
       * // Style2Directive
       *     ɵɵstyleMap({color: '#007'});   // Binding index: 28
       *     ɵɵstyleProp('color', '#008');  // Binding index: 30
       * ```
       *
       * The correct priority order of concatenation is:
       *
       * ```
       * // MyComponent
       *     ɵɵstyleMap({color: '#003'});   // Binding index: 20
       *     ɵɵstyleProp('color', '#004');  // Binding index: 22
       * // Style1Directive
       *     ɵɵstyleMap({color: '#005'});   // Binding index: 24
       *     ɵɵstyleProp('color', '#006');  // Binding index: 26
       * // Style2Directive
       *     ɵɵstyleMap({color: '#007'});   // Binding index: 28
       *     ɵɵstyleProp('color', '#008');  // Binding index: 30
       * // Template: (ExampleComponent)
       *     ɵɵstyleMap({color: '#001'});   // Binding index: 10
       *     ɵɵstyleProp('color', '#002');  // Binding index: 12
       * ```
       *
       * What color should be rendered?
       *
       * Once the items are correctly sorted in the list, the answer is simply the last item in the
       * concatenation list which is `#002`.
       *
       * To do so we keep a linked list of all of the bindings which pertain to this element.
       * Notice that the bindings are inserted in the order of execution, but the `TView.data` allows
       * us to traverse them in the order of priority.
       *
       * |Idx|`TView.data`|`LView`          | Notes
       * |---|------------|-----------------|--------------
       * |...|            |                 |
       * |10 |`null`      |`{color: '#001'}`| `ɵɵstyleMap('color', {color: '#001'})`
       * |11 |`30 | 12`   | ...             |
       * |12 |`color`     |`'#002'`         | `ɵɵstyleProp('color', '#002')`
       * |13 |`10 | 0`    | ...             |
       * |...|            |                 |
       * |20 |`null`      |`{color: '#003'}`| `ɵɵstyleMap('color', {color: '#003'})`
       * |21 |`0 | 22`    | ...             |
       * |22 |`color`     |`'#004'`         | `ɵɵstyleProp('color', '#004')`
       * |23 |`20 | 24`   | ...             |
       * |24 |`null`      |`{color: '#005'}`| `ɵɵstyleMap('color', {color: '#005'})`
       * |25 |`22 | 26`   | ...             |
       * |26 |`color`     |`'#006'`         | `ɵɵstyleProp('color', '#006')`
       * |27 |`24 | 28`   | ...             |
       * |28 |`null`      |`{color: '#007'}`| `ɵɵstyleMap('color', {color: '#007'})`
       * |29 |`26 | 30`   | ...             |
       * |30 |`color`     |`'#008'`         | `ɵɵstyleProp('color', '#008')`
       * |31 |`28 | 10`   | ...             |
       *
       * The above data structure allows us to re-concatenate the styling no matter which data binding
       * changes.
       *
       * NOTE: in addition to keeping track of next/previous index the `TView.data` also stores prev/next
       * duplicate bit. The duplicate bit if true says there either is a binding with the same name or
       * there is a map (which may contain the name). This information is useful in knowing if other
       * styles with higher priority need to be searched for overwrites.
       *
       * NOTE: See `should support example in 'tnode_linked_list.ts' documentation` in
       * `tnode_linked_list_spec.ts` for working example.
       */


      var __unused_const_as_closure_does_not_like_standalone_comment_blocks__;
      /**
       * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked
       * list of styles and compute the duplicate flag.
       *
       * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.
       *
       * The function works by keeping track of `tStylingRange` which contains two pointers pointing to
       * the head/tail of the template portion of the styles.
       *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`
       *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`
       *
       * @param tData The `TData` to insert into.
       * @param tNode `TNode` associated with the styling element.
       * @param tStylingKey See `TStylingKey`.
       * @param index location of where `tStyleValue` should be stored (and linked into list.)
       * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of
       *               template.)
       * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.
       *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)
       */


      function insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {
        ngDevMode && assertFirstUpdatePass(getTView());
        var tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;
        var tmplHead = getTStylingRangePrev(tBindings);
        var tmplTail = getTStylingRangeNext(tBindings);
        tData[index] = tStylingKeyWithStatic;
        var isKeyDuplicateOfStatic = false;
        var tStylingKey;

        if (Array.isArray(tStylingKeyWithStatic)) {
          // We are case when the `TStylingKey` contains static fields as well.
          var staticKeyValueArray = tStylingKeyWithStatic;
          tStylingKey = staticKeyValueArray[1]; // unwrap.
          // We need to check if our key is present in the static so that we can mark it as duplicate.

          if (tStylingKey === null || keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {
            // tStylingKey is present in the statics, need to mark it as duplicate.
            isKeyDuplicateOfStatic = true;
          }
        } else {
          tStylingKey = tStylingKeyWithStatic;
        }

        if (isHostBinding) {
          // We are inserting host bindings
          // If we don't have template bindings then `tail` is 0.
          var hasTemplateBindings = tmplTail !== 0; // This is important to know because that means that the `head` can't point to the first
          // template bindings (there are none.) Instead the head points to the tail of the template.

          if (hasTemplateBindings) {
            // template head's "prev" will point to last host binding or to 0 if no host bindings yet
            var previousNode = getTStylingRangePrev(tData[tmplHead + 1]);
            tData[index + 1] = toTStylingRange(previousNode, tmplHead); // if a host binding has already been registered, we need to update the next of that host
            // binding to point to this one

            if (previousNode !== 0) {
              // We need to update the template-tail value to point to us.
              tData[previousNode + 1] = setTStylingRangeNext(tData[previousNode + 1], index);
            } // The "previous" of the template binding head should point to this host binding


            tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);
          } else {
            tData[index + 1] = toTStylingRange(tmplHead, 0); // if a host binding has already been registered, we need to update the next of that host
            // binding to point to this one

            if (tmplHead !== 0) {
              // We need to update the template-tail value to point to us.
              tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);
            } // if we don't have template, the head points to template-tail, and needs to be advanced.


            tmplHead = index;
          }
        } else {
          // We are inserting in template section.
          // We need to set this binding's "previous" to the current template tail
          tData[index + 1] = toTStylingRange(tmplTail, 0);
          ngDevMode && assertEqual(tmplHead !== 0 && tmplTail === 0, false, 'Adding template bindings after hostBindings is not allowed.');

          if (tmplHead === 0) {
            tmplHead = index;
          } else {
            // We need to update the previous value "next" to point to this binding
            tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);
          }

          tmplTail = index;
        } // Now we need to update / compute the duplicates.
        // Starting with our location search towards head (least priority)


        if (isKeyDuplicateOfStatic) {
          tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);
        }

        markDuplicates(tData, tStylingKey, index, true, isClassBinding);
        markDuplicates(tData, tStylingKey, index, false, isClassBinding);
        markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);
        tBindings = toTStylingRange(tmplHead, tmplTail);

        if (isClassBinding) {
          tNode.classBindings = tBindings;
        } else {
          tNode.styleBindings = tBindings;
        }
      }
      /**
       * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.
       *
       * @param tNode `TNode` where the residual is stored.
       * @param tStylingKey `TStylingKey` to store.
       * @param tData `TData` associated with the current `LView`.
       * @param index location of where `tStyleValue` should be stored (and linked into list.)
       * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.
       *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)
       */


      function markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {
        var residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;

        if (residual != null
        /* or undefined */
        && typeof tStylingKey == 'string' && keyValueArrayIndexOf(residual, tStylingKey) >= 0) {
          // We have duplicate in the residual so mark ourselves as duplicate.
          tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);
        }
      }
      /**
       * Marks `TStyleValue`s as duplicates if another style binding in the list has the same
       * `TStyleValue`.
       *
       * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once
       * with it set to `false` to search both the previous as well as next items in the list.
       *
       * No duplicate case
       * ```
       *   [style.color]
       *   [style.width.px] <<- index
       *   [style.height.px]
       * ```
       *
       * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no
       * duplicates because `width` is not found in any other part of the linked list.
       *
       * Duplicate case
       * ```
       *   [style.color]
       *   [style.width.em]
       *   [style.width.px] <<- index
       * ```
       * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`
       * because `width` is found in the chain.
       *
       * Map case 1
       * ```
       *   [style.width.px]
       *   [style.color]
       *   [style]  <<- index
       * ```
       * In the above case adding `[style]` will produce a duplicate with any other bindings because
       * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.
       *
       * Map case 2
       * ```
       *   [style]
       *   [style.width.px]
       *   [style.color]  <<- index
       * ```
       * In the above case adding `[style.color]` will produce a duplicate because there is already a
       * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or
       * `width`.
       *
       * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.
       * NOTE: We use `style` as example, but same logic is applied to `class`es as well.
       *
       * @param tData `TData` where the linked list is stored.
       * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in
       *        the linked list.
       * @param index Starting location in the linked list to search from
       * @param isPrevDir Direction.
       *        - `true` for previous (lower priority);
       *        - `false` for next (higher priority).
       */


      function markDuplicates(tData, tStylingKey, index, isPrevDir, isClassBinding) {
        var tStylingAtIndex = tData[index + 1];
        var isMap = tStylingKey === null;
        var cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);
        var foundDuplicate = false; // We keep iterating as long as we have a cursor
        // AND either:
        // - we found what we are looking for, OR
        // - we are a map in which case we have to continue searching even after we find what we were
        //   looking for since we are a wild card and everything needs to be flipped to duplicate.

        while (cursor !== 0 && (foundDuplicate === false || isMap)) {
          ngDevMode && assertIndexInRange(tData, cursor);
          var tStylingValueAtCursor = tData[cursor];
          var tStyleRangeAtCursor = tData[cursor + 1];

          if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {
            foundDuplicate = true;
            tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) : setTStylingRangePrevDuplicate(tStyleRangeAtCursor);
          }

          cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) : getTStylingRangeNext(tStyleRangeAtCursor);
        }

        if (foundDuplicate) {
          // if we found a duplicate, than mark ourselves.
          tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) : setTStylingRangeNextDuplicate(tStylingAtIndex);
        }
      }
      /**
       * Determines if two `TStylingKey`s are a match.
       *
       * When computing whether a binding contains a duplicate, we need to compare if the instruction
       * `TStylingKey` has a match.
       *
       * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:
       * - `color`
       *    - `color`    // Match another color
       *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction
       *    - `['', 'color', 'other', true]` // wrapped `color` so match
       *    - `['', null, 'other', true]`       // wrapped `null` so match
       *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`
       * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction
       *
       * @param tStylingKeyCursor
       * @param tStylingKey
       */


      function isStylingMatch(tStylingKeyCursor, tStylingKey) {
        ngDevMode && assertNotEqual(Array.isArray(tStylingKey), true, 'Expected that \'tStylingKey\' has been unwrapped');

        if (tStylingKeyCursor === null || // If the cursor is `null` it means that we have map at that
        // location so we must assume that we have a match.
        tStylingKey == null || // If `tStylingKey` is `null` then it is a map therefor assume that it
        // contains a match.
        (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) === tStylingKey // If the keys match explicitly than we are a match.
        ) {
            return true;
          } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {
          // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has
          // statics and we need to check those as well.
          return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >= 0; // see if we are matching the key
        }

        return false;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Global state of the parser. (This makes parser non-reentrant, but that is not an issue)


      var parserState = {
        textEnd: 0,
        key: 0,
        keyEnd: 0,
        value: 0,
        valueEnd: 0
      };
      /**
       * Retrieves the last parsed `key` of style.
       * @param text the text to substring the key from.
       */

      function getLastParsedKey(text) {
        return text.substring(parserState.key, parserState.keyEnd);
      }
      /**
       * Retrieves the last parsed `value` of style.
       * @param text the text to substring the key from.
       */


      function getLastParsedValue(text) {
        return text.substring(parserState.value, parserState.valueEnd);
      }
      /**
       * Initializes `className` string for parsing and parses the first token.
       *
       * This function is intended to be used in this format:
       * ```
       * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
       *   const key = getLastParsedKey();
       *   ...
       * }
       * ```
       * @param text `className` to parse
       * @returns index where the next invocation of `parseClassNameNext` should resume.
       */


      function parseClassName(text) {
        resetParserState(text);
        return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));
      }
      /**
       * Parses next `className` token.
       *
       * This function is intended to be used in this format:
       * ```
       * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
       *   const key = getLastParsedKey();
       *   ...
       * }
       * ```
       *
       * @param text `className` to parse
       * @param index where the parsing should resume.
       * @returns index where the next invocation of `parseClassNameNext` should resume.
       */


      function parseClassNameNext(text, index) {
        var end = parserState.textEnd;

        if (end === index) {
          return -1;
        }

        index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);
        return consumeWhitespace(text, index, end);
      }
      /**
       * Initializes `cssText` string for parsing and parses the first key/values.
       *
       * This function is intended to be used in this format:
       * ```
       * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {
       *   const key = getLastParsedKey();
       *   const value = getLastParsedValue();
       *   ...
       * }
       * ```
       * @param text `cssText` to parse
       * @returns index where the next invocation of `parseStyleNext` should resume.
       */


      function parseStyle(text) {
        resetParserState(text);
        return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));
      }
      /**
       * Parses the next `cssText` key/values.
       *
       * This function is intended to be used in this format:
       * ```
       * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {
       *   const key = getLastParsedKey();
       *   const value = getLastParsedValue();
       *   ...
       * }
       *
       * @param text `cssText` to parse
       * @param index where the parsing should resume.
       * @returns index where the next invocation of `parseStyleNext` should resume.
       */


      function parseStyleNext(text, startIndex) {
        var end = parserState.textEnd;
        var index = parserState.key = consumeWhitespace(text, startIndex, end);

        if (end === index) {
          // we reached an end so just quit
          return -1;
        }

        index = parserState.keyEnd = consumeStyleKey(text, index, end);
        index = consumeSeparator(text, index, end, 58
        /* COLON */
        );
        index = parserState.value = consumeWhitespace(text, index, end);
        index = parserState.valueEnd = consumeStyleValue(text, index, end);
        return consumeSeparator(text, index, end, 59
        /* SEMI_COLON */
        );
      }
      /**
       * Reset the global state of the styling parser.
       * @param text The styling text to parse.
       */


      function resetParserState(text) {
        parserState.key = 0;
        parserState.keyEnd = 0;
        parserState.value = 0;
        parserState.valueEnd = 0;
        parserState.textEnd = text.length;
      }
      /**
       * Returns index of next non-whitespace character.
       *
       * @param text Text to scan
       * @param startIndex Starting index of character where the scan should start.
       * @param endIndex Ending index of character where the scan should end.
       * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at
       *          that location.)
       */


      function consumeWhitespace(text, startIndex, endIndex) {
        while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32
        /* SPACE */
        ) {
          startIndex++;
        }

        return startIndex;
      }
      /**
       * Returns index of last char in class token.
       *
       * @param text Text to scan
       * @param startIndex Starting index of character where the scan should start.
       * @param endIndex Ending index of character where the scan should end.
       * @returns Index after last char in class token.
       */


      function consumeClassToken(text, startIndex, endIndex) {
        while (startIndex < endIndex && text.charCodeAt(startIndex) > 32
        /* SPACE */
        ) {
          startIndex++;
        }

        return startIndex;
      }
      /**
       * Consumes all of the characters belonging to style key and token.
       *
       * @param text Text to scan
       * @param startIndex Starting index of character where the scan should start.
       * @param endIndex Ending index of character where the scan should end.
       * @returns Index after last style key character.
       */


      function consumeStyleKey(text, startIndex, endIndex) {
        var ch;

        while (startIndex < endIndex && ((ch = text.charCodeAt(startIndex)) === 45
        /* DASH */
        || ch === 95
        /* UNDERSCORE */
        || (ch & -33
        /* UPPER_CASE */
        ) >= 65
        /* A */
        && (ch & -33
        /* UPPER_CASE */
        ) <= 90
        /* Z */
        || ch >= 48
        /* ZERO */
        && ch <= 57
        /* NINE */
        )) {
          startIndex++;
        }

        return startIndex;
      }
      /**
       * Consumes all whitespace and the separator `:` after the style key.
       *
       * @param text Text to scan
       * @param startIndex Starting index of character where the scan should start.
       * @param endIndex Ending index of character where the scan should end.
       * @returns Index after separator and surrounding whitespace.
       */


      function consumeSeparator(text, startIndex, endIndex, separator) {
        startIndex = consumeWhitespace(text, startIndex, endIndex);

        if (startIndex < endIndex) {
          if (ngDevMode && text.charCodeAt(startIndex) !== separator) {
            malformedStyleError(text, String.fromCharCode(separator), startIndex);
          }

          startIndex++;
        }

        return startIndex;
      }
      /**
       * Consumes style value honoring `url()` and `""` text.
       *
       * @param text Text to scan
       * @param startIndex Starting index of character where the scan should start.
       * @param endIndex Ending index of character where the scan should end.
       * @returns Index after last style value character.
       */


      function consumeStyleValue(text, startIndex, endIndex) {
        var ch1 = -1; // 1st previous character

        var ch2 = -1; // 2nd previous character

        var ch3 = -1; // 3rd previous character

        var i = startIndex;
        var lastChIndex = i;

        while (i < endIndex) {
          var ch = text.charCodeAt(i++);

          if (ch === 59
          /* SEMI_COLON */
          ) {
              return lastChIndex;
            } else if (ch === 34
          /* DOUBLE_QUOTE */
          || ch === 39
          /* SINGLE_QUOTE */
          ) {
              lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);
            } else if (startIndex === i - 4 && // We have seen only 4 characters so far "URL(" (Ignore "foo_URL()")
          ch3 === 85
          /* U */
          && ch2 === 82
          /* R */
          && ch1 === 76
          /* L */
          && ch === 40
          /* OPEN_PAREN */
          ) {
              lastChIndex = i = consumeQuotedText(text, 41
              /* CLOSE_PAREN */
              , i, endIndex);
            } else if (ch > 32
          /* SPACE */
          ) {
              // if we have a non-whitespace character then capture its location
              lastChIndex = i;
            }

          ch3 = ch2;
          ch2 = ch1;
          ch1 = ch & -33
          /* UPPER_CASE */
          ;
        }

        return lastChIndex;
      }
      /**
       * Consumes all of the quoted characters.
       *
       * @param text Text to scan
       * @param quoteCharCode CharCode of either `"` or `'` quote or `)` for `url(...)`.
       * @param startIndex Starting index of character where the scan should start.
       * @param endIndex Ending index of character where the scan should end.
       * @returns Index after quoted characters.
       */


      function consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {
        var ch1 = -1; // 1st previous character

        var index = startIndex;

        while (index < endIndex) {
          var ch = text.charCodeAt(index++);

          if (ch == quoteCharCode && ch1 !== 92
          /* BACK_SLASH */
          ) {
              return index;
            }

          if (ch == 92
          /* BACK_SLASH */
          && ch1 === 92
          /* BACK_SLASH */
          ) {
              // two back slashes cancel each other out. For example `"\\"` should properly end the
              // quotation. (It should not assume that the last `"` is escaped.)
              ch1 = 0;
            } else {
            ch1 = ch;
          }
        }

        throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) : new Error();
      }

      function malformedStyleError(text, expecting, index) {
        ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');
        throw throwError("Malformed style at location ".concat(index, " in string '") + text.substring(0, index) + '[>>' + text.substring(index, index + 1) + '<<]' + text.substr(index + 1) + "'. Expecting '".concat(expecting, "'."));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Update a style binding on an element with the provided value.
       *
       * If the style value is falsy then it will be removed from the element
       * (or assigned a different value depending if there are any styles placed
       * on the element with `styleMap` or any static styles that are
       * present from when the element was created with `styling`).
       *
       * Note that the styling element is updated as part of `stylingApply`.
       *
       * @param prop A valid CSS property.
       * @param value New value to write (`null` or an empty string to remove).
       * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.
       *
       * Note that this will apply the provided style value to the host element if this function is called
       * within a host binding function.
       *
       * @codeGenApi
       */


      function _ɵɵstyleProp(prop, value, suffix) {
        checkStylingProperty(prop, value, suffix, false);
        return _ɵɵstyleProp;
      }
      /**
       * Update a class binding on an element with the provided value.
       *
       * This instruction is meant to handle the `[class.foo]="exp"` case and,
       * therefore, the class binding itself must already be allocated using
       * `styling` within the creation block.
       *
       * @param prop A valid CSS class (only one).
       * @param value A true/false value which will turn the class on or off.
       *
       * Note that this will apply the provided class value to the host element if this function
       * is called within a host binding function.
       *
       * @codeGenApi
       */


      function _ɵɵclassProp(className, value) {
        checkStylingProperty(className, value, null, true);
        return _ɵɵclassProp;
      }
      /**
       * Update style bindings using an object literal on an element.
       *
       * This instruction is meant to apply styling via the `[style]="exp"` template bindings.
       * When styles are applied to the element they will then be updated with respect to
       * any styles/classes set via `styleProp`. If any styles are set to falsy
       * then they will be removed from the element.
       *
       * Note that the styling instruction will not be applied until `stylingApply` is called.
       *
       * @param styles A key/value style map of the styles that will be applied to the given element.
       *        Any missing styles (that have already been applied to the element beforehand) will be
       *        removed (unset) from the element's styling.
       *
       * Note that this will apply the provided styleMap value to the host element if this function
       * is called within a host binding.
       *
       * @codeGenApi
       */


      function _ɵɵstyleMap(styles) {
        checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);
      }
      /**
       * Parse text as style and add values to KeyValueArray.
       *
       * This code is pulled out to a separate function so that it can be tree shaken away if it is not
       * needed. It is only referenced from `ɵɵstyleMap`.
       *
       * @param keyValueArray KeyValueArray to add parsed values to.
       * @param text text to parse.
       */


      function styleStringParser(keyValueArray, text) {
        for (var i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {
          styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));
        }
      }
      /**
       * Update class bindings using an object literal or class-string on an element.
       *
       * This instruction is meant to apply styling via the `[class]="exp"` template bindings.
       * When classes are applied to the element they will then be updated with
       * respect to any styles/classes set via `classProp`. If any
       * classes are set to falsy then they will be removed from the element.
       *
       * Note that the styling instruction will not be applied until `stylingApply` is called.
       * Note that this will the provided classMap value to the host element if this function is called
       * within a host binding.
       *
       * @param classes A key/value map or string of CSS classes that will be added to the
       *        given element. Any missing classes (that have already been applied to the element
       *        beforehand) will be removed (unset) from the element's list of CSS classes.
       *
       * @codeGenApi
       */


      function _ɵɵclassMap(classes) {
        checkStylingMap(keyValueArraySet, classStringParser, classes, true);
      }
      /**
       * Parse text as class and add values to KeyValueArray.
       *
       * This code is pulled out to a separate function so that it can be tree shaken away if it is not
       * needed. It is only referenced from `ɵɵclassMap`.
       *
       * @param keyValueArray KeyValueArray to add parsed values to.
       * @param text text to parse.
       */


      function classStringParser(keyValueArray, text) {
        for (var i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
          keyValueArraySet(keyValueArray, getLastParsedKey(text), true);
        }
      }
      /**
       * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.
       *
       * @param prop property name.
       * @param value binding value.
       * @param suffix suffix for the property (e.g. `em` or `px`)
       * @param isClassBased `true` if `class` change (`false` if `style`)
       */


      function checkStylingProperty(prop, value, suffix, isClassBased) {
        var lView = getLView();
        var tView = getTView(); // Styling instructions use 2 slots per binding.
        // 1. one for the value / TStylingKey
        // 2. one for the intermittent-value / TStylingRange

        var bindingIndex = incrementBindingIndex(2);

        if (tView.firstUpdatePass) {
          stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);
        }

        if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
          var tNode = tView.data[getSelectedIndex()];
          updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);
        }
      }
      /**
       * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.
       *
       * @param keyValueArraySet (See `keyValueArraySet` in "util/array_utils") Gets passed in as a
       *        function so that `style` can be processed. This is done for tree shaking purposes.
       * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`
       *        have different parsers.)
       * @param value bound value from application
       * @param isClassBased `true` if `class` change (`false` if `style`)
       */


      function checkStylingMap(keyValueArraySet, stringParser, value, isClassBased) {
        var tView = getTView();
        var bindingIndex = incrementBindingIndex(2);

        if (tView.firstUpdatePass) {
          stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);
        }

        var lView = getLView();

        if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
          // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the
          // if so as not to read unnecessarily.
          var tNode = tView.data[getSelectedIndex()];

          if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {
            if (ngDevMode) {
              // verify that if we are shadowing then `TData` is appropriately marked so that we skip
              // processing this binding in styling resolution.
              var tStylingKey = tView.data[bindingIndex];
              assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, 'Styling linked list shadow input should be marked as \'false\'');
            } // VE does not concatenate the static portion like we are doing here.
            // Instead VE just ignores the static completely if dynamic binding is present.
            // Because of locality we have already set the static portion because we don't know if there
            // is a dynamic portion until later. If we would ignore the static portion it would look like
            // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong
            // thing as it would think that the static portion was removed. For this reason we
            // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.


            var staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;
            ngDevMode && isClassBased === false && staticPrefix !== null && assertEqual(staticPrefix.endsWith(';'), true, 'Expecting static portion to end with \';\'');

            if (staticPrefix !== null) {
              // We want to make sure that falsy values of `value` become empty strings.
              value = concatStringsWithSpace(staticPrefix, value ? value : '');
            } // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.
            // This takes over the `[style]` binding. (Same for `[class]`)


            setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);
          } else {
            updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value), isClassBased, bindingIndex);
          }
        }
      }
      /**
       * Determines when the binding is in `hostBindings` section
       *
       * @param tView Current `TView`
       * @param bindingIndex index of binding which we would like if it is in `hostBindings`
       */


      function isInHostBindings(tView, bindingIndex) {
        // All host bindings are placed after the expando section.
        return bindingIndex >= tView.expandoStartIndex;
      }
      /**
       * Collects the necessary information to insert the binding into a linked list of style bindings
       * using `insertTStylingBinding`.
       *
       * @param tView `TView` where the binding linked list will be stored.
       * @param tStylingKey Property/key of the binding.
       * @param bindingIndex Index of binding associated with the `prop`
       * @param isClassBased `true` if `class` change (`false` if `style`)
       */


      function stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {
        ngDevMode && assertFirstUpdatePass(tView);
        var tData = tView.data;

        if (tData[bindingIndex + 1] === null) {
          // The above check is necessary because we don't clear first update pass until first successful
          // (no exception) template execution. This prevents the styling instruction from double adding
          // itself to the list.
          // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the
          // if so as not to read unnecessarily.
          var tNode = tData[getSelectedIndex()];
          ngDevMode && assertDefined(tNode, 'TNode expected');
          var isHostBindings = isInHostBindings(tView, bindingIndex);

          if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {
            // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.
            // If there is a directive which uses `@Input('style')` or `@Input('class')` than
            // we need to neutralize this binding since that directive is shadowing it.
            // We turn this into a noop by setting the key to `false`
            tStylingKey = false;
          }

          tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);
          insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);
        }
      }
      /**
       * Adds static styling information to the binding if applicable.
       *
       * The linked list of styles not only stores the list and keys, but also stores static styling
       * information on some of the keys. This function determines if the key should contain the styling
       * information and computes it.
       *
       * See `TStylingStatic` for more details.
       *
       * @param tData `TData` where the linked list is stored.
       * @param tNode `TNode` for which the styling is being computed.
       * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`
       * @param isClassBased `true` if `class` (`false` if `style`)
       */


      function wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {
        var hostDirectiveDef = getCurrentDirectiveDef(tData);
        var residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;

        if (hostDirectiveDef === null) {
          // We are in template node.
          // If template node already had styling instruction then it has already collected the static
          // styling and there is no need to collect them again. We know that we are the first styling
          // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).
          var isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;

          if (isFirstStylingInstructionInTemplate) {
            // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point
            // they are already merged and it would not be possible to figure which property belongs where
            // in the priority.
            stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);
            stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased); // We know that if we have styling binding in template we can't have residual.

            residual = null;
          }
        } else {
          // We are in host binding node and there was no binding instruction in template node.
          // This means that we need to compute the residual.
          var directiveStylingLast = tNode.directiveStylingLast;
          var isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;

          if (isFirstStylingInstructionInHostBinding) {
            stylingKey = collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);

            if (residual === null) {
              // - If `null` than either:
              //    - Template styling instruction already ran and it has consumed the static
              //      styling into its `TStylingKey` and so there is no need to update residual. Instead
              //      we need to update the `TStylingKey` associated with the first template node
              //      instruction. OR
              //    - Some other styling instruction ran and determined that there are no residuals
              var templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);

              if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {
                // Only recompute if `templateStylingKey` had static values. (If no static value found
                // then there is nothing to do since this operation can only produce less static keys, not
                // more.)
                templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1]
                /* unwrap previous statics */
                , isClassBased);
                templateStylingKey = collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);
                setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);
              }
            } else {
              // We only need to recompute residual if it is not `null`.
              // - If existing residual (implies there was no template styling). This means that some of
              //   the statics may have moved from the residual to the `stylingKey` and so we have to
              //   recompute.
              // - If `undefined` this is the first time we are running.
              residual = collectResidual(tData, tNode, isClassBased);
            }
          }
        }

        if (residual !== undefined) {
          isClassBased ? tNode.residualClasses = residual : tNode.residualStyles = residual;
        }

        return stylingKey;
      }
      /**
       * Retrieve the `TStylingKey` for the template styling instruction.
       *
       * This is needed since `hostBinding` styling instructions are inserted after the template
       * instruction. While the template instruction needs to update the residual in `TNode` the
       * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because
       * the template instruction is downstream from the `hostBindings` instructions.
       *
       * @param tData `TData` where the linked list is stored.
       * @param tNode `TNode` for which the styling is being computed.
       * @param isClassBased `true` if `class` (`false` if `style`)
       * @return `TStylingKey` if found or `undefined` if not found.
       */


      function getTemplateHeadTStylingKey(tData, tNode, isClassBased) {
        var bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;

        if (getTStylingRangeNext(bindings) === 0) {
          // There does not seem to be a styling instruction in the `template`.
          return undefined;
        }

        return tData[getTStylingRangePrev(bindings)];
      }
      /**
       * Update the `TStylingKey` of the first template instruction in `TNode`.
       *
       * Logically `hostBindings` styling instructions are of lower priority than that of the template.
       * However, they execute after the template styling instructions. This means that they get inserted
       * in front of the template styling instructions.
       *
       * If we have a template styling instruction and a new `hostBindings` styling instruction is
       * executed it means that it may need to steal static fields from the template instruction. This
       * method allows us to update the first template instruction `TStylingKey` with a new value.
       *
       * Assume:
       * ```
       * <div my-dir style="color: red" [style.color]="tmplExp"></div>
       *
       * @Directive({
       *   host: {
       *     'style': 'width: 100px',
       *     '[style.color]': 'dirExp',
       *   }
       * })
       * class MyDir {}
       * ```
       *
       * when `[style.color]="tmplExp"` executes it creates this data structure.
       * ```
       *  ['', 'color', 'color', 'red', 'width', '100px'],
       * ```
       *
       * The reason for this is that the template instruction does not know if there are styling
       * instructions and must assume that there are none and must collect all of the static styling.
       * (both
       * `color' and 'width`)
       *
       * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.
       * ```
       *  ['', 'color', 'width', '100px'],  // newly inserted
       *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong
       * ```
       *
       * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to
       * update it like so:
       * ```
       *  ['', 'color', 'width', '100px'],
       *  ['', 'color', 'color', 'red'],    // UPDATE
       * ```
       *
       * @param tData `TData` where the linked list is stored.
       * @param tNode `TNode` for which the styling is being computed.
       * @param isClassBased `true` if `class` (`false` if `style`)
       * @param tStylingKey New `TStylingKey` which is replacing the old one.
       */


      function setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {
        var bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
        ngDevMode && assertNotEqual(getTStylingRangeNext(bindings), 0, 'Expecting to have at least one template styling binding.');
        tData[getTStylingRangePrev(bindings)] = tStylingKey;
      }
      /**
       * Collect all static values after the current `TNode.directiveStylingLast` index.
       *
       * Collect the remaining styling information which has not yet been collected by an existing
       * styling instruction.
       *
       * @param tData `TData` where the `DirectiveDefs` are stored.
       * @param tNode `TNode` which contains the directive range.
       * @param isClassBased `true` if `class` (`false` if `style`)
       */


      function collectResidual(tData, tNode, isClassBased) {
        var residual = undefined;
        var directiveEnd = tNode.directiveEnd;
        ngDevMode && assertNotEqual(tNode.directiveStylingLast, -1, 'By the time this function gets called at least one hostBindings-node styling instruction must have executed.'); // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are
        // collecting things after the last `hostBindings` directive which had a styling instruction.)

        for (var i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {
          var attrs = tData[i].hostAttrs;
          residual = collectStylingFromTAttrs(residual, attrs, isClassBased);
        }

        return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);
      }
      /**
       * Collect the static styling information with lower priority than `hostDirectiveDef`.
       *
       * (This is opposite of residual styling.)
       *
       * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static
       *        styling. (Or `null` if template styling)
       * @param tData `TData` where the linked list is stored.
       * @param tNode `TNode` for which the styling is being computed.
       * @param stylingKey Existing `TStylingKey` to update or wrap.
       * @param isClassBased `true` if `class` (`false` if `style`)
       */


      function collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {
        // We need to loop because there can be directives which have `hostAttrs` but don't have
        // `hostBindings` so this loop catches up to the current directive..
        var currentDirective = null;
        var directiveEnd = tNode.directiveEnd;
        var directiveStylingLast = tNode.directiveStylingLast;

        if (directiveStylingLast === -1) {
          directiveStylingLast = tNode.directiveStart;
        } else {
          directiveStylingLast++;
        }

        while (directiveStylingLast < directiveEnd) {
          currentDirective = tData[directiveStylingLast];
          ngDevMode && assertDefined(currentDirective, 'expected to be defined');
          stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);
          if (currentDirective === hostDirectiveDef) break;
          directiveStylingLast++;
        }

        if (hostDirectiveDef !== null) {
          // we only advance the styling cursor if we are collecting data from host bindings.
          // Template executes before host bindings and so if we would update the index,
          // host bindings would not get their statics.
          tNode.directiveStylingLast = directiveStylingLast;
        }

        return stylingKey;
      }
      /**
       * Convert `TAttrs` into `TStylingStatic`.
       *
       * @param stylingKey existing `TStylingKey` to update or wrap.
       * @param attrs `TAttributes` to process.
       * @param isClassBased `true` if `class` (`false` if `style`)
       */


      function collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {
        var desiredMarker = isClassBased ? 1
        /* Classes */
        : 2
        /* Styles */
        ;
        var currentMarker = -1
        /* ImplicitAttributes */
        ;

        if (attrs !== null) {
          for (var i = 0; i < attrs.length; i++) {
            var item = attrs[i];

            if (typeof item === 'number') {
              currentMarker = item;
            } else {
              if (currentMarker === desiredMarker) {
                if (!Array.isArray(stylingKey)) {
                  stylingKey = stylingKey === undefined ? [] : ['', stylingKey];
                }

                keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);
              }
            }
          }
        }

        return stylingKey === undefined ? null : stylingKey;
      }
      /**
       * Convert user input to `KeyValueArray`.
       *
       * This function takes user input which could be `string`, Object literal, or iterable and converts
       * it into a consistent representation. The output of this is `KeyValueArray` (which is an array
       * where
       * even indexes contain keys and odd indexes contain values for those keys).
       *
       * The advantage of converting to `KeyValueArray` is that we can perform diff in an input
       * independent
       * way.
       * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be
       * applied)
       *
       * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the
       * difference in linear fashion without the need to allocate any additional data.
       *
       * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine
       * which values need to be deleted, over the new `Map` to determine additions, and we would have to
       * keep additional `Map` to keep track of duplicates or items which have not yet been visited.
       *
       * @param keyValueArraySet (See `keyValueArraySet` in "util/array_utils") Gets passed in as a
       *        function so that `style` can be processed. This is done
       *        for tree shaking purposes.
       * @param stringParser The parser is passed in so that it will be tree shakable. See
       *        `styleStringParser` and `classStringParser`
       * @param value The value to parse/convert to `KeyValueArray`
       */


      function toStylingKeyValueArray(keyValueArraySet, stringParser, value) {
        if (value == null
        /*|| value === undefined */
        || value === '') return EMPTY_ARRAY;
        var styleKeyValueArray = [];
        var unwrappedValue = unwrapSafeValue(value);

        if (Array.isArray(unwrappedValue)) {
          for (var i = 0; i < unwrappedValue.length; i++) {
            keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);
          }
        } else if (typeof unwrappedValue === 'object') {
          for (var key in unwrappedValue) {
            if (unwrappedValue.hasOwnProperty(key)) {
              keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);
            }
          }
        } else if (typeof unwrappedValue === 'string') {
          stringParser(styleKeyValueArray, unwrappedValue);
        } else {
          ngDevMode && throwError('Unsupported styling type ' + typeof unwrappedValue + ': ' + unwrappedValue);
        }

        return styleKeyValueArray;
      }
      /**
       * Set a `value` for a `key`.
       *
       * See: `keyValueArraySet` for details
       *
       * @param keyValueArray KeyValueArray to add to.
       * @param key Style key to add.
       * @param value The value to set.
       */


      function styleKeyValueArraySet(keyValueArray, key, value) {
        keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));
      }
      /**
       * Update map based styling.
       *
       * Map based styling could be anything which contains more than one binding. For example `string`,
       * or object literal. Dealing with all of these types would complicate the logic so
       * instead this function expects that the complex input is first converted into normalized
       * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it
       * very cheap to compute deltas between the previous and current value.
       *
       * @param tView Associated `TView.data` contains the linked list of binding priorities.
       * @param tNode `TNode` where the binding is located.
       * @param lView `LView` contains the values associated with other styling binding at this `TNode`.
       * @param renderer Renderer to use if any updates.
       * @param oldKeyValueArray Previous value represented as `KeyValueArray`
       * @param newKeyValueArray Current value represented as `KeyValueArray`
       * @param isClassBased `true` if `class` (`false` if `style`)
       * @param bindingIndex Binding index of the binding.
       */


      function updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {
        if (oldKeyValueArray === NO_CHANGE) {
          // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.
          oldKeyValueArray = EMPTY_ARRAY;
        }

        var oldIndex = 0;
        var newIndex = 0;
        var oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;
        var newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;

        while (oldKey !== null || newKey !== null) {
          ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');
          ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');
          var oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;
          var newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;
          var setKey = null;
          var setValue = undefined;

          if (oldKey === newKey) {
            // UPDATE: Keys are equal => new value is overwriting old value.
            oldIndex += 2;
            newIndex += 2;

            if (oldValue !== newValue) {
              setKey = newKey;
              setValue = newValue;
            }
          } else if (newKey === null || oldKey !== null && oldKey < newKey) {
            // DELETE: oldKey key is missing or we did not find the oldKey in the newValue
            // (because the keyValueArray is sorted and `newKey` is found later alphabetically).
            // `"background" < "color"` so we need to delete `"background"` because it is not found in the
            // new array.
            oldIndex += 2;
            setKey = oldKey;
          } else {
            // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.
            // `"color" > "background"` so we need to add `color` because it is in new array but not in
            // old array.
            ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');
            newIndex += 2;
            setKey = newKey;
            setValue = newValue;
          }

          if (setKey !== null) {
            updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);
          }

          oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;
          newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;
        }
      }
      /**
       * Update a simple (property name) styling.
       *
       * This function takes `prop` and updates the DOM to that value. The function takes the binding
       * value as well as binding priority into consideration to determine which value should be written
       * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks
       * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)
       *
       * @param tView Associated `TView.data` contains the linked list of binding priorities.
       * @param tNode `TNode` where the binding is located.
       * @param lView `LView` contains the values associated with other styling binding at this `TNode`.
       * @param renderer Renderer to use if any updates.
       * @param prop Either style property name or a class name.
       * @param value Either style value for `prop` or `true`/`false` if `prop` is class.
       * @param isClassBased `true` if `class` (`false` if `style`)
       * @param bindingIndex Binding index of the binding.
       */


      function updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {
        if (!(tNode.type & 3
        /* AnyRNode */
        )) {
          // It is possible to have styling on non-elements (such as ng-container).
          // This is rare, but it does happen. In such a case, just ignore the binding.
          return;
        }

        var tData = tView.data;
        var tRange = tData[bindingIndex + 1];
        var higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ? findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) : undefined;

        if (!isStylingValuePresent(higherPriorityValue)) {
          // We don't have a next duplicate, or we did not find a duplicate value.
          if (!isStylingValuePresent(value)) {
            // We should delete current value or restore to lower priority value.
            if (getTStylingRangePrevDuplicate(tRange)) {
              // We have a possible prev duplicate, let's retrieve it.
              value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);
            }
          }

          var rNode = getNativeByIndex(getSelectedIndex(), lView);
          applyStyling(renderer, isClassBased, rNode, prop, value);
        }
      }
      /**
       * Search for styling value with higher priority which is overwriting current value, or a
       * value of lower priority to which we should fall back if the value is `undefined`.
       *
       * When value is being applied at a location, related values need to be consulted.
       * - If there is a higher priority binding, we should be using that one instead.
       *   For example `<div  [style]="{color:exp1}" [style.color]="exp2">` change to `exp1`
       *   requires that we check `exp2` to see if it is set to value other than `undefined`.
       * - If there is a lower priority binding and we are changing to `undefined`
       *   For example `<div  [style]="{color:exp1}" [style.color]="exp2">` change to `exp2` to
       *   `undefined` requires that we check `exp1` (and static values) and use that as new value.
       *
       * NOTE: The styling stores two values.
       * 1. The raw value which came from the application is stored at `index + 0` location. (This value
       *    is used for dirty checking).
       * 2. The normalized value is stored at `index + 1`.
       *
       * @param tData `TData` used for traversing the priority.
       * @param tNode `TNode` to use for resolving static styling. Also controls search direction.
       *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.
       *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.
       *   - `null` search prev and go all the way to end. Return last value where
       *     `isStylingValuePresent(value)` is true.
       * @param lView `LView` used for retrieving the actual values.
       * @param prop Property which we are interested in.
       * @param index Starting index in the linked list of styling bindings where the search should start.
       * @param isClassBased `true` if `class` (`false` if `style`)
       */


      function findStylingValue(tData, tNode, lView, prop, index, isClassBased) {
        // `TNode` to use for resolving static styling. Also controls search direction.
        //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.
        //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.
        //   - `null` search prev and go all the way to end. Return last value where
        //     `isStylingValuePresent(value)` is true.
        var isPrevDirection = tNode === null;
        var value = undefined;

        while (index > 0) {
          var rawKey = tData[index];
          var containsStatics = Array.isArray(rawKey); // Unwrap the key if we contain static values.

          var key = containsStatics ? rawKey[1] : rawKey;
          var isStylingMap = key === null;
          var valueAtLViewIndex = lView[index + 1];

          if (valueAtLViewIndex === NO_CHANGE) {
            // In firstUpdatePass the styling instructions create a linked list of styling.
            // On subsequent passes it is possible for a styling instruction to try to read a binding
            // which
            // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that
            // we have `undefined` (or empty array in case of styling-map instruction) instead. This
            // allows the resolution to apply the value (which may later be overwritten when the
            // binding actually executes.)
            valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;
          }

          var currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) : key === prop ? valueAtLViewIndex : undefined;

          if (containsStatics && !isStylingValuePresent(currentValue)) {
            currentValue = keyValueArrayGet(rawKey, prop);
          }

          if (isStylingValuePresent(currentValue)) {
            value = currentValue;

            if (isPrevDirection) {
              return value;
            }
          }

          var tRange = tData[index + 1];
          index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);
        }

        if (tNode !== null) {
          // in case where we are going in next direction AND we did not find anything, we need to
          // consult residual styling
          var residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;

          if (residual != null
          /** OR residual !=== undefined */
          ) {
              value = keyValueArrayGet(residual, prop);
            }
        }

        return value;
      }
      /**
       * Determines if the binding value should be used (or if the value is 'undefined' and hence priority
       * resolution should be used.)
       *
       * @param value Binding style value.
       */


      function isStylingValuePresent(value) {
        // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't
        // have an opinion as to what this binding should be and you should consult other bindings by
        // priority to determine the valid value.
        // This is extracted into a single function so that we have a single place to control this.
        return value !== undefined;
      }
      /**
       * Normalizes and/or adds a suffix to the value.
       *
       * If value is `null`/`undefined` no suffix is added
       * @param value
       * @param suffix
       */


      function normalizeSuffix(value, suffix) {
        if (value == null
        /** || value === undefined */
        ) {// do nothing
          } else if (typeof suffix === 'string') {
          value = value + suffix;
        } else if (typeof value === 'object') {
          value = stringify(unwrapSafeValue(value));
        }

        return value;
      }
      /**
       * Tests if the `TNode` has input shadow.
       *
       * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or
       * `@Input('class')` as input.
       *
       * @param tNode `TNode` which we would like to see if it has shadow.
       * @param isClassBased `true` if `class` (`false` if `style`)
       */


      function hasStylingInputShadow(tNode, isClassBased) {
        return (tNode.flags & (isClassBased ? 16
        /* hasClassInput */
        : 32
        /* hasStyleInput */
        )) !== 0;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Create static text node
       *
       * @param index Index of the node in the data array
       * @param value Static string value to write.
       *
       * @codeGenApi
       */


      function _ɵɵtext(index) {
        var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var lView = getLView();
        var tView = getTView();
        var adjustedIndex = index + HEADER_OFFSET;
        ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'text nodes should be created before any bindings');
        ngDevMode && assertIndexInRange(lView, adjustedIndex);
        var tNode = tView.firstCreatePass ? getOrCreateTNode(tView, adjustedIndex, 1
        /* Text */
        , value, null) : tView.data[adjustedIndex];
        var textNative = lView[adjustedIndex] = createTextNode(lView[RENDERER], value);
        appendChild(tView, lView, textNative, tNode); // Text nodes are self closing.

        setCurrentTNode(tNode, false);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       *
       * Update text content with a lone bound value
       *
       * Used when a text node has 1 interpolated value in it, an no additional text
       * surrounds that interpolated value:
       *
       * ```html
       * <div>{{v0}}</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolate(v0);
       * ```
       * @returns itself, so that it may be chained.
       * @see textInterpolateV
       * @codeGenApi
       */


      function _ɵɵtextInterpolate(v0) {
        _ɵɵtextInterpolate2('', v0, '');

        return _ɵɵtextInterpolate;
      }
      /**
       *
       * Update text content with single bound value surrounded by other text.
       *
       * Used when a text node has 1 interpolated value in it:
       *
       * ```html
       * <div>prefix{{v0}}suffix</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolate1('prefix', v0, 'suffix');
       * ```
       * @returns itself, so that it may be chained.
       * @see textInterpolateV
       * @codeGenApi
       */


      function _ɵɵtextInterpolate2(prefix, v0, suffix) {
        var lView = getLView();
        var interpolated = interpolation1(lView, prefix, v0, suffix);

        if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
        }

        return _ɵɵtextInterpolate2;
      }
      /**
       *
       * Update text content with 2 bound values surrounded by other text.
       *
       * Used when a text node has 2 interpolated values in it:
       *
       * ```html
       * <div>prefix{{v0}}-{{v1}}suffix</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');
       * ```
       * @returns itself, so that it may be chained.
       * @see textInterpolateV
       * @codeGenApi
       */


      function _ɵɵtextInterpolate3(prefix, v0, i0, v1, suffix) {
        var lView = getLView();
        var interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);

        if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
        }

        return _ɵɵtextInterpolate3;
      }
      /**
       *
       * Update text content with 3 bound values surrounded by other text.
       *
       * Used when a text node has 3 interpolated values in it:
       *
       * ```html
       * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolate3(
       * 'prefix', v0, '-', v1, '-', v2, 'suffix');
       * ```
       * @returns itself, so that it may be chained.
       * @see textInterpolateV
       * @codeGenApi
       */


      function _ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, suffix) {
        var lView = getLView();
        var interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);

        if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
        }

        return _ɵɵtextInterpolate4;
      }
      /**
       *
       * Update text content with 4 bound values surrounded by other text.
       *
       * Used when a text node has 4 interpolated values in it:
       *
       * ```html
       * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolate4(
       * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
       * ```
       * @returns itself, so that it may be chained.
       * @see ɵɵtextInterpolateV
       * @codeGenApi
       */


      function _ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
        var lView = getLView();
        var interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);

        if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
        }

        return _ɵɵtextInterpolate5;
      }
      /**
       *
       * Update text content with 5 bound values surrounded by other text.
       *
       * Used when a text node has 5 interpolated values in it:
       *
       * ```html
       * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolate5(
       * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
       * ```
       * @returns itself, so that it may be chained.
       * @see textInterpolateV
       * @codeGenApi
       */


      function _ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
        var lView = getLView();
        var interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);

        if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
        }

        return _ɵɵtextInterpolate6;
      }
      /**
       *
       * Update text content with 6 bound values surrounded by other text.
       *
       * Used when a text node has 6 interpolated values in it:
       *
       * ```html
       * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolate6(
       *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
       * ```
       *
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change. @returns itself, so that it may be chained.
       * @see textInterpolateV
       * @codeGenApi
       */


      function _ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
        var lView = getLView();
        var interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);

        if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
        }

        return _ɵɵtextInterpolate7;
      }
      /**
       *
       * Update text content with 7 bound values surrounded by other text.
       *
       * Used when a text node has 7 interpolated values in it:
       *
       * ```html
       * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolate7(
       *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
       * ```
       * @returns itself, so that it may be chained.
       * @see textInterpolateV
       * @codeGenApi
       */


      function _ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
        var lView = getLView();
        var interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);

        if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
        }

        return _ɵɵtextInterpolate8;
      }
      /**
       *
       * Update text content with 8 bound values surrounded by other text.
       *
       * Used when a text node has 8 interpolated values in it:
       *
       * ```html
       * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolate8(
       *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
       * ```
       * @returns itself, so that it may be chained.
       * @see textInterpolateV
       * @codeGenApi
       */


      function _ɵɵtextInterpolate9(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
        var lView = getLView();
        var interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);

        if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
        }

        return _ɵɵtextInterpolate9;
      }
      /**
       * Update text content with 9 or more bound values other surrounded by text.
       *
       * Used when the number of interpolated values exceeds 8.
       *
       * ```html
       * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵtextInterpolateV(
       *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
       *  'suffix']);
       * ```
       *.
       * @param values The collection of values and the strings in between those values, beginning with
       * a string prefix and ending with a string suffix.
       * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
       *
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵtextInterpolateV(values) {
        var lView = getLView();
        var interpolated = interpolationV(lView, values);

        if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
        }

        return _ɵɵtextInterpolateV;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       *
       * Update an interpolated class on an element with single bound value surrounded by text.
       *
       * Used when the value passed to a property has 1 interpolated value in it:
       *
       * ```html
       * <div class="prefix{{v0}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function _ɵɵclassMapInterpolate(prefix, v0, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation1(lView, prefix, v0, suffix);
        checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
      }
      /**
       *
       * Update an interpolated class on an element with 2 bound values surrounded by text.
       *
       * Used when the value passed to a property has 2 interpolated values in it:
       *
       * ```html
       * <div class="prefix{{v0}}-{{v1}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function _ɵɵclassMapInterpolate2(prefix, v0, i0, v1, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
        checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
      }
      /**
       *
       * Update an interpolated class on an element with 3 bound values surrounded by text.
       *
       * Used when the value passed to a property has 3 interpolated values in it:
       *
       * ```html
       * <div class="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵclassMapInterpolate3(
       * 'prefix', v0, '-', v1, '-', v2, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function _ɵɵclassMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
        checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
      }
      /**
       *
       * Update an interpolated class on an element with 4 bound values surrounded by text.
       *
       * Used when the value passed to a property has 4 interpolated values in it:
       *
       * ```html
       * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵclassMapInterpolate4(
       * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function _ɵɵclassMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
        checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
      }
      /**
       *
       * Update an interpolated class on an element with 5 bound values surrounded by text.
       *
       * Used when the value passed to a property has 5 interpolated values in it:
       *
       * ```html
       * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵclassMapInterpolate5(
       * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function _ɵɵclassMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
        checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
      }
      /**
       *
       * Update an interpolated class on an element with 6 bound values surrounded by text.
       *
       * Used when the value passed to a property has 6 interpolated values in it:
       *
       * ```html
       * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵclassMapInterpolate6(
       *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function _ɵɵclassMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
        checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
      }
      /**
       *
       * Update an interpolated class on an element with 7 bound values surrounded by text.
       *
       * Used when the value passed to a property has 7 interpolated values in it:
       *
       * ```html
       * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵclassMapInterpolate7(
       *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function _ɵɵclassMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
        checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
      }
      /**
       *
       * Update an interpolated class on an element with 8 bound values surrounded by text.
       *
       * Used when the value passed to a property has 8 interpolated values in it:
       *
       * ```html
       * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵclassMapInterpolate8(
       *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param i6 Static value used for concatenation only.
       * @param v7 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function _ɵɵclassMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
        checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
      }
      /**
       * Update an interpolated class on an element with 9 or more bound values surrounded by text.
       *
       * Used when the number of interpolated values exceeds 8.
       *
       * ```html
       * <div
       *  class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵclassMapInterpolateV(
       *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
       *  'suffix']);
       * ```
       *.
       * @param values The collection of values and the strings in-between those values, beginning with
       * a string prefix and ending with a string suffix.
       * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
       * @codeGenApi
       */


      function _ɵɵclassMapInterpolateV(values) {
        var lView = getLView();
        var interpolatedValue = interpolationV(lView, values);
        checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       *
       * Update an interpolated style on an element with single bound value surrounded by text.
       *
       * Used when the value passed to a property has 1 interpolated value in it:
       *
       * ```html
       * <div style="key: {{v0}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstyleMapInterpolate1('key: ', v0, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function _ɵɵstyleMapInterpolate(prefix, v0, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation1(lView, prefix, v0, suffix);

        _ɵɵstyleMap(interpolatedValue);
      }
      /**
       *
       * Update an interpolated style on an element with 2 bound values surrounded by text.
       *
       * Used when the value passed to a property has 2 interpolated values in it:
       *
       * ```html
       * <div style="key: {{v0}}; key1: {{v1}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstyleMapInterpolate2('key: ', v0, '; key1: ', v1, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function _ɵɵstyleMapInterpolate2(prefix, v0, i0, v1, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);

        _ɵɵstyleMap(interpolatedValue);
      }
      /**
       *
       * Update an interpolated style on an element with 3 bound values surrounded by text.
       *
       * Used when the value passed to a property has 3 interpolated values in it:
       *
       * ```html
       * <div style="key: {{v0}}; key2: {{v1}}; key2: {{v2}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstyleMapInterpolate3(
       *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function _ɵɵstyleMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);

        _ɵɵstyleMap(interpolatedValue);
      }
      /**
       *
       * Update an interpolated style on an element with 4 bound values surrounded by text.
       *
       * Used when the value passed to a property has 4 interpolated values in it:
       *
       * ```html
       * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstyleMapInterpolate4(
       *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function _ɵɵstyleMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);

        _ɵɵstyleMap(interpolatedValue);
      }
      /**
       *
       * Update an interpolated style on an element with 5 bound values surrounded by text.
       *
       * Used when the value passed to a property has 5 interpolated values in it:
       *
       * ```html
       * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstyleMapInterpolate5(
       *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function _ɵɵstyleMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);

        _ɵɵstyleMap(interpolatedValue);
      }
      /**
       *
       * Update an interpolated style on an element with 6 bound values surrounded by text.
       *
       * Used when the value passed to a property has 6 interpolated values in it:
       *
       * ```html
       * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}};
       *             key5: {{v5}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstyleMapInterpolate6(
       *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
       *    'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function _ɵɵstyleMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);

        _ɵɵstyleMap(interpolatedValue);
      }
      /**
       *
       * Update an interpolated style on an element with 7 bound values surrounded by text.
       *
       * Used when the value passed to a property has 7 interpolated values in it:
       *
       * ```html
       * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
       *             key6: {{v6}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstyleMapInterpolate7(
       *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
       *    '; key6: ', v6, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function _ɵɵstyleMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);

        _ɵɵstyleMap(interpolatedValue);
      }
      /**
       *
       * Update an interpolated style on an element with 8 bound values surrounded by text.
       *
       * Used when the value passed to a property has 8 interpolated values in it:
       *
       * ```html
       * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
       *             key6: {{v6}}; key7: {{v7}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstyleMapInterpolate8(
       *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
       *    '; key6: ', v6, '; key7: ', v7, 'suffix');
       * ```
       *
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param i6 Static value used for concatenation only.
       * @param v7 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @codeGenApi
       */


      function _ɵɵstyleMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
        var lView = getLView();
        var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);

        _ɵɵstyleMap(interpolatedValue);
      }
      /**
       * Update an interpolated style on an element with 9 or more bound values surrounded by text.
       *
       * Used when the number of interpolated values exceeds 8.
       *
       * ```html
       * <div
       *  class="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
       *         key6: {{v6}}; key7: {{v7}}; key8: {{v8}}; key9: {{v9}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstyleMapInterpolateV(
       *    ['key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
       *     '; key6: ', v6, '; key7: ', v7, '; key8: ', v8, '; key9: ', v9, 'suffix']);
       * ```
       *.
       * @param values The collection of values and the strings in-between those values, beginning with
       * a string prefix and ending with a string suffix.
       * (e.g. `['prefix', value0, '; key2: ', value1, '; key2: ', value2, ..., value99, 'suffix']`)
       * @codeGenApi
       */


      function _ɵɵstyleMapInterpolateV(values) {
        var lView = getLView();
        var interpolatedValue = interpolationV(lView, values);

        _ɵɵstyleMap(interpolatedValue);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       *
       * Update an interpolated style property on an element with single bound value surrounded by text.
       *
       * Used when the value passed to a property has 1 interpolated value in it:
       *
       * ```html
       * <div style.color="prefix{{v0}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');
       * ```
       *
       * @param styleIndex Index of style to update. This index value refers to the
       *        index of the style in the style bindings array that was passed into
       *        `styling`.
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵstylePropInterpolate(prop, prefix, v0, suffix, valueSuffix) {
        var lView = getLView();
        var interpolatedValue = interpolation1(lView, prefix, v0, suffix);
        checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
        return _ɵɵstylePropInterpolate;
      }
      /**
       *
       * Update an interpolated style property on an element with 2 bound values surrounded by text.
       *
       * Used when the value passed to a property has 2 interpolated values in it:
       *
       * ```html
       * <div style.color="prefix{{v0}}-{{v1}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');
       * ```
       *
       * @param styleIndex Index of style to update. This index value refers to the
       *        index of the style in the style bindings array that was passed into
       *        `styling`.
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵstylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {
        var lView = getLView();
        var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
        checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
        return _ɵɵstylePropInterpolate2;
      }
      /**
       *
       * Update an interpolated style property on an element with 3 bound values surrounded by text.
       *
       * Used when the value passed to a property has 3 interpolated values in it:
       *
       * ```html
       * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');
       * ```
       *
       * @param styleIndex Index of style to update. This index value refers to the
       *        index of the style in the style bindings array that was passed into
       *        `styling`.
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵstylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {
        var lView = getLView();
        var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
        checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
        return _ɵɵstylePropInterpolate3;
      }
      /**
       *
       * Update an interpolated style property on an element with 4 bound values surrounded by text.
       *
       * Used when the value passed to a property has 4 interpolated values in it:
       *
       * ```html
       * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
       * ```
       *
       * @param styleIndex Index of style to update. This index value refers to the
       *        index of the style in the style bindings array that was passed into
       *        `styling`.
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵstylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {
        var lView = getLView();
        var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
        checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
        return _ɵɵstylePropInterpolate4;
      }
      /**
       *
       * Update an interpolated style property on an element with 5 bound values surrounded by text.
       *
       * Used when the value passed to a property has 5 interpolated values in it:
       *
       * ```html
       * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
       * ```
       *
       * @param styleIndex Index of style to update. This index value refers to the
       *        index of the style in the style bindings array that was passed into
       *        `styling`.
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵstylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {
        var lView = getLView();
        var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
        checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
        return _ɵɵstylePropInterpolate5;
      }
      /**
       *
       * Update an interpolated style property on an element with 6 bound values surrounded by text.
       *
       * Used when the value passed to a property has 6 interpolated values in it:
       *
       * ```html
       * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
       * ```
       *
       * @param styleIndex Index of style to update. This index value refers to the
       *        index of the style in the style bindings array that was passed into
       *        `styling`.
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵstylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {
        var lView = getLView();
        var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
        checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
        return _ɵɵstylePropInterpolate6;
      }
      /**
       *
       * Update an interpolated style property on an element with 7 bound values surrounded by text.
       *
       * Used when the value passed to a property has 7 interpolated values in it:
       *
       * ```html
       * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstylePropInterpolate7(
       *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
       * ```
       *
       * @param styleIndex Index of style to update. This index value refers to the
       *        index of the style in the style bindings array that was passed into
       *        `styling`.
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵstylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {
        var lView = getLView();
        var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
        checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
        return _ɵɵstylePropInterpolate7;
      }
      /**
       *
       * Update an interpolated style property on an element with 8 bound values surrounded by text.
       *
       * Used when the value passed to a property has 8 interpolated values in it:
       *
       * ```html
       * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,
       * '-', v7, 'suffix');
       * ```
       *
       * @param styleIndex Index of style to update. This index value refers to the
       *        index of the style in the style bindings array that was passed into
       *        `styling`.
       * @param prefix Static value used for concatenation only.
       * @param v0 Value checked for change.
       * @param i0 Static value used for concatenation only.
       * @param v1 Value checked for change.
       * @param i1 Static value used for concatenation only.
       * @param v2 Value checked for change.
       * @param i2 Static value used for concatenation only.
       * @param v3 Value checked for change.
       * @param i3 Static value used for concatenation only.
       * @param v4 Value checked for change.
       * @param i4 Static value used for concatenation only.
       * @param v5 Value checked for change.
       * @param i5 Static value used for concatenation only.
       * @param v6 Value checked for change.
       * @param i6 Static value used for concatenation only.
       * @param v7 Value checked for change.
       * @param suffix Static value used for concatenation only.
       * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵstylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {
        var lView = getLView();
        var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
        checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
        return _ɵɵstylePropInterpolate8;
      }
      /**
       * Update an interpolated style property on an element with 9 or more bound values surrounded by
       * text.
       *
       * Used when the number of interpolated values exceeds 8.
       *
       * ```html
       * <div
       *  style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix">
       * </div>
       * ```
       *
       * Its compiled representation is:
       *
       * ```ts
       * ɵɵstylePropInterpolateV(
       *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
       *  'suffix']);
       * ```
       *
       * @param styleIndex Index of style to update. This index value refers to the
       *        index of the style in the style bindings array that was passed into
       *        `styling`..
       * @param values The collection of values and the strings in-between those values, beginning with
       * a string prefix and ending with a string suffix.
       * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
       * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
       * @returns itself, so that it may be chained.
       * @codeGenApi
       */


      function _ɵɵstylePropInterpolateV(prop, values, valueSuffix) {
        var lView = getLView();
        var interpolatedValue = interpolationV(lView, values);
        checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
        return _ɵɵstylePropInterpolateV;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Update a property on a host element. Only applies to native node properties, not inputs.
       *
       * Operates on the element selected by index via the {@link select} instruction.
       *
       * @param propName Name of property. Because it is going to DOM, this is not subject to
       *        renaming as part of minification.
       * @param value New value to write.
       * @param sanitizer An optional function used to sanitize the value.
       * @returns This function returns itself so that it may be chained
       * (e.g. `property('name', ctx.name)('title', ctx.title)`)
       *
       * @codeGenApi
       */


      function _ɵɵhostProperty(propName, value, sanitizer) {
        var lView = getLView();
        var bindingIndex = nextBindingIndex();

        if (bindingUpdated(lView, bindingIndex, value)) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
        }

        return _ɵɵhostProperty;
      }
      /**
       * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.
       *
       * This instruction is for compatibility purposes and is designed to ensure that a
       * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in
       * the component's renderer. Normally all host bindings are evaluated with the parent
       * component's renderer, but, in the case of animation @triggers, they need to be
       * evaluated with the sub component's renderer (because that's where the animation
       * triggers are defined).
       *
       * Do not use this instruction as a replacement for `elementProperty`. This instruction
       * only exists to ensure compatibility with the ViewEngine's host binding behavior.
       *
       * @param index The index of the element to update in the data array
       * @param propName Name of property. Because it is going to DOM, this is not subject to
       *        renaming as part of minification.
       * @param value New value to write.
       * @param sanitizer An optional function used to sanitize the value.
       *
       * @codeGenApi
       */


      function _ɵɵsyntheticHostProperty(propName, value, sanitizer) {
        var lView = getLView();
        var bindingIndex = nextBindingIndex();

        if (bindingUpdated(lView, bindingIndex, value)) {
          var tView = getTView();
          var tNode = getSelectedTNode();
          var currentDef = getCurrentDirectiveDef(tView.data);
          var renderer = loadComponentRenderer(currentDef, tNode, lView);
          elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
        }

        return _ɵɵsyntheticHostProperty;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.
       */


      if (typeof ngI18nClosureMode === 'undefined') {
        // These property accesses can be ignored because ngI18nClosureMode will be set to false
        // when optimizing code and the whole if statement will be dropped.
        // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.
        // NOTE: we need to have it in IIFE so that the tree-shaker is happy.
        (function () {
          // tslint:disable-next-line:no-toplevel-property-access
          _global['ngI18nClosureMode'] = // TODO(FW-1250): validate that this actually, you know, works.
          // tslint:disable-next-line:no-toplevel-property-access
          typeof goog !== 'undefined' && typeof goog.getMsg === 'function';
        })();
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // THIS CODE IS GENERATED - DO NOT MODIFY
      // See angular/tools/gulp-tasks/cldr/extract.js


      var u = undefined;

      function plural(n) {
        var i = Math.floor(Math.abs(n)),
            v = n.toString().replace(/^[^.]*\.?/, '').length;
        if (i === 1 && v === 0) return 1;
        return 5;
      }

      var localeEn = ['en', [['a', 'p'], ['AM', 'PM'], u], [['AM', 'PM'], u, u], [['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']], u, [['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'], ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']], u, [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']], 0, [6, 0], ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'], ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'], ['{1}, {0}', u, '{1} \'at\' {0}', u], ['.', ',', ';', '%', '+', '-', 'E', '×', '‰', '∞', 'NaN', ':'], ['#,##0.###', '#,##0%', '¤#,##0.00', '#E0'], 'USD', '$', 'US Dollar', {}, 'ltr', plural];
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * This const is used to store the locale data registered with `registerLocaleData`
       */

      var LOCALE_DATA = {};
      /**
       * Register locale data to be used internally by Angular. See the
       * ["I18n guide"](guide/i18n#i18n-pipes) to know how to import additional locale data.
       *
       * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1
       */

      function registerLocaleData(data, localeId, extraData) {
        if (typeof localeId !== 'string') {
          extraData = localeId;
          localeId = data[LocaleDataIndex.LocaleId];
        }

        localeId = localeId.toLowerCase().replace(/_/g, '-');
        LOCALE_DATA[localeId] = data;

        if (extraData) {
          LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;
        }
      }
      /**
       * Finds the locale data for a given locale.
       *
       * @param locale The locale code.
       * @returns The locale data.
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       */


      function findLocaleData(locale) {
        var normalizedLocale = normalizeLocale(locale);
        var match = getLocaleData(normalizedLocale);

        if (match) {
          return match;
        } // let's try to find a parent locale


        var parentLocale = normalizedLocale.split('-')[0];
        match = getLocaleData(parentLocale);

        if (match) {
          return match;
        }

        if (parentLocale === 'en') {
          return localeEn;
        }

        throw new Error("Missing locale data for the locale \"".concat(locale, "\"."));
      }
      /**
       * Retrieves the default currency code for the given locale.
       *
       * The default is defined as the first currency which is still in use.
       *
       * @param locale The code of the locale whose currency code we want.
       * @returns The code of the default currency for the given locale.
       *
       */


      function getLocaleCurrencyCode(locale) {
        var data = findLocaleData(locale);
        return data[LocaleDataIndex.CurrencyCode] || null;
      }
      /**
       * Retrieves the plural function used by ICU expressions to determine the plural case to use
       * for a given locale.
       * @param locale A locale code for the locale format rules to use.
       * @returns The plural function for the locale.
       * @see `NgPlural`
       * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
       */


      function getLocalePluralCase(locale) {
        var data = findLocaleData(locale);
        return data[LocaleDataIndex.PluralCase];
      }
      /**
       * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`
       * or from the global `ng.common.locale`.
       */


      function getLocaleData(normalizedLocale) {
        if (!(normalizedLocale in LOCALE_DATA)) {
          LOCALE_DATA[normalizedLocale] = _global.ng && _global.ng.common && _global.ng.common.locales && _global.ng.common.locales[normalizedLocale];
        }

        return LOCALE_DATA[normalizedLocale];
      }
      /**
       * Helper function to remove all the locale data from `LOCALE_DATA`.
       */


      function unregisterAllLocaleData() {
        LOCALE_DATA = {};
      }
      /**
       * Index of each type of locale data from the locale data array
       */


      var LocaleDataIndex;

      (function (LocaleDataIndex) {
        LocaleDataIndex[LocaleDataIndex["LocaleId"] = 0] = "LocaleId";
        LocaleDataIndex[LocaleDataIndex["DayPeriodsFormat"] = 1] = "DayPeriodsFormat";
        LocaleDataIndex[LocaleDataIndex["DayPeriodsStandalone"] = 2] = "DayPeriodsStandalone";
        LocaleDataIndex[LocaleDataIndex["DaysFormat"] = 3] = "DaysFormat";
        LocaleDataIndex[LocaleDataIndex["DaysStandalone"] = 4] = "DaysStandalone";
        LocaleDataIndex[LocaleDataIndex["MonthsFormat"] = 5] = "MonthsFormat";
        LocaleDataIndex[LocaleDataIndex["MonthsStandalone"] = 6] = "MonthsStandalone";
        LocaleDataIndex[LocaleDataIndex["Eras"] = 7] = "Eras";
        LocaleDataIndex[LocaleDataIndex["FirstDayOfWeek"] = 8] = "FirstDayOfWeek";
        LocaleDataIndex[LocaleDataIndex["WeekendRange"] = 9] = "WeekendRange";
        LocaleDataIndex[LocaleDataIndex["DateFormat"] = 10] = "DateFormat";
        LocaleDataIndex[LocaleDataIndex["TimeFormat"] = 11] = "TimeFormat";
        LocaleDataIndex[LocaleDataIndex["DateTimeFormat"] = 12] = "DateTimeFormat";
        LocaleDataIndex[LocaleDataIndex["NumberSymbols"] = 13] = "NumberSymbols";
        LocaleDataIndex[LocaleDataIndex["NumberFormats"] = 14] = "NumberFormats";
        LocaleDataIndex[LocaleDataIndex["CurrencyCode"] = 15] = "CurrencyCode";
        LocaleDataIndex[LocaleDataIndex["CurrencySymbol"] = 16] = "CurrencySymbol";
        LocaleDataIndex[LocaleDataIndex["CurrencyName"] = 17] = "CurrencyName";
        LocaleDataIndex[LocaleDataIndex["Currencies"] = 18] = "Currencies";
        LocaleDataIndex[LocaleDataIndex["Directionality"] = 19] = "Directionality";
        LocaleDataIndex[LocaleDataIndex["PluralCase"] = 20] = "PluralCase";
        LocaleDataIndex[LocaleDataIndex["ExtraData"] = 21] = "ExtraData";
      })(LocaleDataIndex || (LocaleDataIndex = {}));
      /**
       * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.
       */


      function normalizeLocale(locale) {
        return locale.toLowerCase().replace(/_/g, '-');
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var pluralMapping = ['zero', 'one', 'two', 'few', 'many'];
      /**
       * Returns the plural case based on the locale
       */

      function getPluralCase(value, locale) {
        var plural = getLocalePluralCase(locale)(parseInt(value, 10));
        var result = pluralMapping[plural];
        return result !== undefined ? result : 'other';
      }
      /**
       * The locale id that the application is using by default (for translations and ICU expressions).
       */


      var DEFAULT_LOCALE_ID = 'en-US';
      /**
       * USD currency code that the application uses by default for CurrencyPipe when no
       * DEFAULT_CURRENCY_CODE is provided.
       */

      var USD_CURRENCY_CODE = 'USD';
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Marks that the next string is an element name.
       *
       * See `I18nMutateOpCodes` documentation.
       */

      var ELEMENT_MARKER = {
        marker: 'element'
      };
      /**
       * Marks that the next string is comment text need for ICU.
       *
       * See `I18nMutateOpCodes` documentation.
       */

      var ICU_MARKER = {
        marker: 'ICU'
      };
      /**
       * See `I18nCreateOpCodes`
       */

      var I18nCreateOpCode;

      (function (I18nCreateOpCode) {
        /**
         * Number of bits to shift index so that it can be combined with the `APPEND_EAGERLY` and
         * `COMMENT`.
         */
        I18nCreateOpCode[I18nCreateOpCode["SHIFT"] = 2] = "SHIFT";
        /**
         * Should the node be appended to parent imedditatly after creation.
         */

        I18nCreateOpCode[I18nCreateOpCode["APPEND_EAGERLY"] = 1] = "APPEND_EAGERLY";
        /**
         * If set the node should be comment (rather than a text) node.
         */

        I18nCreateOpCode[I18nCreateOpCode["COMMENT"] = 2] = "COMMENT";
      })(I18nCreateOpCode || (I18nCreateOpCode = {})); // Note: This hack is necessary so we don't erroneously get a circular dependency
      // failure based on types.


      var unusedValueExportToPlacateAjd$6 = 1;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The locale id that the application is currently using (for translations and ICU expressions).
       * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
       * but is now defined as a global value.
       */

      var LOCALE_ID = DEFAULT_LOCALE_ID;
      /**
       * Sets the locale id that will be used for translations and ICU expressions.
       * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
       * but is now defined as a global value.
       *
       * @param localeId
       */

      function setLocaleId(localeId) {
        assertDefined(localeId, "Expected localeId to be defined");

        if (typeof localeId === 'string') {
          LOCALE_ID = localeId.toLowerCase().replace(/_/g, '-');
        }
      }
      /**
       * Gets the locale id that will be used for translations and ICU expressions.
       * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
       * but is now defined as a global value.
       */


      function getLocaleId() {
        return LOCALE_ID;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Find a node in front of which `currentTNode` should be inserted (takes i18n into account).
       *
       * This method determines the `RNode` in front of which we should insert the `currentRNode`. This
       * takes `TNode.insertBeforeIndex` into account.
       *
       * @param parentTNode parent `TNode`
       * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)
       * @param lView current `LView`
       */


      function getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {
        var tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;
        var insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;

        if (insertBeforeIndex === null) {
          return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);
        } else {
          ngDevMode && assertIndexInRange(lView, insertBeforeIndex);
          return unwrapRNode(lView[insertBeforeIndex]);
        }
      }
      /**
       * Process `TNode.insertBeforeIndex` by adding i18n text nodes.
       *
       * See `TNode.insertBeforeIndex`
       */


      function processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {
        var tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;

        if (Array.isArray(tNodeInsertBeforeIndex)) {
          // An array indicates that there are i18n nodes that need to be added as children of this
          // `childRNode`. These i18n nodes were created before this `childRNode` was available and so
          // only now can be added. The first element of the array is the normal index where we should
          // insert the `childRNode`. Additional elements are the extra nodes to be added as children of
          // `childRNode`.
          ngDevMode && assertDomNode(childRNode);
          var i18nParent = childRNode;
          var anchorRNode = null;

          if (!(childTNode.type & 3
          /* AnyRNode */
          )) {
            anchorRNode = i18nParent;
            i18nParent = parentRElement;
          }

          if (i18nParent !== null && (childTNode.flags & 2
          /* isComponentHost */
          ) === 0) {
            for (var i = 1; i < tNodeInsertBeforeIndex.length; i++) {
              // No need to `unwrapRNode` because all of the indexes point to i18n text nodes.
              // see `assertDomNode` below.
              var i18nChild = lView[tNodeInsertBeforeIndex[i]];
              nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);
            }
          }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Add `tNode` to `previousTNodes` list and update relevant `TNode`s in `previousTNodes` list
       * `tNode.insertBeforeIndex`.
       *
       * Things to keep in mind:
       * 1. All i18n text nodes are encoded as `TNodeType.Element` and are created eagerly by the
       *    `ɵɵi18nStart` instruction.
       * 2. All `TNodeType.Placeholder` `TNodes` are elements which will be created later by
       *    `ɵɵelementStart` instruction.
       * 3. `ɵɵelementStart` instruction will create `TNode`s in the ascending `TNode.index` order. (So a
       *    smaller index `TNode` is guaranteed to be created before a larger one)
       *
       * We use the above three invariants to determine `TNode.insertBeforeIndex`.
       *
       * In an ideal world `TNode.insertBeforeIndex` would always be `TNode.next.index`. However,
       * this will not work because `TNode.next.index` may be larger than `TNode.index` which means that
       * the next node is not yet created and therefore we can't insert in front of it.
       *
       * Rule1: `TNode.insertBeforeIndex = null` if `TNode.next === null` (Initial condition, as we don't
       *        know if there will be further `TNode`s inserted after.)
       * Rule2: If `previousTNode` is created after the `tNode` being inserted, then
       *        `previousTNode.insertBeforeNode = tNode.index` (So when a new `tNode` is added we check
       *        previous to see if we can update its `insertBeforeTNode`)
       *
       * See `TNode.insertBeforeIndex` for more context.
       *
       * @param previousTNodes A list of previous TNodes so that we can easily traverse `TNode`s in
       *     reverse order. (If `TNode` would have `previous` this would not be necessary.)
       * @param newTNode A TNode to add to the `previousTNodes` list.
       */


      function addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {
        // Start with Rule1
        ngDevMode && assertEqual(newTNode.insertBeforeIndex, null, 'We expect that insertBeforeIndex is not set');
        previousTNodes.push(newTNode);

        if (previousTNodes.length > 1) {
          for (var i = previousTNodes.length - 2; i >= 0; i--) {
            var existingTNode = previousTNodes[i]; // Text nodes are created eagerly and so they don't need their `indexBeforeIndex` updated.
            // It is safe to ignore them.

            if (!isI18nText(existingTNode)) {
              if (isNewTNodeCreatedBefore(existingTNode, newTNode) && getInsertBeforeIndex(existingTNode) === null) {
                // If it was created before us in time, (and it does not yet have `insertBeforeIndex`)
                // then add the `insertBeforeIndex`.
                setInsertBeforeIndex(existingTNode, newTNode.index);
              }
            }
          }
        }
      }

      function isI18nText(tNode) {
        return !(tNode.type & 64
        /* Placeholder */
        );
      }

      function isNewTNodeCreatedBefore(existingTNode, newTNode) {
        return isI18nText(newTNode) || existingTNode.index > newTNode.index;
      }

      function getInsertBeforeIndex(tNode) {
        var index = tNode.insertBeforeIndex;
        return Array.isArray(index) ? index[0] : index;
      }

      function setInsertBeforeIndex(tNode, value) {
        var index = tNode.insertBeforeIndex;

        if (Array.isArray(index)) {
          // Array is stored if we have to insert child nodes. See `TNode.insertBeforeIndex`
          index[0] = value;
        } else {
          setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
          tNode.insertBeforeIndex = value;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Retrieve `TIcu` at a given `index`.
       *
       * The `TIcu` can be stored either directly (if it is nested ICU) OR
       * it is stored inside tho `TIcuContainer` if it is top level ICU.
       *
       * The reason for this is that the top level ICU need a `TNode` so that they are part of the render
       * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is
       * expressed (parent ICU may have selected a case which does not contain it.)
       *
       * @param tView Current `TView`.
       * @param index Index where the value should be read from.
       */


      function getTIcu(tView, index) {
        var value = tView.data[index];
        if (value === null || typeof value === 'string') return null;

        if (ngDevMode && !(value.hasOwnProperty('tViews') || value.hasOwnProperty('currentCaseLViewIndex'))) {
          throwError('We expect to get \'null\'|\'TIcu\'|\'TIcuContainer\', but got: ' + value);
        } // Here the `value.hasOwnProperty('currentCaseLViewIndex')` is a polymorphic read as it can be
        // either TIcu or TIcuContainerNode. This is not ideal, but we still think it is OK because it
        // will be just two cases which fits into the browser inline cache (inline cache can take up to
        // 4)


        var tIcu = value.hasOwnProperty('currentCaseLViewIndex') ? value : value.value;
        ngDevMode && assertTIcu(tIcu);
        return tIcu;
      }
      /**
       * Store `TIcu` at a give `index`.
       *
       * The `TIcu` can be stored either directly (if it is nested ICU) OR
       * it is stored inside tho `TIcuContainer` if it is top level ICU.
       *
       * The reason for this is that the top level ICU need a `TNode` so that they are part of the render
       * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is
       * expressed (parent ICU may have selected a case which does not contain it.)
       *
       * @param tView Current `TView`.
       * @param index Index where the value should be stored at in `Tview.data`
       * @param tIcu The TIcu to store.
       */


      function setTIcu(tView, index, tIcu) {
        var tNode = tView.data[index];
        ngDevMode && assertEqual(tNode === null || tNode.hasOwnProperty('tViews'), true, 'We expect to get \'null\'|\'TIcuContainer\'');

        if (tNode === null) {
          tView.data[index] = tIcu;
        } else {
          ngDevMode && assertTNodeType(tNode, 32
          /* Icu */
          );
          tNode.value = tIcu;
        }
      }
      /**
       * Set `TNode.insertBeforeIndex` taking the `Array` into account.
       *
       * See `TNode.insertBeforeIndex`
       */


      function setTNodeInsertBeforeIndex(tNode, index) {
        ngDevMode && assertTNode(tNode);
        var insertBeforeIndex = tNode.insertBeforeIndex;

        if (insertBeforeIndex === null) {
          setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
          insertBeforeIndex = tNode.insertBeforeIndex = [null
          /* may be updated to number later */
          , index];
        } else {
          assertEqual(Array.isArray(insertBeforeIndex), true, 'Expecting array here');
          insertBeforeIndex.push(index);
        }
      }
      /**
       * Create `TNode.type=TNodeType.Placeholder` node.
       *
       * See `TNodeType.Placeholder` for more information.
       */


      function createTNodePlaceholder(tView, previousTNodes, index) {
        var tNode = createTNodeAtIndex(tView, index, 64
        /* Placeholder */
        , null, null);
        addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);
        return tNode;
      }
      /**
       * Returns current ICU case.
       *
       * ICU cases are stored as index into the `TIcu.cases`.
       * At times it is necessary to communicate that the ICU case just switched and that next ICU update
       * should update all bindings regardless of the mask. In such a case the we store negative numbers
       * for cases which have just been switched. This function removes the negative flag.
       */


      function getCurrentICUCaseIndex(tIcu, lView) {
        var currentCase = lView[tIcu.currentCaseLViewIndex];
        return currentCase === null ? currentCase : currentCase < 0 ? ~currentCase : currentCase;
      }

      function getParentFromIcuCreateOpCode(mergedCode) {
        return mergedCode >>> 17
        /* SHIFT_PARENT */
        ;
      }

      function getRefFromIcuCreateOpCode(mergedCode) {
        return (mergedCode & 131070
        /* MASK_REF */
        ) >>> 1
        /* SHIFT_REF */
        ;
      }

      function getInstructionFromIcuCreateOpCode(mergedCode) {
        return mergedCode & 1
        /* MASK_INSTRUCTION */
        ;
      }

      function icuCreateOpCode(opCode, parentIdx, refIdx) {
        ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, 'Missing parent index');
        ngDevMode && assertGreaterThan(refIdx, 0, 'Missing ref index');
        return opCode | parentIdx << 17
        /* SHIFT_PARENT */
        | refIdx << 1
        /* SHIFT_REF */
        ;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Keep track of which input bindings in `ɵɵi18nExp` have changed.
       *
       * This is used to efficiently update expressions in i18n only when the corresponding input has
       * changed.
       *
       * 1) Each bit represents which of the `ɵɵi18nExp` has changed.
       * 2) There are 32 bits allowed in JS.
       * 3) Bit 32 is special as it is shared for all changes past 32. (In other words if you have more
       * than 32 `ɵɵi18nExp` then all changes past 32nd `ɵɵi18nExp` will be mapped to same bit. This means
       * that we may end up changing more than we need to. But i18n expressions with 32 bindings is rare
       * so in practice it should not be an issue.)
       */


      var changeMask = 0;
      /**
       * Keeps track of which bit needs to be updated in `changeMask`
       *
       * This value gets incremented on every call to `ɵɵi18nExp`
       */

      var changeMaskCounter = 0;
      /**
       * Keep track of which input bindings in `ɵɵi18nExp` have changed.
       *
       * `setMaskBit` gets invoked by each call to `ɵɵi18nExp`.
       *
       * @param hasChange did `ɵɵi18nExp` detect a change.
       */

      function setMaskBit(hasChange) {
        if (hasChange) {
          changeMask = changeMask | 1 << Math.min(changeMaskCounter, 31);
        }

        changeMaskCounter++;
      }

      function applyI18n(tView, lView, index) {
        if (changeMaskCounter > 0) {
          ngDevMode && assertDefined(tView, "tView should be defined");
          var tI18n = tView.data[index]; // When `index` points to an `ɵɵi18nAttributes` then we have an array otherwise `TI18n`

          var updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;
          var bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;
          applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);
        } // Reset changeMask & maskBit to default for the next update cycle


        changeMask = 0;
        changeMaskCounter = 0;
      }
      /**
       * Apply `I18nCreateOpCodes` op-codes as stored in `TI18n.create`.
       *
       * Creates text (and comment) nodes which are internationalized.
       *
       * @param lView Current lView
       * @param createOpCodes Set of op-codes to apply
       * @param parentRNode Parent node (so that direct children can be added eagerly) or `null` if it is
       *     a root node.
       * @param insertInFrontOf DOM node that should be used as an anchor.
       */


      function applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {
        var renderer = lView[RENDERER];

        for (var i = 0; i < createOpCodes.length; i++) {
          var opCode = createOpCodes[i++];
          var text = createOpCodes[i];
          var isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
          var appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
          var index = opCode >>> I18nCreateOpCode.SHIFT;
          var rNode = lView[index];

          if (rNode === null) {
            // We only create new DOM nodes if they don't already exist: If ICU switches case back to a
            // case which was already instantiated, no need to create new DOM nodes.
            rNode = lView[index] = isComment ? renderer.createComment(text) : createTextNode(renderer, text);
          }

          if (appendNow && parentRNode !== null) {
            nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);
          }
        }
      }
      /**
       * Apply `I18nMutateOpCodes` OpCodes.
       *
       * @param tView Current `TView`
       * @param mutableOpCodes Mutable OpCodes to process
       * @param lView Current `LView`
       * @param anchorRNode place where the i18n node should be inserted.
       */


      function applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {
        ngDevMode && assertDomNode(anchorRNode);
        var renderer = lView[RENDERER]; // `rootIdx` represents the node into which all inserts happen.

        var rootIdx = null; // `rootRNode` represents the real node into which we insert. This can be different from
        // `lView[rootIdx]` if we have projection.
        //  - null we don't have a parent (as can be the case in when we are inserting into a root of
        //    LView which has no parent.)
        //  - `RElement` The element representing the root after taking projection into account.

        var rootRNode;

        for (var i = 0; i < mutableOpCodes.length; i++) {
          var opCode = mutableOpCodes[i];

          if (typeof opCode == 'string') {
            var textNodeIndex = mutableOpCodes[++i];

            if (lView[textNodeIndex] === null) {
              ngDevMode && ngDevMode.rendererCreateTextNode++;
              ngDevMode && assertIndexInRange(lView, textNodeIndex);
              lView[textNodeIndex] = createTextNode(renderer, opCode);
            }
          } else if (typeof opCode == 'number') {
            switch (opCode & 1
            /* MASK_INSTRUCTION */
            ) {
              case 0
              /* AppendChild */
              :
                var parentIdx = getParentFromIcuCreateOpCode(opCode);

                if (rootIdx === null) {
                  // The first operation should save the `rootIdx` because the first operation
                  // must insert into the root. (Only subsequent operations can insert into a dynamic
                  // parent)
                  rootIdx = parentIdx;
                  rootRNode = nativeParentNode(renderer, anchorRNode);
                }

                var insertInFrontOf = void 0;
                var parentRNode = void 0;

                if (parentIdx === rootIdx) {
                  insertInFrontOf = anchorRNode;
                  parentRNode = rootRNode;
                } else {
                  insertInFrontOf = null;
                  parentRNode = unwrapRNode(lView[parentIdx]);
                } // FIXME(misko): Refactor with `processI18nText`


                if (parentRNode !== null) {
                  // This can happen if the `LView` we are adding to is not attached to a parent `LView`.
                  // In such a case there is no "root" we can attach to. This is fine, as we still need to
                  // create the elements. When the `LView` gets later added to a parent these "root" nodes
                  // get picked up and added.
                  ngDevMode && assertDomNode(parentRNode);
                  var refIdx = getRefFromIcuCreateOpCode(opCode);
                  ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, 'Missing ref'); // `unwrapRNode` is not needed here as all of these point to RNodes as part of the i18n
                  // which can't have components.

                  var child = lView[refIdx];
                  ngDevMode && assertDomNode(child);
                  nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);
                  var tIcu = getTIcu(tView, refIdx);

                  if (tIcu !== null && typeof tIcu === 'object') {
                    // If we just added a comment node which has ICU then that ICU may have already been
                    // rendered and therefore we need to re-add it here.
                    ngDevMode && assertTIcu(tIcu);
                    var caseIndex = getCurrentICUCaseIndex(tIcu, lView);

                    if (caseIndex !== null) {
                      applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);
                    }
                  }
                }

                break;

              case 1
              /* Attr */
              :
                var elementNodeIndex = opCode >>> 1
                /* SHIFT_REF */
                ;
                var attrName = mutableOpCodes[++i];
                var attrValue = mutableOpCodes[++i]; // This code is used for ICU expressions only, since we don't support
                // directives/components in ICUs, we don't need to worry about inputs here

                setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);
                break;

              default:
                throw new Error("Unable to determine the type of mutate operation for \"".concat(opCode, "\""));
            }
          } else {
            switch (opCode) {
              case ICU_MARKER:
                var commentValue = mutableOpCodes[++i];
                var commentNodeIndex = mutableOpCodes[++i];

                if (lView[commentNodeIndex] === null) {
                  ngDevMode && assertEqual(typeof commentValue, 'string', "Expected \"".concat(commentValue, "\" to be a comment node value"));
                  ngDevMode && ngDevMode.rendererCreateComment++;
                  ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);
                  var commentRNode = lView[commentNodeIndex] = createCommentNode(renderer, commentValue); // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)

                  attachPatchData(commentRNode, lView);
                }

                break;

              case ELEMENT_MARKER:
                var tagName = mutableOpCodes[++i];
                var _elementNodeIndex = mutableOpCodes[++i];

                if (lView[_elementNodeIndex] === null) {
                  ngDevMode && assertEqual(typeof tagName, 'string', "Expected \"".concat(tagName, "\" to be an element node tag name"));
                  ngDevMode && ngDevMode.rendererCreateElement++;
                  ngDevMode && assertIndexInExpandoRange(lView, _elementNodeIndex);
                  var elementRNode = lView[_elementNodeIndex] = createElementNode(renderer, tagName, null); // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)

                  attachPatchData(elementRNode, lView);
                }

                break;

              default:
                ngDevMode && throwError("Unable to determine the type of mutate operation for \"".concat(opCode, "\""));
            }
          }
        }
      }
      /**
       * Apply `I18nUpdateOpCodes` OpCodes
       *
       * @param tView Current `TView`
       * @param lView Current `LView`
       * @param updateOpCodes OpCodes to process
       * @param bindingsStartIndex Location of the first `ɵɵi18nApply`
       * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from
       *     `bindingsStartIndex`)
       */


      function applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask) {
        for (var i = 0; i < updateOpCodes.length; i++) {
          // bit code to check if we should apply the next update
          var checkBit = updateOpCodes[i]; // Number of opCodes to skip until next set of update codes

          var skipCodes = updateOpCodes[++i];

          if (checkBit & changeMask) {
            // The value has been updated since last checked
            var value = '';

            for (var j = i + 1; j <= i + skipCodes; j++) {
              var opCode = updateOpCodes[j];

              if (typeof opCode == 'string') {
                value += opCode;
              } else if (typeof opCode == 'number') {
                if (opCode < 0) {
                  // Negative opCode represent `i18nExp` values offset.
                  value += renderStringify(lView[bindingsStartIndex - opCode]);
                } else {
                  var nodeIndex = opCode >>> 2
                  /* SHIFT_REF */
                  ;

                  switch (opCode & 3
                  /* MASK_OPCODE */
                  ) {
                    case 1
                    /* Attr */
                    :
                      var propName = updateOpCodes[++j];
                      var sanitizeFn = updateOpCodes[++j];
                      var tNodeOrTagName = tView.data[nodeIndex];
                      ngDevMode && assertDefined(tNodeOrTagName, 'Experting TNode or string');

                      if (typeof tNodeOrTagName === 'string') {
                        // IF we don't have a `TNode`, then we are an element in ICU (as ICU content does
                        // not have TNode), in which case we know that there are no directives, and hence
                        // we use attribute setting.
                        setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);
                      } else {
                        elementPropertyInternal(tView, tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn, false);
                      }

                      break;

                    case 0
                    /* Text */
                    :
                      var rText = lView[nodeIndex];
                      rText !== null && updateTextNode(lView[RENDERER], rText, value);
                      break;

                    case 2
                    /* IcuSwitch */
                    :
                      applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);
                      break;

                    case 3
                    /* IcuUpdate */
                    :
                      applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);
                      break;
                  }
                }
              }
            }
          } else {
            var _opCode = updateOpCodes[i + 1];

            if (_opCode > 0 && (_opCode & 3
            /* MASK_OPCODE */
            ) === 3
            /* IcuUpdate */
            ) {
                // Special case for the `icuUpdateCase`. It could be that the mask did not match, but
                // we still need to execute `icuUpdateCase` because the case has changed recently due to
                // previous `icuSwitchCase` instruction. (`icuSwitchCase` and `icuUpdateCase` always come in
                // pairs.)
                var _nodeIndex = _opCode >>> 2
                /* SHIFT_REF */
                ;

                var tIcu = getTIcu(tView, _nodeIndex);
                var currentIndex = lView[tIcu.currentCaseLViewIndex];

                if (currentIndex < 0) {
                  applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);
                }
              }
          }

          i += skipCodes;
        }
      }
      /**
       * Apply OpCodes associated with updating an existing ICU.
       *
       * @param tView Current `TView`
       * @param tIcu Current `TIcu`
       * @param bindingsStartIndex Location of the first `ɵɵi18nApply`
       * @param lView Current `LView`
       */


      function applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {
        ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);
        var activeCaseIndex = lView[tIcu.currentCaseLViewIndex];

        if (activeCaseIndex !== null) {
          var mask = changeMask;

          if (activeCaseIndex < 0) {
            // Clear the flag.
            // Negative number means that the ICU was freshly created and we need to force the update.
            activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex; // -1 is same as all bits on, which simulates creation since it marks all bits dirty

            mask = -1;
          }

          applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);
        }
      }
      /**
       * Apply OpCodes associated with switching a case on ICU.
       *
       * This involves tearing down existing case and than building up a new case.
       *
       * @param tView Current `TView`
       * @param tIcu Current `TIcu`
       * @param lView Current `LView`
       * @param value Value of the case to update to.
       */


      function applyIcuSwitchCase(tView, tIcu, lView, value) {
        // Rebuild a new case for this ICU
        var caseIndex = getCaseIndex(tIcu, value);
        var activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);

        if (activeCaseIndex !== caseIndex) {
          applyIcuSwitchCaseRemove(tView, tIcu, lView);
          lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;

          if (caseIndex !== null) {
            // Add the nodes for the new case
            var anchorRNode = lView[tIcu.anchorIdx];

            if (anchorRNode) {
              ngDevMode && assertDomNode(anchorRNode);
              applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);
            }
          }
        }
      }
      /**
       * Apply OpCodes associated with tearing ICU case.
       *
       * This involves tearing down existing case and than building up a new case.
       *
       * @param tView Current `TView`
       * @param tIcu Current `TIcu`
       * @param lView Current `LView`
       */


      function applyIcuSwitchCaseRemove(tView, tIcu, lView) {
        var activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);

        if (activeCaseIndex !== null) {
          var removeCodes = tIcu.remove[activeCaseIndex];

          for (var i = 0; i < removeCodes.length; i++) {
            var nodeOrIcuIndex = removeCodes[i];

            if (nodeOrIcuIndex > 0) {
              // Positive numbers are `RNode`s.
              var rNode = getNativeByIndex(nodeOrIcuIndex, lView);
              rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);
            } else {
              // Negative numbers are ICUs
              applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);
            }
          }
        }
      }
      /**
       * Returns the index of the current case of an ICU expression depending on the main binding value
       *
       * @param icuExpression
       * @param bindingValue The value of the main binding used by this ICU expression
       */


      function getCaseIndex(icuExpression, bindingValue) {
        var index = icuExpression.cases.indexOf(bindingValue);

        if (index === -1) {
          switch (icuExpression.type) {
            case 1
            /* plural */
            :
              {
                var resolvedCase = getPluralCase(bindingValue, getLocaleId());
                index = icuExpression.cases.indexOf(resolvedCase);

                if (index === -1 && resolvedCase !== 'other') {
                  index = icuExpression.cases.indexOf('other');
                }

                break;
              }

            case 0
            /* select */
            :
              {
                index = icuExpression.cases.indexOf('other');
                break;
              }
          }
        }

        return index === -1 ? null : index;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function loadIcuContainerVisitor() {
        var _stack = [];

        var _index = -1;

        var _lView;

        var _removes;
        /**
         * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`
         * to determine which root belong to the ICU.
         *
         * Example of usage.
         * ```
         * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);
         * let rNode: RNode|null;
         * while(rNode = nextRNode()) {
         *   console.log(rNode);
         * }
         * ```
         *
         * @param tIcuContainerNode Current `TIcuContainerNode`
         * @param lView `LView` where the `RNode`s should be looked up.
         */


        function icuContainerIteratorStart(tIcuContainerNode, lView) {
          _lView = lView;

          while (_stack.length) {
            _stack.pop();
          }

          ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);
          enterIcu(tIcuContainerNode.value, lView);
          return icuContainerIteratorNext;
        }

        function enterIcu(tIcu, lView) {
          _index = 0;
          var currentCase = getCurrentICUCaseIndex(tIcu, lView);

          if (currentCase !== null) {
            ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);
            _removes = tIcu.remove[currentCase];
          } else {
            _removes = EMPTY_ARRAY;
          }
        }

        function icuContainerIteratorNext() {
          if (_index < _removes.length) {
            var removeOpCode = _removes[_index++];
            ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');

            if (removeOpCode > 0) {
              var rNode = _lView[removeOpCode];
              ngDevMode && assertDomNode(rNode);
              return rNode;
            } else {
              _stack.push(_index, _removes); // ICUs are represented by negative indices


              var tIcuIndex = ~removeOpCode;
              var tIcu = _lView[TVIEW].data[tIcuIndex];
              ngDevMode && assertTIcu(tIcu);
              enterIcu(tIcu, _lView);
              return icuContainerIteratorNext();
            }
          } else {
            if (_stack.length === 0) {
              return null;
            } else {
              _removes = _stack.pop();
              _index = _stack.pop();
              return icuContainerIteratorNext();
            }
          }
        }

        return icuContainerIteratorStart;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Converts `I18nCreateOpCodes` array into a human readable format.
       *
       * This function is attached to the `I18nCreateOpCodes.debug` property if `ngDevMode` is enabled.
       * This function provides a human readable view of the opcodes. This is useful when debugging the
       * application as well as writing more readable tests.
       *
       * @param this `I18nCreateOpCodes` if attached as a method.
       * @param opcodes `I18nCreateOpCodes` if invoked as a function.
       */


      function i18nCreateOpCodesToString(opcodes) {
        var createOpCodes = opcodes || (Array.isArray(this) ? this : []);
        var lines = [];

        for (var i = 0; i < createOpCodes.length; i++) {
          var opCode = createOpCodes[i++];
          var text = createOpCodes[i];
          var isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
          var appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
          var index = opCode >>> I18nCreateOpCode.SHIFT;
          lines.push("lView[".concat(index, "] = document.").concat(isComment ? 'createComment' : 'createText', "(").concat(JSON.stringify(text), ");"));

          if (appendNow) {
            lines.push("parent.appendChild(lView[".concat(index, "]);"));
          }
        }

        return lines;
      }
      /**
       * Converts `I18nUpdateOpCodes` array into a human readable format.
       *
       * This function is attached to the `I18nUpdateOpCodes.debug` property if `ngDevMode` is enabled.
       * This function provides a human readable view of the opcodes. This is useful when debugging the
       * application as well as writing more readable tests.
       *
       * @param this `I18nUpdateOpCodes` if attached as a method.
       * @param opcodes `I18nUpdateOpCodes` if invoked as a function.
       */


      function i18nUpdateOpCodesToString(opcodes) {
        var parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
        var lines = [];

        function consumeOpCode(value) {
          var ref = value >>> 2
          /* SHIFT_REF */
          ;
          var opCode = value & 3
          /* MASK_OPCODE */
          ;

          switch (opCode) {
            case 0
            /* Text */
            :
              return "(lView[".concat(ref, "] as Text).textContent = $$$");

            case 1
            /* Attr */
            :
              var attrName = parser.consumeString();
              var sanitizationFn = parser.consumeFunction();

              var _value2 = sanitizationFn ? "(".concat(sanitizationFn, ")($$$)") : '$$$';

              return "(lView[".concat(ref, "] as Element).setAttribute('").concat(attrName, "', ").concat(_value2, ")");

            case 2
            /* IcuSwitch */
            :
              return "icuSwitchCase(".concat(ref, ", $$$)");

            case 3
            /* IcuUpdate */
            :
              return "icuUpdateCase(".concat(ref, ")");
          }

          throw new Error('unexpected OpCode');
        }

        while (parser.hasMore()) {
          var mask = parser.consumeNumber();
          var size = parser.consumeNumber();
          var end = parser.i + size;
          var statements = [];
          var statement = '';

          while (parser.i < end) {
            var value = parser.consumeNumberOrString();

            if (typeof value === 'string') {
              statement += value;
            } else if (value < 0) {
              // Negative numbers are ref indexes
              // Here `i` refers to current binding index. It is to signify that the value is relative,
              // rather than absolute.
              statement += '${lView[i' + value + ']}';
            } else {
              // Positive numbers are operations.
              var opCodeText = consumeOpCode(value);
              statements.push(opCodeText.replace('$$$', '`' + statement + '`') + ';');
              statement = '';
            }
          }

          lines.push("if (mask & 0b".concat(mask.toString(2), ") { ").concat(statements.join(' '), " }"));
        }

        return lines;
      }
      /**
       * Converts `I18nCreateOpCodes` array into a human readable format.
       *
       * This function is attached to the `I18nCreateOpCodes.debug` if `ngDevMode` is enabled. This
       * function provides a human readable view of the opcodes. This is useful when debugging the
       * application as well as writing more readable tests.
       *
       * @param this `I18nCreateOpCodes` if attached as a method.
       * @param opcodes `I18nCreateOpCodes` if invoked as a function.
       */


      function icuCreateOpCodesToString(opcodes) {
        var parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
        var lines = [];

        function consumeOpCode(opCode) {
          var parent = getParentFromIcuCreateOpCode(opCode);
          var ref = getRefFromIcuCreateOpCode(opCode);

          switch (getInstructionFromIcuCreateOpCode(opCode)) {
            case 0
            /* AppendChild */
            :
              return "(lView[".concat(parent, "] as Element).appendChild(lView[").concat(lastRef, "])");

            case 1
            /* Attr */
            :
              return "(lView[".concat(ref, "] as Element).setAttribute(\"").concat(parser.consumeString(), "\", \"").concat(parser.consumeString(), "\")");
          }

          throw new Error('Unexpected OpCode: ' + getInstructionFromIcuCreateOpCode(opCode));
        }

        var lastRef = -1;

        while (parser.hasMore()) {
          var value = parser.consumeNumberStringOrMarker();

          if (value === ICU_MARKER) {
            var text = parser.consumeString();
            lastRef = parser.consumeNumber();
            lines.push("lView[".concat(lastRef, "] = document.createComment(\"").concat(text, "\")"));
          } else if (value === ELEMENT_MARKER) {
            var _text = parser.consumeString();

            lastRef = parser.consumeNumber();
            lines.push("lView[".concat(lastRef, "] = document.createElement(\"").concat(_text, "\")"));
          } else if (typeof value === 'string') {
            lastRef = parser.consumeNumber();
            lines.push("lView[".concat(lastRef, "] = document.createTextNode(\"").concat(value, "\")"));
          } else if (typeof value === 'number') {
            var line = consumeOpCode(value);
            line && lines.push(line);
          } else {
            throw new Error('Unexpected value');
          }
        }

        return lines;
      }
      /**
       * Converts `I18nRemoveOpCodes` array into a human readable format.
       *
       * This function is attached to the `I18nRemoveOpCodes.debug` if `ngDevMode` is enabled. This
       * function provides a human readable view of the opcodes. This is useful when debugging the
       * application as well as writing more readable tests.
       *
       * @param this `I18nRemoveOpCodes` if attached as a method.
       * @param opcodes `I18nRemoveOpCodes` if invoked as a function.
       */


      function i18nRemoveOpCodesToString(opcodes) {
        var removeCodes = opcodes || (Array.isArray(this) ? this : []);
        var lines = [];

        for (var i = 0; i < removeCodes.length; i++) {
          var nodeOrIcuIndex = removeCodes[i];

          if (nodeOrIcuIndex > 0) {
            // Positive numbers are `RNode`s.
            lines.push("remove(lView[".concat(nodeOrIcuIndex, "])"));
          } else {
            // Negative numbers are ICUs
            lines.push("removeNestedICU(".concat(~nodeOrIcuIndex, ")"));
          }
        }

        return lines;
      }

      var OpCodeParser = /*#__PURE__*/function () {
        function OpCodeParser(codes) {
          _classCallCheck2(this, OpCodeParser);

          this.i = 0;
          this.codes = codes;
        }

        _createClass2(OpCodeParser, [{
          key: "hasMore",
          value: function hasMore() {
            return this.i < this.codes.length;
          }
        }, {
          key: "consumeNumber",
          value: function consumeNumber() {
            var value = this.codes[this.i++];
            assertNumber(value, 'expecting number in OpCode');
            return value;
          }
        }, {
          key: "consumeString",
          value: function consumeString() {
            var value = this.codes[this.i++];
            assertString(value, 'expecting string in OpCode');
            return value;
          }
        }, {
          key: "consumeFunction",
          value: function consumeFunction() {
            var value = this.codes[this.i++];

            if (value === null || typeof value === 'function') {
              return value;
            }

            throw new Error('expecting function in OpCode');
          }
        }, {
          key: "consumeNumberOrString",
          value: function consumeNumberOrString() {
            var value = this.codes[this.i++];

            if (typeof value === 'string') {
              return value;
            }

            assertNumber(value, 'expecting number or string in OpCode');
            return value;
          }
        }, {
          key: "consumeNumberStringOrMarker",
          value: function consumeNumberStringOrMarker() {
            var value = this.codes[this.i++];

            if (typeof value === 'string' || typeof value === 'number' || value == ICU_MARKER || value == ELEMENT_MARKER) {
              return value;
            }

            assertNumber(value, 'expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode');
            return value;
          }
        }]);

        return OpCodeParser;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var BINDING_REGEXP = /�(\d+):?\d*�/gi;
      var ICU_REGEXP = /({\s*�\d+:?\d*�\s*,\s*\S{6}\s*,[\s\S]*})/gi;
      var NESTED_ICU = /�(\d+)�/;
      var ICU_BLOCK_REGEXP = /^\s*(�\d+:?\d*�)\s*,\s*(select|plural)\s*,/;
      var MARKER = "\uFFFD";
      var SUBTEMPLATE_REGEXP = /�\/?\*(\d+:\d+)�/gi;
      var PH_REGEXP = /�(\/?[#*]\d+):?\d*�/gi;
      /**
       * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:
       * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32
       * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character
       * and later on replaced by a space. We are re-implementing the same idea here, since translations
       * might contain this special character.
       */

      var NGSP_UNICODE_REGEXP = /\uE500/g;

      function replaceNgsp(value) {
        return value.replace(NGSP_UNICODE_REGEXP, ' ');
      }
      /**
       * Create dynamic nodes from i18n translation block.
       *
       * - Text nodes are created synchronously
       * - TNodes are linked into tree lazily
       *
       * @param tView Current `TView`
       * @parentTNodeIndex index to the parent TNode of this i18n block
       * @param lView Current `LView`
       * @param index Index of `ɵɵi18nStart` instruction.
       * @param message Message to translate.
       * @param subTemplateIndex Index into the sub template of message translation. (ie in case of
       *     `ngIf`) (-1 otherwise)
       */


      function i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {
        var rootTNode = getCurrentParentTNode();
        var createOpCodes = [];
        var updateOpCodes = [];
        var existingTNodeStack = [[]];

        if (ngDevMode) {
          attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);
          attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
        }

        message = getTranslationForTemplate(message, subTemplateIndex);
        var msgParts = replaceNgsp(message).split(PH_REGEXP);

        for (var i = 0; i < msgParts.length; i++) {
          var value = msgParts[i];

          if ((i & 1) === 0) {
            // Even indexes are text (including bindings & ICU expressions)
            var parts = i18nParseTextIntoPartsAndICU(value);

            for (var j = 0; j < parts.length; j++) {
              var part = parts[j];

              if ((j & 1) === 0) {
                // `j` is odd therefore `part` is string
                var text = part;
                ngDevMode && assertString(text, 'Parsed ICU part should be string');

                if (text !== '') {
                  i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);
                }
              } else {
                // `j` is Even therefor `part` is an `ICUExpression`
                var icuExpression = part; // Verify that ICU expression has the right shape. Translations might contain invalid
                // constructions (while original messages were correct), so ICU parsing at runtime may
                // not succeed (thus `icuExpression` remains a string).
                // Note: we intentionally retain the error here by not using `ngDevMode`, because
                // the value can change based on the locale and users aren't guaranteed to hit
                // an invalid string while they're developing.

                if (typeof icuExpression !== 'object') {
                  throw new Error("Unable to parse ICU expression in \"".concat(message, "\" message."));
                }

                var icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? "ICU ".concat(index, ":").concat(icuExpression.mainBinding) : '', true);
                var icuNodeIndex = icuContainerTNode.index;
                ngDevMode && assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, 'Index must be in absolute LView offset');
                icuStart(tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);
              }
            }
          } else {
            // Odd indexes are placeholders (elements and sub-templates)
            // At this point value is something like: '/#1:2' (originally coming from '�/#1:2�')
            var isClosing = value.charCodeAt(0) === 47
            /* SLASH */
            ;
            var type = value.charCodeAt(isClosing ? 1 : 0);
            ngDevMode && assertOneOf(type, 42
            /* STAR */
            , 35
            /* HASH */
            );

            var _index4 = HEADER_OFFSET + Number.parseInt(value.substring(isClosing ? 2 : 1));

            if (isClosing) {
              existingTNodeStack.shift();
              setCurrentTNode(getCurrentParentTNode(), false);
            } else {
              var tNode = createTNodePlaceholder(tView, existingTNodeStack[0], _index4);
              existingTNodeStack.unshift([]);
              setCurrentTNode(tNode, true);
            }
          }
        }

        tView.data[index] = {
          create: createOpCodes,
          update: updateOpCodes
        };
      }
      /**
       * Allocate space in i18n Range add create OpCode instruction to crete a text or comment node.
       *
       * @param tView Current `TView` needed to allocate space in i18n range.
       * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will be
       *     added as part of the `i18nStart` instruction or as part of the `TNode.insertBeforeIndex`.
       * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.
       * @param lView Current `LView` needed to allocate space in i18n range.
       * @param createOpCodes Array storing `I18nCreateOpCodes` where new opCodes will be added.
       * @param text Text to be added when the `Text` or `Comment` node will be created.
       * @param isICU true if a `Comment` node for ICU (instead of `Text`) node should be created.
       */


      function createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text, isICU) {
        var i18nNodeIdx = allocExpando(tView, lView, 1, null);
        var opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;
        var parentTNode = getCurrentParentTNode();

        if (rootTNode === parentTNode) {
          // FIXME(misko): A null `parentTNode` should represent when we fall of the `LView` boundary.
          // (there is no parent), but in some circumstances (because we are inconsistent about how we set
          // `previousOrParentTNode`) it could point to `rootTNode` So this is a work around.
          parentTNode = null;
        }

        if (parentTNode === null) {
          // If we don't have a parent that means that we can eagerly add nodes.
          // If we have a parent than these nodes can't be added now (as the parent has not been created
          // yet) and instead the `parentTNode` is responsible for adding it. See
          // `TNode.insertBeforeIndex`
          opCode |= I18nCreateOpCode.APPEND_EAGERLY;
        }

        if (isICU) {
          opCode |= I18nCreateOpCode.COMMENT;
          ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);
        }

        createOpCodes.push(opCode, text === null ? '' : text); // We store `{{?}}` so that when looking at debug `TNodeType.template` we can see where the
        // bindings are.

        var tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32
        /* Icu */
        : 1
        /* Text */
        , text === null ? ngDevMode ? '{{?}}' : '' : text, null);
        addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);
        var tNodeIdx = tNode.index;
        setCurrentTNode(tNode, false
        /* Text nodes are self closing */
        );

        if (parentTNode !== null && rootTNode !== parentTNode) {
          // We are a child of deeper node (rather than a direct child of `i18nStart` instruction.)
          // We have to make sure to add ourselves to the parent.
          setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);
        }

        return tNode;
      }
      /**
       * Processes text node in i18n block.
       *
       * Text nodes can have:
       * - Create instruction in `createOpCodes` for creating the text node.
       * - Allocate spec for text node in i18n range of `LView`
       * - If contains binding:
       *    - bindings => allocate space in i18n range of `LView` to store the binding value.
       *    - populate `updateOpCodes` with update instructions.
       *
       * @param tView Current `TView`
       * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will
       *     be added as part of the `i18nStart` instruction or as part of the
       *     `TNode.insertBeforeIndex`.
       * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.
       * @param createOpCodes Location where the creation OpCodes will be stored.
       * @param lView Current `LView`
       * @param text The translated text (which may contain binding)
       */


      function i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text) {
        var hasBinding = text.match(BINDING_REGEXP);
        var tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);

        if (hasBinding) {
          generateBindingUpdateOpCodes(updateOpCodes, text, tNode.index, null, 0, null);
        }
      }
      /**
       * See `i18nAttributes` above.
       */


      function i18nAttributesFirstPass(tView, index, values) {
        var previousElement = getCurrentTNode();
        var previousElementIndex = previousElement.index;
        var updateOpCodes = [];

        if (ngDevMode) {
          attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
        }

        if (tView.firstCreatePass && tView.data[index] === null) {
          for (var i = 0; i < values.length; i += 2) {
            var attrName = values[i];
            var message = values[i + 1];

            if (message !== '') {
              // Check if attribute value contains an ICU and throw an error if that's the case.
              // ICUs in element attributes are not supported.
              // Note: we intentionally retain the error here by not using `ngDevMode`, because
              // the `value` can change based on the locale and users aren't guaranteed to hit
              // an invalid string while they're developing.
              if (ICU_REGEXP.test(message)) {
                throw new Error("ICU expressions are not supported in attributes. Message: \"".concat(message, "\"."));
              } // i18n attributes that hit this code path are guaranteed to have bindings, because
              // the compiler treats static i18n attributes as regular attribute bindings.
              // Since this may not be the first i18n attribute on this element we need to pass in how
              // many previous bindings there have already been.


              generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);
            }
          }

          tView.data[index] = updateOpCodes;
        }
      }
      /**
       * Generate the OpCodes to update the bindings of a string.
       *
       * @param updateOpCodes Place where the update opcodes will be stored.
       * @param str The string containing the bindings.
       * @param destinationNode Index of the destination node which will receive the binding.
       * @param attrName Name of the attribute, if the string belongs to an attribute.
       * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.
       * @param bindingStart The lView index of the next expression that can be bound via an opCode.
       * @returns The mask value for these bindings
       */


      function generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {
        ngDevMode && assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, 'Index must be in absolute LView offset');
        var maskIndex = updateOpCodes.length; // Location of mask

        var sizeIndex = maskIndex + 1; // location of size for skipping

        updateOpCodes.push(null, null); // Alloc space for mask and size

        var startIndex = maskIndex + 2; // location of first allocation.

        if (ngDevMode) {
          attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
        }

        var textParts = str.split(BINDING_REGEXP);
        var mask = 0;

        for (var j = 0; j < textParts.length; j++) {
          var textValue = textParts[j];

          if (j & 1) {
            // Odd indexes are bindings
            var bindingIndex = bindingStart + parseInt(textValue, 10);
            updateOpCodes.push(-1 - bindingIndex);
            mask = mask | toMaskBit(bindingIndex);
          } else if (textValue !== '') {
            // Even indexes are text
            updateOpCodes.push(textValue);
          }
        }

        updateOpCodes.push(destinationNode << 2
        /* SHIFT_REF */
        | (attrName ? 1
        /* Attr */
        : 0
        /* Text */
        ));

        if (attrName) {
          updateOpCodes.push(attrName, sanitizeFn);
        }

        updateOpCodes[maskIndex] = mask;
        updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;
        return mask;
      }
      /**
       * Count the number of bindings in the given `opCodes`.
       *
       * It could be possible to speed this up, by passing the number of bindings found back from
       * `generateBindingUpdateOpCodes()` to `i18nAttributesFirstPass()` but this would then require more
       * complexity in the code and/or transient objects to be created.
       *
       * Since this function is only called once when the template is instantiated, is trivial in the
       * first instance (since `opCodes` will be an empty array), and it is not common for elements to
       * contain multiple i18n bound attributes, it seems like this is a reasonable compromise.
       */


      function countBindings(opCodes) {
        var count = 0;

        for (var i = 0; i < opCodes.length; i++) {
          var opCode = opCodes[i]; // Bindings are negative numbers.

          if (typeof opCode === 'number' && opCode < 0) {
            count++;
          }
        }

        return count;
      }
      /**
       * Convert binding index to mask bit.
       *
       * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make
       * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to
       * have more than 32 bindings this will be hit very rarely. The downside of hitting this corner
       * case is that we will execute binding code more often than necessary. (penalty of performance)
       */


      function toMaskBit(bindingIndex) {
        return 1 << Math.min(bindingIndex, 31);
      }

      function isRootTemplateMessage(subTemplateIndex) {
        return subTemplateIndex === -1;
      }
      /**
       * Removes everything inside the sub-templates of a message.
       */


      function removeInnerTemplateTranslation(message) {
        var match;
        var res = '';
        var index = 0;
        var inTemplate = false;
        var tagMatched;

        while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {
          if (!inTemplate) {
            res += message.substring(index, match.index + match[0].length);
            tagMatched = match[1];
            inTemplate = true;
          } else {
            if (match[0] === "".concat(MARKER, "/*").concat(tagMatched).concat(MARKER)) {
              index = match.index;
              inTemplate = false;
            }
          }
        }

        ngDevMode && assertEqual(inTemplate, false, "Tag mismatch: unable to find the end of the sub-template in the translation \"".concat(message, "\""));
        res += message.substr(index);
        return res;
      }
      /**
       * Extracts a part of a message and removes the rest.
       *
       * This method is used for extracting a part of the message associated with a template. A
       * translated message can span multiple templates.
       *
       * Example:
       * ```
       * <div i18n>Translate <span *ngIf>me</span>!</div>
       * ```
       *
       * @param message The message to crop
       * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the
       * external template and removes all sub-templates.
       */


      function getTranslationForTemplate(message, subTemplateIndex) {
        if (isRootTemplateMessage(subTemplateIndex)) {
          // We want the root template message, ignore all sub-templates
          return removeInnerTemplateTranslation(message);
        } else {
          // We want a specific sub-template
          var start = message.indexOf(":".concat(subTemplateIndex).concat(MARKER)) + 2 + subTemplateIndex.toString().length;
          var end = message.search(new RegExp("".concat(MARKER, "\\/\\*\\d+:").concat(subTemplateIndex).concat(MARKER)));
          return removeInnerTemplateTranslation(message.substring(start, end));
        }
      }
      /**
       * Generate the OpCodes for ICU expressions.
       *
       * @param icuExpression
       * @param index Index where the anchor is stored and an optional `TIcuContainerNode`
       *   - `lView[anchorIdx]` points to a `Comment` node representing the anchor for the ICU.
       *   - `tView.data[anchorIdx]` points to the `TIcuContainerNode` if ICU is root (`null` otherwise)
       */


      function icuStart(tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {
        ngDevMode && assertDefined(icuExpression, 'ICU expression must be defined');
        var bindingMask = 0;
        var tIcu = {
          type: icuExpression.type,
          currentCaseLViewIndex: allocExpando(tView, lView, 1, null),
          anchorIdx: anchorIdx,
          cases: [],
          create: [],
          remove: [],
          update: []
        };
        addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);
        setTIcu(tView, anchorIdx, tIcu);
        var values = icuExpression.values;

        for (var i = 0; i < values.length; i++) {
          // Each value is an array of strings & other ICU expressions
          var valueArr = values[i];
          var nestedIcus = [];

          for (var j = 0; j < valueArr.length; j++) {
            var value = valueArr[j];

            if (typeof value !== 'string') {
              // It is an nested ICU expression
              var icuIndex = nestedIcus.push(value) - 1; // Replace nested ICU expression by a comment node

              valueArr[j] = "<!--\uFFFD".concat(icuIndex, "\uFFFD-->");
            }
          }

          bindingMask = parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(''), nestedIcus) | bindingMask;
        }

        if (bindingMask) {
          addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);
        }
      }
      /**
       * Parses text containing an ICU expression and produces a JSON object for it.
       * Original code from closure library, modified for Angular.
       *
       * @param pattern Text containing an ICU expression that needs to be parsed.
       *
       */


      function parseICUBlock(pattern) {
        var cases = [];
        var values = [];
        var icuType = 1
        /* plural */
        ;
        var mainBinding = 0;
        pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {
          if (type === 'select') {
            icuType = 0
            /* select */
            ;
          } else {
            icuType = 1
            /* plural */
            ;
          }

          mainBinding = parseInt(binding.substr(1), 10);
          return '';
        });
        var parts = i18nParseTextIntoPartsAndICU(pattern); // Looking for (key block)+ sequence. One of the keys has to be "other".

        for (var pos = 0; pos < parts.length;) {
          var key = parts[pos++].trim();

          if (icuType === 1
          /* plural */
          ) {
              // Key can be "=x", we just want "x"
              key = key.replace(/\s*(?:=)?(\w+)\s*/, '$1');
            }

          if (key.length) {
            cases.push(key);
          }

          var blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);

          if (cases.length > values.length) {
            values.push(blocks);
          }
        } // TODO(ocombe): support ICU expressions in attributes, see #21615


        return {
          type: icuType,
          mainBinding: mainBinding,
          cases: cases,
          values: values
        };
      }
      /**
       * Breaks pattern into strings and top level {...} blocks.
       * Can be used to break a message into text and ICU expressions, or to break an ICU expression
       * into keys and cases. Original code from closure library, modified for Angular.
       *
       * @param pattern (sub)Pattern to be broken.
       * @returns An `Array<string|IcuExpression>` where:
       *   - odd positions: `string` => text between ICU expressions
       *   - even positions: `ICUExpression` => ICU expression parsed into `ICUExpression` record.
       */


      function i18nParseTextIntoPartsAndICU(pattern) {
        if (!pattern) {
          return [];
        }

        var prevPos = 0;
        var braceStack = [];
        var results = [];
        var braces = /[{}]/g; // lastIndex doesn't get set to 0 so we have to.

        braces.lastIndex = 0;
        var match;

        while (match = braces.exec(pattern)) {
          var pos = match.index;

          if (match[0] == '}') {
            braceStack.pop();

            if (braceStack.length == 0) {
              // End of the block.
              var block = pattern.substring(prevPos, pos);

              if (ICU_BLOCK_REGEXP.test(block)) {
                results.push(parseICUBlock(block));
              } else {
                results.push(block);
              }

              prevPos = pos + 1;
            }
          } else {
            if (braceStack.length == 0) {
              var _substring = pattern.substring(prevPos, pos);

              results.push(_substring);
              prevPos = pos + 1;
            }

            braceStack.push('{');
          }
        }

        var substring = pattern.substring(prevPos);
        results.push(substring);
        return results;
      }
      /**
       * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.
       *
       */


      function parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {
        var create = [];
        var remove = [];
        var update = [];

        if (ngDevMode) {
          attachDebugGetter(create, icuCreateOpCodesToString);
          attachDebugGetter(remove, i18nRemoveOpCodesToString);
          attachDebugGetter(update, i18nUpdateOpCodesToString);
        }

        tIcu.cases.push(caseName);
        tIcu.create.push(create);
        tIcu.remove.push(remove);
        tIcu.update.push(update);
        var inertBodyHelper = getInertBodyHelper(getDocument());
        var inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeCaseHtml);
        ngDevMode && assertDefined(inertBodyElement, 'Unable to generate inert body element');
        var inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;

        if (inertRootNode) {
          return walkIcuTree(tView, tIcu, lView, updateOpCodes, create, remove, update, inertRootNode, parentIdx, nestedIcus, 0);
        } else {
          return 0;
        }
      }

      function walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, parentNode, parentIdx, nestedIcus, depth) {
        var bindingMask = 0;
        var currentNode = parentNode.firstChild;

        while (currentNode) {
          var newIndex = allocExpando(tView, lView, 1, null);

          switch (currentNode.nodeType) {
            case Node.ELEMENT_NODE:
              var element = currentNode;
              var tagName = element.tagName.toLowerCase();

              if (VALID_ELEMENTS.hasOwnProperty(tagName)) {
                addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);
                tView.data[newIndex] = tagName;
                var elAttrs = element.attributes;

                for (var i = 0; i < elAttrs.length; i++) {
                  var attr = elAttrs.item(i);
                  var lowerAttrName = attr.name.toLowerCase();

                  var _hasBinding = !!attr.value.match(BINDING_REGEXP); // we assume the input string is safe, unless it's using a binding


                  if (_hasBinding) {
                    if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {
                      if (URI_ATTRS[lowerAttrName]) {
                        generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);
                      } else if (SRCSET_ATTRS[lowerAttrName]) {
                        generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, sanitizeSrcset);
                      } else {
                        generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);
                      }
                    } else {
                      ngDevMode && console.warn("WARNING: ignoring unsafe attribute value " + "".concat(lowerAttrName, " on element ").concat(tagName, " ") + "(see https://g.co/ng/security#xss)");
                    }
                  } else {
                    addCreateAttribute(create, newIndex, attr);
                  }
                } // Parse the children of this node (if any)


                bindingMask = walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, currentNode, newIndex, nestedIcus, depth + 1) | bindingMask;
                addRemoveNode(remove, newIndex, depth);
              }

              break;

            case Node.TEXT_NODE:
              var value = currentNode.textContent || '';
              var hasBinding = value.match(BINDING_REGEXP);
              addCreateNodeAndAppend(create, null, hasBinding ? '' : value, parentIdx, newIndex);
              addRemoveNode(remove, newIndex, depth);

              if (hasBinding) {
                bindingMask = generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;
              }

              break;

            case Node.COMMENT_NODE:
              // Check if the comment node is a placeholder for a nested ICU
              var isNestedIcu = NESTED_ICU.exec(currentNode.textContent || '');

              if (isNestedIcu) {
                var nestedIcuIndex = parseInt(isNestedIcu[1], 10);
                var icuExpression = nestedIcus[nestedIcuIndex]; // Create the comment node that will anchor the ICU expression

                addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? "nested ICU ".concat(nestedIcuIndex) : '', parentIdx, newIndex);
                icuStart(tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);
                addRemoveNestedIcu(remove, newIndex, depth);
              }

              break;
          }

          currentNode = currentNode.nextSibling;
        }

        return bindingMask;
      }

      function addRemoveNode(remove, index, depth) {
        if (depth === 0) {
          remove.push(index);
        }
      }

      function addRemoveNestedIcu(remove, index, depth) {
        if (depth === 0) {
          remove.push(~index); // remove ICU at `index`

          remove.push(index); // remove ICU comment at `index`
        }
      }

      function addUpdateIcuSwitch(update, icuExpression, index) {
        update.push(toMaskBit(icuExpression.mainBinding), 2, -1 - icuExpression.mainBinding, index << 2
        /* SHIFT_REF */
        | 2
        /* IcuSwitch */
        );
      }

      function addUpdateIcuUpdate(update, bindingMask, index) {
        update.push(bindingMask, 1, index << 2
        /* SHIFT_REF */
        | 3
        /* IcuUpdate */
        );
      }

      function addCreateNodeAndAppend(create, marker, text, appendToParentIdx, createAtIdx) {
        if (marker !== null) {
          create.push(marker);
        }

        create.push(text, createAtIdx, icuCreateOpCode(0
        /* AppendChild */
        , appendToParentIdx, createAtIdx));
      }

      function addCreateAttribute(create, newIndex, attr) {
        create.push(newIndex << 1
        /* SHIFT_REF */
        | 1
        /* Attr */
        , attr.name, attr.value);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // i18nPostprocess consts


      var ROOT_TEMPLATE_ID = 0;
      var PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]/;
      var PP_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]|(�\/?\*\d+:\d+�)/g;
      var PP_ICU_VARS_REGEXP = /({\s*)(VAR_(PLURAL|SELECT)(_\d+)?)(\s*,)/g;
      var PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;
      var PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\d+)?)�/g;
      var PP_CLOSE_TEMPLATE_REGEXP = /\/\*/;
      var PP_TEMPLATE_ID_REGEXP = /\d+\:(\d+)/;
      /**
       * Handles message string post-processing for internationalization.
       *
       * Handles message string post-processing by transforming it from intermediate
       * format (that might contain some markers that we need to replace) to the final
       * form, consumable by i18nStart instruction. Post processing steps include:
       *
       * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])
       * 2. Replace all ICU vars (like "VAR_PLURAL")
       * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
       * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)
       *    in case multiple ICUs have the same placeholder name
       *
       * @param message Raw translation string for post processing
       * @param replacements Set of replacements that should be applied
       *
       * @returns Transformed string that can be consumed by i18nStart instruction
       *
       * @codeGenApi
       */

      function i18nPostprocess(message) {
        var replacements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        /**
         * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]
         *
         * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically
         * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root
         * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index
         * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in
         * front of �#6�. The post processing step restores the right order by keeping track of the
         * template id stack and looks for placeholders that belong to the currently active template.
         */
        var result = message;

        if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {
          var matches = {};
          var templateIdsStack = [ROOT_TEMPLATE_ID];
          result = result.replace(PP_PLACEHOLDERS_REGEXP, function (m, phs, tmpl) {
            var content = phs || tmpl;
            var placeholders = matches[content] || [];

            if (!placeholders.length) {
              content.split('|').forEach(function (placeholder) {
                var match = placeholder.match(PP_TEMPLATE_ID_REGEXP);
                var templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;
                var isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);
                placeholders.push([templateId, isCloseTemplateTag, placeholder]);
              });
              matches[content] = placeholders;
            }

            if (!placeholders.length) {
              throw new Error("i18n postprocess: unmatched placeholder - ".concat(content));
            }

            var currentTemplateId = templateIdsStack[templateIdsStack.length - 1];
            var idx = 0; // find placeholder index that matches current template id

            for (var i = 0; i < placeholders.length; i++) {
              if (placeholders[i][0] === currentTemplateId) {
                idx = i;
                break;
              }
            } // update template id stack based on the current tag extracted


            var _placeholders$idx = _slicedToArray(placeholders[idx], 3),
                templateId = _placeholders$idx[0],
                isCloseTemplateTag = _placeholders$idx[1],
                placeholder = _placeholders$idx[2];

            if (isCloseTemplateTag) {
              templateIdsStack.pop();
            } else if (currentTemplateId !== templateId) {
              templateIdsStack.push(templateId);
            } // remove processed tag from the list


            placeholders.splice(idx, 1);
            return placeholder;
          });
        } // return current result if no replacements specified


        if (!Object.keys(replacements).length) {
          return result;
        }
        /**
         * Step 2: replace all ICU vars (like "VAR_PLURAL")
         */


        result = result.replace(PP_ICU_VARS_REGEXP, function (match, start, key, _type, _idx, end) {
          return replacements.hasOwnProperty(key) ? "".concat(start).concat(replacements[key]).concat(end) : match;
        });
        /**
         * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
         */

        result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, function (match, key) {
          return replacements.hasOwnProperty(key) ? replacements[key] : match;
        });
        /**
         * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case
         * multiple ICUs have the same placeholder name
         */

        result = result.replace(PP_ICUS_REGEXP, function (match, key) {
          if (replacements.hasOwnProperty(key)) {
            var list = replacements[key];

            if (!list.length) {
              throw new Error("i18n postprocess: unmatched ICU - ".concat(match, " with key: ").concat(key));
            }

            return list.shift();
          }

          return match;
        });
        return result;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Marks a block of text as translatable.
       *
       * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.
       * The translation `message` is the value which is locale specific. The translation string may
       * contain placeholders which associate inner elements and sub-templates within the translation.
       *
       * The translation `message` placeholders are:
       * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be
       *   interpolated into. The placeholder `index` points to the expression binding index. An optional
       *   `block` that matches the sub-template in which it was declared.
       * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning
       *   and end of DOM element that were embedded in the original translation block. The placeholder
       *   `index` points to the element index in the template instructions set. An optional `block` that
       *   matches the sub-template in which it was declared.
       * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be
       *   split up and translated separately in each angular template function. The `index` points to the
       *   `template` instruction index. A `block` that matches the sub-template in which it was declared.
       *
       * @param index A unique index of the translation in the static block.
       * @param messageIndex An index of the translation message from the `def.consts` array.
       * @param subTemplateIndex Optional sub-template index in the `message`.
       *
       * @codeGenApi
       */


      function _ɵɵi18nStart(index, messageIndex) {
        var subTemplateIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
        var tView = getTView();
        var lView = getLView();
        var adjustedIndex = HEADER_OFFSET + index;
        ngDevMode && assertDefined(tView, "tView should be defined");
        var message = getConstant(tView.consts, messageIndex);
        var parentTNode = getCurrentParentTNode();

        if (tView.firstCreatePass) {
          i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);
        }

        var tI18n = tView.data[adjustedIndex];
        var sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;
        var parentRNode = getClosestRElement(tView, sameViewParentTNode, lView); // If `parentTNode` is an `ElementContainer` than it has `<!--ng-container--->`.
        // When we do inserts we have to make sure to insert in front of `<!--ng-container--->`.

        var insertInFrontOf = parentTNode && parentTNode.type & 8
        /* ElementContainer */
        ? lView[parentTNode.index] : null;
        applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);
        setInI18nBlock(true);
      }
      /**
       * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes
       * into the render tree, moves the placeholder nodes and removes the deleted nodes.
       *
       * @codeGenApi
       */


      function _ɵɵi18nEnd() {
        setInI18nBlock(false);
      }
      /**
       *
       * Use this instruction to create a translation block that doesn't contain any placeholder.
       * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.
       *
       * The translation `message` is the value which is locale specific. The translation string may
       * contain placeholders which associate inner elements and sub-templates within the translation.
       *
       * The translation `message` placeholders are:
       * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be
       *   interpolated into. The placeholder `index` points to the expression binding index. An optional
       *   `block` that matches the sub-template in which it was declared.
       * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning
       *   and end of DOM element that were embedded in the original translation block. The placeholder
       *   `index` points to the element index in the template instructions set. An optional `block` that
       *   matches the sub-template in which it was declared.
       * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be
       *   split up and translated separately in each angular template function. The `index` points to the
       *   `template` instruction index. A `block` that matches the sub-template in which it was declared.
       *
       * @param index A unique index of the translation in the static block.
       * @param messageIndex An index of the translation message from the `def.consts` array.
       * @param subTemplateIndex Optional sub-template index in the `message`.
       *
       * @codeGenApi
       */


      function _ɵɵi18n(index, messageIndex, subTemplateIndex) {
        _ɵɵi18nStart(index, messageIndex, subTemplateIndex);

        _ɵɵi18nEnd();
      }
      /**
       * Marks a list of attributes as translatable.
       *
       * @param index A unique index in the static block
       * @param values
       *
       * @codeGenApi
       */


      function _ɵɵi18nAttributes(index, attrsIndex) {
        var tView = getTView();
        ngDevMode && assertDefined(tView, "tView should be defined");
        var attrs = getConstant(tView.consts, attrsIndex);
        i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);
      }
      /**
       * Stores the values of the bindings during each update cycle in order to determine if we need to
       * update the translated nodes.
       *
       * @param value The binding's value
       * @returns This function returns itself so that it may be chained
       * (e.g. `i18nExp(ctx.name)(ctx.title)`)
       *
       * @codeGenApi
       */


      function _ɵɵi18nExp(value) {
        var lView = getLView();
        setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));
        return _ɵɵi18nExp;
      }
      /**
       * Updates a translation block or an i18n attribute when the bindings have changed.
       *
       * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}
       * (i18n attribute) on which it should update the content.
       *
       * @codeGenApi
       */


      function _ɵɵi18nApply(index) {
        applyI18n(getTView(), getLView(), index + HEADER_OFFSET);
      }
      /**
       * Handles message string post-processing for internationalization.
       *
       * Handles message string post-processing by transforming it from intermediate
       * format (that might contain some markers that we need to replace) to the final
       * form, consumable by i18nStart instruction. Post processing steps include:
       *
       * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])
       * 2. Replace all ICU vars (like "VAR_PLURAL")
       * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
       * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)
       *    in case multiple ICUs have the same placeholder name
       *
       * @param message Raw translation string for post processing
       * @param replacements Set of replacements that should be applied
       *
       * @returns Transformed string that can be consumed by i18nStart instruction
       *
       * @codeGenApi
       */


      function _ɵɵi18nPostprocess(message) {
        var replacements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return i18nPostprocess(message, replacements);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Resolves the providers which are defined in the DirectiveDef.
       *
       * When inserting the tokens and the factories in their respective arrays, we can assume that
       * this method is called first for the component (if any), and then for other directives on the same
       * node.
       * As a consequence,the providers are always processed in that order:
       * 1) The view providers of the component
       * 2) The providers of the component
       * 3) The providers of the other directives
       * This matches the structure of the injectables arrays of a view (for each node).
       * So the tokens and the factories can be pushed at the end of the arrays, except
       * in one case for multi providers.
       *
       * @param def the directive definition
       * @param providers: Array of `providers`.
       * @param viewProviders: Array of `viewProviders`.
       */


      function providersResolver(def, providers, viewProviders) {
        var tView = getTView();

        if (tView.firstCreatePass) {
          var isComponent = isComponentDef(def); // The list of view providers is processed first, and the flags are updated

          resolveProvider$1(viewProviders, tView.data, tView.blueprint, isComponent, true); // Then, the list of providers is processed, and the flags are updated

          resolveProvider$1(providers, tView.data, tView.blueprint, isComponent, false);
        }
      }
      /**
       * Resolves a provider and publishes it to the DI system.
       */


      function resolveProvider$1(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {
        provider = _resolveForwardRef(provider);

        if (Array.isArray(provider)) {
          // Recursively call `resolveProvider`
          // Recursion is OK in this case because this code will not be in hot-path once we implement
          // cloning of the initial state.
          for (var i = 0; i < provider.length; i++) {
            resolveProvider$1(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);
          }
        } else {
          var tView = getTView();
          var lView = getLView();
          var token = isTypeProvider(provider) ? provider : _resolveForwardRef(provider.provide);
          var providerFactory = providerToFactory(provider);
          var tNode = getCurrentTNode();
          var beginIndex = tNode.providerIndexes & 1048575
          /* ProvidersStartIndexMask */
          ;
          var endIndex = tNode.directiveStart;
          var cptViewProvidersCount = tNode.providerIndexes >> 20
          /* CptViewProvidersCountShift */
          ;

          if (isTypeProvider(provider) || !provider.multi) {
            // Single provider case: the factory is created and pushed immediately
            var factory = new NodeInjectorFactory(providerFactory, isViewProvider, _ɵɵdirectiveInject);
            var existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);

            if (existingFactoryIndex === -1) {
              diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);
              registerDestroyHooksIfSupported(tView, provider, tInjectables.length);
              tInjectables.push(token);
              tNode.directiveStart++;
              tNode.directiveEnd++;

              if (isViewProvider) {
                tNode.providerIndexes += 1048576
                /* CptViewProvidersCountShifter */
                ;
              }

              lInjectablesBlueprint.push(factory);
              lView.push(factory);
            } else {
              lInjectablesBlueprint[existingFactoryIndex] = factory;
              lView[existingFactoryIndex] = factory;
            }
          } else {
            // Multi provider case:
            // We create a multi factory which is going to aggregate all the values.
            // Since the output of such a factory depends on content or view injection,
            // we create two of them, which are linked together.
            //
            // The first one (for view providers) is always in the first block of the injectables array,
            // and the second one (for providers) is always in the second block.
            // This is important because view providers have higher priority. When a multi token
            // is being looked up, the view providers should be found first.
            // Note that it is not possible to have a multi factory in the third block (directive block).
            //
            // The algorithm to process multi providers is as follows:
            // 1) If the multi provider comes from the `viewProviders` of the component:
            //   a) If the special view providers factory doesn't exist, it is created and pushed.
            //   b) Else, the multi provider is added to the existing multi factory.
            // 2) If the multi provider comes from the `providers` of the component or of another
            // directive:
            //   a) If the multi factory doesn't exist, it is created and provider pushed into it.
            //      It is also linked to the multi factory for view providers, if it exists.
            //   b) Else, the multi provider is added to the existing multi factory.
            var existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);
            var existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);
            var doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];
            var doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingViewProvidersFactoryIndex];

            if (isViewProvider && !doesViewProvidersFactoryExist || !isViewProvider && !doesProvidersFactoryExist) {
              // Cases 1.a and 2.a
              diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);

              var _factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);

              if (!isViewProvider && doesViewProvidersFactoryExist) {
                lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = _factory;
              }

              registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);
              tInjectables.push(token);
              tNode.directiveStart++;
              tNode.directiveEnd++;

              if (isViewProvider) {
                tNode.providerIndexes += 1048576
                /* CptViewProvidersCountShifter */
                ;
              }

              lInjectablesBlueprint.push(_factory);
              lView.push(_factory);
            } else {
              // Cases 1.b and 2.b
              var indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);
              registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex : existingViewProvidersFactoryIndex, indexInFactory);
            }

            if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {
              lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;
            }
          }
        }
      }
      /**
       * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.
       * @param tView `TView` in which to register the hook.
       * @param provider Provider whose hook should be registered.
       * @param contextIndex Index under which to find the context for the hook when it's being invoked.
       * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi
       * provider factory.
       */


      function registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {
        var providerIsTypeProvider = isTypeProvider(provider);

        if (providerIsTypeProvider || isClassProvider(provider)) {
          var prototype = (provider.useClass || provider).prototype;
          var ngOnDestroy = prototype.ngOnDestroy;

          if (ngOnDestroy) {
            var hooks = tView.destroyHooks || (tView.destroyHooks = []);

            if (!providerIsTypeProvider && provider.multi) {
              ngDevMode && assertDefined(indexInFactory, 'indexInFactory when registering multi factory destroy hook');
              var existingCallbacksIndex = hooks.indexOf(contextIndex);

              if (existingCallbacksIndex === -1) {
                hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);
              } else {
                hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);
              }
            } else {
              hooks.push(contextIndex, ngOnDestroy);
            }
          }
        }
      }
      /**
       * Add a factory in a multi factory.
       * @returns Index at which the factory was inserted.
       */


      function multiFactoryAdd(multiFactory, factory, isComponentProvider) {
        if (isComponentProvider) {
          multiFactory.componentProviders++;
        }

        return multiFactory.multi.push(factory) - 1;
      }
      /**
       * Returns the index of item in the array, but only in the begin to end range.
       */


      function indexOf(item, arr, begin, end) {
        for (var i = begin; i < end; i++) {
          if (arr[i] === item) return i;
        }

        return -1;
      }
      /**
       * Use this with `multi` `providers`.
       */


      function multiProvidersFactoryResolver(_, tData, lData, tNode) {
        return multiResolve(this.multi, []);
      }
      /**
       * Use this with `multi` `viewProviders`.
       *
       * This factory knows how to concatenate itself with the existing `multi` `providers`.
       */


      function multiViewProvidersFactoryResolver(_, tData, lView, tNode) {
        var factories = this.multi;
        var result;

        if (this.providerFactory) {
          var componentCount = this.providerFactory.componentProviders;
          var multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode); // Copy the section of the array which contains `multi` `providers` from the component

          result = multiProviders.slice(0, componentCount); // Insert the `viewProvider` instances.

          multiResolve(factories, result); // Copy the section of the array which contains `multi` `providers` from other directives

          for (var i = componentCount; i < multiProviders.length; i++) {
            result.push(multiProviders[i]);
          }
        } else {
          result = []; // Insert the `viewProvider` instances.

          multiResolve(factories, result);
        }

        return result;
      }
      /**
       * Maps an array of factories into an array of values.
       */


      function multiResolve(factories, result) {
        for (var i = 0; i < factories.length; i++) {
          var factory = factories[i];
          result.push(factory());
        }

        return result;
      }
      /**
       * Creates a multi factory.
       */


      function multiFactory(factoryFn, index, isViewProvider, isComponent, f) {
        var factory = new NodeInjectorFactory(factoryFn, isViewProvider, _ɵɵdirectiveInject);
        factory.multi = [];
        factory.index = index;
        factory.componentProviders = 0;
        multiFactoryAdd(factory, f, isComponent && !isViewProvider);
        return factory;
      }
      /**
       * This feature resolves the providers of a directive (or component),
       * and publish them into the DI system, making it visible to others for injection.
       *
       * For example:
       * ```ts
       * class ComponentWithProviders {
       *   constructor(private greeter: GreeterDE) {}
       *
       *   static ɵcmp = defineComponent({
       *     type: ComponentWithProviders,
       *     selectors: [['component-with-providers']],
       *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),
       *    decls: 1,
       *    vars: 1,
       *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {
       *      if (fs & RenderFlags.Create) {
       *        ɵɵtext(0);
       *      }
       *      if (fs & RenderFlags.Update) {
       *        ɵɵtextInterpolate(ctx.greeter.greet());
       *      }
       *    },
       *    features: [ɵɵProvidersFeature([GreeterDE])]
       *  });
       * }
       * ```
       *
       * @param definition
       *
       * @codeGenApi
       */


      function _ɵɵProvidersFeature(providers) {
        var viewProviders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        return function (definition) {
          definition.providersResolver = function (def, processProvidersFn) {
            return providersResolver(def, //
            processProvidersFn ? processProvidersFn(providers) : providers, //
            viewProviders);
          };
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Represents a component created by a `ComponentFactory`.
       * Provides access to the component instance and related objects,
       * and provides the means of destroying the instance.
       *
       * @publicApi
       */


      var _ComponentRef = function _ComponentRef() {
        _classCallCheck2(this, _ComponentRef);
      };
      /**
       * Base class for a factory that can create a component dynamically.
       * Instantiate a factory for a given type of component with `resolveComponentFactory()`.
       * Use the resulting `ComponentFactory.create()` method to create a component of that type.
       *
       * @see [Dynamic Components](guide/dynamic-component-loader)
       *
       * @publicApi
       */


      var _ComponentFactory = function _ComponentFactory() {
        _classCallCheck2(this, _ComponentFactory);
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function noComponentFactoryError(component) {
        var error = Error("No component factory found for ".concat(stringify(component), ". Did you add it to @NgModule.entryComponents?"));
        error[ERROR_COMPONENT] = component;
        return error;
      }

      var ERROR_COMPONENT = 'ngComponent';

      function getComponent$1(error) {
        return error[ERROR_COMPONENT];
      }

      var _NullComponentFactoryResolver = /*#__PURE__*/function () {
        function _NullComponentFactoryResolver() {
          _classCallCheck2(this, _NullComponentFactoryResolver);
        }

        _createClass2(_NullComponentFactoryResolver, [{
          key: "resolveComponentFactory",
          value: function resolveComponentFactory(component) {
            throw noComponentFactoryError(component);
          }
        }]);

        return _NullComponentFactoryResolver;
      }();
      /**
       * A simple registry that maps `Components` to generated `ComponentFactory` classes
       * that can be used to create instances of components.
       * Use to obtain the factory for a given component type,
       * then use the factory's `create()` method to create a component of that type.
       *
       * @see [Dynamic Components](guide/dynamic-component-loader)
       * @publicApi
       */


      var _ComponentFactoryResolver = function _ComponentFactoryResolver() {
        _classCallCheck2(this, _ComponentFactoryResolver);
      };

      _ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();

      var CodegenComponentFactoryResolver = /*#__PURE__*/function () {
        function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {
          _classCallCheck2(this, CodegenComponentFactoryResolver);

          this._parent = _parent;
          this._ngModule = _ngModule;
          this._factories = new Map();

          for (var i = 0; i < factories.length; i++) {
            var factory = factories[i];

            this._factories.set(factory.componentType, factory);
          }
        }

        _createClass2(CodegenComponentFactoryResolver, [{
          key: "resolveComponentFactory",
          value: function resolveComponentFactory(component) {
            var factory = this._factories.get(component);

            if (!factory && this._parent) {
              factory = this._parent.resolveComponentFactory(component);
            }

            if (!factory) {
              throw noComponentFactoryError(component);
            }

            return new ComponentFactoryBoundToModule(factory, this._ngModule);
          }
        }]);

        return CodegenComponentFactoryResolver;
      }();

      var ComponentFactoryBoundToModule = /*#__PURE__*/function (_ComponentFactory2) {
        _inherits(ComponentFactoryBoundToModule, _ComponentFactory2);

        var _super14 = _createSuper(ComponentFactoryBoundToModule);

        function ComponentFactoryBoundToModule(factory, ngModule) {
          var _this75;

          _classCallCheck2(this, ComponentFactoryBoundToModule);

          _this75 = _super14.call(this);
          _this75.factory = factory;
          _this75.ngModule = ngModule;
          _this75.selector = factory.selector;
          _this75.componentType = factory.componentType;
          _this75.ngContentSelectors = factory.ngContentSelectors;
          _this75.inputs = factory.inputs;
          _this75.outputs = factory.outputs;
          return _this75;
        }

        _createClass2(ComponentFactoryBoundToModule, [{
          key: "create",
          value: function create(injector, projectableNodes, rootSelectorOrNode, ngModule) {
            return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);
          }
        }]);

        return ComponentFactoryBoundToModule;
      }(_ComponentFactory);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function noop() {// Do nothing.
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Creates an ElementRef from the most recent node.
       *
       * @returns The ElementRef instance to use
       */


      function injectElementRef() {
        return createElementRef(getCurrentTNode(), getLView());
      }
      /**
       * Creates an ElementRef given a node.
       *
       * @param tNode The node for which you'd like an ElementRef
       * @param lView The view to which the node belongs
       * @returns The ElementRef instance to use
       */


      function createElementRef(tNode, lView) {
        return new _ElementRef(getNativeByTNode(tNode, lView));
      }

      var SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = injectElementRef;
      var SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;
      var SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__POST_R3__;
      /**
       * A wrapper around a native element inside of a View.
       *
       * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
       * element.
       *
       * @security Permitting direct access to the DOM can make your application more vulnerable to
       * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the
       * [Security Guide](https://g.co/ng/security).
       *
       * @publicApi
       */
      // Note: We don't expose things like `Injector`, `ViewContainer`, ... here,
      // i.e. users have to ask for what they need. With that, we can build better analysis tools
      // and could do better codegen in the future.

      var _ElementRef = function _ElementRef(nativeElement) {
        _classCallCheck2(this, _ElementRef);

        this.nativeElement = nativeElement;
      };
      /**
       * @internal
       * @nocollapse
       */


      _ElementRef.__NG_ELEMENT_ID__ = SWITCH_ELEMENT_REF_FACTORY;
      /**
       * Unwraps `ElementRef` and return the `nativeElement`.
       *
       * @param value value to unwrap
       * @returns `nativeElement` if `ElementRef` otherwise returns value as is.
       */

      function unwrapElementRef(value) {
        return value instanceof _ElementRef ? value.nativeElement : value;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var Renderer2Interceptor = new _InjectionToken('Renderer2Interceptor');
      /**
       * Creates and initializes a custom renderer that implements the `Renderer2` base class.
       *
       * @publicApi
       */

      var _RendererFactory = function _RendererFactory() {
        _classCallCheck2(this, _RendererFactory);
      };
      /**
       * Extend this base class to implement custom rendering. By default, Angular
       * renders a template into DOM. You can use custom rendering to intercept
       * rendering calls, or to render to something other than DOM.
       *
       * Create your custom renderer using `RendererFactory2`.
       *
       * Use a custom renderer to bypass Angular's templating and
       * make custom UI changes that can't be expressed declaratively.
       * For example if you need to set a property or an attribute whose name is
       * not statically known, use the `setProperty()` or
       * `setAttribute()` method.
       *
       * @publicApi
       */


      var _Renderer = function _Renderer() {
        _classCallCheck2(this, _Renderer);
      };
      /**
       * @internal
       * @nocollapse
       */


      _Renderer.__NG_ELEMENT_ID__ = function () {
        return SWITCH_RENDERER2_FACTORY();
      };

      var SWITCH_RENDERER2_FACTORY__POST_R3__ = injectRenderer2;
      var SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;
      var SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__POST_R3__;
      /** Returns a Renderer2 (or throws when application was bootstrapped with Renderer3) */

      function getOrCreateRenderer2(lView) {
        var renderer = lView[RENDERER];

        if (ngDevMode && !isProceduralRenderer(renderer)) {
          throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');
        }

        return renderer;
      }
      /** Injects a Renderer2 for the current component. */


      function injectRenderer2() {
        // We need the Renderer to be based on the component that it's being injected into, however since
        // DI happens before we've entered its view, `getLView` will return the parent view instead.
        var lView = getLView();
        var tNode = getCurrentTNode();
        var nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);
        return getOrCreateRenderer2(isLView(nodeAtIndex) ? nodeAtIndex : lView);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Sanitizer is used by the views to sanitize potentially dangerous values.
       *
       * @publicApi
       */


      var _Sanitizer = function _Sanitizer() {
        _classCallCheck2(this, _Sanitizer);
      };
      /** @nocollapse */


      _Sanitizer.ɵprov = _ɵɵdefineInjectable({
        token: _Sanitizer,
        providedIn: 'root',
        factory: function factory() {
          return null;
        }
      });
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description Represents the version of Angular
       *
       * @publicApi
       */

      var _Version = function _Version(full) {
        _classCallCheck2(this, _Version);

        this.full = full;
        this.major = full.split('.')[0];
        this.minor = full.split('.')[1];
        this.patch = full.split('.').slice(2).join('.');
      };
      /**
       * @publicApi
       */


      var _VERSION2 = new _Version('12.0.3');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var DefaultIterableDifferFactory = /*#__PURE__*/function () {
        function DefaultIterableDifferFactory() {
          _classCallCheck2(this, DefaultIterableDifferFactory);
        }

        _createClass2(DefaultIterableDifferFactory, [{
          key: "supports",
          value: function supports(obj) {
            return isListLikeIterable(obj);
          }
        }, {
          key: "create",
          value: function create(trackByFn) {
            return new _DefaultIterableDiffer(trackByFn);
          }
        }]);

        return DefaultIterableDifferFactory;
      }();

      var trackByIdentity = function trackByIdentity(index, item) {
        return item;
      };

      var ɵ0$b = trackByIdentity;
      /**
       * @deprecated v4.0.0 - Should not be part of public API.
       * @publicApi
       */

      var _DefaultIterableDiffer = /*#__PURE__*/function () {
        function _DefaultIterableDiffer(trackByFn) {
          _classCallCheck2(this, _DefaultIterableDiffer);

          this.length = 0; // Keeps track of the used records at any point in time (during & across `_check()` calls)

          this._linkedRecords = null; // Keeps track of the removed records at any point in time during `_check()` calls.

          this._unlinkedRecords = null;
          this._previousItHead = null;
          this._itHead = null;
          this._itTail = null;
          this._additionsHead = null;
          this._additionsTail = null;
          this._movesHead = null;
          this._movesTail = null;
          this._removalsHead = null;
          this._removalsTail = null; // Keeps track of records where custom track by is the same, but item identity has changed

          this._identityChangesHead = null;
          this._identityChangesTail = null;
          this._trackByFn = trackByFn || trackByIdentity;
        }

        _createClass2(_DefaultIterableDiffer, [{
          key: "forEachItem",
          value: function forEachItem(fn) {
            var record;

            for (record = this._itHead; record !== null; record = record._next) {
              fn(record);
            }
          }
        }, {
          key: "forEachOperation",
          value: function forEachOperation(fn) {
            var nextIt = this._itHead;
            var nextRemove = this._removalsHead;
            var addRemoveOffset = 0;
            var moveOffsets = null;

            while (nextIt || nextRemove) {
              // Figure out which is the next record to process
              // Order: remove, add, move
              var record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
              var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
              var currentIndex = record.currentIndex; // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary

              if (record === nextRemove) {
                addRemoveOffset--;
                nextRemove = nextRemove._nextRemoved;
              } else {
                nextIt = nextIt._next;

                if (record.previousIndex == null) {
                  addRemoveOffset++;
                } else {
                  // INVARIANT:  currentIndex < previousIndex
                  if (!moveOffsets) moveOffsets = [];
                  var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
                  var localCurrentIndex = currentIndex - addRemoveOffset;

                  if (localMovePreviousIndex != localCurrentIndex) {
                    for (var i = 0; i < localMovePreviousIndex; i++) {
                      var offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;
                      var index = offset + i;

                      if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                        moveOffsets[i] = offset + 1;
                      }
                    }

                    var previousIndex = record.previousIndex;
                    moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
                  }
                }
              }

              if (adjPreviousIndex !== currentIndex) {
                fn(record, adjPreviousIndex, currentIndex);
              }
            }
          }
        }, {
          key: "forEachPreviousItem",
          value: function forEachPreviousItem(fn) {
            var record;

            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
              fn(record);
            }
          }
        }, {
          key: "forEachAddedItem",
          value: function forEachAddedItem(fn) {
            var record;

            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
              fn(record);
            }
          }
        }, {
          key: "forEachMovedItem",
          value: function forEachMovedItem(fn) {
            var record;

            for (record = this._movesHead; record !== null; record = record._nextMoved) {
              fn(record);
            }
          }
        }, {
          key: "forEachRemovedItem",
          value: function forEachRemovedItem(fn) {
            var record;

            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
              fn(record);
            }
          }
        }, {
          key: "forEachIdentityChange",
          value: function forEachIdentityChange(fn) {
            var record;

            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
              fn(record);
            }
          }
        }, {
          key: "diff",
          value: function diff(collection) {
            if (collection == null) collection = [];

            if (!isListLikeIterable(collection)) {
              throw new Error("Error trying to diff '".concat(stringify(collection), "'. Only arrays and iterables are allowed"));
            }

            if (this.check(collection)) {
              return this;
            } else {
              return null;
            }
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {}
        }, {
          key: "check",
          value: function check(collection) {
            var _this76 = this;

            this._reset();

            var record = this._itHead;
            var mayBeDirty = false;
            var index;
            var item;
            var itemTrackBy;

            if (Array.isArray(collection)) {
              this.length = collection.length;

              for (var _index5 = 0; _index5 < this.length; _index5++) {
                item = collection[_index5];
                itemTrackBy = this._trackByFn(_index5, item);

                if (record === null || !Object.is(record.trackById, itemTrackBy)) {
                  record = this._mismatch(record, item, itemTrackBy, _index5);
                  mayBeDirty = true;
                } else {
                  if (mayBeDirty) {
                    // TODO(misko): can we limit this to duplicates only?
                    record = this._verifyReinsertion(record, item, itemTrackBy, _index5);
                  }

                  if (!Object.is(record.item, item)) this._addIdentityChange(record, item);
                }

                record = record._next;
              }
            } else {
              index = 0;
              iterateListLike(collection, function (item) {
                itemTrackBy = _this76._trackByFn(index, item);

                if (record === null || !Object.is(record.trackById, itemTrackBy)) {
                  record = _this76._mismatch(record, item, itemTrackBy, index);
                  mayBeDirty = true;
                } else {
                  if (mayBeDirty) {
                    // TODO(misko): can we limit this to duplicates only?
                    record = _this76._verifyReinsertion(record, item, itemTrackBy, index);
                  }

                  if (!Object.is(record.item, item)) _this76._addIdentityChange(record, item);
                }

                record = record._next;
                index++;
              });
              this.length = index;
            }

            this._truncate(record);

            this.collection = collection;
            return this.isDirty;
          }
          /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
           * changes.
           */

        }, {
          key: "isDirty",
          get: function get() {
            return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
          }
          /**
           * Reset the state of the change objects to show no changes. This means set previousKey to
           * currentKey, and clear all of the queues (additions, moves, removals).
           * Set the previousIndexes of moved and added items to their currentIndexes
           * Reset the list of additions, moves and removals
           *
           * @internal
           */

        }, {
          key: "_reset",
          value: function _reset() {
            if (this.isDirty) {
              var record;

              for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
                record._nextPrevious = record._next;
              }

              for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                record.previousIndex = record.currentIndex;
              }

              this._additionsHead = this._additionsTail = null;

              for (record = this._movesHead; record !== null; record = record._nextMoved) {
                record.previousIndex = record.currentIndex;
              }

              this._movesHead = this._movesTail = null;
              this._removalsHead = this._removalsTail = null;
              this._identityChangesHead = this._identityChangesTail = null; // TODO(vicb): when assert gets supported
              // assert(!this.isDirty);
            }
          }
          /**
           * This is the core function which handles differences between collections.
           *
           * - `record` is the record which we saw at this position last time. If null then it is a new
           *   item.
           * - `item` is the current item in the collection
           * - `index` is the position of the item in the collection
           *
           * @internal
           */

        }, {
          key: "_mismatch",
          value: function _mismatch(record, item, itemTrackBy, index) {
            // The previous record after which we will append the current one.
            var previousRecord;

            if (record === null) {
              previousRecord = this._itTail;
            } else {
              previousRecord = record._prev; // Remove the record from the collection since we know it does not match the item.

              this._remove(record);
            } // See if we have evicted the item, which used to be at some anterior position of _itHead list.


            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);

            if (record !== null) {
              // It is an item which we have evicted earlier: reinsert it back into the list.
              // But first we need to check if identity changed, so we can update in view if necessary.
              if (!Object.is(record.item, item)) this._addIdentityChange(record, item);

              this._reinsertAfter(record, previousRecord, index);
            } else {
              // Attempt to see if the item is at some posterior position of _itHead list.
              record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);

              if (record !== null) {
                // We have the item in _itHead at/after `index` position. We need to move it forward in the
                // collection.
                // But first we need to check if identity changed, so we can update in view if necessary.
                if (!Object.is(record.item, item)) this._addIdentityChange(record, item);

                this._moveAfter(record, previousRecord, index);
              } else {
                // It is a new item: add it.
                record = this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
              }
            }

            return record;
          }
          /**
           * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
           *
           * Use case: `[a, a]` => `[b, a, a]`
           *
           * If we did not have this check then the insertion of `b` would:
           *   1) evict first `a`
           *   2) insert `b` at `0` index.
           *   3) leave `a` at index `1` as is. <-- this is wrong!
           *   3) reinsert `a` at index 2. <-- this is wrong!
           *
           * The correct behavior is:
           *   1) evict first `a`
           *   2) insert `b` at `0` index.
           *   3) reinsert `a` at index 1.
           *   3) move `a` at from `1` to `2`.
           *
           *
           * Double check that we have not evicted a duplicate item. We need to check if the item type may
           * have already been removed:
           * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
           * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
           * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
           * at the end.
           *
           * @internal
           */

        }, {
          key: "_verifyReinsertion",
          value: function _verifyReinsertion(record, item, itemTrackBy, index) {
            var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);

            if (reinsertRecord !== null) {
              record = this._reinsertAfter(reinsertRecord, record._prev, index);
            } else if (record.currentIndex != index) {
              record.currentIndex = index;

              this._addToMoves(record, index);
            }

            return record;
          }
          /**
           * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection
           *
           * - `record` The first excess {@link IterableChangeRecord_}.
           *
           * @internal
           */

        }, {
          key: "_truncate",
          value: function _truncate(record) {
            // Anything after that needs to be removed;
            while (record !== null) {
              var nextRecord = record._next;

              this._addToRemovals(this._unlink(record));

              record = nextRecord;
            }

            if (this._unlinkedRecords !== null) {
              this._unlinkedRecords.clear();
            }

            if (this._additionsTail !== null) {
              this._additionsTail._nextAdded = null;
            }

            if (this._movesTail !== null) {
              this._movesTail._nextMoved = null;
            }

            if (this._itTail !== null) {
              this._itTail._next = null;
            }

            if (this._removalsTail !== null) {
              this._removalsTail._nextRemoved = null;
            }

            if (this._identityChangesTail !== null) {
              this._identityChangesTail._nextIdentityChange = null;
            }
          }
          /** @internal */

        }, {
          key: "_reinsertAfter",
          value: function _reinsertAfter(record, prevRecord, index) {
            if (this._unlinkedRecords !== null) {
              this._unlinkedRecords.remove(record);
            }

            var prev = record._prevRemoved;
            var next = record._nextRemoved;

            if (prev === null) {
              this._removalsHead = next;
            } else {
              prev._nextRemoved = next;
            }

            if (next === null) {
              this._removalsTail = prev;
            } else {
              next._prevRemoved = prev;
            }

            this._insertAfter(record, prevRecord, index);

            this._addToMoves(record, index);

            return record;
          }
          /** @internal */

        }, {
          key: "_moveAfter",
          value: function _moveAfter(record, prevRecord, index) {
            this._unlink(record);

            this._insertAfter(record, prevRecord, index);

            this._addToMoves(record, index);

            return record;
          }
          /** @internal */

        }, {
          key: "_addAfter",
          value: function _addAfter(record, prevRecord, index) {
            this._insertAfter(record, prevRecord, index);

            if (this._additionsTail === null) {
              // TODO(vicb):
              // assert(this._additionsHead === null);
              this._additionsTail = this._additionsHead = record;
            } else {
              // TODO(vicb):
              // assert(_additionsTail._nextAdded === null);
              // assert(record._nextAdded === null);
              this._additionsTail = this._additionsTail._nextAdded = record;
            }

            return record;
          }
          /** @internal */

        }, {
          key: "_insertAfter",
          value: function _insertAfter(record, prevRecord, index) {
            // TODO(vicb):
            // assert(record != prevRecord);
            // assert(record._next === null);
            // assert(record._prev === null);
            var next = prevRecord === null ? this._itHead : prevRecord._next; // TODO(vicb):
            // assert(next != record);
            // assert(prevRecord != record);

            record._next = next;
            record._prev = prevRecord;

            if (next === null) {
              this._itTail = record;
            } else {
              next._prev = record;
            }

            if (prevRecord === null) {
              this._itHead = record;
            } else {
              prevRecord._next = record;
            }

            if (this._linkedRecords === null) {
              this._linkedRecords = new _DuplicateMap();
            }

            this._linkedRecords.put(record);

            record.currentIndex = index;
            return record;
          }
          /** @internal */

        }, {
          key: "_remove",
          value: function _remove(record) {
            return this._addToRemovals(this._unlink(record));
          }
          /** @internal */

        }, {
          key: "_unlink",
          value: function _unlink(record) {
            if (this._linkedRecords !== null) {
              this._linkedRecords.remove(record);
            }

            var prev = record._prev;
            var next = record._next; // TODO(vicb):
            // assert((record._prev = null) === null);
            // assert((record._next = null) === null);

            if (prev === null) {
              this._itHead = next;
            } else {
              prev._next = next;
            }

            if (next === null) {
              this._itTail = prev;
            } else {
              next._prev = prev;
            }

            return record;
          }
          /** @internal */

        }, {
          key: "_addToMoves",
          value: function _addToMoves(record, toIndex) {
            // TODO(vicb):
            // assert(record._nextMoved === null);
            if (record.previousIndex === toIndex) {
              return record;
            }

            if (this._movesTail === null) {
              // TODO(vicb):
              // assert(_movesHead === null);
              this._movesTail = this._movesHead = record;
            } else {
              // TODO(vicb):
              // assert(_movesTail._nextMoved === null);
              this._movesTail = this._movesTail._nextMoved = record;
            }

            return record;
          }
        }, {
          key: "_addToRemovals",
          value: function _addToRemovals(record) {
            if (this._unlinkedRecords === null) {
              this._unlinkedRecords = new _DuplicateMap();
            }

            this._unlinkedRecords.put(record);

            record.currentIndex = null;
            record._nextRemoved = null;

            if (this._removalsTail === null) {
              // TODO(vicb):
              // assert(_removalsHead === null);
              this._removalsTail = this._removalsHead = record;
              record._prevRemoved = null;
            } else {
              // TODO(vicb):
              // assert(_removalsTail._nextRemoved === null);
              // assert(record._nextRemoved === null);
              record._prevRemoved = this._removalsTail;
              this._removalsTail = this._removalsTail._nextRemoved = record;
            }

            return record;
          }
          /** @internal */

        }, {
          key: "_addIdentityChange",
          value: function _addIdentityChange(record, item) {
            record.item = item;

            if (this._identityChangesTail === null) {
              this._identityChangesTail = this._identityChangesHead = record;
            } else {
              this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
            }

            return record;
          }
        }]);

        return _DefaultIterableDiffer;
      }();

      var IterableChangeRecord_ = function IterableChangeRecord_(item, trackById) {
        _classCallCheck2(this, IterableChangeRecord_);

        this.item = item;
        this.trackById = trackById;
        this.currentIndex = null;
        this.previousIndex = null;
        /** @internal */

        this._nextPrevious = null;
        /** @internal */

        this._prev = null;
        /** @internal */

        this._next = null;
        /** @internal */

        this._prevDup = null;
        /** @internal */

        this._nextDup = null;
        /** @internal */

        this._prevRemoved = null;
        /** @internal */

        this._nextRemoved = null;
        /** @internal */

        this._nextAdded = null;
        /** @internal */

        this._nextMoved = null;
        /** @internal */

        this._nextIdentityChange = null;
      }; // A linked list of IterableChangeRecords with the same IterableChangeRecord_.item


      var _DuplicateItemRecordList = /*#__PURE__*/function () {
        function _DuplicateItemRecordList() {
          _classCallCheck2(this, _DuplicateItemRecordList);

          /** @internal */
          this._head = null;
          /** @internal */

          this._tail = null;
        }
        /**
         * Append the record to the list of duplicates.
         *
         * Note: by design all records in the list of duplicates hold the same value in record.item.
         */


        _createClass2(_DuplicateItemRecordList, [{
          key: "add",
          value: function add(record) {
            if (this._head === null) {
              this._head = this._tail = record;
              record._nextDup = null;
              record._prevDup = null;
            } else {
              // TODO(vicb):
              // assert(record.item ==  _head.item ||
              //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
              this._tail._nextDup = record;
              record._prevDup = this._tail;
              record._nextDup = null;
              this._tail = record;
            }
          } // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and
          // IterableChangeRecord_.currentIndex >= atOrAfterIndex

        }, {
          key: "get",
          value: function get(trackById, atOrAfterIndex) {
            var record;

            for (record = this._head; record !== null; record = record._nextDup) {
              if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) && Object.is(record.trackById, trackById)) {
                return record;
              }
            }

            return null;
          }
          /**
           * Remove one {@link IterableChangeRecord_} from the list of duplicates.
           *
           * Returns whether the list of duplicates is empty.
           */

        }, {
          key: "remove",
          value: function remove(record) {
            // TODO(vicb):
            // assert(() {
            //  // verify that the record being removed is in the list.
            //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
            //    if (identical(cursor, record)) return true;
            //  }
            //  return false;
            //});
            var prev = record._prevDup;
            var next = record._nextDup;

            if (prev === null) {
              this._head = next;
            } else {
              prev._nextDup = next;
            }

            if (next === null) {
              this._tail = prev;
            } else {
              next._prevDup = prev;
            }

            return this._head === null;
          }
        }]);

        return _DuplicateItemRecordList;
      }();

      var _DuplicateMap = /*#__PURE__*/function () {
        function _DuplicateMap() {
          _classCallCheck2(this, _DuplicateMap);

          this.map = new Map();
        }

        _createClass2(_DuplicateMap, [{
          key: "put",
          value: function put(record) {
            var key = record.trackById;
            var duplicates = this.map.get(key);

            if (!duplicates) {
              duplicates = new _DuplicateItemRecordList();
              this.map.set(key, duplicates);
            }

            duplicates.add(record);
          }
          /**
           * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
           * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
           *
           * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
           * have any more `a`s needs to return the second `a`.
           */

        }, {
          key: "get",
          value: function get(trackById, atOrAfterIndex) {
            var key = trackById;
            var recordList = this.map.get(key);
            return recordList ? recordList.get(trackById, atOrAfterIndex) : null;
          }
          /**
           * Removes a {@link IterableChangeRecord_} from the list of duplicates.
           *
           * The list of duplicates also is removed from the map if it gets empty.
           */

        }, {
          key: "remove",
          value: function remove(record) {
            var key = record.trackById;
            var recordList = this.map.get(key); // Remove the list of duplicates when it gets empty

            if (recordList.remove(record)) {
              this.map["delete"](key);
            }

            return record;
          }
        }, {
          key: "isEmpty",
          get: function get() {
            return this.map.size === 0;
          }
        }, {
          key: "clear",
          value: function clear() {
            this.map.clear();
          }
        }]);

        return _DuplicateMap;
      }();

      function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
        var previousIndex = item.previousIndex;
        if (previousIndex === null) return previousIndex;
        var moveOffset = 0;

        if (moveOffsets && previousIndex < moveOffsets.length) {
          moveOffset = moveOffsets[previousIndex];
        }

        return previousIndex + addRemoveOffset + moveOffset;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var DefaultKeyValueDifferFactory = /*#__PURE__*/function () {
        function DefaultKeyValueDifferFactory() {
          _classCallCheck2(this, DefaultKeyValueDifferFactory);
        }

        _createClass2(DefaultKeyValueDifferFactory, [{
          key: "supports",
          value: function supports(obj) {
            return obj instanceof Map || isJsObject(obj);
          }
        }, {
          key: "create",
          value: function create() {
            return new DefaultKeyValueDiffer();
          }
        }]);

        return DefaultKeyValueDifferFactory;
      }();

      var DefaultKeyValueDiffer = /*#__PURE__*/function () {
        function DefaultKeyValueDiffer() {
          _classCallCheck2(this, DefaultKeyValueDiffer);

          this._records = new Map();
          this._mapHead = null; // _appendAfter is used in the check loop

          this._appendAfter = null;
          this._previousMapHead = null;
          this._changesHead = null;
          this._changesTail = null;
          this._additionsHead = null;
          this._additionsTail = null;
          this._removalsHead = null;
          this._removalsTail = null;
        }

        _createClass2(DefaultKeyValueDiffer, [{
          key: "isDirty",
          get: function get() {
            return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
          }
        }, {
          key: "forEachItem",
          value: function forEachItem(fn) {
            var record;

            for (record = this._mapHead; record !== null; record = record._next) {
              fn(record);
            }
          }
        }, {
          key: "forEachPreviousItem",
          value: function forEachPreviousItem(fn) {
            var record;

            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
              fn(record);
            }
          }
        }, {
          key: "forEachChangedItem",
          value: function forEachChangedItem(fn) {
            var record;

            for (record = this._changesHead; record !== null; record = record._nextChanged) {
              fn(record);
            }
          }
        }, {
          key: "forEachAddedItem",
          value: function forEachAddedItem(fn) {
            var record;

            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
              fn(record);
            }
          }
        }, {
          key: "forEachRemovedItem",
          value: function forEachRemovedItem(fn) {
            var record;

            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
              fn(record);
            }
          }
        }, {
          key: "diff",
          value: function diff(map) {
            if (!map) {
              map = new Map();
            } else if (!(map instanceof Map || isJsObject(map))) {
              throw new Error("Error trying to diff '".concat(stringify(map), "'. Only maps and objects are allowed"));
            }

            return this.check(map) ? this : null;
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {}
          /**
           * Check the current state of the map vs the previous.
           * The algorithm is optimised for when the keys do no change.
           */

        }, {
          key: "check",
          value: function check(map) {
            var _this77 = this;

            this._reset();

            var insertBefore = this._mapHead;
            this._appendAfter = null;

            this._forEach(map, function (value, key) {
              if (insertBefore && insertBefore.key === key) {
                _this77._maybeAddToChanges(insertBefore, value);

                _this77._appendAfter = insertBefore;
                insertBefore = insertBefore._next;
              } else {
                var record = _this77._getOrCreateRecordForKey(key, value);

                insertBefore = _this77._insertBeforeOrAppend(insertBefore, record);
              }
            }); // Items remaining at the end of the list have been deleted


            if (insertBefore) {
              if (insertBefore._prev) {
                insertBefore._prev._next = null;
              }

              this._removalsHead = insertBefore;

              for (var record = insertBefore; record !== null; record = record._nextRemoved) {
                if (record === this._mapHead) {
                  this._mapHead = null;
                }

                this._records["delete"](record.key);

                record._nextRemoved = record._next;
                record.previousValue = record.currentValue;
                record.currentValue = null;
                record._prev = null;
                record._next = null;
              }
            } // Make sure tails have no next records from previous runs


            if (this._changesTail) this._changesTail._nextChanged = null;
            if (this._additionsTail) this._additionsTail._nextAdded = null;
            return this.isDirty;
          }
          /**
           * Inserts a record before `before` or append at the end of the list when `before` is null.
           *
           * Notes:
           * - This method appends at `this._appendAfter`,
           * - This method updates `this._appendAfter`,
           * - The return value is the new value for the insertion pointer.
           */

        }, {
          key: "_insertBeforeOrAppend",
          value: function _insertBeforeOrAppend(before, record) {
            if (before) {
              var prev = before._prev;
              record._next = before;
              record._prev = prev;
              before._prev = record;

              if (prev) {
                prev._next = record;
              }

              if (before === this._mapHead) {
                this._mapHead = record;
              }

              this._appendAfter = before;
              return before;
            }

            if (this._appendAfter) {
              this._appendAfter._next = record;
              record._prev = this._appendAfter;
            } else {
              this._mapHead = record;
            }

            this._appendAfter = record;
            return null;
          }
        }, {
          key: "_getOrCreateRecordForKey",
          value: function _getOrCreateRecordForKey(key, value) {
            if (this._records.has(key)) {
              var _record = this._records.get(key);

              this._maybeAddToChanges(_record, value);

              var prev = _record._prev;
              var next = _record._next;

              if (prev) {
                prev._next = next;
              }

              if (next) {
                next._prev = prev;
              }

              _record._next = null;
              _record._prev = null;
              return _record;
            }

            var record = new KeyValueChangeRecord_(key);

            this._records.set(key, record);

            record.currentValue = value;

            this._addToAdditions(record);

            return record;
          }
          /** @internal */

        }, {
          key: "_reset",
          value: function _reset() {
            if (this.isDirty) {
              var record; // let `_previousMapHead` contain the state of the map before the changes

              this._previousMapHead = this._mapHead;

              for (record = this._previousMapHead; record !== null; record = record._next) {
                record._nextPrevious = record._next;
              } // Update `record.previousValue` with the value of the item before the changes
              // We need to update all changed items (that's those which have been added and changed)


              for (record = this._changesHead; record !== null; record = record._nextChanged) {
                record.previousValue = record.currentValue;
              }

              for (record = this._additionsHead; record != null; record = record._nextAdded) {
                record.previousValue = record.currentValue;
              }

              this._changesHead = this._changesTail = null;
              this._additionsHead = this._additionsTail = null;
              this._removalsHead = null;
            }
          } // Add the record or a given key to the list of changes only when the value has actually changed

        }, {
          key: "_maybeAddToChanges",
          value: function _maybeAddToChanges(record, newValue) {
            if (!Object.is(newValue, record.currentValue)) {
              record.previousValue = record.currentValue;
              record.currentValue = newValue;

              this._addToChanges(record);
            }
          }
        }, {
          key: "_addToAdditions",
          value: function _addToAdditions(record) {
            if (this._additionsHead === null) {
              this._additionsHead = this._additionsTail = record;
            } else {
              this._additionsTail._nextAdded = record;
              this._additionsTail = record;
            }
          }
        }, {
          key: "_addToChanges",
          value: function _addToChanges(record) {
            if (this._changesHead === null) {
              this._changesHead = this._changesTail = record;
            } else {
              this._changesTail._nextChanged = record;
              this._changesTail = record;
            }
          }
          /** @internal */

        }, {
          key: "_forEach",
          value: function _forEach(obj, fn) {
            if (obj instanceof Map) {
              obj.forEach(fn);
            } else {
              Object.keys(obj).forEach(function (k) {
                return fn(obj[k], k);
              });
            }
          }
        }]);

        return DefaultKeyValueDiffer;
      }();

      var KeyValueChangeRecord_ = function KeyValueChangeRecord_(key) {
        _classCallCheck2(this, KeyValueChangeRecord_);

        this.key = key;
        this.previousValue = null;
        this.currentValue = null;
        /** @internal */

        this._nextPrevious = null;
        /** @internal */

        this._next = null;
        /** @internal */

        this._prev = null;
        /** @internal */

        this._nextAdded = null;
        /** @internal */

        this._nextRemoved = null;
        /** @internal */

        this._nextChanged = null;
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function defaultIterableDiffersFactory() {
        return new _IterableDiffers([new DefaultIterableDifferFactory()]);
      }
      /**
       * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
       *
       * @publicApi
       */


      var _IterableDiffers = /*#__PURE__*/function () {
        function _IterableDiffers(factories) {
          _classCallCheck2(this, _IterableDiffers);

          this.factories = factories;
        }

        _createClass2(_IterableDiffers, [{
          key: "find",
          value: function find(iterable) {
            var factory = this.factories.find(function (f) {
              return f.supports(iterable);
            });

            if (factory != null) {
              return factory;
            } else {
              throw new Error("Cannot find a differ supporting object '".concat(iterable, "' of type '").concat(getTypeNameForDebugging(iterable), "'"));
            }
          }
        }], [{
          key: "create",
          value: function create(factories, parent) {
            if (parent != null) {
              var copied = parent.factories.slice();
              factories = factories.concat(copied);
            }

            return new _IterableDiffers(factories);
          }
          /**
           * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
           * inherited {@link IterableDiffers} instance with the provided factories and return a new
           * {@link IterableDiffers} instance.
           *
           * @usageNotes
           * ### Example
           *
           * The following example shows how to extend an existing list of factories,
           * which will only be applied to the injector for this component and its children.
           * This step is all that's required to make a new {@link IterableDiffer} available.
           *
           * ```
           * @Component({
           *   viewProviders: [
           *     IterableDiffers.extend([new ImmutableListDiffer()])
           *   ]
           * })
           * ```
           */

        }, {
          key: "extend",
          value: function extend(factories) {
            return {
              provide: _IterableDiffers,
              useFactory: function useFactory(parent) {
                // if parent is null, it means that we are in the root injector and we have just overridden
                // the default injection mechanism for IterableDiffers, in such a case just assume
                // `defaultIterableDiffersFactory`.
                return _IterableDiffers.create(factories, parent || defaultIterableDiffersFactory());
              },
              // Dependency technically isn't optional, but we can provide a better error message this way.
              deps: [[_IterableDiffers, new _SkipSelf(), new _Optional()]]
            };
          }
        }]);

        return _IterableDiffers;
      }();
      /** @nocollapse */


      _IterableDiffers.ɵprov = _ɵɵdefineInjectable({
        token: _IterableDiffers,
        providedIn: 'root',
        factory: defaultIterableDiffersFactory
      });

      function getTypeNameForDebugging(type) {
        return type['name'] || typeof type;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function defaultKeyValueDiffersFactory() {
        return new _KeyValueDiffers([new DefaultKeyValueDifferFactory()]);
      }
      /**
       * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
       *
       * @publicApi
       */


      var _KeyValueDiffers = /*#__PURE__*/function () {
        function _KeyValueDiffers(factories) {
          _classCallCheck2(this, _KeyValueDiffers);

          this.factories = factories;
        }

        _createClass2(_KeyValueDiffers, [{
          key: "find",
          value: function find(kv) {
            var factory = this.factories.find(function (f) {
              return f.supports(kv);
            });

            if (factory) {
              return factory;
            }

            throw new Error("Cannot find a differ supporting object '".concat(kv, "'"));
          }
        }], [{
          key: "create",
          value: function create(factories, parent) {
            if (parent) {
              var copied = parent.factories.slice();
              factories = factories.concat(copied);
            }

            return new _KeyValueDiffers(factories);
          }
          /**
           * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
           * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
           * {@link KeyValueDiffers} instance.
           *
           * @usageNotes
           * ### Example
           *
           * The following example shows how to extend an existing list of factories,
           * which will only be applied to the injector for this component and its children.
           * This step is all that's required to make a new {@link KeyValueDiffer} available.
           *
           * ```
           * @Component({
           *   viewProviders: [
           *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
           *   ]
           * })
           * ```
           */

        }, {
          key: "extend",
          value: function extend(factories) {
            return {
              provide: _KeyValueDiffers,
              useFactory: function useFactory(parent) {
                // if parent is null, it means that we are in the root injector and we have just overridden
                // the default injection mechanism for KeyValueDiffers, in such a case just assume
                // `defaultKeyValueDiffersFactory`.
                return _KeyValueDiffers.create(factories, parent || defaultKeyValueDiffersFactory());
              },
              // Dependency technically isn't optional, but we can provide a better error message this way.
              deps: [[_KeyValueDiffers, new _SkipSelf(), new _Optional()]]
            };
          }
        }]);

        return _KeyValueDiffers;
      }();
      /** @nocollapse */


      _KeyValueDiffers.ɵprov = _ɵɵdefineInjectable({
        token: _KeyValueDiffers,
        providedIn: 'root',
        factory: defaultKeyValueDiffersFactory
      });
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      function collectNativeNodes(tView, lView, tNode, result) {
        var isProjection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

        while (tNode !== null) {
          ngDevMode && assertTNodeType(tNode, 3
          /* AnyRNode */
          | 12
          /* AnyContainer */
          | 16
          /* Projection */
          | 32
          /* Icu */
          );
          var lNode = lView[tNode.index];

          if (lNode !== null) {
            result.push(unwrapRNode(lNode));
          } // A given lNode can represent either a native node or a LContainer (when it is a host of a
          // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes
          // from the views in this container.


          if (isLContainer(lNode)) {
            for (var i = CONTAINER_HEADER_OFFSET; i < lNode.length; i++) {
              var lViewInAContainer = lNode[i];
              var lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;

              if (lViewFirstChildTNode !== null) {
                collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);
              }
            }
          }

          var tNodeType = tNode.type;

          if (tNodeType & 8
          /* ElementContainer */
          ) {
              collectNativeNodes(tView, lView, tNode.child, result);
            } else if (tNodeType & 32
          /* Icu */
          ) {
              var nextRNode = icuContainerIterate(tNode, lView);
              var rNode = void 0;

              while (rNode = nextRNode()) {
                result.push(rNode);
              }
            } else if (tNodeType & 16
          /* Projection */
          ) {
              var nodesInSlot = getProjectionNodes(lView, tNode);

              if (Array.isArray(nodesInSlot)) {
                result.push.apply(result, _toConsumableArray(nodesInSlot));
              } else {
                var parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
                ngDevMode && assertParentView(parentView);
                collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);
              }
            }

          tNode = isProjection ? tNode.projectionNext : tNode.next;
        }

        return result;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ViewRef = /*#__PURE__*/function () {
        function ViewRef(
        /**
         * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.
         *
         * When ViewRef is created for a dynamic component, this also represents the `LView` for the
         * component.
         *
         * For a "regular" ViewRef created for an embedded view, this is the `LView` for the embedded
         * view.
         *
         * @internal
         */
        _lView,
        /**
         * This represents the `LView` associated with the point where `ChangeDetectorRef` was
         * requested.
         *
         * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.
         */
        _cdRefInjectingView) {
          _classCallCheck2(this, ViewRef);

          this._lView = _lView;
          this._cdRefInjectingView = _cdRefInjectingView;
          this._appRef = null;
          this._attachedToViewContainer = false;
        }

        _createClass2(ViewRef, [{
          key: "rootNodes",
          get: function get() {
            var lView = this._lView;
            var tView = lView[TVIEW];
            return collectNativeNodes(tView, lView, tView.firstChild, []);
          }
        }, {
          key: "context",
          get: function get() {
            return this._lView[CONTEXT];
          },
          set: function set(value) {
            this._lView[CONTEXT] = value;
          }
        }, {
          key: "destroyed",
          get: function get() {
            return (this._lView[FLAGS] & 256
            /* Destroyed */
            ) === 256
            /* Destroyed */
            ;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (this._appRef) {
              this._appRef.detachView(this);
            } else if (this._attachedToViewContainer) {
              var parent = this._lView[PARENT];

              if (isLContainer(parent)) {
                var viewRefs = parent[VIEW_REFS];
                var index = viewRefs ? viewRefs.indexOf(this) : -1;

                if (index > -1) {
                  ngDevMode && assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, 'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.');
                  detachView(parent, index);
                  removeFromArray(viewRefs, index);
                }
              }

              this._attachedToViewContainer = false;
            }

            destroyLView(this._lView[TVIEW], this._lView);
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(callback) {
            storeCleanupWithContext(this._lView[TVIEW], this._lView, null, callback);
          }
          /**
           * Marks a view and all of its ancestors dirty.
           *
           * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is
           * checked when it needs to be re-rendered but the two normal triggers haven't marked it
           * dirty (i.e. inputs haven't changed and events haven't fired in the view).
           *
           * <!-- TODO: Add a link to a chapter on OnPush components -->
           *
           * @usageNotes
           * ### Example
           *
           * ```typescript
           * @Component({
           *   selector: 'app-root',
           *   template: `Number of ticks: {{numberOfTicks}}`
           *   changeDetection: ChangeDetectionStrategy.OnPush,
           * })
           * class AppComponent {
           *   numberOfTicks = 0;
           *
           *   constructor(private ref: ChangeDetectorRef) {
           *     setInterval(() => {
           *       this.numberOfTicks++;
           *       // the following is required, otherwise the view will not be updated
           *       this.ref.markForCheck();
           *     }, 1000);
           *   }
           * }
           * ```
           */

        }, {
          key: "markForCheck",
          value: function markForCheck() {
            markViewDirty(this._cdRefInjectingView || this._lView);
          }
          /**
           * Detaches the view from the change detection tree.
           *
           * Detached views will not be checked during change detection runs until they are
           * re-attached, even if they are dirty. `detach` can be used in combination with
           * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change
           * detection checks.
           *
           * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
           * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
           *
           * @usageNotes
           * ### Example
           *
           * The following example defines a component with a large list of readonly data.
           * Imagine the data changes constantly, many times per second. For performance reasons,
           * we want to check and update the list every five seconds. We can do that by detaching
           * the component's change detector and doing a local check every five seconds.
           *
           * ```typescript
           * class DataProvider {
           *   // in a real application the returned data will be different every time
           *   get data() {
           *     return [1,2,3,4,5];
           *   }
           * }
           *
           * @Component({
           *   selector: 'giant-list',
           *   template: `
           *     <li *ngFor="let d of dataProvider.data">Data {{d}}</li>
           *   `,
           * })
           * class GiantList {
           *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {
           *     ref.detach();
           *     setInterval(() => {
           *       this.ref.detectChanges();
           *     }, 5000);
           *   }
           * }
           *
           * @Component({
           *   selector: 'app',
           *   providers: [DataProvider],
           *   template: `
           *     <giant-list><giant-list>
           *   `,
           * })
           * class App {
           * }
           * ```
           */

        }, {
          key: "detach",
          value: function detach() {
            this._lView[FLAGS] &= ~128
            /* Attached */
            ;
          }
          /**
           * Re-attaches a view to the change detection tree.
           *
           * This can be used to re-attach views that were previously detached from the tree
           * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.
           *
           * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
           *
           * @usageNotes
           * ### Example
           *
           * The following example creates a component displaying `live` data. The component will detach
           * its change detector from the main change detector tree when the component's live property
           * is set to false.
           *
           * ```typescript
           * class DataProvider {
           *   data = 1;
           *
           *   constructor() {
           *     setInterval(() => {
           *       this.data = this.data * 2;
           *     }, 500);
           *   }
           * }
           *
           * @Component({
           *   selector: 'live-data',
           *   inputs: ['live'],
           *   template: 'Data: {{dataProvider.data}}'
           * })
           * class LiveData {
           *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}
           *
           *   set live(value) {
           *     if (value) {
           *       this.ref.reattach();
           *     } else {
           *       this.ref.detach();
           *     }
           *   }
           * }
           *
           * @Component({
           *   selector: 'app-root',
           *   providers: [DataProvider],
           *   template: `
           *     Live Update: <input type="checkbox" [(ngModel)]="live">
           *     <live-data [live]="live"><live-data>
           *   `,
           * })
           * class AppComponent {
           *   live = true;
           * }
           * ```
           */

        }, {
          key: "reattach",
          value: function reattach() {
            this._lView[FLAGS] |= 128
            /* Attached */
            ;
          }
          /**
           * Checks the view and its children.
           *
           * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement
           * local change detection checks.
           *
           * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
           * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
           *
           * @usageNotes
           * ### Example
           *
           * The following example defines a component with a large list of readonly data.
           * Imagine, the data changes constantly, many times per second. For performance reasons,
           * we want to check and update the list every five seconds.
           *
           * We can do that by detaching the component's change detector and doing a local change detection
           * check every five seconds.
           *
           * See {@link ChangeDetectorRef#detach detach} for more information.
           */

        }, {
          key: "detectChanges",
          value: function detectChanges() {
            detectChangesInternal(this._lView[TVIEW], this._lView, this.context);
          }
          /**
           * Checks the change detector and its children, and throws if any changes are detected.
           *
           * This is used in development mode to verify that running change detection doesn't
           * introduce other changes.
           */

        }, {
          key: "checkNoChanges",
          value: function checkNoChanges() {
            checkNoChangesInternal(this._lView[TVIEW], this._lView, this.context);
          }
        }, {
          key: "attachToViewContainerRef",
          value: function attachToViewContainerRef() {
            if (this._appRef) {
              throw new Error('This view is already attached directly to the ApplicationRef!');
            }

            this._attachedToViewContainer = true;
          }
        }, {
          key: "detachFromAppRef",
          value: function detachFromAppRef() {
            this._appRef = null;
            renderDetachView(this._lView[TVIEW], this._lView);
          }
        }, {
          key: "attachToAppRef",
          value: function attachToAppRef(appRef) {
            if (this._attachedToViewContainer) {
              throw new Error('This view is already attached to a ViewContainer!');
            }

            this._appRef = appRef;
          }
        }]);

        return ViewRef;
      }();
      /** @internal */


      var RootViewRef = /*#__PURE__*/function (_ViewRef) {
        _inherits(RootViewRef, _ViewRef);

        var _super15 = _createSuper(RootViewRef);

        function RootViewRef(_view) {
          var _this78;

          _classCallCheck2(this, RootViewRef);

          _this78 = _super15.call(this, _view);
          _this78._view = _view;
          return _this78;
        }

        _createClass2(RootViewRef, [{
          key: "detectChanges",
          value: function detectChanges() {
            detectChangesInRootView(this._view);
          }
        }, {
          key: "checkNoChanges",
          value: function checkNoChanges() {
            checkNoChangesInRootView(this._view);
          }
        }, {
          key: "context",
          get: function get() {
            return null;
          }
        }]);

        return RootViewRef;
      }(ViewRef);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = injectChangeDetectorRef;
      var SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = noop;
      var SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__;
      /**
       * Base class that provides change detection functionality.
       * A change-detection tree collects all views that are to be checked for changes.
       * Use the methods to add and remove views from the tree, initiate change-detection,
       * and explicitly mark views as _dirty_, meaning that they have changed and need to be re-rendered.
       *
       * @see [Using change detection hooks](guide/lifecycle-hooks#using-change-detection-hooks)
       * @see [Defining custom change detection](guide/lifecycle-hooks#defining-custom-change-detection)
       *
       * @usageNotes
       *
       * The following examples demonstrate how to modify default change-detection behavior
       * to perform explicit detection when needed.
       *
       * ### Use `markForCheck()` with `CheckOnce` strategy
       *
       * The following example sets the `OnPush` change-detection strategy for a component
       * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check
       * after an interval. See [live demo](https://plnkr.co/edit/GC512b?p=preview).
       *
       * <code-example path="core/ts/change_detect/change-detection.ts"
       * region="mark-for-check"></code-example>
       *
       * ### Detach change detector to limit how often check occurs
       *
       * The following example defines a component with a large list of read-only data
       * that is expected to change constantly, many times per second.
       * To improve performance, we want to check and update the list
       * less often than the changes actually occur. To do that, we detach
       * the component's change detector and perform an explicit local check every five seconds.
       *
       * <code-example path="core/ts/change_detect/change-detection.ts" region="detach"></code-example>
       *
       *
       * ### Reattaching a detached component
       *
       * The following example creates a component displaying live data.
       * The component detaches its change detector from the main change detector tree
       * when the `live` property is set to false, and reattaches it when the property
       * becomes true.
       *
       * <code-example path="core/ts/change_detect/change-detection.ts" region="reattach"></code-example>
       *
       * @publicApi
       */

      var _ChangeDetectorRef = function _ChangeDetectorRef() {
        _classCallCheck2(this, _ChangeDetectorRef);
      };
      /**
       * @internal
       * @nocollapse
       */


      _ChangeDetectorRef.__NG_ELEMENT_ID__ = SWITCH_CHANGE_DETECTOR_REF_FACTORY;
      /** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */

      function injectChangeDetectorRef(flags) {
        return createViewRef(getCurrentTNode(), getLView(), (flags & 16
        /* ForPipe */
        ) === 16
        /* ForPipe */
        );
      }
      /**
       * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).
       *
       * @param tNode The node that is requesting a ChangeDetectorRef
       * @param lView The view to which the node belongs
       * @param isPipe Whether the view is being injected into a pipe.
       * @returns The ChangeDetectorRef to use
       */


      function createViewRef(tNode, lView, isPipe) {
        if (isComponentHost(tNode) && !isPipe) {
          // The LView represents the location where the component is declared.
          // Instead we want the LView for the component View and so we need to look it up.
          var componentView = getComponentLViewByIndex(tNode.index, lView); // look down

          return new ViewRef(componentView, componentView);
        } else if (tNode.type & (3
        /* AnyRNode */
        | 12
        /* AnyContainer */
        | 32
        /* Icu */
        )) {
          // The LView represents the location where the injection is requested from.
          // We need to locate the containing LView (in case where the `lView` is an embedded view)
          var hostComponentView = lView[DECLARATION_COMPONENT_VIEW]; // look up

          return new ViewRef(hostComponentView, lView);
        }

        return null;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Structural diffing for `Object`s and `Map`s.
       */


      var keyValDiff = [new DefaultKeyValueDifferFactory()];
      /**
       * Structural diffing for `Iterable` types such as `Array`s.
       */

      var iterableDiff = [new DefaultIterableDifferFactory()];
      var defaultIterableDiffers = new _IterableDiffers(iterableDiff);
      var defaultKeyValueDiffers = new _KeyValueDiffers(keyValDiff);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = injectTemplateRef;
      var SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop;
      var SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__POST_R3__;
      /**
       * Represents an embedded template that can be used to instantiate embedded views.
       * To instantiate embedded views based on a template, use the `ViewContainerRef`
       * method `createEmbeddedView()`.
       *
       * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`
       * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view
       * is injected into the constructor of the directive,
       * using the `TemplateRef` token.
       *
       * You can also use a `Query` to find a `TemplateRef` associated with
       * a component or a directive.
       *
       * @see `ViewContainerRef`
       * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)
       *
       * @publicApi
       */

      var _TemplateRef = function _TemplateRef() {
        _classCallCheck2(this, _TemplateRef);
      };
      /**
       * @internal
       * @nocollapse
       */


      _TemplateRef.__NG_ELEMENT_ID__ = SWITCH_TEMPLATE_REF_FACTORY;
      var ViewEngineTemplateRef = _TemplateRef;

      var R3TemplateRef = /*#__PURE__*/function (_ViewEngineTemplateRe) {
        _inherits(TemplateRef, _ViewEngineTemplateRe);

        var _super16 = _createSuper(TemplateRef);

        function TemplateRef(_declarationLView, _declarationTContainer, elementRef) {
          var _this79;

          _classCallCheck2(this, TemplateRef);

          _this79 = _super16.call(this);
          _this79._declarationLView = _declarationLView;
          _this79._declarationTContainer = _declarationTContainer;
          _this79.elementRef = elementRef;
          return _this79;
        }

        _createClass2(TemplateRef, [{
          key: "createEmbeddedView",
          value: function createEmbeddedView(context) {
            var embeddedTView = this._declarationTContainer.tViews;
            var embeddedLView = createLView(this._declarationLView, embeddedTView, context, 16
            /* CheckAlways */
            , null, embeddedTView.declTNode, null, null, null, null);
            var declarationLContainer = this._declarationLView[this._declarationTContainer.index];
            ngDevMode && assertLContainer(declarationLContainer);
            embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;
            var declarationViewLQueries = this._declarationLView[QUERIES];

            if (declarationViewLQueries !== null) {
              embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);
            }

            renderView(embeddedTView, embeddedLView, context);
            return new ViewRef(embeddedLView);
          }
        }]);

        return TemplateRef;
      }(ViewEngineTemplateRef);
      /**
       * Creates a TemplateRef given a node.
       *
       * @returns The TemplateRef instance to use
       */


      function injectTemplateRef() {
        return createTemplateRef(getCurrentTNode(), getLView());
      }
      /**
       * Creates a TemplateRef and stores it on the injector.
       *
       * @param hostTNode The node on which a TemplateRef is requested
       * @param hostLView The `LView` to which the node belongs
       * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type
       */


      function createTemplateRef(hostTNode, hostLView) {
        if (hostTNode.type & 4
        /* Container */
        ) {
            ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');
            return new R3TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));
          }

        return null;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Represents an instance of an `NgModule` created by an `NgModuleFactory`.
       * Provides access to the `NgModule` instance and related objects.
       *
       * @publicApi
       */


      var _NgModuleRef = function _NgModuleRef() {
        _classCallCheck2(this, _NgModuleRef);
      };
      /**
       * @publicApi
       */


      var _NgModuleFactory = function _NgModuleFactory() {
        _classCallCheck2(this, _NgModuleFactory);
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = injectViewContainerRef;
      var SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop;
      var SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__;
      /**
       * Represents a container where one or more views can be attached to a component.
       *
       * Can contain *host views* (created by instantiating a
       * component with the `createComponent()` method), and *embedded views*
       * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).
       *
       * A view container instance can contain other view containers,
       * creating a [view hierarchy](guide/glossary#view-tree).
       *
       * @see `ComponentRef`
       * @see `EmbeddedViewRef`
       *
       * @publicApi
       */

      var _ViewContainerRef = function _ViewContainerRef() {
        _classCallCheck2(this, _ViewContainerRef);
      };
      /**
       * @internal
       * @nocollapse
       */


      _ViewContainerRef.__NG_ELEMENT_ID__ = SWITCH_VIEW_CONTAINER_REF_FACTORY;
      /**
       * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef
       * already exists, retrieves the existing ViewContainerRef.
       *
       * @returns The ViewContainerRef instance to use
       */

      function injectViewContainerRef() {
        var previousTNode = getCurrentTNode();
        return createContainerRef(previousTNode, getLView());
      }

      var VE_ViewContainerRef = _ViewContainerRef;

      var R3ViewContainerRef = /*#__PURE__*/function (_VE_ViewContainerRef) {
        _inherits(ViewContainerRef, _VE_ViewContainerRef);

        var _super17 = _createSuper(ViewContainerRef);

        function ViewContainerRef(_lContainer, _hostTNode, _hostLView) {
          var _this80;

          _classCallCheck2(this, ViewContainerRef);

          _this80 = _super17.call(this);
          _this80._lContainer = _lContainer;
          _this80._hostTNode = _hostTNode;
          _this80._hostLView = _hostLView;
          return _this80;
        }

        _createClass2(ViewContainerRef, [{
          key: "element",
          get: function get() {
            return createElementRef(this._hostTNode, this._hostLView);
          }
        }, {
          key: "injector",
          get: function get() {
            return new NodeInjector(this._hostTNode, this._hostLView);
          }
          /** @deprecated No replacement */

        }, {
          key: "parentInjector",
          get: function get() {
            var parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);

            if (hasParentInjector(parentLocation)) {
              var parentView = getParentInjectorView(parentLocation, this._hostLView);
              var injectorIndex = getParentInjectorIndex(parentLocation);
              ngDevMode && assertNodeInjector(parentView, injectorIndex);
              var parentTNode = parentView[TVIEW].data[injectorIndex + 8
              /* TNODE */
              ];
              return new NodeInjector(parentTNode, parentView);
            } else {
              return new NodeInjector(null, this._hostLView);
            }
          }
        }, {
          key: "clear",
          value: function clear() {
            while (this.length > 0) {
              this.remove(this.length - 1);
            }
          }
        }, {
          key: "get",
          value: function get(index) {
            var viewRefs = getViewRefs(this._lContainer);
            return viewRefs !== null && viewRefs[index] || null;
          }
        }, {
          key: "length",
          get: function get() {
            return this._lContainer.length - CONTAINER_HEADER_OFFSET;
          }
        }, {
          key: "createEmbeddedView",
          value: function createEmbeddedView(templateRef, context, index) {
            var viewRef = templateRef.createEmbeddedView(context || {});
            this.insert(viewRef, index);
            return viewRef;
          }
        }, {
          key: "createComponent",
          value: function createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {
            var contextInjector = injector || this.parentInjector;

            if (!ngModuleRef && componentFactory.ngModule == null && contextInjector) {
              // DO NOT REFACTOR. The code here used to have a `value || undefined` expression
              // which seems to cause internal google apps to fail. This is documented in the
              // following internal bug issue: go/b/142967802
              var result = contextInjector.get(_NgModuleRef, null);

              if (result) {
                ngModuleRef = result;
              }
            }

            var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
            this.insert(componentRef.hostView, index);
            return componentRef;
          }
        }, {
          key: "insert",
          value: function insert(viewRef, index) {
            var lView = viewRef._lView;
            var tView = lView[TVIEW];

            if (ngDevMode && viewRef.destroyed) {
              throw new Error('Cannot insert a destroyed View in a ViewContainer!');
            }

            if (viewAttachedToContainer(lView)) {
              // If view is already attached, detach it first so we clean up references appropriately.
              var prevIdx = this.indexOf(viewRef); // A view might be attached either to this or a different container. The `prevIdx` for
              // those cases will be:
              // equal to -1 for views attached to this ViewContainerRef
              // >= 0 for views attached to a different ViewContainerRef

              if (prevIdx !== -1) {
                this.detach(prevIdx);
              } else {
                var prevLContainer = lView[PARENT];
                ngDevMode && assertEqual(isLContainer(prevLContainer), true, 'An attached view should have its PARENT point to a container.'); // We need to re-create a R3ViewContainerRef instance since those are not stored on
                // LView (nor anywhere else).

                var prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);
                prevVCRef.detach(prevVCRef.indexOf(viewRef));
              }
            } // Logical operation of adding `LView` to `LContainer`


            var adjustedIdx = this._adjustIndex(index);

            var lContainer = this._lContainer;
            insertView(tView, lView, lContainer, adjustedIdx); // Physical operation of adding the DOM nodes.

            var beforeNode = getBeforeNodeForView(adjustedIdx, lContainer);
            var renderer = lView[RENDERER];
            var parentRNode = nativeParentNode(renderer, lContainer[NATIVE]);

            if (parentRNode !== null) {
              addViewToContainer(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);
            }

            viewRef.attachToViewContainerRef();
            addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);
            return viewRef;
          }
        }, {
          key: "move",
          value: function move(viewRef, newIndex) {
            if (ngDevMode && viewRef.destroyed) {
              throw new Error('Cannot move a destroyed View in a ViewContainer!');
            }

            return this.insert(viewRef, newIndex);
          }
        }, {
          key: "indexOf",
          value: function indexOf(viewRef) {
            var viewRefsArr = getViewRefs(this._lContainer);
            return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;
          }
        }, {
          key: "remove",
          value: function remove(index) {
            var adjustedIdx = this._adjustIndex(index, -1);

            var detachedView = detachView(this._lContainer, adjustedIdx);

            if (detachedView) {
              // Before destroying the view, remove it from the container's array of `ViewRef`s.
              // This ensures the view container length is updated before calling
              // `destroyLView`, which could recursively call view container methods that
              // rely on an accurate container length.
              // (e.g. a method on this view container being called by a child directive's OnDestroy
              // lifecycle hook)
              removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);
              destroyLView(detachedView[TVIEW], detachedView);
            }
          }
        }, {
          key: "detach",
          value: function detach(index) {
            var adjustedIdx = this._adjustIndex(index, -1);

            var view = detachView(this._lContainer, adjustedIdx);
            var wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;
            return wasDetached ? new ViewRef(view) : null;
          }
        }, {
          key: "_adjustIndex",
          value: function _adjustIndex(index) {
            var shift = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            if (index == null) {
              return this.length + shift;
            }

            if (ngDevMode) {
              assertGreaterThan(index, -1, "ViewRef index must be positive, got ".concat(index)); // +1 because it's legal to insert at the end.

              assertLessThan(index, this.length + 1 + shift, 'index');
            }

            return index;
          }
        }]);

        return ViewContainerRef;
      }(VE_ViewContainerRef);

      function getViewRefs(lContainer) {
        return lContainer[VIEW_REFS];
      }

      function getOrCreateViewRefs(lContainer) {
        return lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []);
      }
      /**
       * Creates a ViewContainerRef and stores it on the injector.
       *
       * @param ViewContainerRefToken The ViewContainerRef type
       * @param ElementRefToken The ElementRef type
       * @param hostTNode The node that is requesting a ViewContainerRef
       * @param hostLView The view to which the node belongs
       * @returns The ViewContainerRef instance to use
       */


      function createContainerRef(hostTNode, hostLView) {
        ngDevMode && assertTNodeType(hostTNode, 12
        /* AnyContainer */
        | 3
        /* AnyRNode */
        );
        var lContainer;
        var slotValue = hostLView[hostTNode.index];

        if (isLContainer(slotValue)) {
          // If the host is a container, we don't need to create a new LContainer
          lContainer = slotValue;
        } else {
          var commentNode; // If the host is an element container, the native host element is guaranteed to be a
          // comment and we can reuse that comment as anchor element for the new LContainer.
          // The comment node in question is already part of the DOM structure so we don't need to append
          // it again.

          if (hostTNode.type & 8
          /* ElementContainer */
          ) {
              commentNode = unwrapRNode(slotValue);
            } else {
            // If the host is a regular element, we have to insert a comment node manually which will
            // be used as an anchor when inserting elements. In this specific case we use low-level DOM
            // manipulation to insert it.
            var renderer = hostLView[RENDERER];
            ngDevMode && ngDevMode.rendererCreateComment++;
            commentNode = renderer.createComment(ngDevMode ? 'container' : '');
            var hostNative = getNativeByTNode(hostTNode, hostLView);
            var parentOfHostNative = nativeParentNode(renderer, hostNative);
            nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative), false);
          }

          hostLView[hostTNode.index] = lContainer = createLContainer(slotValue, hostLView, commentNode, hostTNode);
          addToViewTree(hostLView, lContainer);
        }

        return new R3ViewContainerRef(lContainer, hostTNode, hostLView);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {
        var msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '".concat(oldValue, "'. Current value: '").concat(currValue, "'.");

        if (isFirstCheck) {
          msg += " It seems like the view has been created after its parent and its children have been dirty checked." + " Has it been created in a change detection hook ?";
        }

        return viewDebugError(msg, context);
      }

      function viewWrappedDebugError(err, context) {
        if (!(err instanceof Error)) {
          // errors that are not Error instances don't have a stack,
          // so it is ok to wrap them into a new Error object...
          err = new Error(err.toString());
        }

        _addDebugContext(err, context);

        return err;
      }

      function viewDebugError(msg, context) {
        var err = new Error(msg);

        _addDebugContext(err, context);

        return err;
      }

      function _addDebugContext(err, context) {
        err[ERROR_DEBUG_CONTEXT] = context;
        err[ERROR_LOGGER] = context.logError.bind(context);
      }

      function isViewDebugError(err) {
        return !!getDebugContext(err);
      }

      function viewDestroyedError(action) {
        return new Error("ViewDestroyedError: Attempt to use a destroyed view: ".concat(action));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Called before each cycle of a view's check to detect whether this is in the
      // initState for which we need to call ngOnInit, ngAfterContentInit or ngAfterViewInit
      // lifecycle methods. Returns true if this check cycle should call lifecycle
      // methods.


      function shiftInitState(view, priorInitState, newInitState) {
        // Only update the InitState if we are currently in the prior state.
        // For example, only move into CallingInit if we are in BeforeInit. Only
        // move into CallingContentInit if we are in CallingInit. Normally this will
        // always be true because of how checkCycle is called in checkAndUpdateView.
        // However, if checkAndUpdateView is called recursively or if an exception is
        // thrown while checkAndUpdateView is running, checkAndUpdateView starts over
        // from the beginning. This ensures the state is monotonically increasing,
        // terminating in the AfterInit state, which ensures the Init methods are called
        // at least once and only once.
        var state = view.state;
        var initState = state & 1792
        /* InitState_Mask */
        ;

        if (initState === priorInitState) {
          view.state = state & ~1792
          /* InitState_Mask */
          | newInitState;
          view.initIndex = -1;
          return true;
        }

        return initState === newInitState;
      } // Returns true if the lifecycle init method should be called for the node with
      // the given init index.


      function shouldCallLifecycleInitHook(view, initState, index) {
        if ((view.state & 1792
        /* InitState_Mask */
        ) === initState && view.initIndex <= index) {
          view.initIndex = index + 1;
          return true;
        }

        return false;
      }
      /**
       * Node instance data.
       *
       * We have a separate type per NodeType to save memory
       * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)
       *
       * To keep our code monomorphic,
       * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).
       * This way, no usage site can get a `NodeData` from view.nodes and then use it for different
       * purposes.
       */


      var NodeData = function NodeData() {
        _classCallCheck2(this, NodeData);
      };
      /**
       * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
       */


      function asTextData(view, index) {
        return view.nodes[index];
      }
      /**
       * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
       */


      function asElementData(view, index) {
        return view.nodes[index];
      }
      /**
       * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
       */


      function asProviderData(view, index) {
        return view.nodes[index];
      }
      /**
       * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
       */


      function asPureExpressionData(view, index) {
        return view.nodes[index];
      }
      /**
       * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
       */


      function asQueryList(view, index) {
        return view.nodes[index];
      }

      var DebugContext = function DebugContext() {
        _classCallCheck2(this, DebugContext);
      };
      /**
       * This object is used to prevent cycles in the source files and to have a place where
       * debug mode can hook it. It is lazily filled when `isDevMode` is known.
       */


      var Services = {
        setCurrentNode: undefined,
        createRootView: undefined,
        createEmbeddedView: undefined,
        createComponentView: undefined,
        createNgModuleRef: undefined,
        overrideProvider: undefined,
        overrideComponentView: undefined,
        clearOverrides: undefined,
        checkAndUpdateView: undefined,
        checkNoChangesView: undefined,
        destroyView: undefined,
        resolveDep: undefined,
        createDebugContext: undefined,
        handleEvent: undefined,
        updateDirectives: undefined,
        updateRenderer: undefined,
        dirtyParentQueries: undefined
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var NOOP = function NOOP() {};

      var _tokenKeyCache = new Map();

      function tokenKey(token) {
        var key = _tokenKeyCache.get(token);

        if (!key) {
          key = stringify(token) + '_' + _tokenKeyCache.size;

          _tokenKeyCache.set(token, key);
        }

        return key;
      }

      function unwrapValue(view, nodeIdx, bindingIdx, value) {
        if (_WrappedValue.isWrapped(value)) {
          value = _WrappedValue.unwrap(value);
          var globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;

          var oldValue = _WrappedValue.unwrap(view.oldValues[globalBindingIdx]);

          view.oldValues[globalBindingIdx] = new _WrappedValue(oldValue);
        }

        return value;
      }

      var UNDEFINED_RENDERER_TYPE_ID = '$$undefined';
      var EMPTY_RENDERER_TYPE_ID = '$$empty'; // Attention: this function is called as top level function.
      // Putting any logic in here will destroy closure tree shaking!

      function createRendererType2(values) {
        return {
          id: UNDEFINED_RENDERER_TYPE_ID,
          styles: values.styles,
          encapsulation: values.encapsulation,
          data: values.data
        };
      }

      var _renderCompCount$1 = 0;

      function resolveRendererType2(type) {
        if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {
          // first time we see this RendererType2. Initialize it...
          var isFilled = type.encapsulation != null && type.encapsulation !== _ViewEncapsulation.None || type.styles.length || Object.keys(type.data).length;

          if (isFilled) {
            type.id = "c".concat(_renderCompCount$1++);
          } else {
            type.id = EMPTY_RENDERER_TYPE_ID;
          }
        }

        if (type && type.id === EMPTY_RENDERER_TYPE_ID) {
          type = null;
        }

        return type || null;
      }

      function checkBinding(view, def, bindingIdx, value) {
        var oldValues = view.oldValues;

        if (view.state & 2
        /* FirstCheck */
        || !Object.is(oldValues[def.bindingIndex + bindingIdx], value)) {
          return true;
        }

        return false;
      }

      function checkAndUpdateBinding(view, def, bindingIdx, value) {
        if (checkBinding(view, def, bindingIdx, value)) {
          view.oldValues[def.bindingIndex + bindingIdx] = value;
          return true;
        }

        return false;
      }

      function checkBindingNoChanges(view, def, bindingIdx, value) {
        var oldValue = view.oldValues[def.bindingIndex + bindingIdx];

        if (view.state & 1
        /* BeforeFirstCheck */
        || !devModeEqual(oldValue, value)) {
          var bindingName = def.bindings[bindingIdx].name;
          throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), "".concat(bindingName, ": ").concat(oldValue), "".concat(bindingName, ": ").concat(value), (view.state & 1
          /* BeforeFirstCheck */
          ) !== 0);
        }
      }

      function markParentViewsForCheck(view) {
        var currView = view;

        while (currView) {
          if (currView.def.flags & 2
          /* OnPush */
          ) {
              currView.state |= 8
              /* ChecksEnabled */
              ;
            }

          currView = currView.viewContainerParent || currView.parent;
        }
      }

      function markParentViewsForCheckProjectedViews(view, endView) {
        var currView = view;

        while (currView && currView !== endView) {
          currView.state |= 64
          /* CheckProjectedViews */
          ;
          currView = currView.viewContainerParent || currView.parent;
        }
      }

      function dispatchEvent(view, nodeIndex, eventName, event) {
        try {
          var nodeDef = view.def.nodes[nodeIndex];
          var startView = nodeDef.flags & 33554432
          /* ComponentView */
          ? asElementData(view, nodeIndex).componentView : view;
          markParentViewsForCheck(startView);
          return Services.handleEvent(view, nodeIndex, eventName, event);
        } catch (e) {
          // Attention: Don't rethrow, as it would cancel Observable subscriptions!
          view.root.errorHandler.handleError(e);
        }
      }

      function declaredViewContainer(view) {
        if (view.parent) {
          var parentView = view.parent;
          return asElementData(parentView, view.parentNodeDef.nodeIndex);
        }

        return null;
      }
      /**
       * for component views, this is the host element.
       * for embedded views, this is the index of the parent node
       * that contains the view container.
       */


      function viewParentEl(view) {
        var parentView = view.parent;

        if (parentView) {
          return view.parentNodeDef.parent;
        } else {
          return null;
        }
      }

      function renderNode(view, def) {
        switch (def.flags & 201347067
        /* Types */
        ) {
          case 1
          /* TypeElement */
          :
            return asElementData(view, def.nodeIndex).renderElement;

          case 2
          /* TypeText */
          :
            return asTextData(view, def.nodeIndex).renderText;
        }
      }

      function elementEventFullName(target, name) {
        return target ? "".concat(target, ":").concat(name) : name;
      }

      function isComponentView(view) {
        return !!view.parent && !!(view.parentNodeDef.flags & 32768
        /* Component */
        );
      }

      function isEmbeddedView(view) {
        return !!view.parent && !(view.parentNodeDef.flags & 32768
        /* Component */
        );
      }

      function filterQueryId(queryId) {
        return 1 << queryId % 32;
      }

      function splitMatchedQueriesDsl(matchedQueriesDsl) {
        var matchedQueries = {};
        var matchedQueryIds = 0;
        var references = {};

        if (matchedQueriesDsl) {
          matchedQueriesDsl.forEach(function (_ref4) {
            var _ref5 = _slicedToArray(_ref4, 2),
                queryId = _ref5[0],
                valueType = _ref5[1];

            if (typeof queryId === 'number') {
              matchedQueries[queryId] = valueType;
              matchedQueryIds |= filterQueryId(queryId);
            } else {
              references[queryId] = valueType;
            }
          });
        }

        return {
          matchedQueries: matchedQueries,
          references: references,
          matchedQueryIds: matchedQueryIds
        };
      }

      function splitDepsDsl(deps, sourceName) {
        return deps.map(function (value) {
          var token;
          var flags;

          if (Array.isArray(value)) {
            var _value3 = _slicedToArray(value, 2);

            flags = _value3[0];
            token = _value3[1];
          } else {
            flags = 0
            /* None */
            ;
            token = value;
          }

          if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {
            Object.defineProperty(token, SOURCE, {
              value: sourceName,
              configurable: true
            });
          }

          return {
            flags: flags,
            token: token,
            tokenKey: tokenKey(token)
          };
        });
      }

      function getParentRenderElement(view, renderHost, def) {
        var renderParent = def.renderParent;

        if (renderParent) {
          if ((renderParent.flags & 1
          /* TypeElement */
          ) === 0 || (renderParent.flags & 33554432
          /* ComponentView */
          ) === 0 || renderParent.element.componentRendererType && (renderParent.element.componentRendererType.encapsulation === _ViewEncapsulation.ShadowDom || // TODO(FW-2290): remove the `encapsulation === 1` fallback logic in v12.
          renderParent.element.componentRendererType.encapsulation === 1)) {
            // only children of non components, or children of components with native encapsulation should
            // be attached.
            return asElementData(view, def.renderParent.nodeIndex).renderElement;
          }
        } else {
          return renderHost;
        }
      }

      var DEFINITION_CACHE = new WeakMap();

      function resolveDefinition(factory) {
        var value = DEFINITION_CACHE.get(factory);

        if (!value) {
          value = factory(function () {
            return NOOP;
          });
          value.factory = factory;
          DEFINITION_CACHE.set(factory, value);
        }

        return value;
      }

      function rootRenderNodes(view) {
        var renderNodes = [];
        visitRootRenderNodes(view, 0
        /* Collect */
        , undefined, undefined, renderNodes);
        return renderNodes;
      }

      function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {
        // We need to re-compute the parent node in case the nodes have been moved around manually
        if (action === 3
        /* RemoveChild */
        ) {
            parentNode = view.renderer.parentNode(renderNode(view, view.def.lastRenderRootNode));
          }

        visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);
      }

      function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {
        for (var i = startIndex; i <= endIndex; i++) {
          var nodeDef = view.def.nodes[i];

          if (nodeDef.flags & (1
          /* TypeElement */
          | 2
          /* TypeText */
          | 8
          /* TypeNgContent */
          )) {
            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);
          } // jump to next sibling


          i += nodeDef.childCount;
        }
      }

      function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {
        var compView = view;

        while (compView && !isComponentView(compView)) {
          compView = compView.parent;
        }

        var hostView = compView.parent;
        var hostElDef = viewParentEl(compView);
        var startIndex = hostElDef.nodeIndex + 1;
        var endIndex = hostElDef.nodeIndex + hostElDef.childCount;

        for (var i = startIndex; i <= endIndex; i++) {
          var nodeDef = hostView.def.nodes[i];

          if (nodeDef.ngContentIndex === ngContentIndex) {
            visitRenderNode(hostView, nodeDef, action, parentNode, nextSibling, target);
          } // jump to next sibling


          i += nodeDef.childCount;
        }

        if (!hostView.parent) {
          // a root view
          var projectedNodes = view.root.projectableNodes[ngContentIndex];

          if (projectedNodes) {
            for (var _i15 = 0; _i15 < projectedNodes.length; _i15++) {
              execRenderNodeAction(view, projectedNodes[_i15], action, parentNode, nextSibling, target);
            }
          }
        }
      }

      function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {
        if (nodeDef.flags & 8
        /* TypeNgContent */
        ) {
            visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);
          } else {
          var rn = renderNode(view, nodeDef);

          if (action === 3
          /* RemoveChild */
          && nodeDef.flags & 33554432
          /* ComponentView */
          && nodeDef.bindingFlags & 48
          /* CatSyntheticProperty */
          ) {
            // Note: we might need to do both actions.
            if (nodeDef.bindingFlags & 16
            /* SyntheticProperty */
            ) {
              execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
            }

            if (nodeDef.bindingFlags & 32
            /* SyntheticHostProperty */
            ) {
              var compView = asElementData(view, nodeDef.nodeIndex).componentView;
              execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);
            }
          } else {
            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
          }

          if (nodeDef.flags & 16777216
          /* EmbeddedViews */
          ) {
              var embeddedViews = asElementData(view, nodeDef.nodeIndex).viewContainer._embeddedViews;

              for (var k = 0; k < embeddedViews.length; k++) {
                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);
              }
            }

          if (nodeDef.flags & 1
          /* TypeElement */
          && !nodeDef.element.name) {
            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);
          }
        }
      }

      function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {
        var renderer = view.renderer;

        switch (action) {
          case 1
          /* AppendChild */
          :
            renderer.appendChild(parentNode, renderNode);
            break;

          case 2
          /* InsertBefore */
          :
            renderer.insertBefore(parentNode, renderNode, nextSibling);
            break;

          case 3
          /* RemoveChild */
          :
            renderer.removeChild(parentNode, renderNode);
            break;

          case 0
          /* Collect */
          :
            target.push(renderNode);
            break;
        }
      }

      var NS_PREFIX_RE = /^:([^:]+):(.+)$/;

      function splitNamespace(name) {
        if (name[0] === ':') {
          var match = name.match(NS_PREFIX_RE);
          return [match[1], match[2]];
        }

        return ['', name];
      }

      function calcBindingFlags(bindings) {
        var flags = 0;

        for (var i = 0; i < bindings.length; i++) {
          flags |= bindings[i].flags;
        }

        return flags;
      }

      function interpolate(valueCount, constAndInterp) {
        var result = '';

        for (var i = 0; i < valueCount * 2; i = i + 2) {
          result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
        }

        return result + constAndInterp[valueCount * 2];
      }

      function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
        switch (valueCount) {
          case 1:
            return c0 + _toStringWithNull(a1) + c1;

          case 2:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;

          case 3:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;

          case 4:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;

          case 5:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;

          case 6:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;

          case 7:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;

          case 8:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;

          case 9:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;

          default:
            throw new Error("Does not support more than 9 expressions");
        }
      }

      function _toStringWithNull(v) {
        return v != null ? v.toString() : '';
      }

      var EMPTY_MAP = {};
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var UNDEFINED_VALUE = {};
      var InjectorRefTokenKey = tokenKey(_Injector);
      var INJECTORRefTokenKey = tokenKey(INJECTOR$1);
      var NgModuleRefTokenKey = tokenKey(_NgModuleRef);

      function moduleProvideDef(flags, token, value, deps) {
        // Need to resolve forwardRefs as e.g. for `useValue` we
        // lowered the expression and then stopped evaluating it,
        // i.e. also didn't unwrap it.
        value = _resolveForwardRef(value);
        var depDefs = splitDepsDsl(deps, stringify(token));
        return {
          // will bet set by the module definition
          index: -1,
          deps: depDefs,
          flags: flags,
          token: token,
          value: value
        };
      }

      function moduleDef(providers) {
        var providersByKey = {};
        var modules = [];
        var scope = null;

        for (var i = 0; i < providers.length; i++) {
          var provider = providers[i];

          if (provider.token === INJECTOR_SCOPE) {
            scope = provider.value;
          }

          if (provider.flags & 1073741824
          /* TypeNgModule */
          ) {
              modules.push(provider.token);
            }

          provider.index = i;
          providersByKey[tokenKey(provider.token)] = provider;
        }

        return {
          // Will be filled later...
          factory: null,
          providersByKey: providersByKey,
          providers: providers,
          modules: modules,
          scope: scope
        };
      }

      function initNgModule(data) {
        var def = data._def;
        var providers = data._providers = newArray(def.providers.length);

        for (var i = 0; i < def.providers.length; i++) {
          var provDef = def.providers[i];

          if (!(provDef.flags & 4096
          /* LazyProvider */
          )) {
            // Make sure the provider has not been already initialized outside this loop.
            if (providers[i] === undefined) {
              providers[i] = _createProviderInstance(data, provDef);
            }
          }
        }
      }

      function resolveNgModuleDep(data, depDef) {
        var notFoundValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Injector.THROW_IF_NOT_FOUND;
        var former = setCurrentInjector(data);

        try {
          if (depDef.flags & 8
          /* Value */
          ) {
              return depDef.token;
            }

          if (depDef.flags & 2
          /* Optional */
          ) {
              notFoundValue = null;
            }

          if (depDef.flags & 1
          /* SkipSelf */
          ) {
              return data._parent.get(depDef.token, notFoundValue);
            }

          var _tokenKey = depDef.tokenKey;

          switch (_tokenKey) {
            case InjectorRefTokenKey:
            case INJECTORRefTokenKey:
            case NgModuleRefTokenKey:
              return data;
          }

          var _providerDef = data._def.providersByKey[_tokenKey];
          var injectableDef;

          if (_providerDef) {
            var providerInstance = data._providers[_providerDef.index];

            if (providerInstance === undefined) {
              providerInstance = data._providers[_providerDef.index] = _createProviderInstance(data, _providerDef);
            }

            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;
          } else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {
            var index = data._providers.length;
            data._def.providers[index] = data._def.providersByKey[depDef.tokenKey] = {
              flags: 1024
              /* TypeFactoryProvider */
              | 4096
              /* LazyProvider */
              ,
              value: injectableDef.factory,
              deps: [],
              index: index,
              token: depDef.token
            };
            data._providers[index] = UNDEFINED_VALUE;
            return data._providers[index] = _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]);
          } else if (depDef.flags & 4
          /* Self */
          ) {
              return notFoundValue;
            }

          return data._parent.get(depDef.token, notFoundValue);
        } finally {
          setCurrentInjector(former);
        }
      }

      function moduleTransitivelyPresent(ngModule, scope) {
        return ngModule._def.modules.indexOf(scope) > -1;
      }

      function targetsModule(ngModule, def) {
        var providedIn = _resolveForwardRef(def.providedIn);

        return providedIn != null && (providedIn === 'any' || providedIn === ngModule._def.scope || moduleTransitivelyPresent(ngModule, providedIn));
      }

      function _createProviderInstance(ngModule, providerDef) {
        var injectable;

        switch (providerDef.flags & 201347067
        /* Types */
        ) {
          case 512
          /* TypeClassProvider */
          :
            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);
            break;

          case 1024
          /* TypeFactoryProvider */
          :
            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);
            break;

          case 2048
          /* TypeUseExistingProvider */
          :
            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);
            break;

          case 256
          /* TypeValueProvider */
          :
            injectable = providerDef.value;
            break;
        } // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be
        // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be
        // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already
        // set (ngOnDestroy was detected statically).


        if (injectable !== UNDEFINED_VALUE && injectable !== null && typeof injectable === 'object' && !(providerDef.flags & 131072
        /* OnDestroy */
        ) && typeof injectable.ngOnDestroy === 'function') {
          providerDef.flags |= 131072
          /* OnDestroy */
          ;
        }

        return injectable === undefined ? UNDEFINED_VALUE : injectable;
      }

      function _createClass(ngModule, ctor, deps) {
        var len = deps.length;

        switch (len) {
          case 0:
            return new ctor();

          case 1:
            return new ctor(resolveNgModuleDep(ngModule, deps[0]));

          case 2:
            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));

          case 3:
            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));

          default:
            var depValues = [];

            for (var i = 0; i < len; i++) {
              depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
            }

            return _construct(ctor, depValues);
        }
      }

      function _callFactory(ngModule, factory, deps) {
        var len = deps.length;

        switch (len) {
          case 0:
            return factory();

          case 1:
            return factory(resolveNgModuleDep(ngModule, deps[0]));

          case 2:
            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));

          case 3:
            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));

          default:
            var depValues = [];

            for (var i = 0; i < len; i++) {
              depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
            }

            return factory.apply(void 0, depValues);
        }
      }

      function callNgModuleLifecycle(ngModule, lifecycles) {
        var def = ngModule._def;
        var destroyed = new Set();

        for (var i = 0; i < def.providers.length; i++) {
          var provDef = def.providers[i];

          if (provDef.flags & 131072
          /* OnDestroy */
          ) {
              var instance = ngModule._providers[i];

              if (instance && instance !== UNDEFINED_VALUE) {
                var onDestroy = instance.ngOnDestroy;

                if (typeof onDestroy === 'function' && !destroyed.has(instance)) {
                  onDestroy.apply(instance);
                  destroyed.add(instance);
                }
              }
            }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function attachEmbeddedView(parentView, elementData, viewIndex, view) {
        var embeddedViews = elementData.viewContainer._embeddedViews;

        if (viewIndex === null || viewIndex === undefined) {
          viewIndex = embeddedViews.length;
        }

        view.viewContainerParent = parentView;
        addToArray(embeddedViews, viewIndex, view);
        attachProjectedView(elementData, view);
        Services.dirtyParentQueries(view);
        var prevView = viewIndex > 0 ? embeddedViews[viewIndex - 1] : null;
        renderAttachEmbeddedView(elementData, prevView, view);
      }

      function attachProjectedView(vcElementData, view) {
        var dvcElementData = declaredViewContainer(view);

        if (!dvcElementData || dvcElementData === vcElementData || view.state & 16
        /* IsProjectedView */
        ) {
            return;
          } // Note: For performance reasons, we
        // - add a view to template._projectedViews only 1x throughout its lifetime,
        //   and remove it not until the view is destroyed.
        //   (hard, as when a parent view is attached/detached we would need to attach/detach all
        //    nested projected views as well, even across component boundaries).
        // - don't track the insertion order of views in the projected views array
        //   (hard, as when the views of the same template are inserted different view containers)


        view.state |= 16
        /* IsProjectedView */
        ;
        var projectedViews = dvcElementData.template._projectedViews;

        if (!projectedViews) {
          projectedViews = dvcElementData.template._projectedViews = [];
        }

        projectedViews.push(view); // Note: we are changing the NodeDef here as we cannot calculate
        // the fact whether a template is used for projection during compilation.

        markNodeAsProjectedTemplate(view.parent.def, view.parentNodeDef);
      }

      function markNodeAsProjectedTemplate(viewDef, nodeDef) {
        if (nodeDef.flags & 4
        /* ProjectedTemplate */
        ) {
            return;
          }

        viewDef.nodeFlags |= 4
        /* ProjectedTemplate */
        ;
        nodeDef.flags |= 4
        /* ProjectedTemplate */
        ;
        var parentNodeDef = nodeDef.parent;

        while (parentNodeDef) {
          parentNodeDef.childFlags |= 4
          /* ProjectedTemplate */
          ;
          parentNodeDef = parentNodeDef.parent;
        }
      }

      function detachEmbeddedView(elementData, viewIndex) {
        var embeddedViews = elementData.viewContainer._embeddedViews;

        if (viewIndex == null || viewIndex >= embeddedViews.length) {
          viewIndex = embeddedViews.length - 1;
        }

        if (viewIndex < 0) {
          return null;
        }

        var view = embeddedViews[viewIndex];
        view.viewContainerParent = null;
        removeFromArray(embeddedViews, viewIndex); // See attachProjectedView for why we don't update projectedViews here.

        Services.dirtyParentQueries(view);
        renderDetachView$1(view);
        return view;
      }

      function detachProjectedView(view) {
        if (!(view.state & 16
        /* IsProjectedView */
        )) {
          return;
        }

        var dvcElementData = declaredViewContainer(view);

        if (dvcElementData) {
          var projectedViews = dvcElementData.template._projectedViews;

          if (projectedViews) {
            removeFromArray(projectedViews, projectedViews.indexOf(view));
            Services.dirtyParentQueries(view);
          }
        }
      }

      function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {
        var embeddedViews = elementData.viewContainer._embeddedViews;
        var view = embeddedViews[oldViewIndex];
        removeFromArray(embeddedViews, oldViewIndex);

        if (newViewIndex == null) {
          newViewIndex = embeddedViews.length;
        }

        addToArray(embeddedViews, newViewIndex, view); // Note: Don't need to change projectedViews as the order in there
        // as always invalid...

        Services.dirtyParentQueries(view);
        renderDetachView$1(view);
        var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;
        renderAttachEmbeddedView(elementData, prevView, view);
        return view;
      }

      function renderAttachEmbeddedView(elementData, prevView, view) {
        var prevRenderNode = prevView ? renderNode(prevView, prevView.def.lastRenderRootNode) : elementData.renderElement;
        var parentNode = view.renderer.parentNode(prevRenderNode);
        var nextSibling = view.renderer.nextSibling(prevRenderNode); // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!
        // However, browsers automatically do `appendChild` when there is no `nextSibling`.

        visitRootRenderNodes(view, 2
        /* InsertBefore */
        , parentNode, nextSibling, undefined);
      }

      function renderDetachView$1(view) {
        visitRootRenderNodes(view, 3
        /* RemoveChild */
        , null, null, undefined);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var EMPTY_CONTEXT = {}; // Attention: this function is called as top level function.
      // Putting any logic in here will destroy closure tree shaking!

      function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {
        return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);
      }

      function getComponentViewDefinitionFactory(componentFactory) {
        return componentFactory.viewDefFactory;
      }

      var ComponentFactory_ = /*#__PURE__*/function (_ComponentFactory3) {
        _inherits(ComponentFactory_, _ComponentFactory3);

        var _super18 = _createSuper(ComponentFactory_);

        function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {
          var _this81;

          _classCallCheck2(this, ComponentFactory_);

          // Attention: this ctor is called as top level function.
          // Putting any logic in here will destroy closure tree shaking!
          _this81 = _super18.call(this);
          _this81.selector = selector;
          _this81.componentType = componentType;
          _this81._inputs = _inputs;
          _this81._outputs = _outputs;
          _this81.ngContentSelectors = ngContentSelectors;
          _this81.viewDefFactory = viewDefFactory;
          return _this81;
        }

        _createClass2(ComponentFactory_, [{
          key: "inputs",
          get: function get() {
            var inputsArr = [];
            var inputs = this._inputs;

            for (var propName in inputs) {
              var templateName = inputs[propName];
              inputsArr.push({
                propName: propName,
                templateName: templateName
              });
            }

            return inputsArr;
          }
        }, {
          key: "outputs",
          get: function get() {
            var outputsArr = [];

            for (var propName in this._outputs) {
              var templateName = this._outputs[propName];
              outputsArr.push({
                propName: propName,
                templateName: templateName
              });
            }

            return outputsArr;
          }
          /**
           * Creates a new component.
           */

        }, {
          key: "create",
          value: function create(injector, projectableNodes, rootSelectorOrNode, ngModule) {
            if (!ngModule) {
              throw new Error('ngModule should be provided');
            }

            var viewDef = resolveDefinition(this.viewDefFactory);
            var componentNodeIndex = viewDef.nodes[0].element.componentProvider.nodeIndex;
            var view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);
            var component = asProviderData(view, componentNodeIndex).instance;

            if (rootSelectorOrNode) {
              view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', _VERSION2.full);
            }

            return new ComponentRef_(view, new ViewRef_(view), component);
          }
        }]);

        return ComponentFactory_;
      }(_ComponentFactory);

      var ComponentRef_ = /*#__PURE__*/function (_ComponentRef2) {
        _inherits(ComponentRef_, _ComponentRef2);

        var _super19 = _createSuper(ComponentRef_);

        function ComponentRef_(_view, _viewRef, _component) {
          var _this82;

          _classCallCheck2(this, ComponentRef_);

          _this82 = _super19.call(this);
          _this82._view = _view;
          _this82._viewRef = _viewRef;
          _this82._component = _component;
          _this82._elDef = _this82._view.def.nodes[0];
          _this82.hostView = _viewRef;
          _this82.changeDetectorRef = _viewRef;
          _this82.instance = _component;
          return _this82;
        }

        _createClass2(ComponentRef_, [{
          key: "location",
          get: function get() {
            return new _ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);
          }
        }, {
          key: "injector",
          get: function get() {
            return new Injector_(this._view, this._elDef);
          }
        }, {
          key: "componentType",
          get: function get() {
            return this._component.constructor;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this._viewRef.destroy();
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(callback) {
            this._viewRef.onDestroy(callback);
          }
        }]);

        return ComponentRef_;
      }(_ComponentRef);

      function createViewContainerData(view, elDef, elData) {
        return new ViewContainerRef_(view, elDef, elData);
      }

      var ViewContainerRef_ = /*#__PURE__*/function () {
        function ViewContainerRef_(_view, _elDef, _data) {
          _classCallCheck2(this, ViewContainerRef_);

          this._view = _view;
          this._elDef = _elDef;
          this._data = _data;
          /**
           * @internal
           */

          this._embeddedViews = [];
        }

        _createClass2(ViewContainerRef_, [{
          key: "element",
          get: function get() {
            return new _ElementRef(this._data.renderElement);
          }
        }, {
          key: "injector",
          get: function get() {
            return new Injector_(this._view, this._elDef);
          }
          /** @deprecated No replacement */

        }, {
          key: "parentInjector",
          get: function get() {
            var view = this._view;
            var elDef = this._elDef.parent;

            while (!elDef && view) {
              elDef = viewParentEl(view);
              view = view.parent;
            }

            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);
          }
        }, {
          key: "clear",
          value: function clear() {
            var len = this._embeddedViews.length;

            for (var i = len - 1; i >= 0; i--) {
              var view = detachEmbeddedView(this._data, i);
              Services.destroyView(view);
            }
          }
        }, {
          key: "get",
          value: function get(index) {
            var view = this._embeddedViews[index];

            if (view) {
              var ref = new ViewRef_(view);
              ref.attachToViewContainerRef(this);
              return ref;
            }

            return null;
          }
        }, {
          key: "length",
          get: function get() {
            return this._embeddedViews.length;
          }
        }, {
          key: "createEmbeddedView",
          value: function createEmbeddedView(templateRef, context, index) {
            var viewRef = templateRef.createEmbeddedView(context || {});
            this.insert(viewRef, index);
            return viewRef;
          }
        }, {
          key: "createComponent",
          value: function createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {
            var contextInjector = injector || this.parentInjector;

            if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {
              ngModuleRef = contextInjector.get(_NgModuleRef);
            }

            var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
            this.insert(componentRef.hostView, index);
            return componentRef;
          }
        }, {
          key: "insert",
          value: function insert(viewRef, index) {
            if (viewRef.destroyed) {
              throw new Error('Cannot insert a destroyed View in a ViewContainer!');
            }

            var viewRef_ = viewRef;
            var viewData = viewRef_._view;
            attachEmbeddedView(this._view, this._data, index, viewData);
            viewRef_.attachToViewContainerRef(this);
            return viewRef;
          }
        }, {
          key: "move",
          value: function move(viewRef, currentIndex) {
            if (viewRef.destroyed) {
              throw new Error('Cannot move a destroyed View in a ViewContainer!');
            }

            var previousIndex = this._embeddedViews.indexOf(viewRef._view);

            moveEmbeddedView(this._data, previousIndex, currentIndex);
            return viewRef;
          }
        }, {
          key: "indexOf",
          value: function indexOf(viewRef) {
            return this._embeddedViews.indexOf(viewRef._view);
          }
        }, {
          key: "remove",
          value: function remove(index) {
            var viewData = detachEmbeddedView(this._data, index);

            if (viewData) {
              Services.destroyView(viewData);
            }
          }
        }, {
          key: "detach",
          value: function detach(index) {
            var view = detachEmbeddedView(this._data, index);
            return view ? new ViewRef_(view) : null;
          }
        }]);

        return ViewContainerRef_;
      }();

      function createChangeDetectorRef(view) {
        return new ViewRef_(view);
      }

      var ViewRef_ = /*#__PURE__*/function () {
        function ViewRef_(_view) {
          _classCallCheck2(this, ViewRef_);

          this._view = _view;
          this._viewContainerRef = null;
          this._appRef = null;
        }

        _createClass2(ViewRef_, [{
          key: "rootNodes",
          get: function get() {
            return rootRenderNodes(this._view);
          }
        }, {
          key: "context",
          get: function get() {
            return this._view.context;
          },
          set: function set(value) {
            this._view.context = value;
          }
        }, {
          key: "destroyed",
          get: function get() {
            return (this._view.state & 128
            /* Destroyed */
            ) !== 0;
          }
        }, {
          key: "markForCheck",
          value: function markForCheck() {
            markParentViewsForCheck(this._view);
          }
        }, {
          key: "detach",
          value: function detach() {
            this._view.state &= ~4
            /* Attached */
            ;
          }
        }, {
          key: "detectChanges",
          value: function detectChanges() {
            var fs = this._view.root.rendererFactory;

            if (fs.begin) {
              fs.begin();
            }

            try {
              Services.checkAndUpdateView(this._view);
            } finally {
              if (fs.end) {
                fs.end();
              }
            }
          }
        }, {
          key: "checkNoChanges",
          value: function checkNoChanges() {
            Services.checkNoChangesView(this._view);
          }
        }, {
          key: "reattach",
          value: function reattach() {
            this._view.state |= 4
            /* Attached */
            ;
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(callback) {
            if (!this._view.disposables) {
              this._view.disposables = [];
            }

            this._view.disposables.push(callback);
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (this._appRef) {
              this._appRef.detachView(this);
            } else if (this._viewContainerRef) {
              this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));
            }

            Services.destroyView(this._view);
          }
        }, {
          key: "detachFromAppRef",
          value: function detachFromAppRef() {
            this._appRef = null;
            renderDetachView$1(this._view);
            Services.dirtyParentQueries(this._view);
          }
        }, {
          key: "attachToAppRef",
          value: function attachToAppRef(appRef) {
            if (this._viewContainerRef) {
              throw new Error('This view is already attached to a ViewContainer!');
            }

            this._appRef = appRef;
          }
        }, {
          key: "attachToViewContainerRef",
          value: function attachToViewContainerRef(vcRef) {
            if (this._appRef) {
              throw new Error('This view is already attached directly to the ApplicationRef!');
            }

            this._viewContainerRef = vcRef;
          }
        }]);

        return ViewRef_;
      }();

      function createTemplateData(view, def) {
        return new TemplateRef_(view, def);
      }

      var TemplateRef_ = /*#__PURE__*/function (_TemplateRef2) {
        _inherits(TemplateRef_, _TemplateRef2);

        var _super20 = _createSuper(TemplateRef_);

        function TemplateRef_(_parentView, _def) {
          var _this83;

          _classCallCheck2(this, TemplateRef_);

          _this83 = _super20.call(this);
          _this83._parentView = _parentView;
          _this83._def = _def;
          return _this83;
        }

        _createClass2(TemplateRef_, [{
          key: "createEmbeddedView",
          value: function createEmbeddedView(context) {
            return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, this._def.element.template, context));
          }
        }, {
          key: "elementRef",
          get: function get() {
            return new _ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);
          }
        }]);

        return TemplateRef_;
      }(_TemplateRef);

      function createInjector$1(view, elDef) {
        return new Injector_(view, elDef);
      }

      var Injector_ = /*#__PURE__*/function () {
        function Injector_(view, elDef) {
          _classCallCheck2(this, Injector_);

          this.view = view;
          this.elDef = elDef;
        }

        _createClass2(Injector_, [{
          key: "get",
          value: function get(token) {
            var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Injector.THROW_IF_NOT_FOUND;
            var allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432
            /* ComponentView */
            ) !== 0 : false;
            return Services.resolveDep(this.view, this.elDef, allowPrivateServices, {
              flags: 0
              /* None */
              ,
              token: token,
              tokenKey: tokenKey(token)
            }, notFoundValue);
          }
        }]);

        return Injector_;
      }();

      function nodeValue(view, index) {
        var def = view.def.nodes[index];

        if (def.flags & 1
        /* TypeElement */
        ) {
            var elData = asElementData(view, def.nodeIndex);
            return def.element.template ? elData.template : elData.renderElement;
          } else if (def.flags & 2
        /* TypeText */
        ) {
            return asTextData(view, def.nodeIndex).renderText;
          } else if (def.flags & (20224
        /* CatProvider */
        | 16
        /* TypePipe */
        )) {
          return asProviderData(view, def.nodeIndex).instance;
        }

        throw new Error("Illegal state: read nodeValue for node index ".concat(index));
      }

      function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {
        return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);
      }

      var NgModuleRef_ = /*#__PURE__*/function () {
        function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {
          _classCallCheck2(this, NgModuleRef_);

          this._moduleType = _moduleType;
          this._parent = _parent;
          this._bootstrapComponents = _bootstrapComponents;
          this._def = _def;
          this._destroyListeners = [];
          this._destroyed = false;
          this.injector = this;
          initNgModule(this);
        }

        _createClass2(NgModuleRef_, [{
          key: "get",
          value: function get(token) {
            var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Injector.THROW_IF_NOT_FOUND;
            var injectFlags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _InjectFlags.Default;
            var flags = 0
            /* None */
            ;

            if (injectFlags & _InjectFlags.SkipSelf) {
              flags |= 1
              /* SkipSelf */
              ;
            } else if (injectFlags & _InjectFlags.Self) {
              flags |= 4
              /* Self */
              ;
            }

            return resolveNgModuleDep(this, {
              token: token,
              tokenKey: tokenKey(token),
              flags: flags
            }, notFoundValue);
          }
        }, {
          key: "instance",
          get: function get() {
            return this.get(this._moduleType);
          }
        }, {
          key: "componentFactoryResolver",
          get: function get() {
            return this.get(_ComponentFactoryResolver);
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (this._destroyed) {
              throw new Error("The ng module ".concat(stringify(this.instance.constructor), " has already been destroyed."));
            }

            this._destroyed = true;
            callNgModuleLifecycle(this, 131072
            /* OnDestroy */
            );

            this._destroyListeners.forEach(function (listener) {
              return listener();
            });
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(callback) {
            this._destroyListeners.push(callback);
          }
        }]);

        return NgModuleRef_;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var Renderer2TokenKey = tokenKey(_Renderer);
      var ElementRefTokenKey = tokenKey(_ElementRef);
      var ViewContainerRefTokenKey = tokenKey(_ViewContainerRef);
      var TemplateRefTokenKey = tokenKey(_TemplateRef);
      var ChangeDetectorRefTokenKey = tokenKey(_ChangeDetectorRef);
      var InjectorRefTokenKey$1 = tokenKey(_Injector);
      var INJECTORRefTokenKey$1 = tokenKey(INJECTOR$1);

      function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {
        var bindings = [];

        if (props) {
          for (var prop in props) {
            var _props$prop = _slicedToArray(props[prop], 2),
                bindingIndex = _props$prop[0],
                nonMinifiedName = _props$prop[1];

            bindings[bindingIndex] = {
              flags: 8
              /* TypeProperty */
              ,
              name: prop,
              nonMinifiedName: nonMinifiedName,
              ns: null,
              securityContext: null,
              suffix: null
            };
          }
        }

        var outputDefs = [];

        if (outputs) {
          for (var propName in outputs) {
            outputDefs.push({
              type: 1
              /* DirectiveOutput */
              ,
              propName: propName,
              target: null,
              eventName: outputs[propName]
            });
          }
        }

        flags |= 16384
        /* TypeDirective */
        ;
        return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);
      }

      function pipeDef(flags, ctor, deps) {
        flags |= 16
        /* TypePipe */
        ;
        return _def(-1, flags, null, 0, ctor, ctor, deps);
      }

      function providerDef(flags, matchedQueries, token, value, deps) {
        return _def(-1, flags, matchedQueries, 0, token, value, deps);
      }

      function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {
        var _splitMatchedQueriesD = splitMatchedQueriesDsl(matchedQueriesDsl),
            matchedQueries = _splitMatchedQueriesD.matchedQueries,
            references = _splitMatchedQueriesD.references,
            matchedQueryIds = _splitMatchedQueriesD.matchedQueryIds;

        if (!outputs) {
          outputs = [];
        }

        if (!bindings) {
          bindings = [];
        } // Need to resolve forwardRefs as e.g. for `useValue` we
        // lowered the expression and then stopped evaluating it,
        // i.e. also didn't unwrap it.


        value = _resolveForwardRef(value);
        var depDefs = splitDepsDsl(deps, stringify(token));
        return {
          // will bet set by the view definition
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          // regular values
          checkIndex: checkIndex,
          flags: flags,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: matchedQueries,
          matchedQueryIds: matchedQueryIds,
          references: references,
          ngContentIndex: -1,
          childCount: childCount,
          bindings: bindings,
          bindingFlags: calcBindingFlags(bindings),
          outputs: outputs,
          element: null,
          provider: {
            token: token,
            value: value,
            deps: depDefs
          },
          text: null,
          query: null,
          ngContent: null
        };
      }

      function createProviderInstance(view, def) {
        return _createProviderInstance$1(view, def);
      }

      function createPipeInstance(view, def) {
        // deps are looked up from component.
        var compView = view;

        while (compView.parent && !isComponentView(compView)) {
          compView = compView.parent;
        } // pipes can see the private services of the component


        var allowPrivateServices = true; // pipes are always eager and classes!

        return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);
      }

      function createDirectiveInstance(view, def) {
        // components can see other private services, other directives can't.
        var allowPrivateServices = (def.flags & 32768
        /* Component */
        ) > 0; // directives are always eager and classes!

        var instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);

        if (def.outputs.length) {
          for (var i = 0; i < def.outputs.length; i++) {
            var output = def.outputs[i];
            var outputObservable = instance[output.propName];

            if (isObservable(outputObservable)) {
              var subscription = outputObservable.subscribe(eventHandlerClosure(view, def.parent.nodeIndex, output.eventName));
              view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);
            } else {
              throw new Error("@Output ".concat(output.propName, " not initialized in '").concat(instance.constructor.name, "'."));
            }
          }
        }

        return instance;
      }

      function eventHandlerClosure(view, index, eventName) {
        return function (event) {
          return dispatchEvent(view, index, eventName, event);
        };
      }

      function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var providerData = asProviderData(view, def.nodeIndex);
        var directive = providerData.instance;
        var changed = false;
        var changes = undefined;
        var bindLen = def.bindings.length;

        if (bindLen > 0 && checkBinding(view, def, 0, v0)) {
          changed = true;
          changes = updateProp(view, providerData, def, 0, v0, changes);
        }

        if (bindLen > 1 && checkBinding(view, def, 1, v1)) {
          changed = true;
          changes = updateProp(view, providerData, def, 1, v1, changes);
        }

        if (bindLen > 2 && checkBinding(view, def, 2, v2)) {
          changed = true;
          changes = updateProp(view, providerData, def, 2, v2, changes);
        }

        if (bindLen > 3 && checkBinding(view, def, 3, v3)) {
          changed = true;
          changes = updateProp(view, providerData, def, 3, v3, changes);
        }

        if (bindLen > 4 && checkBinding(view, def, 4, v4)) {
          changed = true;
          changes = updateProp(view, providerData, def, 4, v4, changes);
        }

        if (bindLen > 5 && checkBinding(view, def, 5, v5)) {
          changed = true;
          changes = updateProp(view, providerData, def, 5, v5, changes);
        }

        if (bindLen > 6 && checkBinding(view, def, 6, v6)) {
          changed = true;
          changes = updateProp(view, providerData, def, 6, v6, changes);
        }

        if (bindLen > 7 && checkBinding(view, def, 7, v7)) {
          changed = true;
          changes = updateProp(view, providerData, def, 7, v7, changes);
        }

        if (bindLen > 8 && checkBinding(view, def, 8, v8)) {
          changed = true;
          changes = updateProp(view, providerData, def, 8, v8, changes);
        }

        if (bindLen > 9 && checkBinding(view, def, 9, v9)) {
          changed = true;
          changes = updateProp(view, providerData, def, 9, v9, changes);
        }

        if (changes) {
          directive.ngOnChanges(changes);
        }

        if (def.flags & 65536
        /* OnInit */
        && shouldCallLifecycleInitHook(view, 256
        /* InitState_CallingOnInit */
        , def.nodeIndex)) {
          directive.ngOnInit();
        }

        if (def.flags & 262144
        /* DoCheck */
        ) {
            directive.ngDoCheck();
          }

        return changed;
      }

      function checkAndUpdateDirectiveDynamic(view, def, values) {
        var providerData = asProviderData(view, def.nodeIndex);
        var directive = providerData.instance;
        var changed = false;
        var changes = undefined;

        for (var i = 0; i < values.length; i++) {
          if (checkBinding(view, def, i, values[i])) {
            changed = true;
            changes = updateProp(view, providerData, def, i, values[i], changes);
          }
        }

        if (changes) {
          directive.ngOnChanges(changes);
        }

        if (def.flags & 65536
        /* OnInit */
        && shouldCallLifecycleInitHook(view, 256
        /* InitState_CallingOnInit */
        , def.nodeIndex)) {
          directive.ngOnInit();
        }

        if (def.flags & 262144
        /* DoCheck */
        ) {
            directive.ngDoCheck();
          }

        return changed;
      }

      function _createProviderInstance$1(view, def) {
        // private services can see other private services
        var allowPrivateServices = (def.flags & 8192
        /* PrivateProvider */
        ) > 0;
        var providerDef = def.provider;

        switch (def.flags & 201347067
        /* Types */
        ) {
          case 512
          /* TypeClassProvider */
          :
            return createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);

          case 1024
          /* TypeFactoryProvider */
          :
            return callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);

          case 2048
          /* TypeUseExistingProvider */
          :
            return resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);

          case 256
          /* TypeValueProvider */
          :
            return providerDef.value;
        }
      }

      function createClass(view, elDef, allowPrivateServices, ctor, deps) {
        var len = deps.length;

        switch (len) {
          case 0:
            return new ctor();

          case 1:
            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));

          case 2:
            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));

          case 3:
            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));

          default:
            var depValues = [];

            for (var i = 0; i < len; i++) {
              depValues.push(resolveDep(view, elDef, allowPrivateServices, deps[i]));
            }

            return _construct(ctor, depValues);
        }
      }

      function callFactory(view, elDef, allowPrivateServices, factory, deps) {
        var len = deps.length;

        switch (len) {
          case 0:
            return factory();

          case 1:
            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));

          case 2:
            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));

          case 3:
            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));

          default:
            var depValues = [];

            for (var i = 0; i < len; i++) {
              depValues.push(resolveDep(view, elDef, allowPrivateServices, deps[i]));
            }

            return factory.apply(void 0, depValues);
        }
      } // This default value is when checking the hierarchy for a token.
      //
      // It means both:
      // - the token is not provided by the current injector,
      // - only the element injectors should be checked (ie do not check module injectors
      //
      //          mod1
      //         /
      //       el1   mod2
      //         \  /
      //         el2
      //
      // When requesting el2.injector.get(token), we should check in the following order and return the
      // first found value:
      // - el2.injector.get(token, default)
      // - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module
      // - mod2.injector.get(token, default)


      var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};

      function resolveDep(view, elDef, allowPrivateServices, depDef) {
        var notFoundValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _Injector.THROW_IF_NOT_FOUND;

        if (depDef.flags & 8
        /* Value */
        ) {
            return depDef.token;
          }

        var startView = view;

        if (depDef.flags & 2
        /* Optional */
        ) {
            notFoundValue = null;
          }

        var tokenKey = depDef.tokenKey;

        if (tokenKey === ChangeDetectorRefTokenKey) {
          // directives on the same element as a component should be able to control the change detector
          // of that component as well.
          allowPrivateServices = !!(elDef && elDef.element.componentView);
        }

        if (elDef && depDef.flags & 1
        /* SkipSelf */
        ) {
          allowPrivateServices = false;
          elDef = elDef.parent;
        }

        var searchView = view;

        while (searchView) {
          if (elDef) {
            switch (tokenKey) {
              case Renderer2TokenKey:
                {
                  var compView = findCompView(searchView, elDef, allowPrivateServices);
                  return compView.renderer;
                }

              case ElementRefTokenKey:
                return new _ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);

              case ViewContainerRefTokenKey:
                return asElementData(searchView, elDef.nodeIndex).viewContainer;

              case TemplateRefTokenKey:
                {
                  if (elDef.element.template) {
                    return asElementData(searchView, elDef.nodeIndex).template;
                  }

                  break;
                }

              case ChangeDetectorRefTokenKey:
                {
                  var cdView = findCompView(searchView, elDef, allowPrivateServices);
                  return createChangeDetectorRef(cdView);
                }

              case InjectorRefTokenKey$1:
              case INJECTORRefTokenKey$1:
                return createInjector$1(searchView, elDef);

              default:
                var _providerDef2 = (allowPrivateServices ? elDef.element.allProviders : elDef.element.publicProviders)[tokenKey];

                if (_providerDef2) {
                  var providerData = asProviderData(searchView, _providerDef2.nodeIndex);

                  if (!providerData) {
                    providerData = {
                      instance: _createProviderInstance$1(searchView, _providerDef2)
                    };
                    searchView.nodes[_providerDef2.nodeIndex] = providerData;
                  }

                  return providerData.instance;
                }

            }
          }

          allowPrivateServices = isComponentView(searchView);
          elDef = viewParentEl(searchView);
          searchView = searchView.parent;

          if (depDef.flags & 4
          /* Self */
          ) {
              searchView = null;
            }
        }

        var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);

        if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
          // Return the value from the root element injector when
          // - it provides it
          //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
          // - the module injector should not be checked
          //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
          return value;
        }

        return startView.root.ngModule.injector.get(depDef.token, notFoundValue);
      }

      function findCompView(view, elDef, allowPrivateServices) {
        var compView;

        if (allowPrivateServices) {
          compView = asElementData(view, elDef.nodeIndex).componentView;
        } else {
          compView = view;

          while (compView.parent && !isComponentView(compView)) {
            compView = compView.parent;
          }
        }

        return compView;
      }

      function updateProp(view, providerData, def, bindingIdx, value, changes) {
        if (def.flags & 32768
        /* Component */
        ) {
            var compView = asElementData(view, def.parent.nodeIndex).componentView;

            if (compView.def.flags & 2
            /* OnPush */
            ) {
                compView.state |= 8
                /* ChecksEnabled */
                ;
              }
          }

        var binding = def.bindings[bindingIdx];
        var propName = binding.name; // Note: This is still safe with Closure Compiler as
        // the user passed in the property name as an object has to `providerDef`,
        // so Closure Compiler will have renamed the property correctly already.

        providerData.instance[propName] = value;

        if (def.flags & 524288
        /* OnChanges */
        ) {
            changes = changes || {};

            var oldValue = _WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);

            var _binding = def.bindings[bindingIdx];
            changes[_binding.nonMinifiedName] = new _SimpleChange(oldValue, value, (view.state & 2
            /* FirstCheck */
            ) !== 0);
          }

        view.oldValues[def.bindingIndex + bindingIdx] = value;
        return changes;
      } // This function calls the ngAfterContentCheck, ngAfterContentInit,
      // ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node
      // flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are
      // called during a pre-order traversal of the view tree (that is calling the
      // parent hooks before the child hooks) these events are sent in using a
      // post-order traversal of the tree (children before parents). This changes the
      // meaning of initIndex in the view state. For ngOnInit, initIndex tracks the
      // expected nodeIndex which a ngOnInit should be called. When sending
      // ngAfterContentInit and ngAfterViewInit it is the expected count of
      // ngAfterContentInit or ngAfterViewInit methods that have been called. This
      // ensure that despite being called recursively or after picking up after an
      // exception, the ngAfterContentInit or ngAfterViewInit will be called on the
      // correct nodes. Consider for example, the following (where E is an element
      // and D is a directive)
      //  Tree:       pre-order index  post-order index
      //    E1        0                6
      //      E2      1                1
      //       D3     2                0
      //      E4      3                5
      //       E5     4                4
      //        E6    5                2
      //        E7    6                3
      // As can be seen, the post-order index has an unclear relationship to the
      // pre-order index (postOrderIndex === preOrderIndex - parentCount +
      // childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit
      // are stable (will be the same for the same view regardless of exceptions or
      // recursion) we just need to count them which will roughly correspond to the
      // post-order index (it skips elements and directives that do not have
      // lifecycle hooks).
      //
      // For example, if an exception is raised in the E6.onAfterViewInit() the
      // initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to
      // initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will
      // not have their ngAfterViewInit() called but, starting with E7, the rest of
      // the view will begin getting ngAfterViewInit() called until a check and
      // pass is complete.
      //
      // This algorthim also handles recursion. Consider if E4's ngAfterViewInit()
      // indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected
      // initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.
      // D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.
      // When the recursion returns the initIndex will be 7 so E1 is skipped as it
      // has already been called in the recursively called checkAnUpdateView().


      function callLifecycleHooksChildrenFirst(view, lifecycles) {
        if (!(view.def.nodeFlags & lifecycles)) {
          return;
        }

        var nodes = view.def.nodes;
        var initIndex = 0;

        for (var i = 0; i < nodes.length; i++) {
          var nodeDef = nodes[i];
          var parent = nodeDef.parent;

          if (!parent && nodeDef.flags & lifecycles) {
            // matching root node (e.g. a pipe)
            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);
          }

          if ((nodeDef.childFlags & lifecycles) === 0) {
            // no child matches one of the lifecycles
            i += nodeDef.childCount;
          }

          while (parent && parent.flags & 1
          /* TypeElement */
          && i === parent.nodeIndex + parent.childCount) {
            // last child of an element
            if (parent.directChildFlags & lifecycles) {
              initIndex = callElementProvidersLifecycles(view, parent, lifecycles, initIndex);
            }

            parent = parent.parent;
          }
        }
      }

      function callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {
        for (var i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {
          var nodeDef = view.def.nodes[i];

          if (nodeDef.flags & lifecycles) {
            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);
          } // only visit direct children


          i += nodeDef.childCount;
        }

        return initIndex;
      }

      function callProviderLifecycles(view, index, lifecycles, initIndex) {
        var providerData = asProviderData(view, index);

        if (!providerData) {
          return;
        }

        var provider = providerData.instance;

        if (!provider) {
          return;
        }

        Services.setCurrentNode(view, index);

        if (lifecycles & 1048576
        /* AfterContentInit */
        && shouldCallLifecycleInitHook(view, 512
        /* InitState_CallingAfterContentInit */
        , initIndex)) {
          provider.ngAfterContentInit();
        }

        if (lifecycles & 2097152
        /* AfterContentChecked */
        ) {
            provider.ngAfterContentChecked();
          }

        if (lifecycles & 4194304
        /* AfterViewInit */
        && shouldCallLifecycleInitHook(view, 768
        /* InitState_CallingAfterViewInit */
        , initIndex)) {
          provider.ngAfterViewInit();
        }

        if (lifecycles & 8388608
        /* AfterViewChecked */
        ) {
            provider.ngAfterViewChecked();
          }

        if (lifecycles & 131072
        /* OnDestroy */
        ) {
            provider.ngOnDestroy();
          }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ComponentFactoryResolver$1 = /*#__PURE__*/function (_ComponentFactoryReso) {
        _inherits(ComponentFactoryResolver$1, _ComponentFactoryReso);

        var _super21 = _createSuper(ComponentFactoryResolver$1);

        /**
         * @param ngModule The NgModuleRef to which all resolved factories are bound.
         */
        function ComponentFactoryResolver$1(ngModule) {
          var _this84;

          _classCallCheck2(this, ComponentFactoryResolver$1);

          _this84 = _super21.call(this);
          _this84.ngModule = ngModule;
          return _this84;
        }

        _createClass2(ComponentFactoryResolver$1, [{
          key: "resolveComponentFactory",
          value: function resolveComponentFactory(component) {
            ngDevMode && assertComponentType(component);
            var componentDef = getComponentDef(component);
            return new ComponentFactory$1(componentDef, this.ngModule);
          }
        }]);

        return ComponentFactoryResolver$1;
      }(_ComponentFactoryResolver);

      function toRefArray(map) {
        var array = [];

        for (var nonMinified in map) {
          if (map.hasOwnProperty(nonMinified)) {
            var minified = map[nonMinified];
            array.push({
              propName: minified,
              templateName: nonMinified
            });
          }
        }

        return array;
      }

      function getNamespace$1(elementName) {
        var name = elementName.toLowerCase();
        return name === 'svg' ? SVG_NAMESPACE : name === 'math' ? MATH_ML_NAMESPACE : null;
      }
      /**
       * A change detection scheduler token for {@link RootContext}. This token is the default value used
       * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.
       */


      var SCHEDULER = new _InjectionToken('SCHEDULER_TOKEN', {
        providedIn: 'root',
        factory: function factory() {
          return defaultScheduler;
        }
      });

      function createChainedInjector(rootViewInjector, moduleInjector) {
        return {
          get: function get(token, notFoundValue, flags) {
            var value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);

            if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
              // Return the value from the root element injector when
              // - it provides it
              //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
              // - the module injector should not be checked
              //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
              return value;
            }

            return moduleInjector.get(token, notFoundValue, flags);
          }
        };
      }
      /**
       * Render3 implementation of {@link viewEngine_ComponentFactory}.
       */


      var ComponentFactory$1 = /*#__PURE__*/function (_ComponentFactory4) {
        _inherits(ComponentFactory$1, _ComponentFactory4);

        var _super22 = _createSuper(ComponentFactory$1);

        /**
         * @param componentDef The component definition.
         * @param ngModule The NgModuleRef to which the factory is bound.
         */
        function ComponentFactory$1(componentDef, ngModule) {
          var _this85;

          _classCallCheck2(this, ComponentFactory$1);

          _this85 = _super22.call(this);
          _this85.componentDef = componentDef;
          _this85.ngModule = ngModule;
          _this85.componentType = componentDef.type;
          _this85.selector = stringifyCSSSelectorList(componentDef.selectors);
          _this85.ngContentSelectors = componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];
          _this85.isBoundToModule = !!ngModule;
          return _this85;
        }

        _createClass2(ComponentFactory$1, [{
          key: "inputs",
          get: function get() {
            return toRefArray(this.componentDef.inputs);
          }
        }, {
          key: "outputs",
          get: function get() {
            return toRefArray(this.componentDef.outputs);
          }
        }, {
          key: "create",
          value: function create(injector, projectableNodes, rootSelectorOrNode, ngModule) {
            ngModule = ngModule || this.ngModule;
            var rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;
            var rendererFactory = rootViewInjector.get(_RendererFactory, domRendererFactory3);
            var sanitizer = rootViewInjector.get(_Sanitizer, null);
            var hostRenderer = rendererFactory.createRenderer(null, this.componentDef); // Determine a tag name used for creating host elements when this component is created
            // dynamically. Default to 'div' if this component did not specify any tag name in its selector.

            var elementName = this.componentDef.selectors[0][0] || 'div';
            var hostRNode = rootSelectorOrNode ? locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation) : createElementNode(rendererFactory.createRenderer(null, this.componentDef), elementName, getNamespace$1(elementName));
            var rootFlags = this.componentDef.onPush ? 64
            /* Dirty */
            | 512
            /* IsRoot */
            : 16
            /* CheckAlways */
            | 512
            /* IsRoot */
            ;
            var rootContext = createRootContext(); // Create the root view. Uses empty TView and ContentTemplate.

            var rootTView = createTView(0
            /* Root */
            , null, null, 1, 0, null, null, null, null, null);
            var rootLView = createLView(null, rootTView, rootContext, rootFlags, null, null, rendererFactory, hostRenderer, sanitizer, rootViewInjector); // rootView is the parent when bootstrapping
            // TODO(misko): it looks like we are entering view here but we don't really need to as
            // `renderView` does that. However as the code is written it is needed because
            // `createRootComponentView` and `createRootComponent` both read global state. Fixing those
            // issues would allow us to drop this.

            enterView(rootLView);
            var component;
            var tElementNode;

            try {
              var componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, hostRenderer);

              if (hostRNode) {
                if (rootSelectorOrNode) {
                  setUpAttributes(hostRenderer, hostRNode, ['ng-version', _VERSION2.full]);
                } else {
                  // If host element is created as a part of this function call (i.e. `rootSelectorOrNode`
                  // is not defined), also apply attributes and classes extracted from component selector.
                  // Extract attributes and classes from the first selector only to match VE behavior.
                  var _extractAttrsAndClass = extractAttrsAndClassesFromSelector(this.componentDef.selectors[0]),
                      attrs = _extractAttrsAndClass.attrs,
                      classes = _extractAttrsAndClass.classes;

                  if (attrs) {
                    setUpAttributes(hostRenderer, hostRNode, attrs);
                  }

                  if (classes && classes.length > 0) {
                    writeDirectClass(hostRenderer, hostRNode, classes.join(' '));
                  }
                }
              }

              tElementNode = getTNode(rootTView, HEADER_OFFSET);

              if (projectableNodes !== undefined) {
                var projection = tElementNode.projection = [];

                for (var i = 0; i < this.ngContentSelectors.length; i++) {
                  var nodesforSlot = projectableNodes[i]; // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade
                  // case). Here we do normalize passed data structure to be an array of arrays to avoid
                  // complex checks down the line.
                  // We also normalize the length of the passed in projectable nodes (to match the number of
                  // <ng-container> slots defined by a component).

                  projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);
                }
              } // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and
              // executed here?
              // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref


              component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);
              renderView(rootTView, rootLView, null);
            } finally {
              leaveView();
            }

            return new ComponentRef$1(this.componentType, component, createElementRef(tElementNode, rootLView), rootLView, tElementNode);
          }
        }]);

        return ComponentFactory$1;
      }(_ComponentFactory);

      var componentFactoryResolver = new ComponentFactoryResolver$1();
      /**
       * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the
       * ComponentFactoryResolver
       * already exists, retrieves the existing ComponentFactoryResolver.
       *
       * @returns The ComponentFactoryResolver instance to use
       */

      function injectComponentFactoryResolver() {
        return componentFactoryResolver;
      }
      /**
       * Represents an instance of a Component created via a {@link ComponentFactory}.
       *
       * `ComponentRef` provides access to the Component Instance as well other objects related to this
       * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}
       * method.
       *
       */


      var ComponentRef$1 = /*#__PURE__*/function (_ComponentRef3) {
        _inherits(ComponentRef$1, _ComponentRef3);

        var _super23 = _createSuper(ComponentRef$1);

        function ComponentRef$1(componentType, instance, location, _rootLView, _tNode) {
          var _this86;

          _classCallCheck2(this, ComponentRef$1);

          _this86 = _super23.call(this);
          _this86.location = location;
          _this86._rootLView = _rootLView;
          _this86._tNode = _tNode;
          _this86.instance = instance;
          _this86.hostView = _this86.changeDetectorRef = new RootViewRef(_rootLView);
          _this86.componentType = componentType;
          return _this86;
        }

        _createClass2(ComponentRef$1, [{
          key: "injector",
          get: function get() {
            return new NodeInjector(this._tNode, this._rootLView);
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.hostView.destroy();
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(callback) {
            this.hostView.onDestroy(callback);
          }
        }]);

        return ComponentRef$1;
      }(_ComponentRef);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Adds decorator, constructor, and property metadata to a given type via static metadata fields
       * on the type.
       *
       * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.
       *
       * Calls to `setClassMetadata` can be guarded by ngDevMode, resulting in the metadata assignments
       * being tree-shaken away during production builds.
       */


      function setClassMetadata(type, decorators, ctorParameters, propDecorators) {
        return noSideEffects(function () {
          var clazz = type;

          if (decorators !== null) {
            if (clazz.hasOwnProperty('decorators') && clazz.decorators !== undefined) {
              var _clazz$decorators;

              (_clazz$decorators = clazz.decorators).push.apply(_clazz$decorators, _toConsumableArray(decorators));
            } else {
              clazz.decorators = decorators;
            }
          }

          if (ctorParameters !== null) {
            // Rather than merging, clobber the existing parameters. If other projects exist which
            // use tsickle-style annotations and reflect over them in the same way, this could
            // cause issues, but that is vanishingly unlikely.
            clazz.ctorParameters = ctorParameters;
          }

          if (propDecorators !== null) {
            // The property decorator objects are merged as it is possible different fields have
            // different decorator types. Decorators on individual fields are not merged, as it's
            // also incredibly unlikely that a field will be decorated both with an Angular
            // decorator and a non-Angular decorator that's also been downleveled.
            if (clazz.hasOwnProperty('propDecorators') && clazz.propDecorators !== undefined) {
              clazz.propDecorators = Object.assign(Object.assign({}, clazz.propDecorators), propDecorators);
            } else {
              clazz.propDecorators = propDecorators;
            }
          }
        });
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Map of module-id to the corresponding NgModule.
       * - In pre Ivy we track NgModuleFactory,
       * - In post Ivy we track the NgModuleType
       */


      var modules = new Map();
      /**
       * Registers a loaded module. Should only be called from generated NgModuleFactory code.
       * @publicApi
       */

      function registerModuleFactory(id, factory) {
        var existing = modules.get(id);
        assertSameOrNotExisting(id, existing && existing.moduleType, factory.moduleType);
        modules.set(id, factory);
      }

      function assertSameOrNotExisting(id, type, incoming) {
        if (type && type !== incoming) {
          throw new Error("Duplicate module registered for ".concat(id, " - ").concat(stringify(type), " vs ").concat(stringify(type.name)));
        }
      }

      function registerNgModuleType(ngModuleType) {
        var visited = new Set();
        recurse(ngModuleType);

        function recurse(ngModuleType) {
          // The imports array of an NgModule must refer to other NgModules,
          // so an error is thrown if no module definition is available.
          var def = getNgModuleDef(ngModuleType,
          /* throwNotFound */
          true);
          var id = def.id;

          if (id !== null) {
            var existing = modules.get(id);
            assertSameOrNotExisting(id, existing, ngModuleType);
            modules.set(id, ngModuleType);
          }

          var imports = maybeUnwrapFn(def.imports);

          var _iterator6 = _createForOfIteratorHelper(imports),
              _step6;

          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var i = _step6.value;

              if (!visited.has(i)) {
                visited.add(i);
                recurse(i);
              }
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }
        }
      }

      function clearModulesForTest() {
        modules.clear();
      }

      function getRegisteredNgModuleType(id) {
        return modules.get(id) || autoRegisterModuleById[id];
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var NgModuleRef$1 = /*#__PURE__*/function (_NgModuleRef2) {
        _inherits(NgModuleRef$1, _NgModuleRef2);

        var _super24 = _createSuper(NgModuleRef$1);

        function NgModuleRef$1(ngModuleType, _parent) {
          var _this87;

          _classCallCheck2(this, NgModuleRef$1);

          _this87 = _super24.call(this);
          _this87._parent = _parent; // tslint:disable-next-line:require-internal-with-underscore

          _this87._bootstrapComponents = [];
          _this87.injector = _assertThisInitialized(_this87);
          _this87.destroyCbs = []; // When bootstrapping a module we have a dependency graph that looks like this:
          // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the
          // module being resolved tries to inject the ComponentFactoryResolver, it'll create a
          // circular dependency which will result in a runtime error, because the injector doesn't
          // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves
          // and providing it, rather than letting the injector resolve it.

          _this87.componentFactoryResolver = new ComponentFactoryResolver$1(_assertThisInitialized(_this87));
          var ngModuleDef = getNgModuleDef(ngModuleType);
          ngDevMode && assertDefined(ngModuleDef, "NgModule '".concat(stringify(ngModuleType), "' is not a subtype of 'NgModuleType'."));
          var ngLocaleIdDef = getNgLocaleIdDef(ngModuleType);
          ngLocaleIdDef && setLocaleId(ngLocaleIdDef);
          _this87._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);
          _this87._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [{
            provide: _NgModuleRef,
            useValue: _assertThisInitialized(_this87)
          }, {
            provide: _ComponentFactoryResolver,
            useValue: _this87.componentFactoryResolver
          }], stringify(ngModuleType)); // We need to resolve the injector types separately from the injector creation, because
          // the module might be trying to use this ref in its contructor for DI which will cause a
          // circular error that will eventually error out, because the injector isn't created yet.

          _this87._r3Injector._resolveInjectorDefTypes();

          _this87.instance = _this87.get(ngModuleType);
          return _this87;
        }

        _createClass2(NgModuleRef$1, [{
          key: "get",
          value: function get(token) {
            var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Injector.THROW_IF_NOT_FOUND;
            var injectFlags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _InjectFlags.Default;

            if (token === _Injector || token === _NgModuleRef || token === INJECTOR$1) {
              return this;
            }

            return this._r3Injector.get(token, notFoundValue, injectFlags);
          }
        }, {
          key: "destroy",
          value: function destroy() {
            ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');
            var injector = this._r3Injector;
            !injector.destroyed && injector.destroy();
            this.destroyCbs.forEach(function (fn) {
              return fn();
            });
            this.destroyCbs = null;
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(callback) {
            ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');
            this.destroyCbs.push(callback);
          }
        }]);

        return NgModuleRef$1;
      }(_NgModuleRef);

      var NgModuleFactory$1 = /*#__PURE__*/function (_NgModuleFactory2) {
        _inherits(NgModuleFactory$1, _NgModuleFactory2);

        var _super25 = _createSuper(NgModuleFactory$1);

        function NgModuleFactory$1(moduleType) {
          var _this88;

          _classCallCheck2(this, NgModuleFactory$1);

          _this88 = _super25.call(this);
          _this88.moduleType = moduleType;
          var ngModuleDef = getNgModuleDef(moduleType);

          if (ngModuleDef !== null) {
            // Register the NgModule with Angular's module registry. The location (and hence timing) of
            // this call is critical to ensure this works correctly (modules get registered when expected)
            // without bloating bundles (modules are registered when otherwise not referenced).
            //
            // In View Engine, registration occurs in the .ngfactory.js file as a side effect. This has
            // several practical consequences:
            //
            // - If an .ngfactory file is not imported from, the module won't be registered (and can be
            //   tree shaken).
            // - If an .ngfactory file is imported from, the module will be registered even if an instance
            //   is not actually created (via `create` below).
            // - Since an .ngfactory file in View Engine references the .ngfactory files of the NgModule's
            //   imports,
            //
            // In Ivy, things are a bit different. .ngfactory files still exist for compatibility, but are
            // not a required API to use - there are other ways to obtain an NgModuleFactory for a given
            // NgModule. Thus, relying on a side effect in the .ngfactory file is not sufficient. Instead,
            // the side effect of registration is added here, in the constructor of NgModuleFactory,
            // ensuring no matter how a factory is created, the module is registered correctly.
            //
            // An alternative would be to include the registration side effect inline following the actual
            // NgModule definition. This also has the correct timing, but breaks tree-shaking - modules
            // will be registered and retained even if they're otherwise never referenced.
            registerNgModuleType(moduleType);
          }

          return _this88;
        }

        _createClass2(NgModuleFactory$1, [{
          key: "create",
          value: function create(parentInjector) {
            return new NgModuleRef$1(this.moduleType, parentInjector);
          }
        }]);

        return NgModuleFactory$1;
      }(_NgModuleFactory);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Bindings for pure functions are stored after regular bindings.
       *
       * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|
       * ------------------------------------------------------------------------------------------
       * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |
       * ------------------------------------------------------------------------------------------
       *                    ^                      ^
       *      TView.bindingStartIndex      TView.expandoStartIndex
       *
       * Pure function instructions are given an offset from the binding root. Adding the offset to the
       * binding root gives the first index where the bindings are stored. In component views, the binding
       * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +
       * any directive instances + any hostVars in directives evaluated before it.
       *
       * See VIEW_DATA.md for more information about host binding resolution.
       */

      /**
       * If the value hasn't been saved, calls the pure function to store and return the
       * value. If it has been saved, returns the saved value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn Function that returns a value
       * @param thisArg Optional calling context of pureFn
       * @returns value
       *
       * @codeGenApi
       */


      function _ɵɵpureFunction(slotOffset, pureFn, thisArg) {
        var bindingIndex = getBindingRoot() + slotOffset;
        var lView = getLView();
        return lView[bindingIndex] === NO_CHANGE ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) : getBinding(lView, bindingIndex);
      }
      /**
       * If the value of the provided exp has changed, calls the pure function to return
       * an updated value. Or if the value has not changed, returns cached value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn Function that returns an updated value
       * @param exp Updated expression value
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       * @codeGenApi
       */


      function _ɵɵpureFunction2(slotOffset, pureFn, exp, thisArg) {
        return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       * @codeGenApi
       */


      function _ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, thisArg) {
        return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param exp3
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       * @codeGenApi
       */


      function _ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
        return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param exp3
       * @param exp4
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       * @codeGenApi
       */


      function _ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
        return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param exp3
       * @param exp4
       * @param exp5
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       * @codeGenApi
       */


      function _ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {
        var bindingIndex = getBindingRoot() + slotOffset;
        var lView = getLView();
        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
        return bindingUpdated(lView, bindingIndex + 4, exp5) || different ? updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) : pureFn(exp1, exp2, exp3, exp4, exp5)) : getBinding(lView, bindingIndex + 5);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param exp3
       * @param exp4
       * @param exp5
       * @param exp6
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       * @codeGenApi
       */


      function _ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {
        var bindingIndex = getBindingRoot() + slotOffset;
        var lView = getLView();
        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
        return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ? updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) : getBinding(lView, bindingIndex + 6);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param exp3
       * @param exp4
       * @param exp5
       * @param exp6
       * @param exp7
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       * @codeGenApi
       */


      function _ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {
        var bindingIndex = getBindingRoot() + slotOffset;
        var lView = getLView();
        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
        return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ? updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) : getBinding(lView, bindingIndex + 7);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param exp3
       * @param exp4
       * @param exp5
       * @param exp6
       * @param exp7
       * @param exp8
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       * @codeGenApi
       */


      function _ɵɵpureFunction9(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {
        var bindingIndex = getBindingRoot() + slotOffset;
        var lView = getLView();
        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
        return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ? updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) : getBinding(lView, bindingIndex + 8);
      }
      /**
       * pureFunction instruction that can support any number of bindings.
       *
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn A pure function that takes binding values and builds an object or array
       * containing those values.
       * @param exps An array of binding values
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       * @codeGenApi
       */


      function _ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {
        return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);
      }
      /**
       * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized
       * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first
       * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE
       * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert
       * it to `undefined`.
       */


      function getPureFunctionReturnValue(lView, returnValueIndex) {
        ngDevMode && assertIndexInRange(lView, returnValueIndex);
        var lastReturnValue = lView[returnValueIndex];
        return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;
      }
      /**
       * If the value of the provided exp has changed, calls the pure function to return
       * an updated value. Or if the value has not changed, returns cached value.
       *
       * @param lView LView in which the function is being executed.
       * @param bindingRoot Binding root index.
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn Function that returns an updated value
       * @param exp Updated expression value
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       */


      function pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {
        var bindingIndex = bindingRoot + slotOffset;
        return bindingUpdated(lView, bindingIndex, exp) ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) : getPureFunctionReturnValue(lView, bindingIndex + 1);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param lView LView in which the function is being executed.
       * @param bindingRoot Binding root index.
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       */


      function pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {
        var bindingIndex = bindingRoot + slotOffset;
        return bindingUpdated2(lView, bindingIndex, exp1, exp2) ? updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) : getPureFunctionReturnValue(lView, bindingIndex + 2);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param lView LView in which the function is being executed.
       * @param bindingRoot Binding root index.
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param exp3
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       */


      function pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
        var bindingIndex = bindingRoot + slotOffset;
        return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ? updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) : getPureFunctionReturnValue(lView, bindingIndex + 3);
      }
      /**
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param lView LView in which the function is being executed.
       * @param bindingRoot Binding root index.
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn
       * @param exp1
       * @param exp2
       * @param exp3
       * @param exp4
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       *
       */


      function pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
        var bindingIndex = bindingRoot + slotOffset;
        return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ? updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) : getPureFunctionReturnValue(lView, bindingIndex + 4);
      }
      /**
       * pureFunction instruction that can support any number of bindings.
       *
       * If the value of any provided exp has changed, calls the pure function to return
       * an updated value. Or if no values have changed, returns cached value.
       *
       * @param lView LView in which the function is being executed.
       * @param bindingRoot Binding root index.
       * @param slotOffset the offset from binding root to the reserved slot
       * @param pureFn A pure function that takes binding values and builds an object or array
       * containing those values.
       * @param exps An array of binding values
       * @param thisArg Optional calling context of pureFn
       * @returns Updated or cached value
       */


      function pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {
        var bindingIndex = bindingRoot + slotOffset;
        var different = false;

        for (var i = 0; i < exps.length; i++) {
          bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);
        }

        return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) : getPureFunctionReturnValue(lView, bindingIndex);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Create a pipe.
       *
       * @param index Pipe index where the pipe will be stored.
       * @param pipeName The name of the pipe
       * @returns T the instance of the pipe.
       *
       * @codeGenApi
       */


      function _ɵɵpipe(index, pipeName) {
        var tView = getTView();
        var pipeDef;
        var adjustedIndex = index + HEADER_OFFSET;

        if (tView.firstCreatePass) {
          pipeDef = getPipeDef$1(pipeName, tView.pipeRegistry);
          tView.data[adjustedIndex] = pipeDef;

          if (pipeDef.onDestroy) {
            (tView.destroyHooks || (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);
          }
        } else {
          pipeDef = tView.data[adjustedIndex];
        }

        var pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));
        var previousInjectImplementation = setInjectImplementation(_ɵɵdirectiveInject);

        try {
          // DI for pipes is supposed to behave like directives when placed on a component
          // host node, which means that we have to disable access to `viewProviders`.
          var previousIncludeViewProviders = setIncludeViewProviders(false);
          var pipeInstance = pipeFactory();
          setIncludeViewProviders(previousIncludeViewProviders);
          store(tView, getLView(), adjustedIndex, pipeInstance);
          return pipeInstance;
        } finally {
          // we have to restore the injector implementation in finally, just in case the creation of the
          // pipe throws an error.
          setInjectImplementation(previousInjectImplementation);
        }
      }
      /**
       * Searches the pipe registry for a pipe with the given name. If one is found,
       * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.
       *
       * @param name Name of pipe to resolve
       * @param registry Full list of available pipes
       * @returns Matching PipeDef
       */


      function getPipeDef$1(name, registry) {
        if (registry) {
          for (var i = registry.length - 1; i >= 0; i--) {
            var _pipeDef = registry[i];

            if (name === _pipeDef.name) {
              return _pipeDef;
            }
          }
        }

        throw new RuntimeError("302"
        /* PIPE_NOT_FOUND */
        , "The pipe '".concat(name, "' could not be found!"));
      }
      /**
       * Invokes a pipe with 1 arguments.
       *
       * This instruction acts as a guard to {@link PipeTransform#transform} invoking
       * the pipe only when an input to the pipe changes.
       *
       * @param index Pipe index where the pipe was stored on creation.
       * @param slotOffset the offset in the reserved slot space
       * @param v1 1st argument to {@link PipeTransform#transform}.
       *
       * @codeGenApi
       */


      function _ɵɵpipeBind(index, slotOffset, v1) {
        var adjustedIndex = index + HEADER_OFFSET;
        var lView = getLView();
        var pipeInstance = load(lView, adjustedIndex);
        return unwrapValue$1(lView, isPure(lView, adjustedIndex) ? pureFunction1Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, pipeInstance) : pipeInstance.transform(v1));
      }
      /**
       * Invokes a pipe with 2 arguments.
       *
       * This instruction acts as a guard to {@link PipeTransform#transform} invoking
       * the pipe only when an input to the pipe changes.
       *
       * @param index Pipe index where the pipe was stored on creation.
       * @param slotOffset the offset in the reserved slot space
       * @param v1 1st argument to {@link PipeTransform#transform}.
       * @param v2 2nd argument to {@link PipeTransform#transform}.
       *
       * @codeGenApi
       */


      function _ɵɵpipeBind2(index, slotOffset, v1, v2) {
        var adjustedIndex = index + HEADER_OFFSET;
        var lView = getLView();
        var pipeInstance = load(lView, adjustedIndex);
        return unwrapValue$1(lView, isPure(lView, adjustedIndex) ? pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) : pipeInstance.transform(v1, v2));
      }
      /**
       * Invokes a pipe with 3 arguments.
       *
       * This instruction acts as a guard to {@link PipeTransform#transform} invoking
       * the pipe only when an input to the pipe changes.
       *
       * @param index Pipe index where the pipe was stored on creation.
       * @param slotOffset the offset in the reserved slot space
       * @param v1 1st argument to {@link PipeTransform#transform}.
       * @param v2 2nd argument to {@link PipeTransform#transform}.
       * @param v3 4rd argument to {@link PipeTransform#transform}.
       *
       * @codeGenApi
       */


      function _ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {
        var adjustedIndex = index + HEADER_OFFSET;
        var lView = getLView();
        var pipeInstance = load(lView, adjustedIndex);
        return unwrapValue$1(lView, isPure(lView, adjustedIndex) ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) : pipeInstance.transform(v1, v2, v3));
      }
      /**
       * Invokes a pipe with 4 arguments.
       *
       * This instruction acts as a guard to {@link PipeTransform#transform} invoking
       * the pipe only when an input to the pipe changes.
       *
       * @param index Pipe index where the pipe was stored on creation.
       * @param slotOffset the offset in the reserved slot space
       * @param v1 1st argument to {@link PipeTransform#transform}.
       * @param v2 2nd argument to {@link PipeTransform#transform}.
       * @param v3 3rd argument to {@link PipeTransform#transform}.
       * @param v4 4th argument to {@link PipeTransform#transform}.
       *
       * @codeGenApi
       */


      function _ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {
        var adjustedIndex = index + HEADER_OFFSET;
        var lView = getLView();
        var pipeInstance = load(lView, adjustedIndex);
        return unwrapValue$1(lView, isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) : pipeInstance.transform(v1, v2, v3, v4));
      }
      /**
       * Invokes a pipe with variable number of arguments.
       *
       * This instruction acts as a guard to {@link PipeTransform#transform} invoking
       * the pipe only when an input to the pipe changes.
       *
       * @param index Pipe index where the pipe was stored on creation.
       * @param slotOffset the offset in the reserved slot space
       * @param values Array of arguments to pass to {@link PipeTransform#transform} method.
       *
       * @codeGenApi
       */


      function _ɵɵpipeBindV(index, slotOffset, values) {
        var adjustedIndex = index + HEADER_OFFSET;
        var lView = getLView();
        var pipeInstance = load(lView, adjustedIndex);
        return unwrapValue$1(lView, isPure(lView, adjustedIndex) ? pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) : pipeInstance.transform.apply(pipeInstance, values));
      }

      function isPure(lView, index) {
        return lView[TVIEW].data[index].pure;
      }
      /**
       * Unwrap the output of a pipe transformation.
       * In order to trick change detection into considering that the new value is always different from
       * the old one, the old value is overwritten by NO_CHANGE.
       *
       * @param newValue the pipe transformation output.
       */


      function unwrapValue$1(lView, newValue) {
        if (_WrappedValue.isWrapped(newValue)) {
          newValue = _WrappedValue.unwrap(newValue); // The NO_CHANGE value needs to be written at the index where the impacted binding value is
          // stored

          var bindingToInvalidateIdx = getBindingIndex();
          lView[bindingToInvalidateIdx] = NO_CHANGE;
        }

        return newValue;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var EventEmitter_ = /*#__PURE__*/function (_rxjs__WEBPACK_IMPORT) {
        _inherits(EventEmitter_, _rxjs__WEBPACK_IMPORT);

        var _super26 = _createSuper(EventEmitter_);

        function EventEmitter_() {
          var _this89;

          var isAsync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

          _classCallCheck2(this, EventEmitter_);

          _this89 = _super26.call(this);
          _this89.__isAsync = isAsync;
          return _this89;
        }

        _createClass2(EventEmitter_, [{
          key: "emit",
          value: function emit(value) {
            _get(_getPrototypeOf(EventEmitter_.prototype), "next", this).call(this, value);
          }
        }, {
          key: "subscribe",
          value: function subscribe(observerOrNext, error, complete) {
            var _a, _b, _c;

            var nextFn = observerOrNext;

            var errorFn = error || function () {
              return null;
            };

            var completeFn = complete;

            if (observerOrNext && typeof observerOrNext === 'object') {
              var observer = observerOrNext;
              nextFn = (_a = observer.next) === null || _a === void 0 ? void 0 : _a.bind(observer);
              errorFn = (_b = observer.error) === null || _b === void 0 ? void 0 : _b.bind(observer);
              completeFn = (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.bind(observer);
            }

            if (this.__isAsync) {
              errorFn = _wrapInTimeout(errorFn);

              if (nextFn) {
                nextFn = _wrapInTimeout(nextFn);
              }

              if (completeFn) {
                completeFn = _wrapInTimeout(completeFn);
              }
            }

            var sink = _get(_getPrototypeOf(EventEmitter_.prototype), "subscribe", this).call(this, {
              next: nextFn,
              error: errorFn,
              complete: completeFn
            });

            if (observerOrNext instanceof rxjs__WEBPACK_IMPORTED_MODULE_1__.Subscription) {
              observerOrNext.add(sink);
            }

            return sink;
          }
        }]);

        return EventEmitter_;
      }(rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject);

      function _wrapInTimeout(fn) {
        return function (value) {
          setTimeout(fn, undefined, value);
        };
      }
      /**
       * @publicApi
       */


      var _EventEmitter = EventEmitter_;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      function symbolIterator() {
        return this._results[getSymbolIterator()]();
      }
      /**
       * An unmodifiable list of items that Angular keeps up to date when the state
       * of the application changes.
       *
       * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}
       * provide.
       *
       * Implements an iterable interface, therefore it can be used in both ES6
       * javascript `for (var i of items)` loops as well as in Angular templates with
       * `*ngFor="let i of myList"`.
       *
       * Changes can be observed by subscribing to the changes `Observable`.
       *
       * NOTE: In the future this class will implement an `Observable` interface.
       *
       * @usageNotes
       * ### Example
       * ```typescript
       * @Component({...})
       * class Container {
       *   @ViewChildren(Item) items:QueryList<Item>;
       * }
       * ```
       *
       * @publicApi
       */


      var _QueryList = /*#__PURE__*/function () {
        /**
         * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change
         *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in
         *     the same result)
         */
        function _QueryList() {
          var _emitDistinctChangesOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

          _classCallCheck2(this, _QueryList);

          this._emitDistinctChangesOnly = _emitDistinctChangesOnly;
          this.dirty = true;
          this._results = [];
          this._changesDetected = false;
          this._changes = null;
          this.length = 0;
          this.first = undefined;
          this.last = undefined; // This function should be declared on the prototype, but doing so there will cause the class
          // declaration to have side-effects and become not tree-shakable. For this reason we do it in
          // the constructor.
          // [getSymbolIterator()](): Iterator<T> { ... }

          var symbol = getSymbolIterator();
          var proto = _QueryList.prototype;
          if (!proto[symbol]) proto[symbol] = symbolIterator;
        }
        /**
         * Returns `Observable` of `QueryList` notifying the subscriber of changes.
         */


        _createClass2(_QueryList, [{
          key: "changes",
          get: function get() {
            return this._changes || (this._changes = new _EventEmitter());
          }
          /**
           * Returns the QueryList entry at `index`.
           */

        }, {
          key: "get",
          value: function get(index) {
            return this._results[index];
          }
          /**
           * See
           * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
           */

        }, {
          key: "map",
          value: function map(fn) {
            return this._results.map(fn);
          }
          /**
           * See
           * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
           */

        }, {
          key: "filter",
          value: function filter(fn) {
            return this._results.filter(fn);
          }
          /**
           * See
           * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
           */

        }, {
          key: "find",
          value: function find(fn) {
            return this._results.find(fn);
          }
          /**
           * See
           * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
           */

        }, {
          key: "reduce",
          value: function reduce(fn, init) {
            return this._results.reduce(fn, init);
          }
          /**
           * See
           * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
           */

        }, {
          key: "forEach",
          value: function forEach(fn) {
            this._results.forEach(fn);
          }
          /**
           * See
           * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
           */

        }, {
          key: "some",
          value: function some(fn) {
            return this._results.some(fn);
          }
          /**
           * Returns a copy of the internal results list as an Array.
           */

        }, {
          key: "toArray",
          value: function toArray() {
            return this._results.slice();
          }
        }, {
          key: "toString",
          value: function toString() {
            return this._results.toString();
          }
          /**
           * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that
           * on change detection, it will not notify of changes to the queries, unless a new change
           * occurs.
           *
           * @param resultsTree The query results to store
           * @param identityAccessor Optional function for extracting stable object identity from a value
           *    in the array. This function is executed for each element of the query result list while
           *    comparing current query list with the new one (provided as a first argument of the `reset`
           *    function) to detect if the lists are different. If the function is not provided, elements
           *    are compared as is (without any pre-processing).
           */

        }, {
          key: "reset",
          value: function reset(resultsTree, identityAccessor) {
            // Cast to `QueryListInternal` so that we can mutate fields which are readonly for the usage of
            // QueryList (but not for QueryList itself.)
            var self = this;
            self.dirty = false;
            var newResultFlat = flatten(resultsTree);

            if (this._changesDetected = !arrayEquals(self._results, newResultFlat, identityAccessor)) {
              self._results = newResultFlat;
              self.length = newResultFlat.length;
              self.last = newResultFlat[this.length - 1];
              self.first = newResultFlat[0];
            }
          }
          /**
           * Triggers a change event by emitting on the `changes` {@link EventEmitter}.
           */

        }, {
          key: "notifyOnChanges",
          value: function notifyOnChanges() {
            if (this._changes && (this._changesDetected || !this._emitDistinctChangesOnly)) this._changes.emit(this);
          }
          /** internal */

        }, {
          key: "setDirty",
          value: function setDirty() {
            this.dirty = true;
          }
          /** internal */

        }, {
          key: "destroy",
          value: function destroy() {
            this.changes.complete();
            this.changes.unsubscribe();
          }
        }]);

        return _QueryList;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Note: This hack is necessary so we don't erroneously get a circular dependency
      // failure based on types.


      var unusedValueExportToPlacateAjd$7 = 1;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Note: This hack is necessary so we don't erroneously get a circular dependency
      // failure based on types.

      var unusedValueExportToPlacateAjd$8 = 1;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var unusedValueToPlacateAjd$2 = unusedValueExportToPlacateAjd$7 + unusedValueExportToPlacateAjd$3 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$8;

      var LQuery_ = /*#__PURE__*/function () {
        function LQuery_(queryList) {
          _classCallCheck2(this, LQuery_);

          this.queryList = queryList;
          this.matches = null;
        }

        _createClass2(LQuery_, [{
          key: "clone",
          value: function clone() {
            return new LQuery_(this.queryList);
          }
        }, {
          key: "setDirty",
          value: function setDirty() {
            this.queryList.setDirty();
          }
        }]);

        return LQuery_;
      }();

      var LQueries_ = /*#__PURE__*/function () {
        function LQueries_() {
          var queries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

          _classCallCheck2(this, LQueries_);

          this.queries = queries;
        }

        _createClass2(LQueries_, [{
          key: "createEmbeddedView",
          value: function createEmbeddedView(tView) {
            var tQueries = tView.queries;

            if (tQueries !== null) {
              var noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;
              var viewLQueries = []; // An embedded view has queries propagated from a declaration view at the beginning of the
              // TQueries collection and up until a first content query declared in the embedded view. Only
              // propagated LQueries are created at this point (LQuery corresponding to declared content
              // queries will be instantiated from the content query instructions for each directive).

              for (var i = 0; i < noOfInheritedQueries; i++) {
                var tQuery = tQueries.getByIndex(i);
                var parentLQuery = this.queries[tQuery.indexInDeclarationView];
                viewLQueries.push(parentLQuery.clone());
              }

              return new LQueries_(viewLQueries);
            }

            return null;
          }
        }, {
          key: "insertView",
          value: function insertView(tView) {
            this.dirtyQueriesWithMatches(tView);
          }
        }, {
          key: "detachView",
          value: function detachView(tView) {
            this.dirtyQueriesWithMatches(tView);
          }
        }, {
          key: "dirtyQueriesWithMatches",
          value: function dirtyQueriesWithMatches(tView) {
            for (var i = 0; i < this.queries.length; i++) {
              if (getTQuery(tView, i).matches !== null) {
                this.queries[i].setDirty();
              }
            }
          }
        }]);

        return LQueries_;
      }();

      var TQueryMetadata_ = function TQueryMetadata_(predicate, flags) {
        var read = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        _classCallCheck2(this, TQueryMetadata_);

        this.predicate = predicate;
        this.flags = flags;
        this.read = read;
      };

      var TQueries_ = /*#__PURE__*/function () {
        function TQueries_() {
          var queries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

          _classCallCheck2(this, TQueries_);

          this.queries = queries;
        }

        _createClass2(TQueries_, [{
          key: "elementStart",
          value: function elementStart(tView, tNode) {
            ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');

            for (var i = 0; i < this.queries.length; i++) {
              this.queries[i].elementStart(tView, tNode);
            }
          }
        }, {
          key: "elementEnd",
          value: function elementEnd(tNode) {
            for (var i = 0; i < this.queries.length; i++) {
              this.queries[i].elementEnd(tNode);
            }
          }
        }, {
          key: "embeddedTView",
          value: function embeddedTView(tNode) {
            var queriesForTemplateRef = null;

            for (var i = 0; i < this.length; i++) {
              var childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;
              var tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);

              if (tqueryClone) {
                tqueryClone.indexInDeclarationView = i;

                if (queriesForTemplateRef !== null) {
                  queriesForTemplateRef.push(tqueryClone);
                } else {
                  queriesForTemplateRef = [tqueryClone];
                }
              }
            }

            return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;
          }
        }, {
          key: "template",
          value: function template(tView, tNode) {
            ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');

            for (var i = 0; i < this.queries.length; i++) {
              this.queries[i].template(tView, tNode);
            }
          }
        }, {
          key: "getByIndex",
          value: function getByIndex(index) {
            ngDevMode && assertIndexInRange(this.queries, index);
            return this.queries[index];
          }
        }, {
          key: "length",
          get: function get() {
            return this.queries.length;
          }
        }, {
          key: "track",
          value: function track(tquery) {
            this.queries.push(tquery);
          }
        }]);

        return TQueries_;
      }();

      var TQuery_ = /*#__PURE__*/function () {
        function TQuery_(metadata) {
          var nodeIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

          _classCallCheck2(this, TQuery_);

          this.metadata = metadata;
          this.matches = null;
          this.indexInDeclarationView = -1;
          this.crossesNgTemplate = false;
          /**
           * A flag indicating if a given query still applies to nodes it is crossing. We use this flag
           * (alongside with _declarationNodeIndex) to know when to stop applying content queries to
           * elements in a template.
           */

          this._appliesToNextNode = true;
          this._declarationNodeIndex = nodeIndex;
        }

        _createClass2(TQuery_, [{
          key: "elementStart",
          value: function elementStart(tView, tNode) {
            if (this.isApplyingToNode(tNode)) {
              this.matchTNode(tView, tNode);
            }
          }
        }, {
          key: "elementEnd",
          value: function elementEnd(tNode) {
            if (this._declarationNodeIndex === tNode.index) {
              this._appliesToNextNode = false;
            }
          }
        }, {
          key: "template",
          value: function template(tView, tNode) {
            this.elementStart(tView, tNode);
          }
        }, {
          key: "embeddedTView",
          value: function embeddedTView(tNode, childQueryIndex) {
            if (this.isApplyingToNode(tNode)) {
              this.crossesNgTemplate = true; // A marker indicating a `<ng-template>` element (a placeholder for query results from
              // embedded views created based on this `<ng-template>`).

              this.addMatch(-tNode.index, childQueryIndex);
              return new TQuery_(this.metadata);
            }

            return null;
          }
        }, {
          key: "isApplyingToNode",
          value: function isApplyingToNode(tNode) {
            if (this._appliesToNextNode && (this.metadata.flags & 1
            /* descendants */
            ) !== 1
            /* descendants */
            ) {
                var declarationNodeIdx = this._declarationNodeIndex;
                var parent = tNode.parent; // Determine if a given TNode is a "direct" child of a node on which a content query was
                // declared (only direct children of query's host node can match with the descendants: false
                // option). There are 3 main use-case / conditions to consider here:
                // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query
                // host node;
                // - <needs-target><ng-template [ngIf]="true"><i #target></i></ng-template></needs-target>:
                // here <i #target> parent node is null;
                // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need
                // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse
                // up past the query's host node!).

                while (parent !== null && parent.type & 8
                /* ElementContainer */
                && parent.index !== declarationNodeIdx) {
                  parent = parent.parent;
                }

                return declarationNodeIdx === (parent !== null ? parent.index : -1);
              }

            return this._appliesToNextNode;
          }
        }, {
          key: "matchTNode",
          value: function matchTNode(tView, tNode) {
            var predicate = this.metadata.predicate;

            if (Array.isArray(predicate)) {
              for (var i = 0; i < predicate.length; i++) {
                var name = predicate[i];
                this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name)); // Also try matching the name to a provider since strings can be used as DI tokens too.

                this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));
              }
            } else {
              if (predicate === _TemplateRef) {
                if (tNode.type & 4
                /* Container */
                ) {
                    this.matchTNodeWithReadOption(tView, tNode, -1);
                  }
              } else {
                this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));
              }
            }
          }
        }, {
          key: "matchTNodeWithReadOption",
          value: function matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {
            if (nodeMatchIdx !== null) {
              var read = this.metadata.read;

              if (read !== null) {
                if (read === _ElementRef || read === _ViewContainerRef || read === _TemplateRef && tNode.type & 4
                /* Container */
                ) {
                  this.addMatch(tNode.index, -2);
                } else {
                  var directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);

                  if (directiveOrProviderIdx !== null) {
                    this.addMatch(tNode.index, directiveOrProviderIdx);
                  }
                }
              } else {
                this.addMatch(tNode.index, nodeMatchIdx);
              }
            }
          }
        }, {
          key: "addMatch",
          value: function addMatch(tNodeIdx, matchIdx) {
            if (this.matches === null) {
              this.matches = [tNodeIdx, matchIdx];
            } else {
              this.matches.push(tNodeIdx, matchIdx);
            }
          }
        }]);

        return TQuery_;
      }();
      /**
       * Iterates over local names for a given node and returns directive index
       * (or -1 if a local name points to an element).
       *
       * @param tNode static data of a node to check
       * @param selector selector to match
       * @returns directive index, -1 or null if a selector didn't match any of the local names
       */


      function getIdxOfMatchingSelector(tNode, selector) {
        var localNames = tNode.localNames;

        if (localNames !== null) {
          for (var i = 0; i < localNames.length; i += 2) {
            if (localNames[i] === selector) {
              return localNames[i + 1];
            }
          }
        }

        return null;
      }

      function createResultByTNodeType(tNode, currentView) {
        if (tNode.type & (3
        /* AnyRNode */
        | 8
        /* ElementContainer */
        )) {
          return createElementRef(tNode, currentView);
        } else if (tNode.type & 4
        /* Container */
        ) {
            return createTemplateRef(tNode, currentView);
          }

        return null;
      }

      function createResultForNode(lView, tNode, matchingIdx, read) {
        if (matchingIdx === -1) {
          // if read token and / or strategy is not specified, detect it using appropriate tNode type
          return createResultByTNodeType(tNode, lView);
        } else if (matchingIdx === -2) {
          // read a special token from a node injector
          return createSpecialToken(lView, tNode, read);
        } else {
          // read a token
          return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);
        }
      }

      function createSpecialToken(lView, tNode, read) {
        if (read === _ElementRef) {
          return createElementRef(tNode, lView);
        } else if (read === _TemplateRef) {
          return createTemplateRef(tNode, lView);
        } else if (read === _ViewContainerRef) {
          ngDevMode && assertTNodeType(tNode, 3
          /* AnyRNode */
          | 12
          /* AnyContainer */
          );
          return createContainerRef(tNode, lView);
        } else {
          ngDevMode && throwError("Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ".concat(stringify(read), "."));
        }
      }
      /**
       * A helper function that creates query results for a given view. This function is meant to do the
       * processing once and only once for a given view instance (a set of results for a given view
       * doesn't change).
       */


      function materializeViewResults(tView, lView, tQuery, queryIndex) {
        var lQuery = lView[QUERIES].queries[queryIndex];

        if (lQuery.matches === null) {
          var tViewData = tView.data;
          var tQueryMatches = tQuery.matches;
          var result = [];

          for (var i = 0; i < tQueryMatches.length; i += 2) {
            var matchedNodeIdx = tQueryMatches[i];

            if (matchedNodeIdx < 0) {
              // we at the <ng-template> marker which might have results in views created based on this
              // <ng-template> - those results will be in separate views though, so here we just leave
              // null as a placeholder
              result.push(null);
            } else {
              ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);
              var tNode = tViewData[matchedNodeIdx];
              result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));
            }
          }

          lQuery.matches = result;
        }

        return lQuery.matches;
      }
      /**
       * A helper function that collects (already materialized) query results from a tree of views,
       * starting with a provided LView.
       */


      function collectQueryResults(tView, lView, queryIndex, result) {
        var tQuery = tView.queries.getByIndex(queryIndex);
        var tQueryMatches = tQuery.matches;

        if (tQueryMatches !== null) {
          var lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);

          for (var i = 0; i < tQueryMatches.length; i += 2) {
            var tNodeIdx = tQueryMatches[i];

            if (tNodeIdx > 0) {
              result.push(lViewResults[i / 2]);
            } else {
              var childQueryIndex = tQueryMatches[i + 1];
              var declarationLContainer = lView[-tNodeIdx];
              ngDevMode && assertLContainer(declarationLContainer); // collect matches for views inserted in this container

              for (var _i16 = CONTAINER_HEADER_OFFSET; _i16 < declarationLContainer.length; _i16++) {
                var embeddedLView = declarationLContainer[_i16];

                if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {
                  collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
                }
              } // collect matches for views created from this declaration container and inserted into
              // different containers


              if (declarationLContainer[MOVED_VIEWS] !== null) {
                var embeddedLViews = declarationLContainer[MOVED_VIEWS];

                for (var _i17 = 0; _i17 < embeddedLViews.length; _i17++) {
                  var _embeddedLView = embeddedLViews[_i17];
                  collectQueryResults(_embeddedLView[TVIEW], _embeddedLView, childQueryIndex, result);
                }
              }
            }
          }
        }

        return result;
      }
      /**
       * Refreshes a query by combining matches from all active views and removing matches from deleted
       * views.
       *
       * @returns `true` if a query got dirty during change detection or if this is a static query
       * resolving in creation mode, `false` otherwise.
       *
       * @codeGenApi
       */


      function _ɵɵqueryRefresh(queryList) {
        var lView = getLView();
        var tView = getTView();
        var queryIndex = getCurrentQueryIndex();
        setCurrentQueryIndex(queryIndex + 1);
        var tQuery = getTQuery(tView, queryIndex);

        if (queryList.dirty && isCreationMode(lView) === ((tQuery.metadata.flags & 2
        /* isStatic */
        ) === 2
        /* isStatic */
        )) {
          if (tQuery.matches === null) {
            queryList.reset([]);
          } else {
            var result = tQuery.crossesNgTemplate ? collectQueryResults(tView, lView, queryIndex, []) : materializeViewResults(tView, lView, tQuery, queryIndex);
            queryList.reset(result, unwrapElementRef);
            queryList.notifyOnChanges();
          }

          return true;
        }

        return false;
      }
      /**
       * Creates new QueryList, stores the reference in LView and returns QueryList.
       *
       * @param predicate The type for which the query will search
       * @param flags Flags associated with the query
       * @param read What to save in the query
       *
       * @codeGenApi
       */


      function _ɵɵviewQuery(predicate, flags, read) {
        ngDevMode && assertNumber(flags, 'Expecting flags');
        var tView = getTView();

        if (tView.firstCreatePass) {
          createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);

          if ((flags & 2
          /* isStatic */
          ) === 2
          /* isStatic */
          ) {
              tView.staticViewQueries = true;
            }
        }

        createLQuery(tView, getLView(), flags);
      }
      /**
       * Registers a QueryList, associated with a content query, for later refresh (part of a view
       * refresh).
       *
       * @param directiveIndex Current directive index
       * @param predicate The type for which the query will search
       * @param flags Flags associated with the query
       * @param read What to save in the query
       * @returns QueryList<T>
       *
       * @codeGenApi
       */


      function _ɵɵcontentQuery(directiveIndex, predicate, flags, read) {
        ngDevMode && assertNumber(flags, 'Expecting flags');
        var tView = getTView();

        if (tView.firstCreatePass) {
          var tNode = getCurrentTNode();
          createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);
          saveContentQueryAndDirectiveIndex(tView, directiveIndex);

          if ((flags & 2
          /* isStatic */
          ) === 2
          /* isStatic */
          ) {
              tView.staticContentQueries = true;
            }
        }

        createLQuery(tView, getLView(), flags);
      }
      /**
       * Loads a QueryList corresponding to the current view or content query.
       *
       * @codeGenApi
       */


      function _ɵɵloadQuery() {
        return loadQueryInternal(getLView(), getCurrentQueryIndex());
      }

      function loadQueryInternal(lView, queryIndex) {
        ngDevMode && assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');
        ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);
        return lView[QUERIES].queries[queryIndex].queryList;
      }

      function createLQuery(tView, lView, flags) {
        var queryList = new _QueryList((flags & 4
        /* emitDistinctChangesOnly */
        ) === 4
        /* emitDistinctChangesOnly */
        );
        storeCleanupWithContext(tView, lView, queryList, queryList.destroy);
        if (lView[QUERIES] === null) lView[QUERIES] = new LQueries_();
        lView[QUERIES].queries.push(new LQuery_(queryList));
      }

      function createTQuery(tView, metadata, nodeIndex) {
        if (tView.queries === null) tView.queries = new TQueries_();
        tView.queries.track(new TQuery_(metadata, nodeIndex));
      }

      function saveContentQueryAndDirectiveIndex(tView, directiveIndex) {
        var tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);
        var lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;

        if (directiveIndex !== lastSavedDirectiveIndex) {
          tViewContentQueries.push(tView.queries.length - 1, directiveIndex);
        }
      }

      function getTQuery(tView, index) {
        ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');
        return tView.queries.getByIndex(index);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the
       * `<ng-template>` element.
       *
       * @codeGenApi
       */


      function _ɵɵtemplateRefExtractor(tNode, lView) {
        return createTemplateRef(tNode, lView);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ɵ0$c = function ɵ0$c() {
        return {
          'ɵɵattribute': _ɵɵattribute,
          'ɵɵattributeInterpolate1': _ɵɵattributeInterpolate,
          'ɵɵattributeInterpolate2': _ɵɵattributeInterpolate2,
          'ɵɵattributeInterpolate3': _ɵɵattributeInterpolate3,
          'ɵɵattributeInterpolate4': _ɵɵattributeInterpolate4,
          'ɵɵattributeInterpolate5': _ɵɵattributeInterpolate5,
          'ɵɵattributeInterpolate6': _ɵɵattributeInterpolate6,
          'ɵɵattributeInterpolate7': _ɵɵattributeInterpolate7,
          'ɵɵattributeInterpolate8': _ɵɵattributeInterpolate8,
          'ɵɵattributeInterpolateV': _ɵɵattributeInterpolateV,
          'ɵɵdefineComponent': _ɵɵdefineComponent,
          'ɵɵdefineDirective': _ɵɵdefineDirective,
          'ɵɵdefineInjectable': _ɵɵdefineInjectable,
          'ɵɵdefineInjector': _ɵɵdefineInjector,
          'ɵɵdefineNgModule': _ɵɵdefineNgModule,
          'ɵɵdefinePipe': _ɵɵdefinePipe,
          'ɵɵdirectiveInject': _ɵɵdirectiveInject,
          'ɵɵgetInheritedFactory': _ɵɵgetInheritedFactory,
          'ɵɵinject': _ɵɵinject,
          'ɵɵinjectAttribute': _ɵɵinjectAttribute,
          'ɵɵinvalidFactory': _ɵɵinvalidFactory,
          'ɵɵinvalidFactoryDep': _ɵɵinvalidFactoryDep,
          'ɵɵtemplateRefExtractor': _ɵɵtemplateRefExtractor,
          'ɵɵNgOnChangesFeature': _ɵɵNgOnChangesFeature,
          'ɵɵProvidersFeature': _ɵɵProvidersFeature,
          'ɵɵCopyDefinitionFeature': _ɵɵCopyDefinitionFeature,
          'ɵɵInheritDefinitionFeature': _ɵɵInheritDefinitionFeature,
          'ɵɵnextContext': _ɵɵnextContext,
          'ɵɵnamespaceHTML': _ɵɵnamespaceHTML,
          'ɵɵnamespaceMathML': _ɵɵnamespaceMathML,
          'ɵɵnamespaceSVG': _ɵɵnamespaceSVG,
          'ɵɵenableBindings': _ɵɵenableBindings,
          'ɵɵdisableBindings': _ɵɵdisableBindings,
          'ɵɵelementStart': _ɵɵelementStart,
          'ɵɵelementEnd': _ɵɵelementEnd,
          'ɵɵelement': _ɵɵelement,
          'ɵɵelementContainerStart': _ɵɵelementContainerStart,
          'ɵɵelementContainerEnd': _ɵɵelementContainerEnd,
          'ɵɵelementContainer': _ɵɵelementContainer,
          'ɵɵpureFunction0': _ɵɵpureFunction,
          'ɵɵpureFunction1': _ɵɵpureFunction2,
          'ɵɵpureFunction2': _ɵɵpureFunction3,
          'ɵɵpureFunction3': _ɵɵpureFunction4,
          'ɵɵpureFunction4': _ɵɵpureFunction5,
          'ɵɵpureFunction5': _ɵɵpureFunction6,
          'ɵɵpureFunction6': _ɵɵpureFunction7,
          'ɵɵpureFunction7': _ɵɵpureFunction8,
          'ɵɵpureFunction8': _ɵɵpureFunction9,
          'ɵɵpureFunctionV': _ɵɵpureFunctionV,
          'ɵɵgetCurrentView': _ɵɵgetCurrentView,
          'ɵɵrestoreView': _ɵɵrestoreView,
          'ɵɵlistener': _ɵɵlistener,
          'ɵɵprojection': _ɵɵprojection,
          'ɵɵsyntheticHostProperty': _ɵɵsyntheticHostProperty,
          'ɵɵsyntheticHostListener': _ɵɵsyntheticHostListener,
          'ɵɵpipeBind1': _ɵɵpipeBind,
          'ɵɵpipeBind2': _ɵɵpipeBind2,
          'ɵɵpipeBind3': _ɵɵpipeBind3,
          'ɵɵpipeBind4': _ɵɵpipeBind4,
          'ɵɵpipeBindV': _ɵɵpipeBindV,
          'ɵɵprojectionDef': _ɵɵprojectionDef,
          'ɵɵhostProperty': _ɵɵhostProperty,
          'ɵɵproperty': _ɵɵproperty,
          'ɵɵpropertyInterpolate': _ɵɵpropertyInterpolate,
          'ɵɵpropertyInterpolate1': _ɵɵpropertyInterpolate2,
          'ɵɵpropertyInterpolate2': _ɵɵpropertyInterpolate3,
          'ɵɵpropertyInterpolate3': _ɵɵpropertyInterpolate4,
          'ɵɵpropertyInterpolate4': _ɵɵpropertyInterpolate5,
          'ɵɵpropertyInterpolate5': _ɵɵpropertyInterpolate6,
          'ɵɵpropertyInterpolate6': _ɵɵpropertyInterpolate7,
          'ɵɵpropertyInterpolate7': _ɵɵpropertyInterpolate8,
          'ɵɵpropertyInterpolate8': _ɵɵpropertyInterpolate9,
          'ɵɵpropertyInterpolateV': _ɵɵpropertyInterpolateV,
          'ɵɵpipe': _ɵɵpipe,
          'ɵɵqueryRefresh': _ɵɵqueryRefresh,
          'ɵɵviewQuery': _ɵɵviewQuery,
          'ɵɵloadQuery': _ɵɵloadQuery,
          'ɵɵcontentQuery': _ɵɵcontentQuery,
          'ɵɵreference': _ɵɵreference,
          'ɵɵclassMap': _ɵɵclassMap,
          'ɵɵclassMapInterpolate1': _ɵɵclassMapInterpolate,
          'ɵɵclassMapInterpolate2': _ɵɵclassMapInterpolate2,
          'ɵɵclassMapInterpolate3': _ɵɵclassMapInterpolate3,
          'ɵɵclassMapInterpolate4': _ɵɵclassMapInterpolate4,
          'ɵɵclassMapInterpolate5': _ɵɵclassMapInterpolate5,
          'ɵɵclassMapInterpolate6': _ɵɵclassMapInterpolate6,
          'ɵɵclassMapInterpolate7': _ɵɵclassMapInterpolate7,
          'ɵɵclassMapInterpolate8': _ɵɵclassMapInterpolate8,
          'ɵɵclassMapInterpolateV': _ɵɵclassMapInterpolateV,
          'ɵɵstyleMap': _ɵɵstyleMap,
          'ɵɵstyleMapInterpolate1': _ɵɵstyleMapInterpolate,
          'ɵɵstyleMapInterpolate2': _ɵɵstyleMapInterpolate2,
          'ɵɵstyleMapInterpolate3': _ɵɵstyleMapInterpolate3,
          'ɵɵstyleMapInterpolate4': _ɵɵstyleMapInterpolate4,
          'ɵɵstyleMapInterpolate5': _ɵɵstyleMapInterpolate5,
          'ɵɵstyleMapInterpolate6': _ɵɵstyleMapInterpolate6,
          'ɵɵstyleMapInterpolate7': _ɵɵstyleMapInterpolate7,
          'ɵɵstyleMapInterpolate8': _ɵɵstyleMapInterpolate8,
          'ɵɵstyleMapInterpolateV': _ɵɵstyleMapInterpolateV,
          'ɵɵstyleProp': _ɵɵstyleProp,
          'ɵɵstylePropInterpolate1': _ɵɵstylePropInterpolate,
          'ɵɵstylePropInterpolate2': _ɵɵstylePropInterpolate2,
          'ɵɵstylePropInterpolate3': _ɵɵstylePropInterpolate3,
          'ɵɵstylePropInterpolate4': _ɵɵstylePropInterpolate4,
          'ɵɵstylePropInterpolate5': _ɵɵstylePropInterpolate5,
          'ɵɵstylePropInterpolate6': _ɵɵstylePropInterpolate6,
          'ɵɵstylePropInterpolate7': _ɵɵstylePropInterpolate7,
          'ɵɵstylePropInterpolate8': _ɵɵstylePropInterpolate8,
          'ɵɵstylePropInterpolateV': _ɵɵstylePropInterpolateV,
          'ɵɵclassProp': _ɵɵclassProp,
          'ɵɵadvance': _ɵɵadvance,
          'ɵɵtemplate': _ɵɵtemplate,
          'ɵɵtext': _ɵɵtext,
          'ɵɵtextInterpolate': _ɵɵtextInterpolate,
          'ɵɵtextInterpolate1': _ɵɵtextInterpolate2,
          'ɵɵtextInterpolate2': _ɵɵtextInterpolate3,
          'ɵɵtextInterpolate3': _ɵɵtextInterpolate4,
          'ɵɵtextInterpolate4': _ɵɵtextInterpolate5,
          'ɵɵtextInterpolate5': _ɵɵtextInterpolate6,
          'ɵɵtextInterpolate6': _ɵɵtextInterpolate7,
          'ɵɵtextInterpolate7': _ɵɵtextInterpolate8,
          'ɵɵtextInterpolate8': _ɵɵtextInterpolate9,
          'ɵɵtextInterpolateV': _ɵɵtextInterpolateV,
          'ɵɵi18n': _ɵɵi18n,
          'ɵɵi18nAttributes': _ɵɵi18nAttributes,
          'ɵɵi18nExp': _ɵɵi18nExp,
          'ɵɵi18nStart': _ɵɵi18nStart,
          'ɵɵi18nEnd': _ɵɵi18nEnd,
          'ɵɵi18nApply': _ɵɵi18nApply,
          'ɵɵi18nPostprocess': _ɵɵi18nPostprocess,
          'ɵɵresolveWindow': _ɵɵresolveWindow,
          'ɵɵresolveDocument': _ɵɵresolveDocument,
          'ɵɵresolveBody': _ɵɵresolveBody,
          'ɵɵsetComponentScope': _ɵɵsetComponentScope,
          'ɵɵsetNgModuleScope': _ɵɵsetNgModuleScope,
          'ɵɵsanitizeHtml': _ɵɵsanitizeHtml,
          'ɵɵsanitizeStyle': _ɵɵsanitizeStyle,
          'ɵɵsanitizeResourceUrl': _ɵɵsanitizeResourceUrl,
          'ɵɵsanitizeScript': _ɵɵsanitizeScript,
          'ɵɵsanitizeUrl': _ɵɵsanitizeUrl,
          'ɵɵsanitizeUrlOrResourceUrl': _ɵɵsanitizeUrlOrResourceUrl,
          'ɵɵtrustConstantHtml': _ɵɵtrustConstantHtml,
          'ɵɵtrustConstantResourceUrl': _ɵɵtrustConstantResourceUrl,
          'forwardRef': _forwardRef,
          'resolveForwardRef': _resolveForwardRef
        };
      };
      /**
       * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.
       *
       * This should be kept up to date with the public exports of @angular/core.
       */


      var angularCoreEnv = ɵ0$c();
      var jitOptions = null;

      function setJitOptions(options) {
        if (jitOptions !== null) {
          if (options.defaultEncapsulation !== jitOptions.defaultEncapsulation) {
            ngDevMode && console.error('Provided value for `defaultEncapsulation` can not be changed once it has been set.');
            return;
          }

          if (options.preserveWhitespaces !== jitOptions.preserveWhitespaces) {
            ngDevMode && console.error('Provided value for `preserveWhitespaces` can not be changed once it has been set.');
            return;
          }
        }

        jitOptions = options;
      }

      function getJitOptions() {
        return jitOptions;
      }

      function resetJitOptions() {
        jitOptions = null;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var moduleQueue = [];
      /**
       * Enqueues moduleDef to be checked later to see if scope can be set on its
       * component declarations.
       */

      function enqueueModuleForDelayedScoping(moduleType, ngModule) {
        moduleQueue.push({
          moduleType: moduleType,
          ngModule: ngModule
        });
      }

      var flushingModuleQueue = false;
      /**
       * Loops over queued module definitions, if a given module definition has all of its
       * declarations resolved, it dequeues that module definition and sets the scope on
       * its declarations.
       */

      function flushModuleScopingQueueAsMuchAsPossible() {
        if (!flushingModuleQueue) {
          flushingModuleQueue = true;

          try {
            for (var i = moduleQueue.length - 1; i >= 0; i--) {
              var _moduleQueue$i = moduleQueue[i],
                  moduleType = _moduleQueue$i.moduleType,
                  ngModule = _moduleQueue$i.ngModule;

              if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {
                // dequeue
                moduleQueue.splice(i, 1);
                setScopeOnDeclaredComponents(moduleType, ngModule);
              }
            }
          } finally {
            flushingModuleQueue = false;
          }
        }
      }
      /**
       * Returns truthy if a declaration has resolved. If the declaration happens to be
       * an array of declarations, it will recurse to check each declaration in that array
       * (which may also be arrays).
       */


      function isResolvedDeclaration(declaration) {
        if (Array.isArray(declaration)) {
          return declaration.every(isResolvedDeclaration);
        }

        return !!_resolveForwardRef(declaration);
      }
      /**
       * Compiles a module in JIT mode.
       *
       * This function automatically gets called when a class has a `@NgModule` decorator.
       */


      function compileNgModule(moduleType) {
        var ngModule = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        compileNgModuleDefs(moduleType, ngModule); // Because we don't know if all declarations have resolved yet at the moment the
        // NgModule decorator is executing, we're enqueueing the setting of module scope
        // on its declarations to be run at a later time when all declarations for the module,
        // including forward refs, have resolved.

        enqueueModuleForDelayedScoping(moduleType, ngModule);
      }
      /**
       * Compiles and adds the `ɵmod`, `ɵfac` and `ɵinj` properties to the module class.
       *
       * It's possible to compile a module via this API which will allow duplicate declarations in its
       * root.
       */


      function compileNgModuleDefs(moduleType, ngModule) {
        var allowDuplicateDeclarationsInRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        ngDevMode && assertDefined(moduleType, 'Required value moduleType');
        ngDevMode && assertDefined(ngModule, 'Required value ngModule');
        var declarations = flatten(ngModule.declarations || EMPTY_ARRAY);
        var ngModuleDef = null;
        Object.defineProperty(moduleType, NG_MOD_DEF, {
          configurable: true,
          get: function get() {
            if (ngModuleDef === null) {
              if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {
                // We need to assert this immediately, because allowing it to continue will cause it to
                // go into an infinite loop before we've reached the point where we throw all the errors.
                throw new Error("'".concat(stringifyForError(moduleType), "' module can't import itself"));
              }

              ngModuleDef = getCompilerFacade().compileNgModule(angularCoreEnv, "ng:///".concat(moduleType.name, "/\u0275mod.js"), {
                type: moduleType,
                bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(_resolveForwardRef),
                declarations: declarations.map(_resolveForwardRef),
                imports: flatten(ngModule.imports || EMPTY_ARRAY).map(_resolveForwardRef).map(expandModuleWithProviders),
                exports: flatten(ngModule.exports || EMPTY_ARRAY).map(_resolveForwardRef).map(expandModuleWithProviders),
                schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,
                id: ngModule.id || null
              }); // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime
              // should verify that there are no unknown elements in a template. In AOT mode, that check
              // happens at compile time and `schemas` information is not present on Component and Module
              // defs after compilation (so the check doesn't happen the second time at runtime).

              if (!ngModuleDef.schemas) {
                ngModuleDef.schemas = [];
              }
            }

            return ngModuleDef;
          }
        });
        var ngFactoryDef = null;
        Object.defineProperty(moduleType, NG_FACTORY_DEF, {
          get: function get() {
            if (ngFactoryDef === null) {
              var compiler = getCompilerFacade();
              ngFactoryDef = compiler.compileFactory(angularCoreEnv, "ng:///".concat(moduleType.name, "/\u0275fac.js"), {
                name: moduleType.name,
                type: moduleType,
                deps: reflectDependencies(moduleType),
                target: compiler.FactoryTarget.NgModule,
                typeArgumentCount: 0
              });
            }

            return ngFactoryDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode
        });
        var ngInjectorDef = null;
        Object.defineProperty(moduleType, NG_INJ_DEF, {
          get: function get() {
            if (ngInjectorDef === null) {
              ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);
              var meta = {
                name: moduleType.name,
                type: moduleType,
                providers: ngModule.providers || EMPTY_ARRAY,
                imports: [(ngModule.imports || EMPTY_ARRAY).map(_resolveForwardRef), (ngModule.exports || EMPTY_ARRAY).map(_resolveForwardRef)]
              };
              ngInjectorDef = getCompilerFacade().compileInjector(angularCoreEnv, "ng:///".concat(moduleType.name, "/\u0275inj.js"), meta);
            }

            return ngInjectorDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode
        });
      }

      function verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {
        if (verifiedNgModule.get(moduleType)) return;
        verifiedNgModule.set(moduleType, true);
        moduleType = _resolveForwardRef(moduleType);
        var ngModuleDef;

        if (importingModule) {
          ngModuleDef = getNgModuleDef(moduleType);

          if (!ngModuleDef) {
            throw new Error("Unexpected value '".concat(moduleType.name, "' imported by the module '").concat(importingModule.name, "'. Please add an @NgModule annotation."));
          }
        } else {
          ngModuleDef = getNgModuleDef(moduleType, true);
        }

        var errors = [];
        var declarations = maybeUnwrapFn(ngModuleDef.declarations);
        var imports = maybeUnwrapFn(ngModuleDef.imports);
        flatten(imports).map(unwrapModuleWithProvidersImports).forEach(function (mod) {
          verifySemanticsOfNgModuleImport(mod, moduleType);
          verifySemanticsOfNgModuleDef(mod, false, moduleType);
        });
        var exports = maybeUnwrapFn(ngModuleDef.exports);
        declarations.forEach(verifyDeclarationsHaveDefinitions);
        declarations.forEach(verifyDirectivesHaveSelector);
        var combinedDeclarations = [].concat(_toConsumableArray(declarations.map(_resolveForwardRef)), _toConsumableArray(flatten(imports.map(computeCombinedExports)).map(_resolveForwardRef)));
        exports.forEach(verifyExportsAreDeclaredOrReExported);
        declarations.forEach(function (decl) {
          return verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot);
        });
        declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);
        var ngModule = getAnnotation(moduleType, 'NgModule');

        if (ngModule) {
          ngModule.imports && flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(function (mod) {
            verifySemanticsOfNgModuleImport(mod, moduleType);
            verifySemanticsOfNgModuleDef(mod, false, moduleType);
          });
          ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);
          ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);
          ngModule.entryComponents && deepForEach(ngModule.entryComponents, verifyComponentIsPartOfNgModule);
        } // Throw Error if any errors were detected.


        if (errors.length) {
          throw new Error(errors.join('\n'));
        } ////////////////////////////////////////////////////////////////////////////////////////////////


        function verifyDeclarationsHaveDefinitions(type) {
          type = _resolveForwardRef(type);
          var def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);

          if (!def) {
            errors.push("Unexpected value '".concat(stringifyForError(type), "' declared by the module '").concat(stringifyForError(moduleType), "'. Please add a @Pipe/@Directive/@Component annotation."));
          }
        }

        function verifyDirectivesHaveSelector(type) {
          type = _resolveForwardRef(type);
          var def = getDirectiveDef(type);

          if (!getComponentDef(type) && def && def.selectors.length == 0) {
            errors.push("Directive ".concat(stringifyForError(type), " has no selector, please add it!"));
          }
        }

        function verifyExportsAreDeclaredOrReExported(type) {
          type = _resolveForwardRef(type);
          var kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' || getPipeDef(type) && 'pipe';

          if (kind) {
            // only checked if we are declared as Component, Directive, or Pipe
            // Modules don't need to be declared or imported.
            if (combinedDeclarations.lastIndexOf(type) === -1) {
              // We are exporting something which we don't explicitly declare or import.
              errors.push("Can't export ".concat(kind, " ").concat(stringifyForError(type), " from ").concat(stringifyForError(moduleType), " as it was neither declared nor imported!"));
            }
          }
        }

        function verifyDeclarationIsUnique(type, suppressErrors) {
          type = _resolveForwardRef(type);
          var existingModule = ownerNgModule.get(type);

          if (existingModule && existingModule !== moduleType) {
            if (!suppressErrors) {
              var _modules = [existingModule, moduleType].map(stringifyForError).sort();

              errors.push("Type ".concat(stringifyForError(type), " is part of the declarations of 2 modules: ").concat(_modules[0], " and ").concat(_modules[1], "! ") + "Please consider moving ".concat(stringifyForError(type), " to a higher module that imports ").concat(_modules[0], " and ").concat(_modules[1], ". ") + "You can also create a new NgModule that exports and includes ".concat(stringifyForError(type), " then import that NgModule in ").concat(_modules[0], " and ").concat(_modules[1], "."));
            }
          } else {
            // Mark type as having owner.
            ownerNgModule.set(type, moduleType);
          }
        }

        function verifyComponentIsPartOfNgModule(type) {
          type = _resolveForwardRef(type);
          var existingModule = ownerNgModule.get(type);

          if (!existingModule) {
            errors.push("Component ".concat(stringifyForError(type), " is not part of any NgModule or the module has not been imported into your module."));
          }
        }

        function verifyCorrectBootstrapType(type) {
          type = _resolveForwardRef(type);

          if (!getComponentDef(type)) {
            errors.push("".concat(stringifyForError(type), " cannot be used as an entry component."));
          }
        }

        function verifyComponentEntryComponentsIsPartOfNgModule(type) {
          type = _resolveForwardRef(type);

          if (getComponentDef(type)) {
            // We know we are component
            var component = getAnnotation(type, 'Component');

            if (component && component.entryComponents) {
              deepForEach(component.entryComponents, verifyComponentIsPartOfNgModule);
            }
          }
        }

        function verifySemanticsOfNgModuleImport(type, importingModule) {
          type = _resolveForwardRef(type);

          if (getComponentDef(type) || getDirectiveDef(type)) {
            throw new Error("Unexpected directive '".concat(type.name, "' imported by the module '").concat(importingModule.name, "'. Please add an @NgModule annotation."));
          }

          if (getPipeDef(type)) {
            throw new Error("Unexpected pipe '".concat(type.name, "' imported by the module '").concat(importingModule.name, "'. Please add an @NgModule annotation."));
          }
        }
      }

      function unwrapModuleWithProvidersImports(typeOrWithProviders) {
        typeOrWithProviders = _resolveForwardRef(typeOrWithProviders);
        return typeOrWithProviders.ngModule || typeOrWithProviders;
      }

      function getAnnotation(type, name) {
        var annotation = null;
        collect(type.__annotations__);
        collect(type.decorators);
        return annotation;

        function collect(annotations) {
          if (annotations) {
            annotations.forEach(readAnnotation);
          }
        }

        function readAnnotation(decorator) {
          if (!annotation) {
            var proto = Object.getPrototypeOf(decorator);

            if (proto.ngMetadataName == name) {
              annotation = decorator;
            } else if (decorator.type) {
              var _proto = Object.getPrototypeOf(decorator.type);

              if (_proto.ngMetadataName == name) {
                annotation = decorator.args[0];
              }
            }
          }
        }
      }
      /**
       * Keep track of compiled components. This is needed because in tests we often want to compile the
       * same component with more than one NgModule. This would cause an error unless we reset which
       * NgModule the component belongs to. We keep the list of compiled components here so that the
       * TestBed can reset it later.
       */


      var ownerNgModule = new WeakMap();
      var verifiedNgModule = new WeakMap();

      function resetCompiledComponents() {
        ownerNgModule = new WeakMap();
        verifiedNgModule = new WeakMap();
        moduleQueue.length = 0;
      }
      /**
       * Computes the combined declarations of explicit declarations, as well as declarations inherited by
       * traversing the exports of imported modules.
       * @param type
       */


      function computeCombinedExports(type) {
        type = _resolveForwardRef(type);
        var ngModuleDef = getNgModuleDef(type, true);
        return _toConsumableArray(flatten(maybeUnwrapFn(ngModuleDef.exports).map(function (type) {
          var ngModuleDef = getNgModuleDef(type);

          if (ngModuleDef) {
            verifySemanticsOfNgModuleDef(type, false);
            return computeCombinedExports(type);
          } else {
            return type;
          }
        })));
      }
      /**
       * Some declared components may be compiled asynchronously, and thus may not have their
       * ɵcmp set yet. If this is the case, then a reference to the module is written into
       * the `ngSelectorScope` property of the declared type.
       */


      function setScopeOnDeclaredComponents(moduleType, ngModule) {
        var declarations = flatten(ngModule.declarations || EMPTY_ARRAY);
        var transitiveScopes = transitiveScopesFor(moduleType);
        declarations.forEach(function (declaration) {
          if (declaration.hasOwnProperty(NG_COMP_DEF)) {
            // A `ɵcmp` field exists - go ahead and patch the component directly.
            var component = declaration;
            var componentDef = getComponentDef(component);
            patchComponentDefWithScope(componentDef, transitiveScopes);
          } else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {
            // Set `ngSelectorScope` for future reference when the component compilation finishes.
            declaration.ngSelectorScope = moduleType;
          }
        });
      }
      /**
       * Patch the definition of a component with directives and pipes from the compilation scope of
       * a given module.
       */


      function patchComponentDefWithScope(componentDef, transitiveScopes) {
        componentDef.directiveDefs = function () {
          return Array.from(transitiveScopes.compilation.directives).map(function (dir) {
            return dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir) : getDirectiveDef(dir);
          }).filter(function (def) {
            return !!def;
          });
        };

        componentDef.pipeDefs = function () {
          return Array.from(transitiveScopes.compilation.pipes).map(function (pipe) {
            return getPipeDef(pipe);
          });
        };

        componentDef.schemas = transitiveScopes.schemas; // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we
        // may face a problem where previously compiled defs available to a given Component/Directive
        // are cached in TView and may become stale (in case any of these defs gets recompiled). In
        // order to avoid this problem, we force fresh TView to be created.

        componentDef.tView = null;
      }
      /**
       * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.
       *
       * This operation is memoized and the result is cached on the module's definition. This function can
       * be called on modules with components that have not fully compiled yet, but the result should not
       * be used until they have.
       *
       * @param moduleType module that transitive scope should be calculated for.
       */


      function transitiveScopesFor(moduleType) {
        if (!isNgModule(moduleType)) {
          throw new Error("".concat(moduleType.name, " does not have a module def (\u0275mod property)"));
        }

        var def = getNgModuleDef(moduleType);

        if (def.transitiveCompileScopes !== null) {
          return def.transitiveCompileScopes;
        }

        var scopes = {
          schemas: def.schemas || null,
          compilation: {
            directives: new Set(),
            pipes: new Set()
          },
          exported: {
            directives: new Set(),
            pipes: new Set()
          }
        };
        maybeUnwrapFn(def.imports).forEach(function (imported) {
          var importedType = imported;

          if (!isNgModule(importedType)) {
            throw new Error("Importing ".concat(importedType.name, " which does not have a \u0275mod property"));
          } // When this module imports another, the imported module's exported directives and pipes are
          // added to the compilation scope of this module.


          var importedScope = transitiveScopesFor(importedType);
          importedScope.exported.directives.forEach(function (entry) {
            return scopes.compilation.directives.add(entry);
          });
          importedScope.exported.pipes.forEach(function (entry) {
            return scopes.compilation.pipes.add(entry);
          });
        });
        maybeUnwrapFn(def.declarations).forEach(function (declared) {
          var declaredWithDefs = declared;

          if (getPipeDef(declaredWithDefs)) {
            scopes.compilation.pipes.add(declared);
          } else {
            // Either declared has a ɵcmp or ɵdir, or it's a component which hasn't
            // had its template compiled yet. In either case, it gets added to the compilation's
            // directives.
            scopes.compilation.directives.add(declared);
          }
        });
        maybeUnwrapFn(def.exports).forEach(function (exported) {
          var exportedType = exported; // Either the type is a module, a pipe, or a component/directive (which may not have a
          // ɵcmp as it might be compiled asynchronously).

          if (isNgModule(exportedType)) {
            // When this module exports another, the exported module's exported directives and pipes are
            // added to both the compilation and exported scopes of this module.
            var exportedScope = transitiveScopesFor(exportedType);
            exportedScope.exported.directives.forEach(function (entry) {
              scopes.compilation.directives.add(entry);
              scopes.exported.directives.add(entry);
            });
            exportedScope.exported.pipes.forEach(function (entry) {
              scopes.compilation.pipes.add(entry);
              scopes.exported.pipes.add(entry);
            });
          } else if (getPipeDef(exportedType)) {
            scopes.exported.pipes.add(exportedType);
          } else {
            scopes.exported.directives.add(exportedType);
          }
        });
        def.transitiveCompileScopes = scopes;
        return scopes;
      }

      function expandModuleWithProviders(value) {
        if (isModuleWithProviders(value)) {
          return value.ngModule;
        }

        return value;
      }

      function isModuleWithProviders(value) {
        return value.ngModule !== undefined;
      }

      function isNgModule(value) {
        return !!getNgModuleDef(value);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Keep track of the compilation depth to avoid reentrancy issues during JIT compilation. This
       * matters in the following scenario:
       *
       * Consider a component 'A' that extends component 'B', both declared in module 'M'. During
       * the compilation of 'A' the definition of 'B' is requested to capture the inheritance chain,
       * potentially triggering compilation of 'B'. If this nested compilation were to trigger
       * `flushModuleScopingQueueAsMuchAsPossible` it may happen that module 'M' is still pending in the
       * queue, resulting in 'A' and 'B' to be patched with the NgModule scope. As the compilation of
       * 'A' is still in progress, this would introduce a circular dependency on its compilation. To avoid
       * this issue, the module scope queue is only flushed for compilations at the depth 0, to ensure
       * all compilations have finished.
       */


      var compilationDepth = 0;
      /**
       * Compile an Angular component according to its decorator metadata, and patch the resulting
       * component def (ɵcmp) onto the component type.
       *
       * Compilation may be asynchronous (due to the need to resolve URLs for the component template or
       * other resources, for example). In the event that compilation is not immediate, `compileComponent`
       * will enqueue resource resolution into a global queue and will fail to return the `ɵcmp`
       * until the global queue has been resolved with a call to `resolveComponentResources`.
       */

      function compileComponent(type, metadata) {
        // Initialize ngDevMode. This must be the first statement in compileComponent.
        // See the `initNgDevMode` docstring for more information.
        (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();
        var ngComponentDef = null; // Metadata may have resources which need to be resolved.

        maybeQueueResolutionOfComponentResources(type, metadata); // Note that we're using the same function as `Directive`, because that's only subset of metadata
        // that we need to create the ngFactoryDef. We're avoiding using the component metadata
        // because we'd have to resolve the asynchronous templates.

        addDirectiveFactoryDef(type, metadata);
        Object.defineProperty(type, NG_COMP_DEF, {
          get: function get() {
            if (ngComponentDef === null) {
              var compiler = getCompilerFacade();

              if (componentNeedsResolution(metadata)) {
                var error = ["Component '".concat(type.name, "' is not resolved:")];

                if (metadata.templateUrl) {
                  error.push(" - templateUrl: ".concat(metadata.templateUrl));
                }

                if (metadata.styleUrls && metadata.styleUrls.length) {
                  error.push(" - styleUrls: ".concat(JSON.stringify(metadata.styleUrls)));
                }

                error.push("Did you run and wait for 'resolveComponentResources()'?");
                throw new Error(error.join('\n'));
              } // This const was called `jitOptions` previously but had to be renamed to `options` because
              // of a bug with Terser that caused optimized JIT builds to throw a `ReferenceError`.
              // This bug was investigated in https://github.com/angular/angular-cli/issues/17264.
              // We should not rename it back until https://github.com/terser/terser/issues/615 is fixed.


              var options = getJitOptions();
              var preserveWhitespaces = metadata.preserveWhitespaces;

              if (preserveWhitespaces === undefined) {
                if (options !== null && options.preserveWhitespaces !== undefined) {
                  preserveWhitespaces = options.preserveWhitespaces;
                } else {
                  preserveWhitespaces = false;
                }
              }

              var encapsulation = metadata.encapsulation;

              if (encapsulation === undefined) {
                if (options !== null && options.defaultEncapsulation !== undefined) {
                  encapsulation = options.defaultEncapsulation;
                } else {
                  encapsulation = _ViewEncapsulation.Emulated;
                }
              }

              var templateUrl = metadata.templateUrl || "ng:///".concat(type.name, "/template.html");
              var meta = Object.assign(Object.assign({}, directiveMetadata(type, metadata)), {
                typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl),
                template: metadata.template || '',
                preserveWhitespaces: preserveWhitespaces,
                styles: metadata.styles || EMPTY_ARRAY,
                animations: metadata.animations,
                directives: [],
                changeDetection: metadata.changeDetection,
                pipes: new Map(),
                encapsulation: encapsulation,
                interpolation: metadata.interpolation,
                viewProviders: metadata.viewProviders || null
              });
              compilationDepth++;

              try {
                if (meta.usesInheritance) {
                  addDirectiveDefToUndecoratedParents(type);
                }

                ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);
              } finally {
                // Ensure that the compilation depth is decremented even when the compilation failed.
                compilationDepth--;
              }

              if (compilationDepth === 0) {
                // When NgModule decorator executed, we enqueued the module definition such that
                // it would only dequeue and add itself as module scope to all of its declarations,
                // but only if  if all of its declarations had resolved. This call runs the check
                // to see if any modules that are in the queue can be dequeued and add scope to
                // their declarations.
                flushModuleScopingQueueAsMuchAsPossible();
              } // If component compilation is async, then the @NgModule annotation which declares the
              // component may execute and set an ngSelectorScope property on the component type. This
              // allows the component to patch itself with directiveDefs from the module after it
              // finishes compiling.


              if (hasSelectorScope(type)) {
                var scopes = transitiveScopesFor(type.ngSelectorScope);
                patchComponentDefWithScope(ngComponentDef, scopes);
              }
            }

            return ngComponentDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode
        });
      }

      function hasSelectorScope(component) {
        return component.ngSelectorScope !== undefined;
      }
      /**
       * Compile an Angular directive according to its decorator metadata, and patch the resulting
       * directive def onto the component type.
       *
       * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which
       * will resolve when compilation completes and the directive becomes usable.
       */


      function compileDirective(type, directive) {
        var ngDirectiveDef = null;
        addDirectiveFactoryDef(type, directive || {});
        Object.defineProperty(type, NG_DIR_DEF, {
          get: function get() {
            if (ngDirectiveDef === null) {
              // `directive` can be null in the case of abstract directives as a base class
              // that use `@Directive()` with no selector. In that case, pass empty object to the
              // `directiveMetadata` function instead of null.
              var meta = getDirectiveMetadata$1(type, directive || {});
              ngDirectiveDef = getCompilerFacade().compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);
            }

            return ngDirectiveDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode
        });
      }

      function getDirectiveMetadata$1(type, metadata) {
        var name = type && type.name;
        var sourceMapUrl = "ng:///".concat(name, "/\u0275dir.js");
        var compiler = getCompilerFacade();
        var facade = directiveMetadata(type, metadata);
        facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name, sourceMapUrl);

        if (facade.usesInheritance) {
          addDirectiveDefToUndecoratedParents(type);
        }

        return {
          metadata: facade,
          sourceMapUrl: sourceMapUrl
        };
      }

      function addDirectiveFactoryDef(type, metadata) {
        var ngFactoryDef = null;
        Object.defineProperty(type, NG_FACTORY_DEF, {
          get: function get() {
            if (ngFactoryDef === null) {
              var meta = getDirectiveMetadata$1(type, metadata);
              var compiler = getCompilerFacade();
              ngFactoryDef = compiler.compileFactory(angularCoreEnv, "ng:///".concat(type.name, "/\u0275fac.js"), {
                name: meta.metadata.name,
                type: meta.metadata.type,
                typeArgumentCount: 0,
                deps: reflectDependencies(type),
                target: compiler.FactoryTarget.Directive
              });
            }

            return ngFactoryDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode
        });
      }

      function extendsDirectlyFromObject(type) {
        return Object.getPrototypeOf(type.prototype) === Object.prototype;
      }
      /**
       * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a
       * `Component`).
       */


      function directiveMetadata(type, metadata) {
        // Reflect inputs and outputs.
        var reflect = getReflect();
        var propMetadata = reflect.ownPropMetadata(type);
        return {
          name: type.name,
          type: type,
          selector: metadata.selector !== undefined ? metadata.selector : null,
          host: metadata.host || EMPTY_OBJ,
          propMetadata: propMetadata,
          inputs: metadata.inputs || EMPTY_ARRAY,
          outputs: metadata.outputs || EMPTY_ARRAY,
          queries: extractQueriesMetadata(type, propMetadata, isContentQuery),
          lifecycle: {
            usesOnChanges: reflect.hasLifecycleHook(type, 'ngOnChanges')
          },
          typeSourceSpan: null,
          usesInheritance: !extendsDirectlyFromObject(type),
          exportAs: extractExportAs(metadata.exportAs),
          providers: metadata.providers || null,
          viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery)
        };
      }
      /**
       * Adds a directive definition to all parent classes of a type that don't have an Angular decorator.
       */


      function addDirectiveDefToUndecoratedParents(type) {
        var objPrototype = Object.prototype;
        var parent = Object.getPrototypeOf(type.prototype).constructor; // Go up the prototype until we hit `Object`.

        while (parent && parent !== objPrototype) {
          // Since inheritance works if the class was annotated already, we only need to add
          // the def if there are no annotations and the def hasn't been created already.
          if (!getDirectiveDef(parent) && !getComponentDef(parent) && shouldAddAbstractDirective(parent)) {
            compileDirective(parent, null);
          }

          parent = Object.getPrototypeOf(parent);
        }
      }

      function convertToR3QueryPredicate(selector) {
        return typeof selector === 'string' ? splitByComma(selector) : _resolveForwardRef(selector);
      }

      function convertToR3QueryMetadata(propertyName, ann) {
        return {
          propertyName: propertyName,
          predicate: convertToR3QueryPredicate(ann.selector),
          descendants: ann.descendants,
          first: ann.first,
          read: ann.read ? ann.read : null,
          "static": !!ann["static"],
          emitDistinctChangesOnly: !!ann.emitDistinctChangesOnly
        };
      }

      function extractQueriesMetadata(type, propMetadata, isQueryAnn) {
        var queriesMeta = [];

        var _loop4 = function _loop4(field) {
          if (propMetadata.hasOwnProperty(field)) {
            var annotations = propMetadata[field];
            annotations.forEach(function (ann) {
              if (isQueryAnn(ann)) {
                if (!ann.selector) {
                  throw new Error("Can't construct a query for the property \"".concat(field, "\" of ") + "\"".concat(stringifyForError(type), "\" since the query selector wasn't defined."));
                }

                if (annotations.some(isInputAnnotation)) {
                  throw new Error("Cannot combine @Input decorators with query decorators");
                }

                queriesMeta.push(convertToR3QueryMetadata(field, ann));
              }
            });
          }
        };

        for (var field in propMetadata) {
          _loop4(field);
        }

        return queriesMeta;
      }

      function extractExportAs(exportAs) {
        return exportAs === undefined ? null : splitByComma(exportAs);
      }

      function isContentQuery(value) {
        var name = value.ngMetadataName;
        return name === 'ContentChild' || name === 'ContentChildren';
      }

      function isViewQuery(value) {
        var name = value.ngMetadataName;
        return name === 'ViewChild' || name === 'ViewChildren';
      }

      function isInputAnnotation(value) {
        return value.ngMetadataName === 'Input';
      }

      function splitByComma(value) {
        return value.split(',').map(function (piece) {
          return piece.trim();
        });
      }

      var LIFECYCLE_HOOKS = ['ngOnChanges', 'ngOnInit', 'ngOnDestroy', 'ngDoCheck', 'ngAfterViewInit', 'ngAfterViewChecked', 'ngAfterContentInit', 'ngAfterContentChecked'];

      function shouldAddAbstractDirective(type) {
        var reflect = getReflect();

        if (LIFECYCLE_HOOKS.some(function (hookName) {
          return reflect.hasLifecycleHook(type, hookName);
        })) {
          return true;
        }

        var propMetadata = reflect.propMetadata(type);

        for (var field in propMetadata) {
          var annotations = propMetadata[field];

          for (var i = 0; i < annotations.length; i++) {
            var current = annotations[i];
            var metadataName = current.ngMetadataName;

            if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) || metadataName === 'Output' || metadataName === 'HostBinding' || metadataName === 'HostListener') {
              return true;
            }
          }
        }

        return false;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function compilePipe(type, meta) {
        var ngPipeDef = null;
        var ngFactoryDef = null;
        Object.defineProperty(type, NG_FACTORY_DEF, {
          get: function get() {
            if (ngFactoryDef === null) {
              var metadata = getPipeMetadata(type, meta);
              var compiler = getCompilerFacade();
              ngFactoryDef = compiler.compileFactory(angularCoreEnv, "ng:///".concat(metadata.name, "/\u0275fac.js"), {
                name: metadata.name,
                type: metadata.type,
                typeArgumentCount: 0,
                deps: reflectDependencies(type),
                target: compiler.FactoryTarget.Pipe
              });
            }

            return ngFactoryDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode
        });
        Object.defineProperty(type, NG_PIPE_DEF, {
          get: function get() {
            if (ngPipeDef === null) {
              var metadata = getPipeMetadata(type, meta);
              ngPipeDef = getCompilerFacade().compilePipe(angularCoreEnv, "ng:///".concat(metadata.name, "/\u0275pipe.js"), metadata);
            }

            return ngPipeDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode
        });
      }

      function getPipeMetadata(type, meta) {
        return {
          type: type,
          name: type.name,
          pipeName: meta.name,
          pure: meta.pure !== undefined ? meta.pure : true
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ɵ0$d = function ɵ0$d() {
        var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return dir;
      },
          ɵ1$2 = function ɵ1$2(type, meta) {
        return SWITCH_COMPILE_DIRECTIVE(type, meta);
      };
      /**
       * Type of the Directive metadata.
       *
       * @publicApi
       */


      var _Directive = makeDecorator('Directive', ɵ0$d, undefined, undefined, ɵ1$2);

      var ɵ2$1 = function ɵ2$1() {
        var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return Object.assign({
          changeDetection: _ChangeDetectionStrategy.Default
        }, c);
      },
          ɵ3$1 = function ɵ3$1(type, meta) {
        return SWITCH_COMPILE_COMPONENT(type, meta);
      };
      /**
       * Component decorator and metadata.
       *
       * @Annotation
       * @publicApi
       */


      var _Component = makeDecorator('Component', ɵ2$1, _Directive, undefined, ɵ3$1);

      var ɵ4 = function ɵ4(p) {
        return Object.assign({
          pure: true
        }, p);
      },
          ɵ5 = function ɵ5(type, meta) {
        return SWITCH_COMPILE_PIPE(type, meta);
      };
      /**
       * @Annotation
       * @publicApi
       */


      var _Pipe = makeDecorator('Pipe', ɵ4, undefined, undefined, ɵ5);

      var ɵ6 = function ɵ6(bindingPropertyName) {
        return {
          bindingPropertyName: bindingPropertyName
        };
      };
      /**
       * @Annotation
       * @publicApi
       */


      var _Input = makePropDecorator('Input', ɵ6);

      var ɵ7 = function ɵ7(bindingPropertyName) {
        return {
          bindingPropertyName: bindingPropertyName
        };
      };
      /**
       * @Annotation
       * @publicApi
       */


      var _Output = makePropDecorator('Output', ɵ7);

      var ɵ8 = function ɵ8(hostPropertyName) {
        return {
          hostPropertyName: hostPropertyName
        };
      };
      /**
       * @Annotation
       * @publicApi
       */


      var _HostBinding = makePropDecorator('HostBinding', ɵ8);

      var ɵ9 = function ɵ9(eventName, args) {
        return {
          eventName: eventName,
          args: args
        };
      };
      /**
       * Decorator that binds a DOM event to a host listener and supplies configuration metadata.
       * Angular invokes the supplied handler method when the host element emits the specified event,
       * and updates the bound element with the result.
       *
       * If the handler method returns false, applies `preventDefault` on the bound element.
       *
       * @usageNotes
       *
       * The following example declares a directive
       * that attaches a click listener to a button and counts clicks.
       *
       * ```ts
       * @Directive({selector: 'button[counting]'})
       * class CountClicks {
       *   numberOfClicks = 0;
       *
       *   @HostListener('click', ['$event.target'])
       *   onClick(btn) {
       *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);
       *  }
       * }
       *
       * @Component({
       *   selector: 'app',
       *   template: '<button counting>Increment</button>',
       * })
       * class App {}
       *
       * ```
       *
       * The following example registers another DOM event handler that listens for key-press events.
       * ``` ts
       * import { HostListener, Component } from "@angular/core";
       *
       * @Component({
       *   selector: 'app',
       *   template: `<h1>Hello, you have pressed keys {{counter}} number of times!</h1> Press any key to
       * increment the counter.
       *   <button (click)="resetCounter()">Reset Counter</button>`
       * })
       * class AppComponent {
       *   counter = 0;
       *   @HostListener('window:keydown', ['$event'])
       *   handleKeyDown(event: KeyboardEvent) {
       *     this.counter++;
       *   }
       *   resetCounter() {
       *     this.counter = 0;
       *   }
       * }
       * ```
       *
       * @Annotation
       * @publicApi
       */


      var _HostListener = makePropDecorator('HostListener', ɵ9);

      var SWITCH_COMPILE_COMPONENT__POST_R3__ = compileComponent;
      var SWITCH_COMPILE_DIRECTIVE__POST_R3__ = compileDirective;
      var SWITCH_COMPILE_PIPE__POST_R3__ = compilePipe;
      var SWITCH_COMPILE_COMPONENT__PRE_R3__ = noop;
      var SWITCH_COMPILE_DIRECTIVE__PRE_R3__ = noop;
      var SWITCH_COMPILE_PIPE__PRE_R3__ = noop;
      var SWITCH_COMPILE_COMPONENT = SWITCH_COMPILE_COMPONENT__POST_R3__;
      var SWITCH_COMPILE_DIRECTIVE = SWITCH_COMPILE_DIRECTIVE__POST_R3__;
      var SWITCH_COMPILE_PIPE = SWITCH_COMPILE_PIPE__POST_R3__;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var ɵ0$e = function ɵ0$e(ngModule) {
        return ngModule;
      },
          ɵ1$3 =
      /**
       * Decorator that marks the following class as an NgModule, and supplies
       * configuration metadata for it.
       *
       * * The `declarations` and `entryComponents` options configure the compiler
       * with information about what belongs to the NgModule.
       * * The `providers` options configures the NgModule's injector to provide
       * dependencies the NgModule members.
       * * The `imports` and `exports` options bring in members from other modules, and make
       * this module's members available to others.
       */
      function ɵ1$3(type, meta) {
        return SWITCH_COMPILE_NGMODULE(type, meta);
      };
      /**
       * @Annotation
       * @publicApi
       */


      var _NgModule = makeDecorator('NgModule', ɵ0$e, undefined, undefined, ɵ1$3);

      function preR3NgModuleCompile(moduleType, metadata) {
        var imports = metadata && metadata.imports || [];

        if (metadata && metadata.exports) {
          imports = [].concat(_toConsumableArray(imports), [metadata.exports]);
        }

        var moduleInjectorType = moduleType;
        moduleInjectorType.ɵfac = convertInjectableProviderToFactory(moduleType, {
          useClass: moduleType
        });
        moduleInjectorType.ɵinj = _ɵɵdefineInjector({
          providers: metadata && metadata.providers,
          imports: imports
        });
      }

      var SWITCH_COMPILE_NGMODULE__POST_R3__ = compileNgModule;
      var SWITCH_COMPILE_NGMODULE__PRE_R3__ = preR3NgModuleCompile;
      var SWITCH_COMPILE_NGMODULE = SWITCH_COMPILE_NGMODULE__POST_R3__;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A [DI token](guide/glossary#di-token "DI token definition") that you can use to provide
       * one or more initialization functions.
       *
       * The provided functions are injected at application startup and executed during
       * app initialization. If any of these functions returns a Promise or an Observable, initialization
       * does not complete until the Promise is resolved or the Observable is completed.
       *
       * You can, for example, create a factory function that loads language data
       * or an external configuration, and provide that function to the `APP_INITIALIZER` token.
       * The function is executed during the application bootstrap process,
       * and the needed data is available on startup.
       *
       * @see `ApplicationInitStatus`
       *
       * @usageNotes
       *
       * The following example illustrates how to configure a multi-provider using `APP_INITIALIZER` token
       * and a function returning a promise.
       *
       * ```
       *  function initializeApp(): Promise<any> {
       *    return new Promise((resolve, reject) => {
       *      // Do some asynchronous stuff
       *      resolve();
       *    });
       *  }
       *
       *  @NgModule({
       *   imports: [BrowserModule],
       *   declarations: [AppComponent],
       *   bootstrap: [AppComponent],
       *   providers: [{
       *     provide: APP_INITIALIZER,
       *     useFactory: () => initializeApp,
       *     multi: true
       *    }]
       *   })
       *  export class AppModule {}
       * ```
       *
       * It's also possible to configure a multi-provider using `APP_INITIALIZER` token and a function
       * returning an observable, see an example below. Note: the `HttpClient` in this example is used for
       * demo purposes to illustrate how the factory function can work with other providers available
       * through DI.
       *
       * ```
       *  function initializeApp(httpClient: HttpClient): Observable<any> {
       *   return httpClient.get("https://someUrl.com/api/user")
       *     .pipe(
       *        tap(user => { ... })
       *     )
       *  }
       *
       *  @NgModule({
       *    imports: [BrowserModule, HttpClientModule],
       *    declarations: [AppComponent],
       *    bootstrap: [AppComponent],
       *    providers: [{
       *      provide: APP_INITIALIZER,
       *      useFactory: initializeApp,
       *      deps: [HttpClient],
       *      multi: true
       *    }]
       *  })
       *  export class AppModule {}
       * ```
       *
       * @publicApi
       */

      var _APP_INITIALIZER = new _InjectionToken('Application Initializer');
      /**
       * A class that reflects the state of running {@link APP_INITIALIZER} functions.
       *
       * @publicApi
       */


      var _ApplicationInitStatus = /*#__PURE__*/function () {
        function _ApplicationInitStatus(appInits) {
          var _this90 = this;

          _classCallCheck2(this, _ApplicationInitStatus);

          this.appInits = appInits;
          this.resolve = noop;
          this.reject = noop;
          this.initialized = false;
          this.done = false;
          this.donePromise = new Promise(function (res, rej) {
            _this90.resolve = res;
            _this90.reject = rej;
          });
        }
        /** @internal */


        _createClass2(_ApplicationInitStatus, [{
          key: "runInitializers",
          value: function runInitializers() {
            var _this91 = this;

            if (this.initialized) {
              return;
            }

            var asyncInitPromises = [];

            var complete = function complete() {
              _this91.done = true;

              _this91.resolve();
            };

            if (this.appInits) {
              var _loop5 = function _loop5(i) {
                var initResult = _this91.appInits[i]();

                if (isPromise(initResult)) {
                  asyncInitPromises.push(initResult);
                } else if (isObservable(initResult)) {
                  var observableAsPromise = new Promise(function (resolve, reject) {
                    initResult.subscribe({
                      complete: resolve,
                      error: reject
                    });
                  });
                  asyncInitPromises.push(observableAsPromise);
                }
              };

              for (var i = 0; i < this.appInits.length; i++) {
                _loop5(i);
              }
            }

            Promise.all(asyncInitPromises).then(function () {
              complete();
            })["catch"](function (e) {
              _this91.reject(e);
            });

            if (asyncInitPromises.length === 0) {
              complete();
            }

            this.initialized = true;
          }
        }]);

        return _ApplicationInitStatus;
      }();

      _ApplicationInitStatus.ɵfac = function ApplicationInitStatus_Factory(t) {
        return new (t || _ApplicationInitStatus)(_ɵɵinject(_APP_INITIALIZER, 8));
      };

      _ApplicationInitStatus.ɵprov = /*@__PURE__*/_ɵɵdefineInjectable({
        token: _ApplicationInitStatus,
        factory: _ApplicationInitStatus.ɵfac
      });

      _ApplicationInitStatus.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _Inject,
            args: [_APP_INITIALIZER]
          }, {
            type: _Optional
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(_ApplicationInitStatus, [{
          type: _Injectable
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _Inject,
              args: [_APP_INITIALIZER]
            }, {
              type: _Optional
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A [DI token](guide/glossary#di-token "DI token definition") representing a unique string ID, used
       * primarily for prefixing application attributes and CSS styles when
       * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.
       *
       * BY default, the value is randomly generated and assigned to the application by Angular.
       * To provide a custom ID value, use a DI provider <!-- TODO: provider --> to configure
       * the root {@link Injector} that uses this token.
       *
       * @publicApi
       */


      var _APP_ID = new _InjectionToken('AppId');

      function _appIdRandomProviderFactory() {
        return "".concat(_randomChar()).concat(_randomChar()).concat(_randomChar());
      }
      /**
       * Providers that generate a random `APP_ID_TOKEN`.
       * @publicApi
       */


      var APP_ID_RANDOM_PROVIDER = {
        provide: _APP_ID,
        useFactory: _appIdRandomProviderFactory,
        deps: []
      };

      function _randomChar() {
        return String.fromCharCode(97 + Math.floor(Math.random() * 25));
      }
      /**
       * A function that is executed when a platform is initialized.
       * @publicApi
       */


      var _PLATFORM_INITIALIZER = new _InjectionToken('Platform Initializer');
      /**
       * A token that indicates an opaque platform ID.
       * @publicApi
       */


      var _PLATFORM_ID = new _InjectionToken('Platform ID');
      /**
       * A [DI token](guide/glossary#di-token "DI token definition") that provides a set of callbacks to
       * be called for every component that is bootstrapped.
       *
       * Each callback must take a `ComponentRef` instance and return nothing.
       *
       * `(componentRef: ComponentRef) => void`
       *
       * @publicApi
       */


      var _APP_BOOTSTRAP_LISTENER = new _InjectionToken('appBootstrapListener');
      /**
       * A [DI token](guide/glossary#di-token "DI token definition") that indicates the root directory of
       * the application
       * @publicApi
       */


      var _PACKAGE_ROOT_URL = new _InjectionToken('Application Packages Root URL');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var Console = /*#__PURE__*/function () {
        function Console() {
          _classCallCheck2(this, Console);
        }

        _createClass2(Console, [{
          key: "log",
          value: function log(message) {
            // tslint:disable-next-line:no-console
            console.log(message);
          } // Note: for reporting errors use `DOM.logError()` as it is platform specific

        }, {
          key: "warn",
          value: function warn(message) {
            // tslint:disable-next-line:no-console
            console.warn(message);
          }
        }]);

        return Console;
      }();

      Console.ɵfac = function Console_Factory(t) {
        return new (t || Console)();
      };

      Console.ɵprov = /*@__PURE__*/_ɵɵdefineInjectable({
        token: Console,
        factory: Console.ɵfac
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Console, [{
          type: _Injectable
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Provide this token to set the locale of your application.
       * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,
       * DecimalPipe and PercentPipe) and by ICU expressions.
       *
       * See the [i18n guide](guide/i18n#setting-up-locale) for more information.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * import { LOCALE_ID } from '@angular/core';
       * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
       * import { AppModule } from './app/app.module';
       *
       * platformBrowserDynamic().bootstrapModule(AppModule, {
       *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]
       * });
       * ```
       *
       * @publicApi
       */


      var LOCALE_ID$1 = new _InjectionToken('LocaleId');
      /**
       * Provide this token to set the default currency code your application uses for
       * CurrencyPipe when there is no currency code passed into it. This is only used by
       * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.
       *
       * See the [i18n guide](guide/i18n#setting-up-locale) for more information.
       *
       * <div class="alert is-helpful">
       *
       * **Deprecation notice:**
       *
       * The default currency code is currently always `USD` but this is deprecated from v9.
       *
       * **In v10 the default currency code will be taken from the current locale.**
       *
       * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in
       * your application `NgModule`:
       *
       * ```ts
       * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}
       * ```
       *
       * </div>
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
       * import { AppModule } from './app/app.module';
       *
       * platformBrowserDynamic().bootstrapModule(AppModule, {
       *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]
       * });
       * ```
       *
       * @publicApi
       */

      var _DEFAULT_CURRENCY_CODE = new _InjectionToken('DefaultCurrencyCode');
      /**
       * Use this token at bootstrap to provide the content of your translation file (`xtb`,
       * `xlf` or `xlf2`) when you want to translate your application in another language.
       *
       * See the [i18n guide](guide/i18n#merge) for more information.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * import { TRANSLATIONS } from '@angular/core';
       * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
       * import { AppModule } from './app/app.module';
       *
       * // content of your translation file
       * const translations = '....';
       *
       * platformBrowserDynamic().bootstrapModule(AppModule, {
       *   providers: [{provide: TRANSLATIONS, useValue: translations }]
       * });
       * ```
       *
       * @publicApi
       */


      var _TRANSLATIONS = new _InjectionToken('Translations');
      /**
       * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,
       * `xlf` or `xlf2`.
       *
       * See the [i18n guide](guide/i18n#merge) for more information.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * import { TRANSLATIONS_FORMAT } from '@angular/core';
       * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
       * import { AppModule } from './app/app.module';
       *
       * platformBrowserDynamic().bootstrapModule(AppModule, {
       *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]
       * });
       * ```
       *
       * @publicApi
       */


      var _TRANSLATIONS_FORMAT = new _InjectionToken('TranslationsFormat');
      /**
       * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy
       * that the compiler should use in case of missing translations:
       * - Error: throw if you have missing translations.
       * - Warning (default): show a warning in the console and/or shell.
       * - Ignore: do nothing.
       *
       * See the [i18n guide](guide/i18n#missing-translation) for more information.
       *
       * @usageNotes
       * ### Example
       * ```typescript
       * import { MissingTranslationStrategy } from '@angular/core';
       * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
       * import { AppModule } from './app/app.module';
       *
       * platformBrowserDynamic().bootstrapModule(AppModule, {
       *   missingTranslation: MissingTranslationStrategy.Error
       * });
       * ```
       *
       * @publicApi
       */


      var _MissingTranslationStrategy;

      (function (MissingTranslationStrategy) {
        MissingTranslationStrategy[MissingTranslationStrategy["Error"] = 0] = "Error";
        MissingTranslationStrategy[MissingTranslationStrategy["Warning"] = 1] = "Warning";
        MissingTranslationStrategy[MissingTranslationStrategy["Ignore"] = 2] = "Ignore";
      })(_MissingTranslationStrategy || (_MissingTranslationStrategy = {}));
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SWITCH_IVY_ENABLED__POST_R3__ = true;
      var SWITCH_IVY_ENABLED__PRE_R3__ = false;
      var ivyEnabled = SWITCH_IVY_ENABLED__POST_R3__;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Combination of NgModuleFactory and ComponentFactories.
       *
       * @publicApi
       */

      var _ModuleWithComponentFactories = function _ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
        _classCallCheck2(this, _ModuleWithComponentFactories);

        this.ngModuleFactory = ngModuleFactory;
        this.componentFactories = componentFactories;
      };

      function _throwError() {
        throw new Error("Runtime compiler is not loaded");
      }

      var Compiler_compileModuleSync__PRE_R3__ = _throwError;

      var Compiler_compileModuleSync__POST_R3__ = function Compiler_compileModuleSync__POST_R3__(moduleType) {
        return new NgModuleFactory$1(moduleType);
      };

      var Compiler_compileModuleSync = Compiler_compileModuleSync__POST_R3__;
      var Compiler_compileModuleAsync__PRE_R3__ = _throwError;

      var Compiler_compileModuleAsync__POST_R3__ = function Compiler_compileModuleAsync__POST_R3__(moduleType) {
        return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));
      };

      var Compiler_compileModuleAsync = Compiler_compileModuleAsync__POST_R3__;
      var Compiler_compileModuleAndAllComponentsSync__PRE_R3__ = _throwError;

      var Compiler_compileModuleAndAllComponentsSync__POST_R3__ = function Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType) {
        var ngModuleFactory = Compiler_compileModuleSync__POST_R3__(moduleType);
        var moduleDef = getNgModuleDef(moduleType);
        var componentFactories = maybeUnwrapFn(moduleDef.declarations).reduce(function (factories, declaration) {
          var componentDef = getComponentDef(declaration);
          componentDef && factories.push(new ComponentFactory$1(componentDef));
          return factories;
        }, []);
        return new _ModuleWithComponentFactories(ngModuleFactory, componentFactories);
      };

      var Compiler_compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync__POST_R3__;
      var Compiler_compileModuleAndAllComponentsAsync__PRE_R3__ = _throwError;

      var Compiler_compileModuleAndAllComponentsAsync__POST_R3__ = function Compiler_compileModuleAndAllComponentsAsync__POST_R3__(moduleType) {
        return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));
      };

      var Compiler_compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync__POST_R3__;
      /**
       * Low-level service for running the angular compiler during runtime
       * to create {@link ComponentFactory}s, which
       * can later be used to create and render a Component instance.
       *
       * Each `@NgModule` provides an own `Compiler` to its injector,
       * that will use the directives/pipes of the ng module for compilation
       * of components.
       *
       * @publicApi
       */

      var _Compiler = /*#__PURE__*/function () {
        function _Compiler() {
          _classCallCheck2(this, _Compiler);

          /**
           * Compiles the given NgModule and all of its components. All templates of the components listed
           * in `entryComponents` have to be inlined.
           */
          this.compileModuleSync = Compiler_compileModuleSync;
          /**
           * Compiles the given NgModule and all of its components
           */

          this.compileModuleAsync = Compiler_compileModuleAsync;
          /**
           * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.
           */

          this.compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync;
          /**
           * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.
           */

          this.compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync;
        }
        /**
         * Clears all caches.
         */


        _createClass2(_Compiler, [{
          key: "clearCache",
          value: function clearCache() {}
          /**
           * Clears the cache for the given component/ngModule.
           */

        }, {
          key: "clearCacheFor",
          value: function clearCacheFor(type) {}
          /**
           * Returns the id for a given NgModule, if one is defined and known to the compiler.
           */

        }, {
          key: "getModuleId",
          value: function getModuleId(moduleType) {
            return undefined;
          }
        }]);

        return _Compiler;
      }();

      _Compiler.ɵfac = function Compiler_Factory(t) {
        return new (t || _Compiler)();
      };

      _Compiler.ɵprov = /*@__PURE__*/_ɵɵdefineInjectable({
        token: _Compiler,
        factory: _Compiler.ɵfac
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(_Compiler, [{
          type: _Injectable
        }], function () {
          return [];
        }, null);
      })();
      /**
       * Token to provide CompilerOptions in the platform injector.
       *
       * @publicApi
       */


      var _COMPILER_OPTIONS = new _InjectionToken('compilerOptions');
      /**
       * A factory for creating a Compiler
       *
       * @publicApi
       */


      var _CompilerFactory = function _CompilerFactory() {
        _classCallCheck2(this, _CompilerFactory);
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var promise = function () {
        return Promise.resolve(0);
      }();

      function scheduleMicroTask(fn) {
        if (typeof Zone === 'undefined') {
          // use promise to schedule microTask instead of use Zone
          promise.then(function () {
            fn && fn.apply(null, null);
          });
        } else {
          Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function getNativeRequestAnimationFrame() {
        var nativeRequestAnimationFrame = _global['requestAnimationFrame'];
        var nativeCancelAnimationFrame = _global['cancelAnimationFrame'];

        if (typeof Zone !== 'undefined' && nativeRequestAnimationFrame && nativeCancelAnimationFrame) {
          // use unpatched version of requestAnimationFrame(native delegate) if possible
          // to avoid another Change detection
          var unpatchedRequestAnimationFrame = nativeRequestAnimationFrame[Zone.__symbol__('OriginalDelegate')];

          if (unpatchedRequestAnimationFrame) {
            nativeRequestAnimationFrame = unpatchedRequestAnimationFrame;
          }

          var unpatchedCancelAnimationFrame = nativeCancelAnimationFrame[Zone.__symbol__('OriginalDelegate')];

          if (unpatchedCancelAnimationFrame) {
            nativeCancelAnimationFrame = unpatchedCancelAnimationFrame;
          }
        }

        return {
          nativeRequestAnimationFrame: nativeRequestAnimationFrame,
          nativeCancelAnimationFrame: nativeCancelAnimationFrame
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * An injectable service for executing work inside or outside of the Angular zone.
       *
       * The most common use of this service is to optimize performance when starting a work consisting of
       * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
       * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks
       * can reenter the Angular zone via {@link #run}.
       *
       * <!-- TODO: add/fix links to:
       *   - docs explaining zones and the use of zones in Angular and change-detection
       *   - link to runOutsideAngular/run (throughout this file!)
       *   -->
       *
       * @usageNotes
       * ### Example
       *
       * ```
       * import {Component, NgZone} from '@angular/core';
       * import {NgIf} from '@angular/common';
       *
       * @Component({
       *   selector: 'ng-zone-demo',
       *   template: `
       *     <h2>Demo: NgZone</h2>
       *
       *     <p>Progress: {{progress}}%</p>
       *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
       *
       *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
       *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
       *   `,
       * })
       * export class NgZoneDemo {
       *   progress: number = 0;
       *   label: string;
       *
       *   constructor(private _ngZone: NgZone) {}
       *
       *   // Loop inside the Angular zone
       *   // so the UI DOES refresh after each setTimeout cycle
       *   processWithinAngularZone() {
       *     this.label = 'inside';
       *     this.progress = 0;
       *     this._increaseProgress(() => console.log('Inside Done!'));
       *   }
       *
       *   // Loop outside of the Angular zone
       *   // so the UI DOES NOT refresh after each setTimeout cycle
       *   processOutsideOfAngularZone() {
       *     this.label = 'outside';
       *     this.progress = 0;
       *     this._ngZone.runOutsideAngular(() => {
       *       this._increaseProgress(() => {
       *         // reenter the Angular zone and display done
       *         this._ngZone.run(() => { console.log('Outside Done!'); });
       *       });
       *     });
       *   }
       *
       *   _increaseProgress(doneCallback: () => void) {
       *     this.progress += 1;
       *     console.log(`Current progress: ${this.progress}%`);
       *
       *     if (this.progress < 100) {
       *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);
       *     } else {
       *       doneCallback();
       *     }
       *   }
       * }
       * ```
       *
       * @publicApi
       */


      var _NgZone = /*#__PURE__*/function () {
        function _NgZone(_ref6) {
          var _ref6$enableLongStack = _ref6.enableLongStackTrace,
              enableLongStackTrace = _ref6$enableLongStack === void 0 ? false : _ref6$enableLongStack,
              _ref6$shouldCoalesceE = _ref6.shouldCoalesceEventChangeDetection,
              shouldCoalesceEventChangeDetection = _ref6$shouldCoalesceE === void 0 ? false : _ref6$shouldCoalesceE,
              _ref6$shouldCoalesceR = _ref6.shouldCoalesceRunChangeDetection,
              shouldCoalesceRunChangeDetection = _ref6$shouldCoalesceR === void 0 ? false : _ref6$shouldCoalesceR;

          _classCallCheck2(this, _NgZone);

          this.hasPendingMacrotasks = false;
          this.hasPendingMicrotasks = false;
          /**
           * Whether there are no outstanding microtasks or macrotasks.
           */

          this.isStable = true;
          /**
           * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
           */

          this.onUnstable = new _EventEmitter(false);
          /**
           * Notifies when there is no more microtasks enqueued in the current VM Turn.
           * This is a hint for Angular to do change detection, which may enqueue more microtasks.
           * For this reason this event can fire multiple times per VM Turn.
           */

          this.onMicrotaskEmpty = new _EventEmitter(false);
          /**
           * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
           * implies we are about to relinquish VM turn.
           * This event gets called just once.
           */

          this.onStable = new _EventEmitter(false);
          /**
           * Notifies that an error has been delivered.
           */

          this.onError = new _EventEmitter(false);

          if (typeof Zone == 'undefined') {
            throw new Error("In this configuration Angular requires Zone.js");
          }

          Zone.assertZonePatched();
          var self = this;
          self._nesting = 0;
          self._outer = self._inner = Zone.current;

          if (Zone['TaskTrackingZoneSpec']) {
            self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']());
          }

          if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
            self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);
          } // if shouldCoalesceRunChangeDetection is true, all tasks including event tasks will be
          // coalesced, so shouldCoalesceEventChangeDetection option is not necessary and can be skipped.


          self.shouldCoalesceEventChangeDetection = !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;
          self.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;
          self.lastRequestAnimationFrameId = -1;
          self.nativeRequestAnimationFrame = getNativeRequestAnimationFrame().nativeRequestAnimationFrame;
          forkInnerZoneWithAngularBehavior(self);
        }

        _createClass2(_NgZone, [{
          key: "run",
          value:
          /**
           * Executes the `fn` function synchronously within the Angular zone and returns value returned by
           * the function.
           *
           * Running functions via `run` allows you to reenter Angular zone from a task that was executed
           * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
           *
           * Any future tasks or microtasks scheduled from within this function will continue executing from
           * within the Angular zone.
           *
           * If a synchronous error happens it will be rethrown and not reported via `onError`.
           */
          function run(fn, applyThis, applyArgs) {
            return this._inner.run(fn, applyThis, applyArgs);
          }
          /**
           * Executes the `fn` function synchronously within the Angular zone as a task and returns value
           * returned by the function.
           *
           * Running functions via `run` allows you to reenter Angular zone from a task that was executed
           * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
           *
           * Any future tasks or microtasks scheduled from within this function will continue executing from
           * within the Angular zone.
           *
           * If a synchronous error happens it will be rethrown and not reported via `onError`.
           */

        }, {
          key: "runTask",
          value: function runTask(fn, applyThis, applyArgs, name) {
            var zone = this._inner;
            var task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);

            try {
              return zone.runTask(task, applyThis, applyArgs);
            } finally {
              zone.cancelTask(task);
            }
          }
          /**
           * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
           * rethrown.
           */

        }, {
          key: "runGuarded",
          value: function runGuarded(fn, applyThis, applyArgs) {
            return this._inner.runGuarded(fn, applyThis, applyArgs);
          }
          /**
           * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
           * the function.
           *
           * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do
           * work that
           * doesn't trigger Angular change-detection or is subject to Angular's error handling.
           *
           * Any future tasks or microtasks scheduled from within this function will continue executing from
           * outside of the Angular zone.
           *
           * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
           */

        }, {
          key: "runOutsideAngular",
          value: function runOutsideAngular(fn) {
            return this._outer.run(fn);
          }
        }], [{
          key: "isInAngularZone",
          value: function isInAngularZone() {
            return Zone.current.get('isAngularZone') === true;
          }
        }, {
          key: "assertInAngularZone",
          value: function assertInAngularZone() {
            if (!_NgZone.isInAngularZone()) {
              throw new Error('Expected to be in Angular Zone, but it is not!');
            }
          }
        }, {
          key: "assertNotInAngularZone",
          value: function assertNotInAngularZone() {
            if (_NgZone.isInAngularZone()) {
              throw new Error('Expected to not be in Angular Zone, but it is!');
            }
          }
        }]);

        return _NgZone;
      }();

      var EMPTY_PAYLOAD = {};

      function checkStable(zone) {
        // TODO: @JiaLiPassion, should check zone.isCheckStableRunning to prevent
        // re-entry. The case is:
        //
        // @Component({...})
        // export class AppComponent {
        // constructor(private ngZone: NgZone) {
        //   this.ngZone.onStable.subscribe(() => {
        //     this.ngZone.run(() => console.log('stable'););
        //   });
        // }
        //
        // The onStable subscriber run another function inside ngZone
        // which causes `checkStable()` re-entry.
        // But this fix causes some issues in g3, so this fix will be
        // launched in another PR.
        if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {
          try {
            zone._nesting++;
            zone.onMicrotaskEmpty.emit(null);
          } finally {
            zone._nesting--;

            if (!zone.hasPendingMicrotasks) {
              try {
                zone.runOutsideAngular(function () {
                  return zone.onStable.emit(null);
                });
              } finally {
                zone.isStable = true;
              }
            }
          }
        }
      }

      function delayChangeDetectionForEvents(zone) {
        /**
         * We also need to check _nesting here
         * Consider the following case with shouldCoalesceRunChangeDetection = true
         *
         * ngZone.run(() => {});
         * ngZone.run(() => {});
         *
         * We want the two `ngZone.run()` only trigger one change detection
         * when shouldCoalesceRunChangeDetection is true.
         * And because in this case, change detection run in async way(requestAnimationFrame),
         * so we also need to check the _nesting here to prevent multiple
         * change detections.
         */
        if (zone.isCheckStableRunning || zone.lastRequestAnimationFrameId !== -1) {
          return;
        }

        zone.lastRequestAnimationFrameId = zone.nativeRequestAnimationFrame.call(_global, function () {
          // This is a work around for https://github.com/angular/angular/issues/36839.
          // The core issue is that when event coalescing is enabled it is possible for microtasks
          // to get flushed too early (As is the case with `Promise.then`) between the
          // coalescing eventTasks.
          //
          // To workaround this we schedule a "fake" eventTask before we process the
          // coalescing eventTasks. The benefit of this is that the "fake" container eventTask
          //  will prevent the microtasks queue from getting drained in between the coalescing
          // eventTask execution.
          if (!zone.fakeTopEventTask) {
            zone.fakeTopEventTask = Zone.root.scheduleEventTask('fakeTopEventTask', function () {
              zone.lastRequestAnimationFrameId = -1;
              updateMicroTaskStatus(zone);
              zone.isCheckStableRunning = true;
              checkStable(zone);
              zone.isCheckStableRunning = false;
            }, undefined, function () {}, function () {});
          }

          zone.fakeTopEventTask.invoke();
        });
        updateMicroTaskStatus(zone);
      }

      function forkInnerZoneWithAngularBehavior(zone) {
        var delayChangeDetectionForEventsDelegate = function delayChangeDetectionForEventsDelegate() {
          delayChangeDetectionForEvents(zone);
        };

        zone._inner = zone._inner.fork({
          name: 'angular',
          properties: {
            'isAngularZone': true
          },
          onInvokeTask: function onInvokeTask(delegate, current, target, task, applyThis, applyArgs) {
            try {
              onEnter(zone);
              return delegate.invokeTask(target, task, applyThis, applyArgs);
            } finally {
              if (zone.shouldCoalesceEventChangeDetection && task.type === 'eventTask' || zone.shouldCoalesceRunChangeDetection) {
                delayChangeDetectionForEventsDelegate();
              }

              onLeave(zone);
            }
          },
          onInvoke: function onInvoke(delegate, current, target, callback, applyThis, applyArgs, source) {
            try {
              onEnter(zone);
              return delegate.invoke(target, callback, applyThis, applyArgs, source);
            } finally {
              if (zone.shouldCoalesceRunChangeDetection) {
                delayChangeDetectionForEventsDelegate();
              }

              onLeave(zone);
            }
          },
          onHasTask: function onHasTask(delegate, current, target, hasTaskState) {
            delegate.hasTask(target, hasTaskState);

            if (current === target) {
              // We are only interested in hasTask events which originate from our zone
              // (A child hasTask event is not interesting to us)
              if (hasTaskState.change == 'microTask') {
                zone._hasPendingMicrotasks = hasTaskState.microTask;
                updateMicroTaskStatus(zone);
                checkStable(zone);
              } else if (hasTaskState.change == 'macroTask') {
                zone.hasPendingMacrotasks = hasTaskState.macroTask;
              }
            }
          },
          onHandleError: function onHandleError(delegate, current, target, error) {
            delegate.handleError(target, error);
            zone.runOutsideAngular(function () {
              return zone.onError.emit(error);
            });
            return false;
          }
        });
      }

      function updateMicroTaskStatus(zone) {
        if (zone._hasPendingMicrotasks || (zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) && zone.lastRequestAnimationFrameId !== -1) {
          zone.hasPendingMicrotasks = true;
        } else {
          zone.hasPendingMicrotasks = false;
        }
      }

      function onEnter(zone) {
        zone._nesting++;

        if (zone.isStable) {
          zone.isStable = false;
          zone.onUnstable.emit(null);
        }
      }

      function onLeave(zone) {
        zone._nesting--;
        checkStable(zone);
      }
      /**
       * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls
       * to framework to perform rendering.
       */


      var NoopNgZone = /*#__PURE__*/function () {
        function NoopNgZone() {
          _classCallCheck2(this, NoopNgZone);

          this.hasPendingMicrotasks = false;
          this.hasPendingMacrotasks = false;
          this.isStable = true;
          this.onUnstable = new _EventEmitter();
          this.onMicrotaskEmpty = new _EventEmitter();
          this.onStable = new _EventEmitter();
          this.onError = new _EventEmitter();
        }

        _createClass2(NoopNgZone, [{
          key: "run",
          value: function run(fn, applyThis, applyArgs) {
            return fn.apply(applyThis, applyArgs);
          }
        }, {
          key: "runGuarded",
          value: function runGuarded(fn, applyThis, applyArgs) {
            return fn.apply(applyThis, applyArgs);
          }
        }, {
          key: "runOutsideAngular",
          value: function runOutsideAngular(fn) {
            return fn();
          }
        }, {
          key: "runTask",
          value: function runTask(fn, applyThis, applyArgs, name) {
            return fn.apply(applyThis, applyArgs);
          }
        }]);

        return NoopNgZone;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The Testability service provides testing hooks that can be accessed from
       * the browser. Each bootstrapped Angular application on the page will have
       * an instance of Testability.
       * @publicApi
       */


      var _Testability = /*#__PURE__*/function () {
        function _Testability(_ngZone) {
          var _this92 = this;

          _classCallCheck2(this, _Testability);

          this._ngZone = _ngZone;
          this._pendingCount = 0;
          this._isZoneStable = true;
          /**
           * Whether any work was done since the last 'whenStable' callback. This is
           * useful to detect if this could have potentially destabilized another
           * component while it is stabilizing.
           * @internal
           */

          this._didWork = false;
          this._callbacks = [];
          this.taskTrackingZone = null;

          this._watchAngularEvents();

          _ngZone.run(function () {
            _this92.taskTrackingZone = typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');
          });
        }

        _createClass2(_Testability, [{
          key: "_watchAngularEvents",
          value: function _watchAngularEvents() {
            var _this93 = this;

            this._ngZone.onUnstable.subscribe({
              next: function next() {
                _this93._didWork = true;
                _this93._isZoneStable = false;
              }
            });

            this._ngZone.runOutsideAngular(function () {
              _this93._ngZone.onStable.subscribe({
                next: function next() {
                  _NgZone.assertNotInAngularZone();

                  scheduleMicroTask(function () {
                    _this93._isZoneStable = true;

                    _this93._runCallbacksIfReady();
                  });
                }
              });
            });
          }
          /**
           * Increases the number of pending request
           * @deprecated pending requests are now tracked with zones.
           */

        }, {
          key: "increasePendingRequestCount",
          value: function increasePendingRequestCount() {
            this._pendingCount += 1;
            this._didWork = true;
            return this._pendingCount;
          }
          /**
           * Decreases the number of pending request
           * @deprecated pending requests are now tracked with zones
           */

        }, {
          key: "decreasePendingRequestCount",
          value: function decreasePendingRequestCount() {
            this._pendingCount -= 1;

            if (this._pendingCount < 0) {
              throw new Error('pending async requests below zero');
            }

            this._runCallbacksIfReady();

            return this._pendingCount;
          }
          /**
           * Whether an associated application is stable
           */

        }, {
          key: "isStable",
          value: function isStable() {
            return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;
          }
        }, {
          key: "_runCallbacksIfReady",
          value: function _runCallbacksIfReady() {
            var _this94 = this;

            if (this.isStable()) {
              // Schedules the call backs in a new frame so that it is always async.
              scheduleMicroTask(function () {
                while (_this94._callbacks.length !== 0) {
                  var cb = _this94._callbacks.pop();

                  clearTimeout(cb.timeoutId);
                  cb.doneCb(_this94._didWork);
                }

                _this94._didWork = false;
              });
            } else {
              // Still not stable, send updates.
              var pending = this.getPendingTasks();
              this._callbacks = this._callbacks.filter(function (cb) {
                if (cb.updateCb && cb.updateCb(pending)) {
                  clearTimeout(cb.timeoutId);
                  return false;
                }

                return true;
              });
              this._didWork = true;
            }
          }
        }, {
          key: "getPendingTasks",
          value: function getPendingTasks() {
            if (!this.taskTrackingZone) {
              return [];
            } // Copy the tasks data so that we don't leak tasks.


            return this.taskTrackingZone.macroTasks.map(function (t) {
              return {
                source: t.source,
                // From TaskTrackingZone:
                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40
                creationLocation: t.creationLocation,
                data: t.data
              };
            });
          }
        }, {
          key: "addCallback",
          value: function addCallback(cb, timeout, updateCb) {
            var _this95 = this;

            var timeoutId = -1;

            if (timeout && timeout > 0) {
              timeoutId = setTimeout(function () {
                _this95._callbacks = _this95._callbacks.filter(function (cb) {
                  return cb.timeoutId !== timeoutId;
                });
                cb(_this95._didWork, _this95.getPendingTasks());
              }, timeout);
            }

            this._callbacks.push({
              doneCb: cb,
              timeoutId: timeoutId,
              updateCb: updateCb
            });
          }
          /**
           * Wait for the application to be stable with a timeout. If the timeout is reached before that
           * happens, the callback receives a list of the macro tasks that were pending, otherwise null.
           *
           * @param doneCb The callback to invoke when Angular is stable or the timeout expires
           *    whichever comes first.
           * @param timeout Optional. The maximum time to wait for Angular to become stable. If not
           *    specified, whenStable() will wait forever.
           * @param updateCb Optional. If specified, this callback will be invoked whenever the set of
           *    pending macrotasks changes. If this callback returns true doneCb will not be invoked
           *    and no further updates will be issued.
           */

        }, {
          key: "whenStable",
          value: function whenStable(doneCb, timeout, updateCb) {
            if (updateCb && !this.taskTrackingZone) {
              throw new Error('Task tracking zone is required when passing an update callback to ' + 'whenStable(). Is "zone.js/plugins/task-tracking" loaded?');
            } // These arguments are 'Function' above to keep the public API simple.


            this.addCallback(doneCb, timeout, updateCb);

            this._runCallbacksIfReady();
          }
          /**
           * Get the number of pending requests
           * @deprecated pending requests are now tracked with zones
           */

        }, {
          key: "getPendingRequestCount",
          value: function getPendingRequestCount() {
            return this._pendingCount;
          }
          /**
           * Find providers by name
           * @param using The root element to search from
           * @param provider The name of binding variable
           * @param exactMatch Whether using exactMatch
           */

        }, {
          key: "findProviders",
          value: function findProviders(using, provider, exactMatch) {
            // TODO(juliemr): implement.
            return [];
          }
        }]);

        return _Testability;
      }();

      _Testability.ɵfac = function Testability_Factory(t) {
        return new (t || _Testability)(_ɵɵinject(_NgZone));
      };

      _Testability.ɵprov = /*@__PURE__*/_ɵɵdefineInjectable({
        token: _Testability,
        factory: _Testability.ɵfac
      });

      _Testability.ctorParameters = function () {
        return [{
          type: _NgZone
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(_Testability, [{
          type: _Injectable
        }], function () {
          return [{
            type: _NgZone
          }];
        }, null);
      })();
      /**
       * A global registry of {@link Testability} instances for specific elements.
       * @publicApi
       */


      var _TestabilityRegistry = /*#__PURE__*/function () {
        function _TestabilityRegistry() {
          _classCallCheck2(this, _TestabilityRegistry);

          /** @internal */
          this._applications = new Map();

          _testabilityGetter.addToWindow(this);
        }
        /**
         * Registers an application with a testability hook so that it can be tracked
         * @param token token of application, root element
         * @param testability Testability hook
         */


        _createClass2(_TestabilityRegistry, [{
          key: "registerApplication",
          value: function registerApplication(token, testability) {
            this._applications.set(token, testability);
          }
          /**
           * Unregisters an application.
           * @param token token of application, root element
           */

        }, {
          key: "unregisterApplication",
          value: function unregisterApplication(token) {
            this._applications["delete"](token);
          }
          /**
           * Unregisters all applications
           */

        }, {
          key: "unregisterAllApplications",
          value: function unregisterAllApplications() {
            this._applications.clear();
          }
          /**
           * Get a testability hook associated with the application
           * @param elem root element
           */

        }, {
          key: "getTestability",
          value: function getTestability(elem) {
            return this._applications.get(elem) || null;
          }
          /**
           * Get all registered testabilities
           */

        }, {
          key: "getAllTestabilities",
          value: function getAllTestabilities() {
            return Array.from(this._applications.values());
          }
          /**
           * Get all registered applications(root elements)
           */

        }, {
          key: "getAllRootElements",
          value: function getAllRootElements() {
            return Array.from(this._applications.keys());
          }
          /**
           * Find testability of a node in the Tree
           * @param elem node
           * @param findInAncestors whether finding testability in ancestors if testability was not found in
           * current node
           */

        }, {
          key: "findTestabilityInTree",
          value: function findTestabilityInTree(elem) {
            var findInAncestors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
          }
        }]);

        return _TestabilityRegistry;
      }();

      _TestabilityRegistry.ɵfac = function TestabilityRegistry_Factory(t) {
        return new (t || _TestabilityRegistry)();
      };

      _TestabilityRegistry.ɵprov = /*@__PURE__*/_ɵɵdefineInjectable({
        token: _TestabilityRegistry,
        factory: _TestabilityRegistry.ɵfac
      });

      _TestabilityRegistry.ctorParameters = function () {
        return [];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(_TestabilityRegistry, [{
          type: _Injectable
        }], function () {
          return [];
        }, null);
      })();

      var _NoopGetTestability = /*#__PURE__*/function () {
        function _NoopGetTestability() {
          _classCallCheck2(this, _NoopGetTestability);
        }

        _createClass2(_NoopGetTestability, [{
          key: "addToWindow",
          value: function addToWindow(registry) {}
        }, {
          key: "findTestabilityInTree",
          value: function findTestabilityInTree(registry, elem, findInAncestors) {
            return null;
          }
        }]);

        return _NoopGetTestability;
      }();
      /**
       * Set the {@link GetTestability} implementation used by the Angular testing framework.
       * @publicApi
       */


      function _setTestabilityGetter(getter) {
        _testabilityGetter = getter;
      }

      var _testabilityGetter = new _NoopGetTestability();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.
       *
       * For more information on how to run and debug tests with either Ivy or View Engine (legacy),
       * please see [BAZEL.md](./docs/BAZEL.md).
       */


      var _devMode = true;
      var _runModeLocked = false;
      /**
       * Returns whether Angular is in development mode. After called once,
       * the value is locked and won't change any more.
       *
       * By default, this is true, unless a user calls `enableProdMode` before calling this.
       *
       * @publicApi
       */

      function _isDevMode() {
        _runModeLocked = true;
        return _devMode;
      }
      /**
       * Disable Angular's development mode, which turns off assertions and other
       * checks within the framework.
       *
       * One important assertion this disables verifies that a change detection pass
       * does not result in additional changes to any bindings (also known as
       * unidirectional data flow).
       *
       * @publicApi
       */


      function _enableProdMode() {
        if (_runModeLocked) {
          throw new Error('Cannot enable prod mode after platform setup.');
        } // The below check is there so when ngDevMode is set via terser
        // `global['ngDevMode'] = false;` is also dropped.


        if (typeof ngDevMode === undefined || !!ngDevMode) {
          _global['ngDevMode'] = false;
        }

        _devMode = false;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _platform;

      var compileNgModuleFactory = compileNgModuleFactory__POST_R3__;

      function compileNgModuleFactory__PRE_R3__(injector, options, moduleType) {
        var compilerFactory = injector.get(_CompilerFactory);
        var compiler = compilerFactory.createCompiler([options]);
        return compiler.compileModuleAsync(moduleType);
      }

      function compileNgModuleFactory__POST_R3__(injector, options, moduleType) {
        ngDevMode && assertNgModuleType(moduleType);
        var moduleFactory = new NgModuleFactory$1(moduleType); // All of the logic below is irrelevant for AOT-compiled code.

        if (typeof ngJitMode !== 'undefined' && !ngJitMode) {
          return Promise.resolve(moduleFactory);
        }

        var compilerOptions = injector.get(_COMPILER_OPTIONS, []).concat(options); // Configure the compiler to use the provided options. This call may fail when multiple modules
        // are bootstrapped with incompatible options, as a component can only be compiled according to
        // a single set of options.

        setJitOptions({
          defaultEncapsulation: _lastDefined(compilerOptions.map(function (opts) {
            return opts.defaultEncapsulation;
          })),
          preserveWhitespaces: _lastDefined(compilerOptions.map(function (opts) {
            return opts.preserveWhitespaces;
          }))
        });

        if (isComponentResourceResolutionQueueEmpty()) {
          return Promise.resolve(moduleFactory);
        }

        var compilerProviders = _mergeArrays(compilerOptions.map(function (o) {
          return o.providers;
        })); // In case there are no compiler providers, we just return the module factory as
        // there won't be any resource loader. This can happen with Ivy, because AOT compiled
        // modules can be still passed through "bootstrapModule". In that case we shouldn't
        // unnecessarily require the JIT compiler.


        if (compilerProviders.length === 0) {
          return Promise.resolve(moduleFactory);
        }

        var compiler = getCompilerFacade();

        var compilerInjector = _Injector.create({
          providers: compilerProviders
        });

        var resourceLoader = compilerInjector.get(compiler.ResourceLoader); // The resource loader can also return a string while the "resolveComponentResources"
        // always expects a promise. Therefore we need to wrap the returned value in a promise.

        return resolveComponentResources(function (url) {
          return Promise.resolve(resourceLoader.get(url));
        }).then(function () {
          return moduleFactory;
        });
      } // the `window.ng` global utilities are only available in non-VE versions of
      // Angular. The function switch below will make sure that the code is not
      // included into Angular when PRE mode is active.


      function publishDefaultGlobalUtils__PRE_R3__() {}

      function publishDefaultGlobalUtils__POST_R3__() {
        ngDevMode && publishDefaultGlobalUtils();
      }

      var publishDefaultGlobalUtils$1 = publishDefaultGlobalUtils__POST_R3__;
      var isBoundToModule = isBoundToModule__POST_R3__;

      function isBoundToModule__PRE_R3__(cf) {
        return cf instanceof ComponentFactoryBoundToModule;
      }

      function isBoundToModule__POST_R3__(cf) {
        return cf.isBoundToModule;
      }

      var ALLOW_MULTIPLE_PLATFORMS = new _InjectionToken('AllowMultipleToken');
      /**
       * A token for third-party components that can register themselves with NgProbe.
       *
       * @publicApi
       */

      var _NgProbeToken = function _NgProbeToken(name, token) {
        _classCallCheck2(this, _NgProbeToken);

        this.name = name;
        this.token = token;
      };
      /**
       * Creates a platform.
       * Platforms must be created on launch using this function.
       *
       * @publicApi
       */


      function _createPlatform(injector) {
        if (_platform && !_platform.destroyed && !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
          throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
        }

        publishDefaultGlobalUtils$1();
        _platform = injector.get(_PlatformRef);
        var inits = injector.get(_PLATFORM_INITIALIZER, null);
        if (inits) inits.forEach(function (init) {
          return init();
        });
        return _platform;
      }
      /**
       * Creates a factory for a platform. Can be used to provide or override `Providers` specific to
       * your application's runtime needs, such as `PLATFORM_INITIALIZER` and `PLATFORM_ID`.
       * @param parentPlatformFactory Another platform factory to modify. Allows you to compose factories
       * to build up configurations that might be required by different libraries or parts of the
       * application.
       * @param name Identifies the new platform factory.
       * @param providers A set of dependency providers for platforms created with the new factory.
       *
       * @publicApi
       */


      function _createPlatformFactory(parentPlatformFactory, name) {
        var providers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        var desc = "Platform: ".concat(name);
        var marker = new _InjectionToken(desc);
        return function () {
          var extraProviders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

          var platform = _getPlatform();

          if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
            if (parentPlatformFactory) {
              parentPlatformFactory(providers.concat(extraProviders).concat({
                provide: marker,
                useValue: true
              }));
            } else {
              var injectedProviders = providers.concat(extraProviders).concat({
                provide: marker,
                useValue: true
              }, {
                provide: INJECTOR_SCOPE,
                useValue: 'platform'
              });

              _createPlatform(_Injector.create({
                providers: injectedProviders,
                name: desc
              }));
            }
          }

          return _assertPlatform(marker);
        };
      }
      /**
       * Checks that there is currently a platform that contains the given token as a provider.
       *
       * @publicApi
       */


      function _assertPlatform(requiredToken) {
        var platform = _getPlatform();

        if (!platform) {
          throw new Error('No platform exists!');
        }

        if (!platform.injector.get(requiredToken, null)) {
          throw new Error('A platform with a different configuration has been created. Please destroy it first.');
        }

        return platform;
      }
      /**
       * Destroys the current Angular platform and all Angular applications on the page.
       * Destroys all modules and listeners registered with the platform.
       *
       * @publicApi
       */


      function _destroyPlatform() {
        if (_platform && !_platform.destroyed) {
          _platform.destroy();
        }
      }
      /**
       * Returns the current platform.
       *
       * @publicApi
       */


      function _getPlatform() {
        return _platform && !_platform.destroyed ? _platform : null;
      }
      /**
       * The Angular platform is the entry point for Angular on a web page.
       * Each page has exactly one platform. Services (such as reflection) which are common
       * to every Angular application running on the page are bound in its scope.
       * A page's platform is initialized implicitly when a platform is created using a platform
       * factory such as `PlatformBrowser`, or explicitly by calling the `createPlatform()` function.
       *
       * @publicApi
       */


      var _PlatformRef = /*#__PURE__*/function () {
        /** @internal */
        function _PlatformRef(_injector) {
          _classCallCheck2(this, _PlatformRef);

          this._injector = _injector;
          this._modules = [];
          this._destroyListeners = [];
          this._destroyed = false;
        }
        /**
         * Creates an instance of an `@NgModule` for the given platform for offline compilation.
         *
         * @usageNotes
         *
         * The following example creates the NgModule for a browser platform.
         *
         * ```typescript
         * my_module.ts:
         *
         * @NgModule({
         *   imports: [BrowserModule]
         * })
         * class MyModule {}
         *
         * main.ts:
         * import {MyModuleNgFactory} from './my_module.ngfactory';
         * import {platformBrowser} from '@angular/platform-browser';
         *
         * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
         * ```
         */


        _createClass2(_PlatformRef, [{
          key: "bootstrapModuleFactory",
          value: function bootstrapModuleFactory(moduleFactory, options) {
            var _this96 = this;

            // Note: We need to create the NgZone _before_ we instantiate the module,
            // as instantiating the module creates some providers eagerly.
            // So we create a mini parent injector that just contains the new NgZone and
            // pass that as parent to the NgModuleFactory.
            var ngZoneOption = options ? options.ngZone : undefined;
            var ngZoneEventCoalescing = options && options.ngZoneEventCoalescing || false;
            var ngZoneRunCoalescing = options && options.ngZoneRunCoalescing || false;
            var ngZone = getNgZone(ngZoneOption, {
              ngZoneEventCoalescing: ngZoneEventCoalescing,
              ngZoneRunCoalescing: ngZoneRunCoalescing
            });
            var providers = [{
              provide: _NgZone,
              useValue: ngZone
            }]; // Note: Create ngZoneInjector within ngZone.run so that all of the instantiated services are
            // created within the Angular zone
            // Do not try to replace ngZone.run with ApplicationRef#run because ApplicationRef would then be
            // created outside of the Angular zone.

            return ngZone.run(function () {
              var ngZoneInjector = _Injector.create({
                providers: providers,
                parent: _this96.injector,
                name: moduleFactory.moduleType.name
              });

              var moduleRef = moduleFactory.create(ngZoneInjector);
              var exceptionHandler = moduleRef.injector.get(_ErrorHandler, null);

              if (!exceptionHandler) {
                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
              }

              ngZone.runOutsideAngular(function () {
                var subscription = ngZone.onError.subscribe({
                  next: function next(error) {
                    exceptionHandler.handleError(error);
                  }
                });
                moduleRef.onDestroy(function () {
                  remove(_this96._modules, moduleRef);
                  subscription.unsubscribe();
                });
              });
              return _callAndReportToErrorHandler(exceptionHandler, ngZone, function () {
                var initStatus = moduleRef.injector.get(_ApplicationInitStatus);
                initStatus.runInitializers();
                return initStatus.donePromise.then(function () {
                  if (ivyEnabled) {
                    // If the `LOCALE_ID` provider is defined at bootstrap then we set the value for ivy
                    var localeId = moduleRef.injector.get(LOCALE_ID$1, DEFAULT_LOCALE_ID);
                    setLocaleId(localeId || DEFAULT_LOCALE_ID);
                  }

                  _this96._moduleDoBootstrap(moduleRef);

                  return moduleRef;
                });
              });
            });
          }
          /**
           * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.
           *
           * @usageNotes
           * ### Simple Example
           *
           * ```typescript
           * @NgModule({
           *   imports: [BrowserModule]
           * })
           * class MyModule {}
           *
           * let moduleRef = platformBrowser().bootstrapModule(MyModule);
           * ```
           *
           */

        }, {
          key: "bootstrapModule",
          value: function bootstrapModule(moduleType) {
            var _this97 = this;

            var compilerOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var options = optionsReducer({}, compilerOptions);
            return compileNgModuleFactory(this.injector, options, moduleType).then(function (moduleFactory) {
              return _this97.bootstrapModuleFactory(moduleFactory, options);
            });
          }
        }, {
          key: "_moduleDoBootstrap",
          value: function _moduleDoBootstrap(moduleRef) {
            var appRef = moduleRef.injector.get(_ApplicationRef);

            if (moduleRef._bootstrapComponents.length > 0) {
              moduleRef._bootstrapComponents.forEach(function (f) {
                return appRef.bootstrap(f);
              });
            } else if (moduleRef.instance.ngDoBootstrap) {
              moduleRef.instance.ngDoBootstrap(appRef);
            } else {
              throw new Error("The module ".concat(stringify(moduleRef.instance.constructor), " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ") + "Please define one of these.");
            }

            this._modules.push(moduleRef);
          }
          /**
           * Registers a listener to be called when the platform is destroyed.
           */

        }, {
          key: "onDestroy",
          value: function onDestroy(callback) {
            this._destroyListeners.push(callback);
          }
          /**
           * Retrieves the platform {@link Injector}, which is the parent injector for
           * every Angular application on the page and provides singleton providers.
           */

        }, {
          key: "injector",
          get: function get() {
            return this._injector;
          }
          /**
           * Destroys the current Angular platform and all Angular applications on the page.
           * Destroys all modules and listeners registered with the platform.
           */

        }, {
          key: "destroy",
          value: function destroy() {
            if (this._destroyed) {
              throw new Error('The platform has already been destroyed!');
            }

            this._modules.slice().forEach(function (module) {
              return module.destroy();
            });

            this._destroyListeners.forEach(function (listener) {
              return listener();
            });

            this._destroyed = true;
          }
        }, {
          key: "destroyed",
          get: function get() {
            return this._destroyed;
          }
        }]);

        return _PlatformRef;
      }();

      _PlatformRef.ɵfac = function PlatformRef_Factory(t) {
        return new (t || _PlatformRef)(_ɵɵinject(_Injector));
      };

      _PlatformRef.ɵprov = /*@__PURE__*/_ɵɵdefineInjectable({
        token: _PlatformRef,
        factory: _PlatformRef.ɵfac
      });

      _PlatformRef.ctorParameters = function () {
        return [{
          type: _Injector
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(_PlatformRef, [{
          type: _Injectable
        }], function () {
          return [{
            type: _Injector
          }];
        }, null);
      })();

      function getNgZone(ngZoneOption, extra) {
        var ngZone;

        if (ngZoneOption === 'noop') {
          ngZone = new NoopNgZone();
        } else {
          ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) || new _NgZone({
            enableLongStackTrace: _isDevMode(),
            shouldCoalesceEventChangeDetection: !!(extra === null || extra === void 0 ? void 0 : extra.ngZoneEventCoalescing),
            shouldCoalesceRunChangeDetection: !!(extra === null || extra === void 0 ? void 0 : extra.ngZoneRunCoalescing)
          });
        }

        return ngZone;
      }

      function _callAndReportToErrorHandler(errorHandler, ngZone, callback) {
        try {
          var result = callback();

          if (isPromise(result)) {
            return result["catch"](function (e) {
              ngZone.runOutsideAngular(function () {
                return errorHandler.handleError(e);
              }); // rethrow as the exception handler might not do it

              throw e;
            });
          }

          return result;
        } catch (e) {
          ngZone.runOutsideAngular(function () {
            return errorHandler.handleError(e);
          }); // rethrow as the exception handler might not do it

          throw e;
        }
      }

      function optionsReducer(dst, objs) {
        if (Array.isArray(objs)) {
          dst = objs.reduce(optionsReducer, dst);
        } else {
          dst = Object.assign(Object.assign({}, dst), objs);
        }

        return dst;
      }
      /**
       * A reference to an Angular application running on a page.
       *
       * @usageNotes
       *
       * {@a is-stable-examples}
       * ### isStable examples and caveats
       *
       * Note two important points about `isStable`, demonstrated in the examples below:
       * - the application will never be stable if you start any kind
       * of recurrent asynchronous task when the application starts
       * (for example for a polling process, started with a `setInterval`, a `setTimeout`
       * or using RxJS operators like `interval`);
       * - the `isStable` Observable runs outside of the Angular zone.
       *
       * Let's imagine that you start a recurrent task
       * (here incrementing a counter, using RxJS `interval`),
       * and at the same time subscribe to `isStable`.
       *
       * ```
       * constructor(appRef: ApplicationRef) {
       *   appRef.isStable.pipe(
       *      filter(stable => stable)
       *   ).subscribe(() => console.log('App is stable now');
       *   interval(1000).subscribe(counter => console.log(counter));
       * }
       * ```
       * In this example, `isStable` will never emit `true`,
       * and the trace "App is stable now" will never get logged.
       *
       * If you want to execute something when the app is stable,
       * you have to wait for the application to be stable
       * before starting your polling process.
       *
       * ```
       * constructor(appRef: ApplicationRef) {
       *   appRef.isStable.pipe(
       *     first(stable => stable),
       *     tap(stable => console.log('App is stable now')),
       *     switchMap(() => interval(1000))
       *   ).subscribe(counter => console.log(counter));
       * }
       * ```
       * In this example, the trace "App is stable now" will be logged
       * and then the counter starts incrementing every second.
       *
       * Note also that this Observable runs outside of the Angular zone,
       * which means that the code in the subscription
       * to this Observable will not trigger the change detection.
       *
       * Let's imagine that instead of logging the counter value,
       * you update a field of your component
       * and display it in its template.
       *
       * ```
       * constructor(appRef: ApplicationRef) {
       *   appRef.isStable.pipe(
       *     first(stable => stable),
       *     switchMap(() => interval(1000))
       *   ).subscribe(counter => this.value = counter);
       * }
       * ```
       * As the `isStable` Observable runs outside the zone,
       * the `value` field will be updated properly,
       * but the template will not be refreshed!
       *
       * You'll have to manually trigger the change detection to update the template.
       *
       * ```
       * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {
       *   appRef.isStable.pipe(
       *     first(stable => stable),
       *     switchMap(() => interval(1000))
       *   ).subscribe(counter => {
       *     this.value = counter;
       *     cd.detectChanges();
       *   });
       * }
       * ```
       *
       * Or make the subscription callback run inside the zone.
       *
       * ```
       * constructor(appRef: ApplicationRef, zone: NgZone) {
       *   appRef.isStable.pipe(
       *     first(stable => stable),
       *     switchMap(() => interval(1000))
       *   ).subscribe(counter => zone.run(() => this.value = counter));
       * }
       * ```
       *
       * @publicApi
       */


      var _ApplicationRef = /*#__PURE__*/function () {
        /** @internal */
        function _ApplicationRef(_zone, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {
          var _this98 = this;

          _classCallCheck2(this, _ApplicationRef);

          this._zone = _zone;
          this._injector = _injector;
          this._exceptionHandler = _exceptionHandler;
          this._componentFactoryResolver = _componentFactoryResolver;
          this._initStatus = _initStatus;
          /** @internal */

          this._bootstrapListeners = [];
          this._views = [];
          this._runningTick = false;
          this._stable = true;
          /**
           * Get a list of component types registered to this application.
           * This list is populated even before the component is created.
           */

          this.componentTypes = [];
          /**
           * Get a list of components registered to this application.
           */

          this.components = [];
          this._onMicrotaskEmptySubscription = this._zone.onMicrotaskEmpty.subscribe({
            next: function next() {
              _this98._zone.run(function () {
                _this98.tick();
              });
            }
          });
          var isCurrentlyStable = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(function (observer) {
            _this98._stable = _this98._zone.isStable && !_this98._zone.hasPendingMacrotasks && !_this98._zone.hasPendingMicrotasks;

            _this98._zone.runOutsideAngular(function () {
              observer.next(_this98._stable);
              observer.complete();
            });
          });
          var isStable = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(function (observer) {
            // Create the subscription to onStable outside the Angular Zone so that
            // the callback is run outside the Angular Zone.
            var stableSub;

            _this98._zone.runOutsideAngular(function () {
              stableSub = _this98._zone.onStable.subscribe(function () {
                _NgZone.assertNotInAngularZone(); // Check whether there are no pending macro/micro tasks in the next tick
                // to allow for NgZone to update the state.


                scheduleMicroTask(function () {
                  if (!_this98._stable && !_this98._zone.hasPendingMacrotasks && !_this98._zone.hasPendingMicrotasks) {
                    _this98._stable = true;
                    observer.next(true);
                  }
                });
              });
            });

            var unstableSub = _this98._zone.onUnstable.subscribe(function () {
              _NgZone.assertInAngularZone();

              if (_this98._stable) {
                _this98._stable = false;

                _this98._zone.runOutsideAngular(function () {
                  observer.next(false);
                });
              }
            });

            return function () {
              stableSub.unsubscribe();
              unstableSub.unsubscribe();
            };
          });
          this.isStable = (0, rxjs__WEBPACK_IMPORTED_MODULE_3__.merge)(isCurrentlyStable, isStable.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.share)()));
        }
        /**
         * Bootstrap a new component at the root level of the application.
         *
         * @usageNotes
         * ### Bootstrap process
         *
         * When bootstrapping a new root component into an application, Angular mounts the
         * specified application component onto DOM elements identified by the componentType's
         * selector and kicks off automatic change detection to finish initializing the component.
         *
         * Optionally, a component can be mounted onto a DOM element that does not match the
         * componentType's selector.
         *
         * ### Example
         * {@example core/ts/platform/platform.ts region='longform'}
         */


        _createClass2(_ApplicationRef, [{
          key: "bootstrap",
          value: function bootstrap(componentOrFactory, rootSelectorOrNode) {
            var _this99 = this;

            if (!this._initStatus.done) {
              throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
            }

            var componentFactory;

            if (componentOrFactory instanceof _ComponentFactory) {
              componentFactory = componentOrFactory;
            } else {
              componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
            }

            this.componentTypes.push(componentFactory.componentType); // Create a factory associated with the current module if it's not bound to some other

            var ngModule = isBoundToModule(componentFactory) ? undefined : this._injector.get(_NgModuleRef);
            var selectorOrNode = rootSelectorOrNode || componentFactory.selector;
            var compRef = componentFactory.create(_Injector.NULL, [], selectorOrNode, ngModule);
            var nativeElement = compRef.location.nativeElement;
            var testability = compRef.injector.get(_Testability, null);
            var testabilityRegistry = testability && compRef.injector.get(_TestabilityRegistry);

            if (testability && testabilityRegistry) {
              testabilityRegistry.registerApplication(nativeElement, testability);
            }

            compRef.onDestroy(function () {
              _this99.detachView(compRef.hostView);

              remove(_this99.components, compRef);

              if (testabilityRegistry) {
                testabilityRegistry.unregisterApplication(nativeElement);
              }
            });

            this._loadComponent(compRef); // Note that we have still left the `isDevMode()` condition in order to avoid
            // creating a breaking change for projects that still use the View Engine.


            if ((typeof ngDevMode === 'undefined' || ngDevMode) && _isDevMode()) {
              var _console = this._injector.get(Console);

              _console.log("Angular is running in development mode. Call enableProdMode() to enable production mode.");
            }

            return compRef;
          }
          /**
           * Invoke this method to explicitly process change detection and its side-effects.
           *
           * In development mode, `tick()` also performs a second change detection cycle to ensure that no
           * further changes are detected. If additional changes are picked up during this second cycle,
           * bindings in the app have side-effects that cannot be resolved in a single change detection
           * pass.
           * In this case, Angular throws an error, since an Angular application can only have one change
           * detection pass during which all change detection must complete.
           */

        }, {
          key: "tick",
          value: function tick() {
            var _this100 = this;

            if (this._runningTick) {
              throw new Error('ApplicationRef.tick is called recursively');
            }

            try {
              this._runningTick = true;

              var _iterator7 = _createForOfIteratorHelper(this._views),
                  _step7;

              try {
                for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                  var _view3 = _step7.value;

                  _view3.detectChanges();
                } // Note that we have still left the `isDevMode()` condition in order to avoid
                // creating a breaking change for projects that still use the View Engine.

              } catch (err) {
                _iterator7.e(err);
              } finally {
                _iterator7.f();
              }

              if ((typeof ngDevMode === 'undefined' || ngDevMode) && _isDevMode()) {
                var _iterator8 = _createForOfIteratorHelper(this._views),
                    _step8;

                try {
                  for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                    var view = _step8.value;
                    view.checkNoChanges();
                  }
                } catch (err) {
                  _iterator8.e(err);
                } finally {
                  _iterator8.f();
                }
              }
            } catch (e) {
              // Attention: Don't rethrow as it could cancel subscriptions to Observables!
              this._zone.runOutsideAngular(function () {
                return _this100._exceptionHandler.handleError(e);
              });
            } finally {
              this._runningTick = false;
            }
          }
          /**
           * Attaches a view so that it will be dirty checked.
           * The view will be automatically detached when it is destroyed.
           * This will throw if the view is already attached to a ViewContainer.
           */

        }, {
          key: "attachView",
          value: function attachView(viewRef) {
            var view = viewRef;

            this._views.push(view);

            view.attachToAppRef(this);
          }
          /**
           * Detaches a view from dirty checking again.
           */

        }, {
          key: "detachView",
          value: function detachView(viewRef) {
            var view = viewRef;
            remove(this._views, view);
            view.detachFromAppRef();
          }
        }, {
          key: "_loadComponent",
          value: function _loadComponent(componentRef) {
            this.attachView(componentRef.hostView);
            this.tick();
            this.components.push(componentRef); // Get the listeners lazily to prevent DI cycles.

            var listeners = this._injector.get(_APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);

            listeners.forEach(function (listener) {
              return listener(componentRef);
            });
          }
          /** @internal */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._views.slice().forEach(function (view) {
              return view.destroy();
            });

            this._onMicrotaskEmptySubscription.unsubscribe();
          }
          /**
           * Returns the number of attached views.
           */

        }, {
          key: "viewCount",
          get: function get() {
            return this._views.length;
          }
        }]);

        return _ApplicationRef;
      }();

      _ApplicationRef.ɵfac = function ApplicationRef_Factory(t) {
        return new (t || _ApplicationRef)(_ɵɵinject(_NgZone), _ɵɵinject(_Injector), _ɵɵinject(_ErrorHandler), _ɵɵinject(_ComponentFactoryResolver), _ɵɵinject(_ApplicationInitStatus));
      };

      _ApplicationRef.ɵprov = /*@__PURE__*/_ɵɵdefineInjectable({
        token: _ApplicationRef,
        factory: _ApplicationRef.ɵfac
      });

      _ApplicationRef.ctorParameters = function () {
        return [{
          type: _NgZone
        }, {
          type: _Injector
        }, {
          type: _ErrorHandler
        }, {
          type: _ComponentFactoryResolver
        }, {
          type: _ApplicationInitStatus
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(_ApplicationRef, [{
          type: _Injectable
        }], function () {
          return [{
            type: _NgZone
          }, {
            type: _Injector
          }, {
            type: _ErrorHandler
          }, {
            type: _ComponentFactoryResolver
          }, {
            type: _ApplicationInitStatus
          }];
        }, null);
      })();

      function remove(list, el) {
        var index = list.indexOf(el);

        if (index > -1) {
          list.splice(index, 1);
        }
      }

      function _lastDefined(args) {
        for (var i = args.length - 1; i >= 0; i--) {
          if (args[i] !== undefined) {
            return args[i];
          }
        }

        return undefined;
      }

      function _mergeArrays(parts) {
        var result = [];
        parts.forEach(function (part) {
          return part && result.push.apply(result, _toConsumableArray(part));
        });
        return result;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Used to load ng module factories.
       *
       * @publicApi
       * @deprecated the `string` form of `loadChildren` is deprecated, and `NgModuleFactoryLoader` is
       * part of its implementation. See `LoadChildren` for more details.
       */


      var _NgModuleFactoryLoader = function _NgModuleFactoryLoader() {
        _classCallCheck2(this, _NgModuleFactoryLoader);
      };

      function getModuleFactory__PRE_R3__(id) {
        var factory = getRegisteredNgModuleType(id);
        if (!factory) throw noModuleError(id);
        return factory;
      }

      function getModuleFactory__POST_R3__(id) {
        var type = getRegisteredNgModuleType(id);
        if (!type) throw noModuleError(id);
        return new NgModuleFactory$1(type);
      }
      /**
       * Returns the NgModuleFactory with the given id, if it exists and has been loaded.
       * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
       * cannot be found.
       * @publicApi
       */


      var _getModuleFactory = getModuleFactory__POST_R3__;

      function noModuleError(id) {
        return new Error("No module with ID ".concat(id, " loaded"));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _SEPARATOR = '#';
      var FACTORY_CLASS_SUFFIX = 'NgFactory';
      /**
       * Configuration for SystemJsNgModuleLoader.
       * token.
       *
       * @publicApi
       * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoaderConfig`
       * is part of its implementation. See `LoadChildren` for more details.
       */

      var _SystemJsNgModuleLoaderConfig = function _SystemJsNgModuleLoaderConfig() {
        _classCallCheck2(this, _SystemJsNgModuleLoaderConfig);
      };

      var DEFAULT_CONFIG = {
        factoryPathPrefix: '',
        factoryPathSuffix: '.ngfactory'
      };
      /**
       * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
       * @publicApi
       * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoader` is
       * part of its implementation. See `LoadChildren` for more details.
       */

      var _SystemJsNgModuleLoader = /*#__PURE__*/function () {
        function _SystemJsNgModuleLoader(_compiler, config) {
          _classCallCheck2(this, _SystemJsNgModuleLoader);

          this._compiler = _compiler;
          this._config = config || DEFAULT_CONFIG;
        }

        _createClass2(_SystemJsNgModuleLoader, [{
          key: "load",
          value: function load(path) {
            var legacyOfflineMode = !ivyEnabled && this._compiler instanceof _Compiler;
            return legacyOfflineMode ? this.loadFactory(path) : this.loadAndCompile(path);
          }
        }, {
          key: "loadAndCompile",
          value: function loadAndCompile(path) {
            var _this101 = this;

            var _path$split = path.split(_SEPARATOR),
                _path$split2 = _slicedToArray(_path$split, 2),
                module = _path$split2[0],
                exportName = _path$split2[1];

            if (exportName === undefined) {
              exportName = 'default';
            }

            return __webpack_require__(98255)(module).then(function (module) {
              return module[exportName];
            }).then(function (type) {
              return checkNotEmpty(type, module, exportName);
            }).then(function (type) {
              return _this101._compiler.compileModuleAsync(type);
            });
          }
        }, {
          key: "loadFactory",
          value: function loadFactory(path) {
            var _path$split3 = path.split(_SEPARATOR),
                _path$split4 = _slicedToArray(_path$split3, 2),
                module = _path$split4[0],
                exportName = _path$split4[1];

            var factoryClassSuffix = FACTORY_CLASS_SUFFIX;

            if (exportName === undefined) {
              exportName = 'default';
              factoryClassSuffix = '';
            }

            return __webpack_require__(98255)(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix).then(function (module) {
              return module[exportName + factoryClassSuffix];
            }).then(function (factory) {
              return checkNotEmpty(factory, module, exportName);
            });
          }
        }]);

        return _SystemJsNgModuleLoader;
      }();

      _SystemJsNgModuleLoader.ɵfac = function SystemJsNgModuleLoader_Factory(t) {
        return new (t || _SystemJsNgModuleLoader)(_ɵɵinject(_Compiler), _ɵɵinject(_SystemJsNgModuleLoaderConfig, 8));
      };

      _SystemJsNgModuleLoader.ɵprov = /*@__PURE__*/_ɵɵdefineInjectable({
        token: _SystemJsNgModuleLoader,
        factory: _SystemJsNgModuleLoader.ɵfac
      });

      _SystemJsNgModuleLoader.ctorParameters = function () {
        return [{
          type: _Compiler
        }, {
          type: _SystemJsNgModuleLoaderConfig,
          decorators: [{
            type: _Optional
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(_SystemJsNgModuleLoader, [{
          type: _Injectable
        }], function () {
          return [{
            type: _Compiler
          }, {
            type: _SystemJsNgModuleLoaderConfig,
            decorators: [{
              type: _Optional
            }]
          }];
        }, null);
      })();

      function checkNotEmpty(value, modulePath, exportName) {
        if (!value) {
          throw new Error("Cannot find '".concat(exportName, "' in '").concat(modulePath, "'"));
        }

        return value;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Represents an Angular [view](guide/glossary#view "Definition").
       *
       * @see {@link ChangeDetectorRef#usage-notes Change detection usage}
       *
       * @publicApi
       */


      var ViewRef$1 = /*#__PURE__*/function (_ChangeDetectorRef2) {
        _inherits(ViewRef$1, _ChangeDetectorRef2);

        var _super27 = _createSuper(ViewRef$1);

        function ViewRef$1() {
          _classCallCheck2(this, ViewRef$1);

          return _super27.apply(this, arguments);
        }

        return ViewRef$1;
      }(_ChangeDetectorRef);
      /**
       * Represents an Angular [view](guide/glossary#view) in a view container.
       * An [embedded view](guide/glossary#view-tree) can be referenced from a component
       * other than the hosting component whose template defines it, or it can be defined
       * independently by a `TemplateRef`.
       *
       * Properties of elements in a view can change, but the structure (number and order) of elements in
       * a view cannot. Change the structure of elements by inserting, moving, or
       * removing nested views in a view container.
       *
       * @see `ViewContainerRef`
       *
       * @usageNotes
       *
       * The following template breaks down into two separate `TemplateRef` instances,
       * an outer one and an inner one.
       *
       * ```
       * Count: {{items.length}}
       * <ul>
       *   <li *ngFor="let  item of items">{{item}}</li>
       * </ul>
       * ```
       *
       * This is the outer `TemplateRef`:
       *
       * ```
       * Count: {{items.length}}
       * <ul>
       *   <ng-template ngFor let-item [ngForOf]="items"></ng-template>
       * </ul>
       * ```
       *
       * This is the inner `TemplateRef`:
       *
       * ```
       *   <li>{{item}}</li>
       * ```
       *
       * The outer and inner `TemplateRef` instances are assembled into views as follows:
       *
       * ```
       * <!-- ViewRef: outer-0 -->
       * Count: 2
       * <ul>
       *   <ng-template view-container-ref></ng-template>
       *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
       *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
       * </ul>
       * <!-- /ViewRef: outer-0 -->
       * ```
       * @publicApi
       */


      var _EmbeddedViewRef = /*#__PURE__*/function (_ViewRef$) {
        _inherits(_EmbeddedViewRef, _ViewRef$);

        var _super28 = _createSuper(_EmbeddedViewRef);

        function _EmbeddedViewRef() {
          _classCallCheck2(this, _EmbeddedViewRef);

          return _super28.apply(this, arguments);
        }

        return _EmbeddedViewRef;
      }(ViewRef$1);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @publicApi
       */


      var _DebugEventListener = function _DebugEventListener(name, callback) {
        _classCallCheck2(this, _DebugEventListener);

        this.name = name;
        this.callback = callback;
      };

      var DebugNode__PRE_R3__ = /*#__PURE__*/function () {
        function DebugNode__PRE_R3__(nativeNode, parent, _debugContext) {
          _classCallCheck2(this, DebugNode__PRE_R3__);

          this.listeners = [];
          this.parent = null;
          this._debugContext = _debugContext;
          this.nativeNode = nativeNode;

          if (parent && parent instanceof DebugElement__PRE_R3__) {
            parent.addChild(this);
          }
        }

        _createClass2(DebugNode__PRE_R3__, [{
          key: "injector",
          get: function get() {
            return this._debugContext.injector;
          }
        }, {
          key: "componentInstance",
          get: function get() {
            return this._debugContext.component;
          }
        }, {
          key: "context",
          get: function get() {
            return this._debugContext.context;
          }
        }, {
          key: "references",
          get: function get() {
            return this._debugContext.references;
          }
        }, {
          key: "providerTokens",
          get: function get() {
            return this._debugContext.providerTokens;
          }
        }]);

        return DebugNode__PRE_R3__;
      }();

      var DebugElement__PRE_R3__ = /*#__PURE__*/function (_DebugNode__PRE_R3__) {
        _inherits(DebugElement__PRE_R3__, _DebugNode__PRE_R3__);

        var _super29 = _createSuper(DebugElement__PRE_R3__);

        function DebugElement__PRE_R3__(nativeNode, parent, _debugContext) {
          var _this102;

          _classCallCheck2(this, DebugElement__PRE_R3__);

          _this102 = _super29.call(this, nativeNode, parent, _debugContext);
          _this102.properties = {};
          _this102.attributes = {};
          _this102.classes = {};
          _this102.styles = {};
          _this102.childNodes = [];
          _this102.nativeElement = nativeNode;
          return _this102;
        }

        _createClass2(DebugElement__PRE_R3__, [{
          key: "addChild",
          value: function addChild(child) {
            if (child) {
              this.childNodes.push(child);
              child.parent = this;
            }
          }
        }, {
          key: "removeChild",
          value: function removeChild(child) {
            var childIndex = this.childNodes.indexOf(child);

            if (childIndex !== -1) {
              child.parent = null;
              this.childNodes.splice(childIndex, 1);
            }
          }
        }, {
          key: "insertChildrenAfter",
          value: function insertChildrenAfter(child, newChildren) {
            var _this103 = this;

            var siblingIndex = this.childNodes.indexOf(child);

            if (siblingIndex !== -1) {
              var _this$childNodes;

              (_this$childNodes = this.childNodes).splice.apply(_this$childNodes, [siblingIndex + 1, 0].concat(_toConsumableArray(newChildren)));

              newChildren.forEach(function (c) {
                if (c.parent) {
                  c.parent.removeChild(c);
                }

                child.parent = _this103;
              });
            }
          }
        }, {
          key: "insertBefore",
          value: function insertBefore(refChild, newChild) {
            var refIndex = this.childNodes.indexOf(refChild);

            if (refIndex === -1) {
              this.addChild(newChild);
            } else {
              if (newChild.parent) {
                newChild.parent.removeChild(newChild);
              }

              newChild.parent = this;
              this.childNodes.splice(refIndex, 0, newChild);
            }
          }
        }, {
          key: "query",
          value: function query(predicate) {
            var results = this.queryAll(predicate);
            return results[0] || null;
          }
        }, {
          key: "queryAll",
          value: function queryAll(predicate) {
            var matches = [];

            _queryElementChildren(this, predicate, matches);

            return matches;
          }
        }, {
          key: "queryAllNodes",
          value: function queryAllNodes(predicate) {
            var matches = [];

            _queryNodeChildren(this, predicate, matches);

            return matches;
          }
        }, {
          key: "children",
          get: function get() {
            return this.childNodes //
            .filter(function (node) {
              return node instanceof DebugElement__PRE_R3__;
            });
          }
        }, {
          key: "triggerEventHandler",
          value: function triggerEventHandler(eventName, eventObj) {
            this.listeners.forEach(function (listener) {
              if (listener.name == eventName) {
                listener.callback(eventObj);
              }
            });
          }
        }]);

        return DebugElement__PRE_R3__;
      }(DebugNode__PRE_R3__);
      /**
       * @publicApi
       */


      function _asNativeElements(debugEls) {
        return debugEls.map(function (el) {
          return el.nativeElement;
        });
      }

      function _queryElementChildren(element, predicate, matches) {
        element.childNodes.forEach(function (node) {
          if (node instanceof DebugElement__PRE_R3__) {
            if (predicate(node)) {
              matches.push(node);
            }

            _queryElementChildren(node, predicate, matches);
          }
        });
      }

      function _queryNodeChildren(parentNode, predicate, matches) {
        if (parentNode instanceof DebugElement__PRE_R3__) {
          parentNode.childNodes.forEach(function (node) {
            if (predicate(node)) {
              matches.push(node);
            }

            if (node instanceof DebugElement__PRE_R3__) {
              _queryNodeChildren(node, predicate, matches);
            }
          });
        }
      }

      var DebugNode__POST_R3__ = /*#__PURE__*/function () {
        function DebugNode__POST_R3__(nativeNode) {
          _classCallCheck2(this, DebugNode__POST_R3__);

          this.nativeNode = nativeNode;
        }

        _createClass2(DebugNode__POST_R3__, [{
          key: "parent",
          get: function get() {
            var parent = this.nativeNode.parentNode;
            return parent ? new DebugElement__POST_R3__(parent) : null;
          }
        }, {
          key: "injector",
          get: function get() {
            return getInjector(this.nativeNode);
          }
        }, {
          key: "componentInstance",
          get: function get() {
            var nativeElement = this.nativeNode;
            return nativeElement && (getComponent(nativeElement) || getOwningComponent(nativeElement));
          }
        }, {
          key: "context",
          get: function get() {
            return getComponent(this.nativeNode) || getContext(this.nativeNode);
          }
        }, {
          key: "listeners",
          get: function get() {
            return getListeners(this.nativeNode).filter(function (listener) {
              return listener.type === 'dom';
            });
          }
        }, {
          key: "references",
          get: function get() {
            return getLocalRefs(this.nativeNode);
          }
        }, {
          key: "providerTokens",
          get: function get() {
            return getInjectionTokens(this.nativeNode);
          }
        }]);

        return DebugNode__POST_R3__;
      }();

      var DebugElement__POST_R3__ = /*#__PURE__*/function (_DebugNode__POST_R3__) {
        _inherits(DebugElement__POST_R3__, _DebugNode__POST_R3__);

        var _super30 = _createSuper(DebugElement__POST_R3__);

        function DebugElement__POST_R3__(nativeNode) {
          _classCallCheck2(this, DebugElement__POST_R3__);

          ngDevMode && assertDomNode(nativeNode);
          return _super30.call(this, nativeNode);
        }

        _createClass2(DebugElement__POST_R3__, [{
          key: "nativeElement",
          get: function get() {
            return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;
          }
        }, {
          key: "name",
          get: function get() {
            var context = getLContext(this.nativeNode);

            if (context !== null) {
              var lView = context.lView;
              var tData = lView[TVIEW].data;
              var tNode = tData[context.nodeIndex];
              return tNode.value;
            } else {
              return this.nativeNode.nodeName;
            }
          }
          /**
           *  Gets a map of property names to property values for an element.
           *
           *  This map includes:
           *  - Regular property bindings (e.g. `[id]="id"`)
           *  - Host property bindings (e.g. `host: { '[id]': "id" }`)
           *  - Interpolated property bindings (e.g. `id="{{ value }}")
           *
           *  It does not include:
           *  - input property bindings (e.g. `[myCustomInput]="value"`)
           *  - attribute bindings (e.g. `[attr.role]="menu"`)
           */

        }, {
          key: "properties",
          get: function get() {
            var context = getLContext(this.nativeNode);

            if (context === null) {
              return {};
            }

            var lView = context.lView;
            var tData = lView[TVIEW].data;
            var tNode = tData[context.nodeIndex];
            var properties = {}; // Collect properties from the DOM.

            copyDomProperties(this.nativeElement, properties); // Collect properties from the bindings. This is needed for animation renderer which has
            // synthetic properties which don't get reflected into the DOM.

            collectPropertyBindings(properties, tNode, lView, tData);
            return properties;
          }
        }, {
          key: "attributes",
          get: function get() {
            var attributes = {};
            var element = this.nativeElement;

            if (!element) {
              return attributes;
            }

            var context = getLContext(element);

            if (context === null) {
              return {};
            }

            var lView = context.lView;
            var tNodeAttrs = lView[TVIEW].data[context.nodeIndex].attrs;
            var lowercaseTNodeAttrs = []; // For debug nodes we take the element's attribute directly from the DOM since it allows us
            // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones
            // that are set through `Renderer2`). The problem is that the browser will lowercase all names,
            // however since we have the attributes already on the TNode, we can preserve the case by going
            // through them once, adding them to the `attributes` map and putting their lower-cased name
            // into an array. Afterwards when we're going through the native DOM attributes, we can check
            // whether we haven't run into an attribute already through the TNode.

            if (tNodeAttrs) {
              var i = 0;

              while (i < tNodeAttrs.length) {
                var attrName = tNodeAttrs[i]; // Stop as soon as we hit a marker. We only care about the regular attributes. Everything
                // else will be handled below when we read the final attributes off the DOM.

                if (typeof attrName !== 'string') break;
                var attrValue = tNodeAttrs[i + 1];
                attributes[attrName] = attrValue;
                lowercaseTNodeAttrs.push(attrName.toLowerCase());
                i += 2;
              }
            }

            var eAttrs = element.attributes;

            for (var _i18 = 0; _i18 < eAttrs.length; _i18++) {
              var attr = eAttrs[_i18];
              var lowercaseName = attr.name.toLowerCase(); // Make sure that we don't assign the same attribute both in its
              // case-sensitive form and the lower-cased one from the browser.

              if (lowercaseTNodeAttrs.indexOf(lowercaseName) === -1) {
                // Save the lowercase name to align the behavior between browsers.
                // IE preserves the case, while all other browser convert it to lower case.
                attributes[lowercaseName] = attr.value;
              }
            }

            return attributes;
          }
        }, {
          key: "styles",
          get: function get() {
            if (this.nativeElement && this.nativeElement.style) {
              return this.nativeElement.style;
            }

            return {};
          }
        }, {
          key: "classes",
          get: function get() {
            var result = {};
            var element = this.nativeElement; // SVG elements return an `SVGAnimatedString` instead of a plain string for the `className`.

            var className = element.className;
            var classes = className && typeof className !== 'string' ? className.baseVal.split(' ') : className.split(' ');
            classes.forEach(function (value) {
              return result[value] = true;
            });
            return result;
          }
        }, {
          key: "childNodes",
          get: function get() {
            var childNodes = this.nativeNode.childNodes;
            var children = [];

            for (var i = 0; i < childNodes.length; i++) {
              var element = childNodes[i];
              children.push(getDebugNode__POST_R3__(element));
            }

            return children;
          }
        }, {
          key: "children",
          get: function get() {
            var nativeElement = this.nativeElement;
            if (!nativeElement) return [];
            var childNodes = nativeElement.children;
            var children = [];

            for (var i = 0; i < childNodes.length; i++) {
              var element = childNodes[i];
              children.push(getDebugNode__POST_R3__(element));
            }

            return children;
          }
        }, {
          key: "query",
          value: function query(predicate) {
            var results = this.queryAll(predicate);
            return results[0] || null;
          }
        }, {
          key: "queryAll",
          value: function queryAll(predicate) {
            var matches = [];

            _queryAllR3(this, predicate, matches, true);

            return matches;
          }
        }, {
          key: "queryAllNodes",
          value: function queryAllNodes(predicate) {
            var matches = [];

            _queryAllR3(this, predicate, matches, false);

            return matches;
          }
        }, {
          key: "triggerEventHandler",
          value: function triggerEventHandler(eventName, eventObj) {
            var node = this.nativeNode;
            var invokedListeners = [];
            this.listeners.forEach(function (listener) {
              if (listener.name === eventName) {
                var callback = listener.callback;
                callback.call(node, eventObj);
                invokedListeners.push(callback);
              }
            }); // We need to check whether `eventListeners` exists, because it's something
            // that Zone.js only adds to `EventTarget` in browser environments.

            if (typeof node.eventListeners === 'function') {
              // Note that in Ivy we wrap event listeners with a call to `event.preventDefault` in some
              // cases. We use '__ngUnwrap__' as a special token that gives us access to the actual event
              // listener.
              node.eventListeners(eventName).forEach(function (listener) {
                // In order to ensure that we can detect the special __ngUnwrap__ token described above, we
                // use `toString` on the listener and see if it contains the token. We use this approach to
                // ensure that it still worked with compiled code since it cannot remove or rename string
                // literals. We also considered using a special function name (i.e. if(listener.name ===
                // special)) but that was more cumbersome and we were also concerned the compiled code could
                // strip the name, turning the condition in to ("" === "") and always returning true.
                if (listener.toString().indexOf('__ngUnwrap__') !== -1) {
                  var unwrappedListener = listener('__ngUnwrap__');
                  return invokedListeners.indexOf(unwrappedListener) === -1 && unwrappedListener.call(node, eventObj);
                }
              });
            }
          }
        }]);

        return DebugElement__POST_R3__;
      }(DebugNode__POST_R3__);

      function copyDomProperties(element, properties) {
        if (element) {
          // Skip own properties (as those are patched)
          var obj = Object.getPrototypeOf(element);
          var NodePrototype = Node.prototype;

          while (obj !== null && obj !== NodePrototype) {
            var descriptors = Object.getOwnPropertyDescriptors(obj);

            for (var key in descriptors) {
              if (!key.startsWith('__') && !key.startsWith('on')) {
                // don't include properties starting with `__` and `on`.
                // `__` are patched values which should not be included.
                // `on` are listeners which also should not be included.
                var value = element[key];

                if (isPrimitiveValue(value)) {
                  properties[key] = value;
                }
              }
            }

            obj = Object.getPrototypeOf(obj);
          }
        }
      }

      function isPrimitiveValue(value) {
        return typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number' || value === null;
      }

      function _queryAllR3(parentElement, predicate, matches, elementsOnly) {
        var context = getLContext(parentElement.nativeNode);

        if (context !== null) {
          var parentTNode = context.lView[TVIEW].data[context.nodeIndex];

          _queryNodeChildrenR3(parentTNode, context.lView, predicate, matches, elementsOnly, parentElement.nativeNode);
        } else {
          // If the context is null, then `parentElement` was either created with Renderer2 or native DOM
          // APIs.
          _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches, elementsOnly);
        }
      }
      /**
       * Recursively match the current TNode against the predicate, and goes on with the next ones.
       *
       * @param tNode the current TNode
       * @param lView the LView of this TNode
       * @param predicate the predicate to match
       * @param matches the list of positive matches
       * @param elementsOnly whether only elements should be searched
       * @param rootNativeNode the root native node on which predicate should not be matched
       */


      function _queryNodeChildrenR3(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {
        ngDevMode && assertTNodeForLView(tNode, lView);
        var nativeNode = getNativeByTNodeOrNull(tNode, lView); // For each type of TNode, specific logic is executed.

        if (tNode.type & (3
        /* AnyRNode */
        | 8
        /* ElementContainer */
        )) {
          // Case 1: the TNode is an element
          // The native node has to be checked.
          _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode);

          if (isComponentHost(tNode)) {
            // If the element is the host of a component, then all nodes in its view have to be processed.
            // Note: the component's content (tNode.child) will be processed from the insertion points.
            var componentView = getComponentLViewByIndex(tNode.index, lView);

            if (componentView && componentView[TVIEW].firstChild) {
              _queryNodeChildrenR3(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);
            }
          } else {
            if (tNode.child) {
              // Otherwise, its children have to be processed.
              _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);
            } // We also have to query the DOM directly in order to catch elements inserted through
            // Renderer2. Note that this is __not__ optimal, because we're walking similar trees multiple
            // times. ViewEngine could do it more efficiently, because all the insertions go through
            // Renderer2, however that's not the case in Ivy. This approach is being used because:
            // 1. Matching the ViewEngine behavior would mean potentially introducing a depedency
            //    from `Renderer2` to Ivy which could bring Ivy code into ViewEngine.
            // 2. We would have to make `Renderer3` "know" about debug nodes.
            // 3. It allows us to capture nodes that were inserted directly via the DOM.


            nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);
          } // In all cases, if a dynamic container exists for this node, each view inside it has to be
          // processed.


          var nodeOrContainer = lView[tNode.index];

          if (isLContainer(nodeOrContainer)) {
            _queryNodeChildrenInContainerR3(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);
          }
        } else if (tNode.type & 4
        /* Container */
        ) {
            // Case 2: the TNode is a container
            // The native node has to be checked.
            var lContainer = lView[tNode.index];

            _addQueryMatchR3(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode); // Each view inside the container has to be processed.


            _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode);
          } else if (tNode.type & 16
        /* Projection */
        ) {
            // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).
            // The nodes projected at this location all need to be processed.
            var _componentView = lView[DECLARATION_COMPONENT_VIEW];
            var componentHost = _componentView[T_HOST];
            var head = componentHost.projection[tNode.projection];

            if (Array.isArray(head)) {
              var _iterator9 = _createForOfIteratorHelper(head),
                  _step9;

              try {
                for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                  var _nativeNode2 = _step9.value;

                  _addQueryMatchR3(_nativeNode2, predicate, matches, elementsOnly, rootNativeNode);
                }
              } catch (err) {
                _iterator9.e(err);
              } finally {
                _iterator9.f();
              }
            } else if (head) {
              var nextLView = _componentView[PARENT];
              var nextTNode = nextLView[TVIEW].data[head.index];

              _queryNodeChildrenR3(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);
            }
          } else if (tNode.child) {
          // Case 4: the TNode is a view.
          _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);
        } // We don't want to go to the next sibling of the root node.


        if (rootNativeNode !== nativeNode) {
          // To determine the next node to be processed, we need to use the next or the projectionNext
          // link, depending on whether the current node has been projected.
          var _nextTNode = tNode.flags & 4
          /* isProjected */
          ? tNode.projectionNext : tNode.next;

          if (_nextTNode) {
            _queryNodeChildrenR3(_nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);
          }
        }
      }
      /**
       * Process all TNodes in a given container.
       *
       * @param lContainer the container to be processed
       * @param predicate the predicate to match
       * @param matches the list of positive matches
       * @param elementsOnly whether only elements should be searched
       * @param rootNativeNode the root native node on which predicate should not be matched
       */


      function _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode) {
        for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
          var childView = lContainer[i];
          var firstChild = childView[TVIEW].firstChild;

          if (firstChild) {
            _queryNodeChildrenR3(firstChild, childView, predicate, matches, elementsOnly, rootNativeNode);
          }
        }
      }
      /**
       * Match the current native node against the predicate.
       *
       * @param nativeNode the current native node
       * @param predicate the predicate to match
       * @param matches the list of positive matches
       * @param elementsOnly whether only elements should be searched
       * @param rootNativeNode the root native node on which predicate should not be matched
       */


      function _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {
        if (rootNativeNode !== nativeNode) {
          var debugNode = getDebugNode$1(nativeNode);

          if (!debugNode) {
            return;
          } // Type of the "predicate and "matches" array are set based on the value of
          // the "elementsOnly" parameter. TypeScript is not able to properly infer these
          // types with generics, so we manually cast the parameters accordingly.


          if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
            matches.push(debugNode);
          } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
            matches.push(debugNode);
          }
        }
      }
      /**
       * Match all the descendants of a DOM node against a predicate.
       *
       * @param nativeNode the current native node
       * @param predicate the predicate to match
       * @param matches the list where matches are stored
       * @param elementsOnly whether only elements should be searched
       */


      function _queryNativeNodeDescendants(parentNode, predicate, matches, elementsOnly) {
        var nodes = parentNode.childNodes;
        var length = nodes.length;

        for (var i = 0; i < length; i++) {
          var node = nodes[i];
          var debugNode = getDebugNode$1(node);

          if (debugNode) {
            if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
              matches.push(debugNode);
            } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
              matches.push(debugNode);
            }

            _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);
          }
        }
      }
      /**
       * Iterates through the property bindings for a given node and generates
       * a map of property names to values. This map only contains property bindings
       * defined in templates, not in host bindings.
       */


      function collectPropertyBindings(properties, tNode, lView, tData) {
        var bindingIndexes = tNode.propertyBindings;

        if (bindingIndexes !== null) {
          for (var i = 0; i < bindingIndexes.length; i++) {
            var bindingIndex = bindingIndexes[i];
            var propMetadata = tData[bindingIndex];
            var metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);
            var propertyName = metadataParts[0];

            if (metadataParts.length > 1) {
              var value = metadataParts[1];

              for (var j = 1; j < metadataParts.length - 1; j++) {
                value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];
              }

              properties[propertyName] = value;
            } else {
              properties[propertyName] = lView[bindingIndex];
            }
          }
        }
      } // Need to keep the nodes in a global Map so that multiple angular apps are supported.


      var _nativeNodeToDebugNode = new Map();

      function getDebugNode__PRE_R3__(nativeNode) {
        return _nativeNodeToDebugNode.get(nativeNode) || null;
      }

      var NG_DEBUG_PROPERTY = '__ng_debug__';

      function getDebugNode__POST_R3__(nativeNode) {
        if (nativeNode instanceof Node) {
          if (!nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY)) {
            nativeNode[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ? new DebugElement__POST_R3__(nativeNode) : new DebugNode__POST_R3__(nativeNode);
          }

          return nativeNode[NG_DEBUG_PROPERTY];
        }

        return null;
      }
      /**
       * @publicApi
       */


      var getDebugNode$1 = getDebugNode__POST_R3__;

      function getDebugNodeR2__PRE_R3__(nativeNode) {
        return getDebugNode__PRE_R3__(nativeNode);
      }

      function getDebugNodeR2__POST_R3__(_nativeNode) {
        return null;
      }

      var getDebugNodeR2 = getDebugNodeR2__POST_R3__;

      function getAllDebugNodes() {
        return Array.from(_nativeNodeToDebugNode.values());
      }

      function indexDebugNode(node) {
        _nativeNodeToDebugNode.set(node.nativeNode, node);
      }

      function removeDebugNodeFromIndex(node) {
        _nativeNodeToDebugNode["delete"](node.nativeNode);
      }
      /**
       * @publicApi
       */


      var _DebugNode = DebugNode__POST_R3__;
      /**
       * @publicApi
       */

      var _DebugElement = DebugElement__POST_R3__;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var _CORE_PLATFORM_PROVIDERS = [// Set a default platform name for platforms that don't set it explicitly.
      {
        provide: _PLATFORM_ID,
        useValue: 'unknown'
      }, {
        provide: _PlatformRef,
        deps: [_Injector]
      }, {
        provide: _TestabilityRegistry,
        deps: []
      }, {
        provide: Console,
        deps: []
      }];
      /**
       * This platform has to be included in any other platform
       *
       * @publicApi
       */

      var _platformCore = _createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function _iterableDiffersFactory() {
        return defaultIterableDiffers;
      }

      function _keyValueDiffersFactory() {
        return defaultKeyValueDiffers;
      }

      function _localeFactory(locale) {
        locale = locale || getGlobalLocale();

        if (ivyEnabled) {
          setLocaleId(locale);
        }

        return locale;
      }
      /**
       * Work out the locale from the potential global properties.
       *
       * * Closure Compiler: use `goog.LOCALE`.
       * * Ivy enabled: use `$localize.locale`
       */


      function getGlobalLocale() {
        if (typeof ngI18nClosureMode !== 'undefined' && ngI18nClosureMode && typeof goog !== 'undefined' && goog.LOCALE !== 'en') {
          // * The default `goog.LOCALE` value is `en`, while Angular used `en-US`.
          // * In order to preserve backwards compatibility, we use Angular default value over
          //   Closure Compiler's one.
          return goog.LOCALE;
        } else {
          // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE
          // COMPILE-TIME INLINER.
          //
          // * During compile time inlining of translations the expression will be replaced
          //   with a string literal that is the current locale. Other forms of this expression are not
          //   guaranteed to be replaced.
          //
          // * During runtime translation evaluation, the developer is required to set `$localize.locale`
          //   if required, or just to provide their own `LOCALE_ID` provider.
          return ivyEnabled && typeof $localize !== 'undefined' && $localize.locale || DEFAULT_LOCALE_ID;
        }
      }

      var ɵ0$f = USD_CURRENCY_CODE;
      /**
       * A built-in [dependency injection token](guide/glossary#di-token)
       * that is used to configure the root injector for bootstrapping.
       */

      var APPLICATION_MODULE_PROVIDERS = [{
        provide: _ApplicationRef,
        useClass: _ApplicationRef,
        deps: [_NgZone, _Injector, _ErrorHandler, _ComponentFactoryResolver, _ApplicationInitStatus]
      }, {
        provide: SCHEDULER,
        deps: [_NgZone],
        useFactory: zoneSchedulerFactory
      }, {
        provide: _ApplicationInitStatus,
        useClass: _ApplicationInitStatus,
        deps: [[new _Optional(), _APP_INITIALIZER]]
      }, {
        provide: _Compiler,
        useClass: _Compiler,
        deps: []
      }, APP_ID_RANDOM_PROVIDER, {
        provide: _IterableDiffers,
        useFactory: _iterableDiffersFactory,
        deps: []
      }, {
        provide: _KeyValueDiffers,
        useFactory: _keyValueDiffersFactory,
        deps: []
      }, {
        provide: LOCALE_ID$1,
        useFactory: _localeFactory,
        deps: [[new _Inject(LOCALE_ID$1), new _Optional(), new _SkipSelf()]]
      }, {
        provide: _DEFAULT_CURRENCY_CODE,
        useValue: ɵ0$f
      }];
      /**
       * Schedule work at next available slot.
       *
       * In Ivy this is just `requestAnimationFrame`. For compatibility reasons when bootstrapped
       * using `platformRef.bootstrap` we need to use `NgZone.onStable` as the scheduling mechanism.
       * This overrides the scheduling mechanism in Ivy to `NgZone.onStable`.
       *
       * @param ngZone NgZone to use for scheduling.
       */

      function zoneSchedulerFactory(ngZone) {
        var queue = [];
        ngZone.onStable.subscribe(function () {
          while (queue.length) {
            queue.pop()();
          }
        });
        return function (fn) {
          queue.push(fn);
        };
      }
      /**
       * Configures the root injector for an app with
       * providers of `@angular/core` dependencies that `ApplicationRef` needs
       * to bootstrap components.
       *
       * Re-exported by `BrowserModule`, which is included automatically in the root
       * `AppModule` when you create a new app with the CLI `new` command.
       *
       * @publicApi
       */


      var _ApplicationModule = // Inject ApplicationRef to make it eager...
      function _ApplicationModule(appRef) {
        _classCallCheck2(this, _ApplicationModule);
      };

      _ApplicationModule.ɵfac = function ApplicationModule_Factory(t) {
        return new (t || _ApplicationModule)(_ɵɵinject(_ApplicationRef));
      };

      _ApplicationModule.ɵmod = /*@__PURE__*/_ɵɵdefineNgModule({
        type: _ApplicationModule
      });
      _ApplicationModule.ɵinj = /*@__PURE__*/_ɵɵdefineInjector({
        providers: APPLICATION_MODULE_PROVIDERS
      });

      _ApplicationModule.ctorParameters = function () {
        return [{
          type: _ApplicationRef
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(_ApplicationModule, [{
          type: _NgModule,
          args: [{
            providers: APPLICATION_MODULE_PROVIDERS
          }]
        }], function () {
          return [{
            type: _ApplicationRef
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {
        flags |= 1
        /* TypeElement */
        ;

        var _splitMatchedQueriesD2 = splitMatchedQueriesDsl(matchedQueriesDsl),
            matchedQueries = _splitMatchedQueriesD2.matchedQueries,
            references = _splitMatchedQueriesD2.references,
            matchedQueryIds = _splitMatchedQueriesD2.matchedQueryIds;

        var template = templateFactory ? resolveDefinition(templateFactory) : null;
        return {
          // will bet set by the view definition
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          // regular values
          flags: flags,
          checkIndex: -1,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: matchedQueries,
          matchedQueryIds: matchedQueryIds,
          references: references,
          ngContentIndex: ngContentIndex,
          childCount: childCount,
          bindings: [],
          bindingFlags: 0,
          outputs: [],
          element: {
            ns: null,
            name: null,
            attrs: null,
            template: template,
            componentProvider: null,
            componentView: null,
            componentRendererType: null,
            publicProviders: null,
            allProviders: null,
            handleEvent: handleEvent || NOOP
          },
          provider: null,
          text: null,
          query: null,
          ngContent: null
        };
      }

      function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName) {
        var fixedAttrs = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];
        var bindings = arguments.length > 7 ? arguments[7] : undefined;
        var outputs = arguments.length > 8 ? arguments[8] : undefined;
        var handleEvent = arguments.length > 9 ? arguments[9] : undefined;
        var componentView = arguments.length > 10 ? arguments[10] : undefined;
        var componentRendererType = arguments.length > 11 ? arguments[11] : undefined;

        if (!handleEvent) {
          handleEvent = NOOP;
        }

        var _splitMatchedQueriesD3 = splitMatchedQueriesDsl(matchedQueriesDsl),
            matchedQueries = _splitMatchedQueriesD3.matchedQueries,
            references = _splitMatchedQueriesD3.references,
            matchedQueryIds = _splitMatchedQueriesD3.matchedQueryIds;

        var ns = null;
        var name = null;

        if (namespaceAndName) {
          var _splitNamespace = splitNamespace(namespaceAndName);

          var _splitNamespace2 = _slicedToArray(_splitNamespace, 2);

          ns = _splitNamespace2[0];
          name = _splitNamespace2[1];
        }

        bindings = bindings || [];
        var bindingDefs = [];

        for (var i = 0; i < bindings.length; i++) {
          var _bindings$i = _slicedToArray(bindings[i], 3),
              bindingFlags = _bindings$i[0],
              _namespaceAndName = _bindings$i[1],
              suffixOrSecurityContext = _bindings$i[2];

          var _splitNamespace3 = splitNamespace(_namespaceAndName),
              _splitNamespace4 = _slicedToArray(_splitNamespace3, 2),
              _ns = _splitNamespace4[0],
              _name2 = _splitNamespace4[1];

          var securityContext = undefined;
          var suffix = undefined;

          switch (bindingFlags & 15
          /* Types */
          ) {
            case 4
            /* TypeElementStyle */
            :
              suffix = suffixOrSecurityContext;
              break;

            case 1
            /* TypeElementAttribute */
            :
            case 8
            /* TypeProperty */
            :
              securityContext = suffixOrSecurityContext;
              break;
          }

          bindingDefs[i] = {
            flags: bindingFlags,
            ns: _ns,
            name: _name2,
            nonMinifiedName: _name2,
            securityContext: securityContext,
            suffix: suffix
          };
        }

        outputs = outputs || [];
        var outputDefs = [];

        for (var _i19 = 0; _i19 < outputs.length; _i19++) {
          var _outputs$_i = _slicedToArray(outputs[_i19], 2),
              target = _outputs$_i[0],
              eventName = _outputs$_i[1];

          outputDefs[_i19] = {
            type: 0
            /* ElementOutput */
            ,
            target: target,
            eventName: eventName,
            propName: null
          };
        }

        fixedAttrs = fixedAttrs || [];
        var attrs = fixedAttrs.map(function (_ref7) {
          var _ref8 = _slicedToArray(_ref7, 2),
              namespaceAndName = _ref8[0],
              value = _ref8[1];

          var _splitNamespace5 = splitNamespace(namespaceAndName),
              _splitNamespace6 = _slicedToArray(_splitNamespace5, 2),
              ns = _splitNamespace6[0],
              name = _splitNamespace6[1];

          return [ns, name, value];
        });
        componentRendererType = resolveRendererType2(componentRendererType);

        if (componentView) {
          flags |= 33554432
          /* ComponentView */
          ;
        }

        flags |= 1
        /* TypeElement */
        ;
        return {
          // will bet set by the view definition
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          // regular values
          checkIndex: checkIndex,
          flags: flags,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: matchedQueries,
          matchedQueryIds: matchedQueryIds,
          references: references,
          ngContentIndex: ngContentIndex,
          childCount: childCount,
          bindings: bindingDefs,
          bindingFlags: calcBindingFlags(bindingDefs),
          outputs: outputDefs,
          element: {
            ns: ns,
            name: name,
            attrs: attrs,
            template: null,
            // will bet set by the view definition
            componentProvider: null,
            componentView: componentView || null,
            componentRendererType: componentRendererType,
            publicProviders: null,
            allProviders: null,
            handleEvent: handleEvent || NOOP
          },
          provider: null,
          text: null,
          query: null,
          ngContent: null
        };
      }

      function createElement(view, renderHost, def) {
        var elDef = def.element;
        var rootSelectorOrNode = view.root.selectorOrNode;
        var renderer = view.renderer;
        var el;

        if (view.parent || !rootSelectorOrNode) {
          if (elDef.name) {
            el = renderer.createElement(elDef.name, elDef.ns);
          } else {
            el = renderer.createComment('');
          }

          var parentEl = getParentRenderElement(view, renderHost, def);

          if (parentEl) {
            renderer.appendChild(parentEl, el);
          }
        } else {
          // when using native Shadow DOM, do not clear the root element contents to allow slot projection
          var preserveContent = !!elDef.componentRendererType && elDef.componentRendererType.encapsulation === _ViewEncapsulation.ShadowDom;
          el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);
        }

        if (elDef.attrs) {
          for (var i = 0; i < elDef.attrs.length; i++) {
            var _elDef$attrs$i = _slicedToArray(elDef.attrs[i], 3),
                ns = _elDef$attrs$i[0],
                name = _elDef$attrs$i[1],
                value = _elDef$attrs$i[2];

            renderer.setAttribute(el, name, value, ns);
          }
        }

        return el;
      }

      function listenToElementOutputs(view, compView, def, el) {
        for (var i = 0; i < def.outputs.length; i++) {
          var output = def.outputs[i];
          var handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));
          var listenTarget = output.target;
          var listenerView = view;

          if (output.target === 'component') {
            listenTarget = null;
            listenerView = compView;
          }

          var disposable = listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure);
          view.disposables[def.outputIndex + i] = disposable;
        }
      }

      function renderEventHandlerClosure(view, index, eventName) {
        return function (event) {
          return dispatchEvent(view, index, eventName, event);
        };
      }

      function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var bindLen = def.bindings.length;
        var changed = false;
        if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0)) changed = true;
        if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1)) changed = true;
        if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2)) changed = true;
        if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3)) changed = true;
        if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4)) changed = true;
        if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5)) changed = true;
        if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6)) changed = true;
        if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7)) changed = true;
        if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8)) changed = true;
        if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9)) changed = true;
        return changed;
      }

      function checkAndUpdateElementDynamic(view, def, values) {
        var changed = false;

        for (var i = 0; i < values.length; i++) {
          if (checkAndUpdateElementValue(view, def, i, values[i])) changed = true;
        }

        return changed;
      }

      function checkAndUpdateElementValue(view, def, bindingIdx, value) {
        if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {
          return false;
        }

        var binding = def.bindings[bindingIdx];
        var elData = asElementData(view, def.nodeIndex);
        var renderNode = elData.renderElement;
        var name = binding.name;

        switch (binding.flags & 15
        /* Types */
        ) {
          case 1
          /* TypeElementAttribute */
          :
            setElementAttribute$1(view, binding, renderNode, binding.ns, name, value);
            break;

          case 2
          /* TypeElementClass */
          :
            setElementClass(view, renderNode, name, value);
            break;

          case 4
          /* TypeElementStyle */
          :
            setElementStyle(view, binding, renderNode, name, value);
            break;

          case 8
          /* TypeProperty */
          :
            var bindView = def.flags & 33554432
            /* ComponentView */
            && binding.flags & 32
            /* SyntheticHostProperty */
            ? elData.componentView : view;
            setElementProperty(bindView, binding, renderNode, name, value);
            break;
        }

        return true;
      }

      function setElementAttribute$1(view, binding, renderNode, ns, name, value) {
        var securityContext = binding.securityContext;
        var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
        renderValue = renderValue != null ? renderValue.toString() : null;
        var renderer = view.renderer;

        if (value != null) {
          renderer.setAttribute(renderNode, name, renderValue, ns);
        } else {
          renderer.removeAttribute(renderNode, name, ns);
        }
      }

      function setElementClass(view, renderNode, name, value) {
        var renderer = view.renderer;

        if (value) {
          renderer.addClass(renderNode, name);
        } else {
          renderer.removeClass(renderNode, name);
        }
      }

      function setElementStyle(view, binding, renderNode, name, value) {
        var renderValue = view.root.sanitizer.sanitize(_SecurityContext.STYLE, value);

        if (renderValue != null) {
          renderValue = renderValue.toString();
          var unit = binding.suffix;

          if (unit != null) {
            renderValue = renderValue + unit;
          }
        } else {
          renderValue = null;
        }

        var renderer = view.renderer;

        if (renderValue != null) {
          renderer.setStyle(renderNode, name, renderValue);
        } else {
          renderer.removeStyle(renderNode, name);
        }
      }

      function setElementProperty(view, binding, renderNode, name, value) {
        var securityContext = binding.securityContext;
        var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
        view.renderer.setProperty(renderNode, name, renderValue);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function queryDef(flags, id, bindings) {
        var bindingDefs = [];

        for (var propName in bindings) {
          var bindingType = bindings[propName];
          bindingDefs.push({
            propName: propName,
            bindingType: bindingType
          });
        }

        return {
          // will bet set by the view definition
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          // regular values
          // TODO(vicb): check
          checkIndex: -1,
          flags: flags,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          ngContentIndex: -1,
          matchedQueries: {},
          matchedQueryIds: 0,
          references: {},
          childCount: 0,
          bindings: [],
          bindingFlags: 0,
          outputs: [],
          element: null,
          provider: null,
          text: null,
          query: {
            id: id,
            filterId: filterQueryId(id),
            bindings: bindingDefs
          },
          ngContent: null
        };
      }

      function createQuery(emitDistinctChangesOnly) {
        return new _QueryList(emitDistinctChangesOnly);
      }

      function dirtyParentQueries(view) {
        var queryIds = view.def.nodeMatchedQueries;

        while (view.parent && isEmbeddedView(view)) {
          var tplDef = view.parentNodeDef;
          view = view.parent; // content queries

          var end = tplDef.nodeIndex + tplDef.childCount;

          for (var i = 0; i <= end; i++) {
            var nodeDef = view.def.nodes[i];

            if (nodeDef.flags & 67108864
            /* TypeContentQuery */
            && nodeDef.flags & 536870912
            /* DynamicQuery */
            && (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId) {
              asQueryList(view, i).setDirty();
            }

            if (nodeDef.flags & 1
            /* TypeElement */
            && i + nodeDef.childCount < tplDef.nodeIndex || !(nodeDef.childFlags & 67108864
            /* TypeContentQuery */
            ) || !(nodeDef.childFlags & 536870912
            /* DynamicQuery */
            )) {
              // skip elements that don't contain the template element or no query.
              i += nodeDef.childCount;
            }
          }
        } // view queries


        if (view.def.nodeFlags & 134217728
        /* TypeViewQuery */
        ) {
            for (var _i20 = 0; _i20 < view.def.nodes.length; _i20++) {
              var _nodeDef = view.def.nodes[_i20];

              if (_nodeDef.flags & 134217728
              /* TypeViewQuery */
              && _nodeDef.flags & 536870912
              /* DynamicQuery */
              ) {
                asQueryList(view, _i20).setDirty();
              } // only visit the root nodes


              _i20 += _nodeDef.childCount;
            }
          }
      }

      function checkAndUpdateQuery(view, nodeDef) {
        var queryList = asQueryList(view, nodeDef.nodeIndex);

        if (!queryList.dirty) {
          return;
        }

        var directiveInstance;
        var newValues = undefined;

        if (nodeDef.flags & 67108864
        /* TypeContentQuery */
        ) {
            var _elementDef = nodeDef.parent.parent;
            newValues = calcQueryValues(view, _elementDef.nodeIndex, _elementDef.nodeIndex + _elementDef.childCount, nodeDef.query, []);
            directiveInstance = asProviderData(view, nodeDef.parent.nodeIndex).instance;
          } else if (nodeDef.flags & 134217728
        /* TypeViewQuery */
        ) {
            newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query, []);
            directiveInstance = view.component;
          }

        queryList.reset(newValues, unwrapElementRef);
        var bindings = nodeDef.query.bindings;
        var notify = false;

        for (var i = 0; i < bindings.length; i++) {
          var binding = bindings[i];
          var boundValue = void 0;

          switch (binding.bindingType) {
            case 0
            /* First */
            :
              boundValue = queryList.first;
              break;

            case 1
            /* All */
            :
              boundValue = queryList;
              notify = true;
              break;
          }

          directiveInstance[binding.propName] = boundValue;
        }

        if (notify) {
          queryList.notifyOnChanges();
        }
      }

      function calcQueryValues(view, startIndex, endIndex, queryDef, values) {
        for (var i = startIndex; i <= endIndex; i++) {
          var nodeDef = view.def.nodes[i];
          var valueType = nodeDef.matchedQueries[queryDef.id];

          if (valueType != null) {
            values.push(getQueryValue(view, nodeDef, valueType));
          }

          if (nodeDef.flags & 1
          /* TypeElement */
          && nodeDef.element.template && (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) === queryDef.filterId) {
            var elementData = asElementData(view, i); // check embedded views that were attached at the place of their template,
            // but process child nodes first if some match the query (see issue #16568)

            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {
              calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);
              i += nodeDef.childCount;
            }

            if (nodeDef.flags & 16777216
            /* EmbeddedViews */
            ) {
                var embeddedViews = elementData.viewContainer._embeddedViews;

                for (var k = 0; k < embeddedViews.length; k++) {
                  var embeddedView = embeddedViews[k];
                  var dvc = declaredViewContainer(embeddedView);

                  if (dvc && dvc === elementData) {
                    calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);
                  }
                }
              }

            var projectedViews = elementData.template._projectedViews;

            if (projectedViews) {
              for (var _k2 = 0; _k2 < projectedViews.length; _k2++) {
                var projectedView = projectedViews[_k2];
                calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);
              }
            }
          }

          if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {
            // if no child matches the query, skip the children.
            i += nodeDef.childCount;
          }
        }

        return values;
      }

      function getQueryValue(view, nodeDef, queryValueType) {
        if (queryValueType != null) {
          // a match
          switch (queryValueType) {
            case 1
            /* RenderElement */
            :
              return asElementData(view, nodeDef.nodeIndex).renderElement;

            case 0
            /* ElementRef */
            :
              return new _ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);

            case 2
            /* TemplateRef */
            :
              return asElementData(view, nodeDef.nodeIndex).template;

            case 3
            /* ViewContainerRef */
            :
              return asElementData(view, nodeDef.nodeIndex).viewContainer;

            case 4
            /* Provider */
            :
              return asProviderData(view, nodeDef.nodeIndex).instance;
          }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function ngContentDef(ngContentIndex, index) {
        return {
          // will bet set by the view definition
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          // regular values
          checkIndex: -1,
          flags: 8
          /* TypeNgContent */
          ,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: {},
          matchedQueryIds: 0,
          references: {},
          ngContentIndex: ngContentIndex,
          childCount: 0,
          bindings: [],
          bindingFlags: 0,
          outputs: [],
          element: null,
          provider: null,
          text: null,
          query: null,
          ngContent: {
            index: index
          }
        };
      }

      function appendNgContent(view, renderHost, def) {
        var parentEl = getParentRenderElement(view, renderHost, def);

        if (!parentEl) {
          // Nothing to do if there is no parent element.
          return;
        }

        var ngContentIndex = def.ngContent.index;
        visitProjectedRenderNodes(view, ngContentIndex, 1
        /* AppendChild */
        , parentEl, null, undefined);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function purePipeDef(checkIndex, argCount) {
        // argCount + 1 to include the pipe as first arg
        return _pureExpressionDef(128
        /* TypePurePipe */
        , checkIndex, newArray(argCount + 1));
      }

      function pureArrayDef(checkIndex, argCount) {
        return _pureExpressionDef(32
        /* TypePureArray */
        , checkIndex, newArray(argCount));
      }

      function pureObjectDef(checkIndex, propToIndex) {
        var keys = Object.keys(propToIndex);
        var nbKeys = keys.length;
        var propertyNames = [];

        for (var i = 0; i < nbKeys; i++) {
          var key = keys[i];
          var index = propToIndex[key];
          propertyNames.push(key);
        }

        return _pureExpressionDef(64
        /* TypePureObject */
        , checkIndex, propertyNames);
      }

      function _pureExpressionDef(flags, checkIndex, propertyNames) {
        var bindings = [];

        for (var i = 0; i < propertyNames.length; i++) {
          var prop = propertyNames[i];
          bindings.push({
            flags: 8
            /* TypeProperty */
            ,
            name: prop,
            ns: null,
            nonMinifiedName: prop,
            securityContext: null,
            suffix: null
          });
        }

        return {
          // will bet set by the view definition
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          // regular values
          checkIndex: checkIndex,
          flags: flags,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: {},
          matchedQueryIds: 0,
          references: {},
          ngContentIndex: -1,
          childCount: 0,
          bindings: bindings,
          bindingFlags: calcBindingFlags(bindings),
          outputs: [],
          element: null,
          provider: null,
          text: null,
          query: null,
          ngContent: null
        };
      }

      function createPureExpression(view, def) {
        return {
          value: undefined
        };
      }

      function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var bindings = def.bindings;
        var changed = false;
        var bindLen = bindings.length;
        if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;
        if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;
        if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;
        if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;
        if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;
        if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;
        if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;
        if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;
        if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;
        if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;

        if (changed) {
          var data = asPureExpressionData(view, def.nodeIndex);
          var value;

          switch (def.flags & 201347067
          /* Types */
          ) {
            case 32
            /* TypePureArray */
            :
              value = [];
              if (bindLen > 0) value.push(v0);
              if (bindLen > 1) value.push(v1);
              if (bindLen > 2) value.push(v2);
              if (bindLen > 3) value.push(v3);
              if (bindLen > 4) value.push(v4);
              if (bindLen > 5) value.push(v5);
              if (bindLen > 6) value.push(v6);
              if (bindLen > 7) value.push(v7);
              if (bindLen > 8) value.push(v8);
              if (bindLen > 9) value.push(v9);
              break;

            case 64
            /* TypePureObject */
            :
              value = {};
              if (bindLen > 0) value[bindings[0].name] = v0;
              if (bindLen > 1) value[bindings[1].name] = v1;
              if (bindLen > 2) value[bindings[2].name] = v2;
              if (bindLen > 3) value[bindings[3].name] = v3;
              if (bindLen > 4) value[bindings[4].name] = v4;
              if (bindLen > 5) value[bindings[5].name] = v5;
              if (bindLen > 6) value[bindings[6].name] = v6;
              if (bindLen > 7) value[bindings[7].name] = v7;
              if (bindLen > 8) value[bindings[8].name] = v8;
              if (bindLen > 9) value[bindings[9].name] = v9;
              break;

            case 128
            /* TypePurePipe */
            :
              var pipe = v0;

              switch (bindLen) {
                case 1:
                  value = pipe.transform(v0);
                  break;

                case 2:
                  value = pipe.transform(v1);
                  break;

                case 3:
                  value = pipe.transform(v1, v2);
                  break;

                case 4:
                  value = pipe.transform(v1, v2, v3);
                  break;

                case 5:
                  value = pipe.transform(v1, v2, v3, v4);
                  break;

                case 6:
                  value = pipe.transform(v1, v2, v3, v4, v5);
                  break;

                case 7:
                  value = pipe.transform(v1, v2, v3, v4, v5, v6);
                  break;

                case 8:
                  value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);
                  break;

                case 9:
                  value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);
                  break;

                case 10:
                  value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);
                  break;
              }

              break;
          }

          data.value = value;
        }

        return changed;
      }

      function checkAndUpdatePureExpressionDynamic(view, def, values) {
        var bindings = def.bindings;
        var changed = false;

        for (var i = 0; i < values.length; i++) {
          // Note: We need to loop over all values, so that
          // the old values are updates as well!
          if (checkAndUpdateBinding(view, def, i, values[i])) {
            changed = true;
          }
        }

        if (changed) {
          var data = asPureExpressionData(view, def.nodeIndex);
          var value;

          switch (def.flags & 201347067
          /* Types */
          ) {
            case 32
            /* TypePureArray */
            :
              value = values;
              break;

            case 64
            /* TypePureObject */
            :
              value = {};

              for (var _i21 = 0; _i21 < values.length; _i21++) {
                value[bindings[_i21].name] = values[_i21];
              }

              break;

            case 128
            /* TypePurePipe */
            :
              var pipe = values[0];
              var params = values.slice(1);
              value = pipe.transform.apply(pipe, _toConsumableArray(params));
              break;
          }

          data.value = value;
        }

        return changed;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function textDef(checkIndex, ngContentIndex, staticText) {
        var bindings = [];

        for (var i = 1; i < staticText.length; i++) {
          bindings[i - 1] = {
            flags: 8
            /* TypeProperty */
            ,
            name: null,
            ns: null,
            nonMinifiedName: null,
            securityContext: null,
            suffix: staticText[i]
          };
        }

        return {
          // will bet set by the view definition
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          // regular values
          checkIndex: checkIndex,
          flags: 2
          /* TypeText */
          ,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: {},
          matchedQueryIds: 0,
          references: {},
          ngContentIndex: ngContentIndex,
          childCount: 0,
          bindings: bindings,
          bindingFlags: 8
          /* TypeProperty */
          ,
          outputs: [],
          element: null,
          provider: null,
          text: {
            prefix: staticText[0]
          },
          query: null,
          ngContent: null
        };
      }

      function createText(view, renderHost, def) {
        var renderNode;
        var renderer = view.renderer;
        renderNode = renderer.createText(def.text.prefix);
        var parentEl = getParentRenderElement(view, renderHost, def);

        if (parentEl) {
          renderer.appendChild(parentEl, renderNode);
        }

        return {
          renderText: renderNode
        };
      }

      function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var changed = false;
        var bindings = def.bindings;
        var bindLen = bindings.length;
        if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;
        if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;
        if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;
        if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;
        if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;
        if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;
        if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;
        if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;
        if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;
        if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;

        if (changed) {
          var value = def.text.prefix;
          if (bindLen > 0) value += _addInterpolationPart(v0, bindings[0]);
          if (bindLen > 1) value += _addInterpolationPart(v1, bindings[1]);
          if (bindLen > 2) value += _addInterpolationPart(v2, bindings[2]);
          if (bindLen > 3) value += _addInterpolationPart(v3, bindings[3]);
          if (bindLen > 4) value += _addInterpolationPart(v4, bindings[4]);
          if (bindLen > 5) value += _addInterpolationPart(v5, bindings[5]);
          if (bindLen > 6) value += _addInterpolationPart(v6, bindings[6]);
          if (bindLen > 7) value += _addInterpolationPart(v7, bindings[7]);
          if (bindLen > 8) value += _addInterpolationPart(v8, bindings[8]);
          if (bindLen > 9) value += _addInterpolationPart(v9, bindings[9]);
          var _renderNode = asTextData(view, def.nodeIndex).renderText;
          view.renderer.setValue(_renderNode, value);
        }

        return changed;
      }

      function checkAndUpdateTextDynamic(view, def, values) {
        var bindings = def.bindings;
        var changed = false;

        for (var i = 0; i < values.length; i++) {
          // Note: We need to loop over all values, so that
          // the old values are updates as well!
          if (checkAndUpdateBinding(view, def, i, values[i])) {
            changed = true;
          }
        }

        if (changed) {
          var value = '';

          for (var _i22 = 0; _i22 < values.length; _i22++) {
            value = value + _addInterpolationPart(values[_i22], bindings[_i22]);
          }

          value = def.text.prefix + value;
          var _renderNode2 = asTextData(view, def.nodeIndex).renderText;
          view.renderer.setValue(_renderNode2, value);
        }

        return changed;
      }

      function _addInterpolationPart(value, binding) {
        var valueStr = value != null ? value.toString() : '';
        return valueStr + binding.suffix;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function viewDef(flags, nodes, updateDirectives, updateRenderer) {
        // clone nodes and set auto calculated values
        var viewBindingCount = 0;
        var viewDisposableCount = 0;
        var viewNodeFlags = 0;
        var viewRootNodeFlags = 0;
        var viewMatchedQueries = 0;
        var currentParent = null;
        var currentRenderParent = null;
        var currentElementHasPublicProviders = false;
        var currentElementHasPrivateProviders = false;
        var lastRenderRootNode = null;

        for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          node.nodeIndex = i;
          node.parent = currentParent;
          node.bindingIndex = viewBindingCount;
          node.outputIndex = viewDisposableCount;
          node.renderParent = currentRenderParent;
          viewNodeFlags |= node.flags;
          viewMatchedQueries |= node.matchedQueryIds;

          if (node.element) {
            var elDef = node.element;
            elDef.publicProviders = currentParent ? currentParent.element.publicProviders : Object.create(null);
            elDef.allProviders = elDef.publicProviders; // Note: We assume that all providers of an element are before any child element!

            currentElementHasPublicProviders = false;
            currentElementHasPrivateProviders = false;

            if (node.element.template) {
              viewMatchedQueries |= node.element.template.nodeMatchedQueries;
            }
          }

          validateNode(currentParent, node, nodes.length);
          viewBindingCount += node.bindings.length;
          viewDisposableCount += node.outputs.length;

          if (!currentRenderParent && node.flags & 3
          /* CatRenderNode */
          ) {
            lastRenderRootNode = node;
          }

          if (node.flags & 20224
          /* CatProvider */
          ) {
              if (!currentElementHasPublicProviders) {
                currentElementHasPublicProviders = true; // Use prototypical inheritance to not get O(n^2) complexity...

                currentParent.element.publicProviders = Object.create(currentParent.element.publicProviders);
                currentParent.element.allProviders = currentParent.element.publicProviders;
              }

              var isPrivateService = (node.flags & 8192
              /* PrivateProvider */
              ) !== 0;
              var isComponent = (node.flags & 32768
              /* Component */
              ) !== 0;

              if (!isPrivateService || isComponent) {
                currentParent.element.publicProviders[tokenKey(node.provider.token)] = node;
              } else {
                if (!currentElementHasPrivateProviders) {
                  currentElementHasPrivateProviders = true; // Use prototypical inheritance to not get O(n^2) complexity...

                  currentParent.element.allProviders = Object.create(currentParent.element.publicProviders);
                }

                currentParent.element.allProviders[tokenKey(node.provider.token)] = node;
              }

              if (isComponent) {
                currentParent.element.componentProvider = node;
              }
            }

          if (currentParent) {
            currentParent.childFlags |= node.flags;
            currentParent.directChildFlags |= node.flags;
            currentParent.childMatchedQueries |= node.matchedQueryIds;

            if (node.element && node.element.template) {
              currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;
            }
          } else {
            viewRootNodeFlags |= node.flags;
          }

          if (node.childCount > 0) {
            currentParent = node;

            if (!isNgContainer(node)) {
              currentRenderParent = node;
            }
          } else {
            // When the current node has no children, check if it is the last children of its parent.
            // When it is, propagate the flags up.
            // The loop is required because an element could be the last transitive children of several
            // elements. We loop to either the root or the highest opened element (= with remaining
            // children)
            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {
              var newParent = currentParent.parent;

              if (newParent) {
                newParent.childFlags |= currentParent.childFlags;
                newParent.childMatchedQueries |= currentParent.childMatchedQueries;
              }

              currentParent = newParent; // We also need to update the render parent & account for ng-container

              if (currentParent && isNgContainer(currentParent)) {
                currentRenderParent = currentParent.renderParent;
              } else {
                currentRenderParent = currentParent;
              }
            }
          }
        }

        var handleEvent = function handleEvent(view, nodeIndex, eventName, event) {
          return nodes[nodeIndex].element.handleEvent(view, eventName, event);
        };

        return {
          // Will be filled later...
          factory: null,
          nodeFlags: viewNodeFlags,
          rootNodeFlags: viewRootNodeFlags,
          nodeMatchedQueries: viewMatchedQueries,
          flags: flags,
          nodes: nodes,
          updateDirectives: updateDirectives || NOOP,
          updateRenderer: updateRenderer || NOOP,
          handleEvent: handleEvent,
          bindingCount: viewBindingCount,
          outputCount: viewDisposableCount,
          lastRenderRootNode: lastRenderRootNode
        };
      }

      function isNgContainer(node) {
        return (node.flags & 1
        /* TypeElement */
        ) !== 0 && node.element.name === null;
      }

      function validateNode(parent, node, nodeCount) {
        var template = node.element && node.element.template;

        if (template) {
          if (!template.lastRenderRootNode) {
            throw new Error("Illegal State: Embedded templates without nodes are not allowed!");
          }

          if (template.lastRenderRootNode && template.lastRenderRootNode.flags & 16777216
          /* EmbeddedViews */
          ) {
              throw new Error("Illegal State: Last root node of a template can't have embedded views, at index ".concat(node.nodeIndex, "!"));
            }
        }

        if (node.flags & 20224
        /* CatProvider */
        ) {
            var parentFlags = parent ? parent.flags : 0;

            if ((parentFlags & 1
            /* TypeElement */
            ) === 0) {
              throw new Error("Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index ".concat(node.nodeIndex, "!"));
            }
          }

        if (node.query) {
          if (node.flags & 67108864
          /* TypeContentQuery */
          && (!parent || (parent.flags & 16384
          /* TypeDirective */
          ) === 0)) {
            throw new Error("Illegal State: Content Query nodes need to be children of directives, at index ".concat(node.nodeIndex, "!"));
          }

          if (node.flags & 134217728
          /* TypeViewQuery */
          && parent) {
            throw new Error("Illegal State: View Query nodes have to be top level nodes, at index ".concat(node.nodeIndex, "!"));
          }
        }

        if (node.childCount) {
          var parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;

          if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {
            throw new Error("Illegal State: childCount of node leads outside of parent, at index ".concat(node.nodeIndex, "!"));
          }
        }
      }

      function createEmbeddedView(parent, anchorDef, viewDef, context) {
        // embedded views are seen as siblings to the anchor, so we need
        // to get the parent of the anchor and use it as parentIndex.
        var view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);
        initView(view, parent.component, context);
        createViewNodes(view);
        return view;
      }

      function createRootView(root, def, context) {
        var view = createView(root, root.renderer, null, null, def);
        initView(view, context, context);
        createViewNodes(view);
        return view;
      }

      function createComponentView(parentView, nodeDef, viewDef, hostElement) {
        var rendererType = nodeDef.element.componentRendererType;
        var compRenderer;

        if (!rendererType) {
          compRenderer = parentView.root.renderer;
        } else {
          compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);
        }

        return createView(parentView.root, compRenderer, parentView, nodeDef.element.componentProvider, viewDef);
      }

      function createView(root, renderer, parent, parentNodeDef, def) {
        var nodes = new Array(def.nodes.length);
        var disposables = def.outputCount ? new Array(def.outputCount) : null;
        var view = {
          def: def,
          parent: parent,
          viewContainerParent: null,
          parentNodeDef: parentNodeDef,
          context: null,
          component: null,
          nodes: nodes,
          state: 13
          /* CatInit */
          ,
          root: root,
          renderer: renderer,
          oldValues: new Array(def.bindingCount),
          disposables: disposables,
          initIndex: -1
        };
        return view;
      }

      function initView(view, component, context) {
        view.component = component;
        view.context = context;
      }

      function createViewNodes(view) {
        var renderHost;

        if (isComponentView(view)) {
          var hostDef = view.parentNodeDef;
          renderHost = asElementData(view.parent, hostDef.parent.nodeIndex).renderElement;
        }

        var def = view.def;
        var nodes = view.nodes;

        for (var i = 0; i < def.nodes.length; i++) {
          var nodeDef = def.nodes[i];
          Services.setCurrentNode(view, i);
          var nodeData = void 0;

          switch (nodeDef.flags & 201347067
          /* Types */
          ) {
            case 1
            /* TypeElement */
            :
              var el = createElement(view, renderHost, nodeDef);
              var componentView = undefined;

              if (nodeDef.flags & 33554432
              /* ComponentView */
              ) {
                  var compViewDef = resolveDefinition(nodeDef.element.componentView);
                  componentView = Services.createComponentView(view, nodeDef, compViewDef, el);
                }

              listenToElementOutputs(view, componentView, nodeDef, el);
              nodeData = {
                renderElement: el,
                componentView: componentView,
                viewContainer: null,
                template: nodeDef.element.template ? createTemplateData(view, nodeDef) : undefined
              };

              if (nodeDef.flags & 16777216
              /* EmbeddedViews */
              ) {
                  nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);
                }

              break;

            case 2
            /* TypeText */
            :
              nodeData = createText(view, renderHost, nodeDef);
              break;

            case 512
            /* TypeClassProvider */
            :
            case 1024
            /* TypeFactoryProvider */
            :
            case 2048
            /* TypeUseExistingProvider */
            :
            case 256
            /* TypeValueProvider */
            :
              {
                nodeData = nodes[i];

                if (!nodeData && !(nodeDef.flags & 4096
                /* LazyProvider */
                )) {
                  var instance = createProviderInstance(view, nodeDef);
                  nodeData = {
                    instance: instance
                  };
                }

                break;
              }

            case 16
            /* TypePipe */
            :
              {
                var _instance = createPipeInstance(view, nodeDef);

                nodeData = {
                  instance: _instance
                };
                break;
              }

            case 16384
            /* TypeDirective */
            :
              {
                nodeData = nodes[i];

                if (!nodeData) {
                  var _instance2 = createDirectiveInstance(view, nodeDef);

                  nodeData = {
                    instance: _instance2
                  };
                }

                if (nodeDef.flags & 32768
                /* Component */
                ) {
                    var compView = asElementData(view, nodeDef.parent.nodeIndex).componentView;
                    initView(compView, nodeData.instance, nodeData.instance);
                  }

                break;
              }

            case 32
            /* TypePureArray */
            :
            case 64
            /* TypePureObject */
            :
            case 128
            /* TypePurePipe */
            :
              nodeData = createPureExpression(view, nodeDef);
              break;

            case 67108864
            /* TypeContentQuery */
            :
            case 134217728
            /* TypeViewQuery */
            :
              nodeData = createQuery((nodeDef.flags & -2147483648
              /* EmitDistinctChangesOnly */
              ) === -2147483648
              /* EmitDistinctChangesOnly */
              );
              break;

            case 8
            /* TypeNgContent */
            :
              appendNgContent(view, renderHost, nodeDef); // no runtime data needed for NgContent...

              nodeData = undefined;
              break;
          }

          nodes[i] = nodeData;
        } // Create the ViewData.nodes of component views after we created everything else,
        // so that e.g. ng-content works


        execComponentViewsAction(view, ViewAction.CreateViewNodes); // fill static content and view queries

        execQueriesAction(view, 67108864
        /* TypeContentQuery */
        | 134217728
        /* TypeViewQuery */
        , 268435456
        /* StaticQuery */
        , 0
        /* CheckAndUpdate */
        );
      }

      function checkNoChangesView(view) {
        markProjectedViewsForCheck(view);
        Services.updateDirectives(view, 1
        /* CheckNoChanges */
        );
        execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);
        Services.updateRenderer(view, 1
        /* CheckNoChanges */
        );
        execComponentViewsAction(view, ViewAction.CheckNoChanges); // Note: We don't check queries for changes as we didn't do this in v2.x.
        // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.

        view.state &= ~(64
        /* CheckProjectedViews */
        | 32
        /* CheckProjectedView */
        );
      }

      function checkAndUpdateView(view) {
        if (view.state & 1
        /* BeforeFirstCheck */
        ) {
            view.state &= ~1
            /* BeforeFirstCheck */
            ;
            view.state |= 2
            /* FirstCheck */
            ;
          } else {
          view.state &= ~2
          /* FirstCheck */
          ;
        }

        shiftInitState(view, 0
        /* InitState_BeforeInit */
        , 256
        /* InitState_CallingOnInit */
        );
        markProjectedViewsForCheck(view);
        Services.updateDirectives(view, 0
        /* CheckAndUpdate */
        );
        execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);
        execQueriesAction(view, 67108864
        /* TypeContentQuery */
        , 536870912
        /* DynamicQuery */
        , 0
        /* CheckAndUpdate */
        );
        var callInit = shiftInitState(view, 256
        /* InitState_CallingOnInit */
        , 512
        /* InitState_CallingAfterContentInit */
        );
        callLifecycleHooksChildrenFirst(view, 2097152
        /* AfterContentChecked */
        | (callInit ? 1048576
        /* AfterContentInit */
        : 0));
        Services.updateRenderer(view, 0
        /* CheckAndUpdate */
        );
        execComponentViewsAction(view, ViewAction.CheckAndUpdate);
        execQueriesAction(view, 134217728
        /* TypeViewQuery */
        , 536870912
        /* DynamicQuery */
        , 0
        /* CheckAndUpdate */
        );
        callInit = shiftInitState(view, 512
        /* InitState_CallingAfterContentInit */
        , 768
        /* InitState_CallingAfterViewInit */
        );
        callLifecycleHooksChildrenFirst(view, 8388608
        /* AfterViewChecked */
        | (callInit ? 4194304
        /* AfterViewInit */
        : 0));

        if (view.def.flags & 2
        /* OnPush */
        ) {
            view.state &= ~8
            /* ChecksEnabled */
            ;
          }

        view.state &= ~(64
        /* CheckProjectedViews */
        | 32
        /* CheckProjectedView */
        );
        shiftInitState(view, 768
        /* InitState_CallingAfterViewInit */
        , 1024
        /* InitState_AfterInit */
        );
      }

      function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        if (argStyle === 0
        /* Inline */
        ) {
            return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
          } else {
          return checkAndUpdateNodeDynamic(view, nodeDef, v0);
        }
      }

      function markProjectedViewsForCheck(view) {
        var def = view.def;

        if (!(def.nodeFlags & 4
        /* ProjectedTemplate */
        )) {
          return;
        }

        for (var i = 0; i < def.nodes.length; i++) {
          var nodeDef = def.nodes[i];

          if (nodeDef.flags & 4
          /* ProjectedTemplate */
          ) {
              var projectedViews = asElementData(view, i).template._projectedViews;

              if (projectedViews) {
                for (var _i23 = 0; _i23 < projectedViews.length; _i23++) {
                  var projectedView = projectedViews[_i23];
                  projectedView.state |= 32
                  /* CheckProjectedView */
                  ;
                  markParentViewsForCheckProjectedViews(projectedView, view);
                }
              }
            } else if ((nodeDef.childFlags & 4
          /* ProjectedTemplate */
          ) === 0) {
            // a parent with leafs
            // no child is a component,
            // then skip the children
            i += nodeDef.childCount;
          }
        }
      }

      function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        switch (nodeDef.flags & 201347067
        /* Types */
        ) {
          case 1
          /* TypeElement */
          :
            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);

          case 2
          /* TypeText */
          :
            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);

          case 16384
          /* TypeDirective */
          :
            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);

          case 32
          /* TypePureArray */
          :
          case 64
          /* TypePureObject */
          :
          case 128
          /* TypePurePipe */
          :
            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);

          default:
            throw 'unreachable';
        }
      }

      function checkAndUpdateNodeDynamic(view, nodeDef, values) {
        switch (nodeDef.flags & 201347067
        /* Types */
        ) {
          case 1
          /* TypeElement */
          :
            return checkAndUpdateElementDynamic(view, nodeDef, values);

          case 2
          /* TypeText */
          :
            return checkAndUpdateTextDynamic(view, nodeDef, values);

          case 16384
          /* TypeDirective */
          :
            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);

          case 32
          /* TypePureArray */
          :
          case 64
          /* TypePureObject */
          :
          case 128
          /* TypePurePipe */
          :
            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);

          default:
            throw 'unreachable';
        }
      }

      function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        if (argStyle === 0
        /* Inline */
        ) {
            checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
          } else {
          checkNoChangesNodeDynamic(view, nodeDef, v0);
        } // Returning false is ok here as we would have thrown in case of a change.


        return false;
      }

      function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var bindLen = nodeDef.bindings.length;
        if (bindLen > 0) checkBindingNoChanges(view, nodeDef, 0, v0);
        if (bindLen > 1) checkBindingNoChanges(view, nodeDef, 1, v1);
        if (bindLen > 2) checkBindingNoChanges(view, nodeDef, 2, v2);
        if (bindLen > 3) checkBindingNoChanges(view, nodeDef, 3, v3);
        if (bindLen > 4) checkBindingNoChanges(view, nodeDef, 4, v4);
        if (bindLen > 5) checkBindingNoChanges(view, nodeDef, 5, v5);
        if (bindLen > 6) checkBindingNoChanges(view, nodeDef, 6, v6);
        if (bindLen > 7) checkBindingNoChanges(view, nodeDef, 7, v7);
        if (bindLen > 8) checkBindingNoChanges(view, nodeDef, 8, v8);
        if (bindLen > 9) checkBindingNoChanges(view, nodeDef, 9, v9);
      }

      function checkNoChangesNodeDynamic(view, nodeDef, values) {
        for (var i = 0; i < values.length; i++) {
          checkBindingNoChanges(view, nodeDef, i, values[i]);
        }
      }
      /**
       * Workaround https://github.com/angular/tsickle/issues/497
       * @suppress {misplacedTypeAnnotation}
       */


      function checkNoChangesQuery(view, nodeDef) {
        var queryList = asQueryList(view, nodeDef.nodeIndex);

        if (queryList.dirty) {
          throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), "Query ".concat(nodeDef.query.id, " not dirty"), "Query ".concat(nodeDef.query.id, " dirty"), (view.state & 1
          /* BeforeFirstCheck */
          ) !== 0);
        }
      }

      function destroyView(view) {
        if (view.state & 128
        /* Destroyed */
        ) {
            return;
          }

        execEmbeddedViewsAction(view, ViewAction.Destroy);
        execComponentViewsAction(view, ViewAction.Destroy);
        callLifecycleHooksChildrenFirst(view, 131072
        /* OnDestroy */
        );

        if (view.disposables) {
          for (var i = 0; i < view.disposables.length; i++) {
            view.disposables[i]();
          }
        }

        detachProjectedView(view);

        if (view.renderer.destroyNode) {
          destroyViewNodes(view);
        }

        if (isComponentView(view)) {
          view.renderer.destroy();
        }

        view.state |= 128
        /* Destroyed */
        ;
      }

      function destroyViewNodes(view) {
        var len = view.def.nodes.length;

        for (var i = 0; i < len; i++) {
          var def = view.def.nodes[i];

          if (def.flags & 1
          /* TypeElement */
          ) {
              view.renderer.destroyNode(asElementData(view, i).renderElement);
            } else if (def.flags & 2
          /* TypeText */
          ) {
              view.renderer.destroyNode(asTextData(view, i).renderText);
            } else if (def.flags & 67108864
          /* TypeContentQuery */
          || def.flags & 134217728
          /* TypeViewQuery */
          ) {
              asQueryList(view, i).destroy();
            }
        }
      }

      var ViewAction;

      (function (ViewAction) {
        ViewAction[ViewAction["CreateViewNodes"] = 0] = "CreateViewNodes";
        ViewAction[ViewAction["CheckNoChanges"] = 1] = "CheckNoChanges";
        ViewAction[ViewAction["CheckNoChangesProjectedViews"] = 2] = "CheckNoChangesProjectedViews";
        ViewAction[ViewAction["CheckAndUpdate"] = 3] = "CheckAndUpdate";
        ViewAction[ViewAction["CheckAndUpdateProjectedViews"] = 4] = "CheckAndUpdateProjectedViews";
        ViewAction[ViewAction["Destroy"] = 5] = "Destroy";
      })(ViewAction || (ViewAction = {}));

      function execComponentViewsAction(view, action) {
        var def = view.def;

        if (!(def.nodeFlags & 33554432
        /* ComponentView */
        )) {
          return;
        }

        for (var i = 0; i < def.nodes.length; i++) {
          var nodeDef = def.nodes[i];

          if (nodeDef.flags & 33554432
          /* ComponentView */
          ) {
              // a leaf
              callViewAction(asElementData(view, i).componentView, action);
            } else if ((nodeDef.childFlags & 33554432
          /* ComponentView */
          ) === 0) {
            // a parent with leafs
            // no child is a component,
            // then skip the children
            i += nodeDef.childCount;
          }
        }
      }

      function execEmbeddedViewsAction(view, action) {
        var def = view.def;

        if (!(def.nodeFlags & 16777216
        /* EmbeddedViews */
        )) {
          return;
        }

        for (var i = 0; i < def.nodes.length; i++) {
          var nodeDef = def.nodes[i];

          if (nodeDef.flags & 16777216
          /* EmbeddedViews */
          ) {
              // a leaf
              var embeddedViews = asElementData(view, i).viewContainer._embeddedViews;

              for (var k = 0; k < embeddedViews.length; k++) {
                callViewAction(embeddedViews[k], action);
              }
            } else if ((nodeDef.childFlags & 16777216
          /* EmbeddedViews */
          ) === 0) {
            // a parent with leafs
            // no child is a component,
            // then skip the children
            i += nodeDef.childCount;
          }
        }
      }

      function callViewAction(view, action) {
        var viewState = view.state;

        switch (action) {
          case ViewAction.CheckNoChanges:
            if ((viewState & 128
            /* Destroyed */
            ) === 0) {
              if ((viewState & 12
              /* CatDetectChanges */
              ) === 12
              /* CatDetectChanges */
              ) {
                  checkNoChangesView(view);
                } else if (viewState & 64
              /* CheckProjectedViews */
              ) {
                  execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);
                }
            }

            break;

          case ViewAction.CheckNoChangesProjectedViews:
            if ((viewState & 128
            /* Destroyed */
            ) === 0) {
              if (viewState & 32
              /* CheckProjectedView */
              ) {
                  checkNoChangesView(view);
                } else if (viewState & 64
              /* CheckProjectedViews */
              ) {
                  execProjectedViewsAction(view, action);
                }
            }

            break;

          case ViewAction.CheckAndUpdate:
            if ((viewState & 128
            /* Destroyed */
            ) === 0) {
              if ((viewState & 12
              /* CatDetectChanges */
              ) === 12
              /* CatDetectChanges */
              ) {
                  checkAndUpdateView(view);
                } else if (viewState & 64
              /* CheckProjectedViews */
              ) {
                  execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);
                }
            }

            break;

          case ViewAction.CheckAndUpdateProjectedViews:
            if ((viewState & 128
            /* Destroyed */
            ) === 0) {
              if (viewState & 32
              /* CheckProjectedView */
              ) {
                  checkAndUpdateView(view);
                } else if (viewState & 64
              /* CheckProjectedViews */
              ) {
                  execProjectedViewsAction(view, action);
                }
            }

            break;

          case ViewAction.Destroy:
            // Note: destroyView recurses over all views,
            // so we don't need to special case projected views here.
            destroyView(view);
            break;

          case ViewAction.CreateViewNodes:
            createViewNodes(view);
            break;
        }
      }

      function execProjectedViewsAction(view, action) {
        execEmbeddedViewsAction(view, action);
        execComponentViewsAction(view, action);
      }

      function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {
        if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {
          return;
        }

        var nodeCount = view.def.nodes.length;

        for (var i = 0; i < nodeCount; i++) {
          var nodeDef = view.def.nodes[i];

          if (nodeDef.flags & queryFlags && nodeDef.flags & staticDynamicQueryFlag) {
            Services.setCurrentNode(view, nodeDef.nodeIndex);

            switch (checkType) {
              case 0
              /* CheckAndUpdate */
              :
                checkAndUpdateQuery(view, nodeDef);
                break;

              case 1
              /* CheckNoChanges */
              :
                checkNoChangesQuery(view, nodeDef);
                break;
            }
          }

          if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {
            // no child has a matching query
            // then skip the children
            i += nodeDef.childCount;
          }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var initialized = false;

      function initServicesIfNeeded() {
        if (initialized) {
          return;
        }

        initialized = true;
        var services = _isDevMode() ? createDebugServices() : createProdServices();
        Services.setCurrentNode = services.setCurrentNode;
        Services.createRootView = services.createRootView;
        Services.createEmbeddedView = services.createEmbeddedView;
        Services.createComponentView = services.createComponentView;
        Services.createNgModuleRef = services.createNgModuleRef;
        Services.overrideProvider = services.overrideProvider;
        Services.overrideComponentView = services.overrideComponentView;
        Services.clearOverrides = services.clearOverrides;
        Services.checkAndUpdateView = services.checkAndUpdateView;
        Services.checkNoChangesView = services.checkNoChangesView;
        Services.destroyView = services.destroyView;
        Services.resolveDep = resolveDep;
        Services.createDebugContext = services.createDebugContext;
        Services.handleEvent = services.handleEvent;
        Services.updateDirectives = services.updateDirectives;
        Services.updateRenderer = services.updateRenderer;
        Services.dirtyParentQueries = dirtyParentQueries;
      }

      function createProdServices() {
        return {
          setCurrentNode: function setCurrentNode() {},
          createRootView: createProdRootView,
          createEmbeddedView: createEmbeddedView,
          createComponentView: createComponentView,
          createNgModuleRef: createNgModuleRef,
          overrideProvider: NOOP,
          overrideComponentView: NOOP,
          clearOverrides: NOOP,
          checkAndUpdateView: checkAndUpdateView,
          checkNoChangesView: checkNoChangesView,
          destroyView: destroyView,
          createDebugContext: function createDebugContext(view, nodeIndex) {
            return new DebugContext_(view, nodeIndex);
          },
          handleEvent: function handleEvent(view, nodeIndex, eventName, event) {
            return view.def.handleEvent(view, nodeIndex, eventName, event);
          },
          updateDirectives: function updateDirectives(view, checkType) {
            return view.def.updateDirectives(checkType === 0
            /* CheckAndUpdate */
            ? prodCheckAndUpdateNode : prodCheckNoChangesNode, view);
          },
          updateRenderer: function updateRenderer(view, checkType) {
            return view.def.updateRenderer(checkType === 0
            /* CheckAndUpdate */
            ? prodCheckAndUpdateNode : prodCheckNoChangesNode, view);
          }
        };
      }

      function createDebugServices() {
        return {
          setCurrentNode: debugSetCurrentNode,
          createRootView: debugCreateRootView,
          createEmbeddedView: debugCreateEmbeddedView,
          createComponentView: debugCreateComponentView,
          createNgModuleRef: debugCreateNgModuleRef,
          overrideProvider: debugOverrideProvider,
          overrideComponentView: debugOverrideComponentView,
          clearOverrides: debugClearOverrides,
          checkAndUpdateView: debugCheckAndUpdateView,
          checkNoChangesView: debugCheckNoChangesView,
          destroyView: debugDestroyView,
          createDebugContext: function createDebugContext(view, nodeIndex) {
            return new DebugContext_(view, nodeIndex);
          },
          handleEvent: debugHandleEvent,
          updateDirectives: debugUpdateDirectives,
          updateRenderer: debugUpdateRenderer
        };
      }

      function createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
        var rendererFactory = ngModule.injector.get(_RendererFactory);
        return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);
      }

      function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
        var rendererFactory = ngModule.injector.get(_RendererFactory);
        var root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);
        var defWithOverride = applyProviderOverridesToView(def);
        return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);
      }

      function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {
        var sanitizer = ngModule.injector.get(_Sanitizer);
        var errorHandler = ngModule.injector.get(_ErrorHandler);
        var renderer = rendererFactory.createRenderer(null, null);
        return {
          ngModule: ngModule,
          injector: elInjector,
          projectableNodes: projectableNodes,
          selectorOrNode: rootSelectorOrNode,
          sanitizer: sanitizer,
          rendererFactory: rendererFactory,
          renderer: renderer,
          errorHandler: errorHandler
        };
      }

      function debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {
        var defWithOverride = applyProviderOverridesToView(viewDef);
        return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);
      }

      function debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {
        var overrideComponentView = viewDefOverrides.get(nodeDef.element.componentProvider.provider.token);

        if (overrideComponentView) {
          viewDef = overrideComponentView;
        } else {
          viewDef = applyProviderOverridesToView(viewDef);
        }

        return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);
      }

      function debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {
        var defWithOverride = applyProviderOverridesToNgModule(def);
        return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);
      }

      var providerOverrides = new Map();
      var providerOverridesWithScope = new Map();
      var viewDefOverrides = new Map();

      function debugOverrideProvider(override) {
        providerOverrides.set(override.token, override);
        var injectableDef;

        if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) && typeof injectableDef.providedIn === 'function') {
          providerOverridesWithScope.set(override.token, override);
        }
      }

      function debugOverrideComponentView(comp, compFactory) {
        var hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));
        var compViewDef = resolveDefinition(hostViewDef.nodes[0].element.componentView);
        viewDefOverrides.set(comp, compViewDef);
      }

      function debugClearOverrides() {
        providerOverrides.clear();
        providerOverridesWithScope.clear();
        viewDefOverrides.clear();
      } // Notes about the algorithm:
      // 1) Locate the providers of an element and check if one of them was overwritten
      // 2) Change the providers of that element
      //
      // We only create new data structures if we need to, to keep perf impact
      // reasonable.


      function applyProviderOverridesToView(def) {
        if (providerOverrides.size === 0) {
          return def;
        }

        var elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);

        if (elementIndicesWithOverwrittenProviders.length === 0) {
          return def;
        } // clone the whole view definition,
        // as it maintains references between the nodes that are hard to update.


        def = def.factory(function () {
          return NOOP;
        });

        for (var i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {
          applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);
        }

        return def;

        function findElementIndicesWithOverwrittenProviders(def) {
          var elIndicesWithOverwrittenProviders = [];
          var lastElementDef = null;

          for (var _i24 = 0; _i24 < def.nodes.length; _i24++) {
            var nodeDef = def.nodes[_i24];

            if (nodeDef.flags & 1
            /* TypeElement */
            ) {
                lastElementDef = nodeDef;
              }

            if (lastElementDef && nodeDef.flags & 3840
            /* CatProviderNoDirective */
            && providerOverrides.has(nodeDef.provider.token)) {
              elIndicesWithOverwrittenProviders.push(lastElementDef.nodeIndex);
              lastElementDef = null;
            }
          }

          return elIndicesWithOverwrittenProviders;
        }

        function applyProviderOverridesToElement(viewDef, elIndex) {
          for (var _i25 = elIndex + 1; _i25 < viewDef.nodes.length; _i25++) {
            var nodeDef = viewDef.nodes[_i25];

            if (nodeDef.flags & 1
            /* TypeElement */
            ) {
                // stop at the next element
                return;
              }

            if (nodeDef.flags & 3840
            /* CatProviderNoDirective */
            ) {
                var provider = nodeDef.provider;
                var override = providerOverrides.get(provider.token);

                if (override) {
                  nodeDef.flags = nodeDef.flags & ~3840
                  /* CatProviderNoDirective */
                  | override.flags;
                  provider.deps = splitDepsDsl(override.deps);
                  provider.value = override.value;
                }
              }
          }
        }
      } // Notes about the algorithm:
      // We only create new data structures if we need to, to keep perf impact
      // reasonable.


      function applyProviderOverridesToNgModule(def) {
        var _calcHasOverrides = calcHasOverrides(def),
            hasOverrides = _calcHasOverrides.hasOverrides,
            hasDeprecatedOverrides = _calcHasOverrides.hasDeprecatedOverrides;

        if (!hasOverrides) {
          return def;
        } // clone the whole view definition,
        // as it maintains references between the nodes that are hard to update.


        def = def.factory(function () {
          return NOOP;
        });
        applyProviderOverrides(def);
        return def;

        function calcHasOverrides(def) {
          var hasOverrides = false;
          var hasDeprecatedOverrides = false;

          if (providerOverrides.size === 0) {
            return {
              hasOverrides: hasOverrides,
              hasDeprecatedOverrides: hasDeprecatedOverrides
            };
          }

          def.providers.forEach(function (node) {
            var override = providerOverrides.get(node.token);

            if (node.flags & 3840
            /* CatProviderNoDirective */
            && override) {
              hasOverrides = true;
              hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;
            }
          });
          def.modules.forEach(function (module) {
            providerOverridesWithScope.forEach(function (override, token) {
              if (_resolveForwardRef(getInjectableDef(token).providedIn) === module) {
                hasOverrides = true;
                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;
              }
            });
          });
          return {
            hasOverrides: hasOverrides,
            hasDeprecatedOverrides: hasDeprecatedOverrides
          };
        }

        function applyProviderOverrides(def) {
          for (var i = 0; i < def.providers.length; i++) {
            var provider = def.providers[i];

            if (hasDeprecatedOverrides) {
              // We had a bug where me made
              // all providers lazy. Keep this logic behind a flag
              // for migrating existing users.
              provider.flags |= 4096
              /* LazyProvider */
              ;
            }

            var override = providerOverrides.get(provider.token);

            if (override) {
              provider.flags = provider.flags & ~3840
              /* CatProviderNoDirective */
              | override.flags;
              provider.deps = splitDepsDsl(override.deps);
              provider.value = override.value;
            }
          }

          if (providerOverridesWithScope.size > 0) {
            var moduleSet = new Set(def.modules);
            providerOverridesWithScope.forEach(function (override, token) {
              if (moduleSet.has(_resolveForwardRef(getInjectableDef(token).providedIn))) {
                var _provider = {
                  token: token,
                  flags: override.flags | (hasDeprecatedOverrides ? 4096
                  /* LazyProvider */
                  : 0
                  /* None */
                  ),
                  deps: splitDepsDsl(override.deps),
                  value: override.value,
                  index: def.providers.length
                };
                def.providers.push(_provider);
                def.providersByKey[tokenKey(token)] = _provider;
              }
            });
          }
        }
      }

      function prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var nodeDef = view.def.nodes[checkIndex];
        checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        return nodeDef.flags & 224
        /* CatPureExpression */
        ? asPureExpressionData(view, checkIndex).value : undefined;
      }

      function prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var nodeDef = view.def.nodes[checkIndex];
        checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        return nodeDef.flags & 224
        /* CatPureExpression */
        ? asPureExpressionData(view, checkIndex).value : undefined;
      }

      function debugCheckAndUpdateView(view) {
        return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);
      }

      function debugCheckNoChangesView(view) {
        return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);
      }

      function debugDestroyView(view) {
        return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);
      }

      var DebugAction;

      (function (DebugAction) {
        DebugAction[DebugAction["create"] = 0] = "create";
        DebugAction[DebugAction["detectChanges"] = 1] = "detectChanges";
        DebugAction[DebugAction["checkNoChanges"] = 2] = "checkNoChanges";
        DebugAction[DebugAction["destroy"] = 3] = "destroy";
        DebugAction[DebugAction["handleEvent"] = 4] = "handleEvent";
      })(DebugAction || (DebugAction = {}));

      var _currentAction;

      var _currentView;

      var _currentNodeIndex;

      function debugSetCurrentNode(view, nodeIndex) {
        _currentView = view;
        _currentNodeIndex = nodeIndex;
      }

      function debugHandleEvent(view, nodeIndex, eventName, event) {
        debugSetCurrentNode(view, nodeIndex);
        return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);
      }

      function debugUpdateDirectives(view, checkType) {
        if (view.state & 128
        /* Destroyed */
        ) {
            throw viewDestroyedError(DebugAction[_currentAction]);
          }

        debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));
        return view.def.updateDirectives(debugCheckDirectivesFn, view);

        function debugCheckDirectivesFn(view, nodeIndex, argStyle) {
          var nodeDef = view.def.nodes[nodeIndex];

          for (var _len12 = arguments.length, values = new Array(_len12 > 3 ? _len12 - 3 : 0), _key13 = 3; _key13 < _len12; _key13++) {
            values[_key13 - 3] = arguments[_key13];
          }

          if (checkType === 0
          /* CheckAndUpdate */
          ) {
              debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
            } else {
            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
          }

          if (nodeDef.flags & 16384
          /* TypeDirective */
          ) {
              debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));
            }

          return nodeDef.flags & 224
          /* CatPureExpression */
          ? asPureExpressionData(view, nodeDef.nodeIndex).value : undefined;
        }
      }

      function debugUpdateRenderer(view, checkType) {
        if (view.state & 128
        /* Destroyed */
        ) {
            throw viewDestroyedError(DebugAction[_currentAction]);
          }

        debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));
        return view.def.updateRenderer(debugCheckRenderNodeFn, view);

        function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {
          var nodeDef = view.def.nodes[nodeIndex];

          for (var _len13 = arguments.length, values = new Array(_len13 > 3 ? _len13 - 3 : 0), _key14 = 3; _key14 < _len13; _key14++) {
            values[_key14 - 3] = arguments[_key14];
          }

          if (checkType === 0
          /* CheckAndUpdate */
          ) {
              debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
            } else {
            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
          }

          if (nodeDef.flags & 3
          /* CatRenderNode */
          ) {
              debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));
            }

          return nodeDef.flags & 224
          /* CatPureExpression */
          ? asPureExpressionData(view, nodeDef.nodeIndex).value : undefined;
        }
      }

      function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {
        var changed = checkAndUpdateNode.apply(void 0, [view, nodeDef, argStyle].concat(_toConsumableArray(givenValues)));

        if (changed) {
          var values = argStyle === 1
          /* Dynamic */
          ? givenValues[0] : givenValues;

          if (nodeDef.flags & 16384
          /* TypeDirective */
          ) {
              var bindingValues = {};

              for (var i = 0; i < nodeDef.bindings.length; i++) {
                var binding = nodeDef.bindings[i];
                var value = values[i];

                if (binding.flags & 8
                /* TypeProperty */
                ) {
                    bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)] = normalizeDebugBindingValue(value);
                  }
              }

              var elDef = nodeDef.parent;
              var el = asElementData(view, elDef.nodeIndex).renderElement;

              if (!elDef.element.name) {
                // a comment.
                view.renderer.setValue(el, escapeCommentText("bindings=".concat(JSON.stringify(bindingValues, null, 2))));
              } else {
                // a regular element.
                for (var attr in bindingValues) {
                  var _value4 = bindingValues[attr];

                  if (_value4 != null) {
                    view.renderer.setAttribute(el, attr, _value4);
                  } else {
                    view.renderer.removeAttribute(el, attr);
                  }
                }
              }
            }
        }
      }

      function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {
        checkNoChangesNode.apply(void 0, [view, nodeDef, argStyle].concat(_toConsumableArray(values)));
      }

      function nextDirectiveWithBinding(view, nodeIndex) {
        for (var i = nodeIndex; i < view.def.nodes.length; i++) {
          var nodeDef = view.def.nodes[i];

          if (nodeDef.flags & 16384
          /* TypeDirective */
          && nodeDef.bindings && nodeDef.bindings.length) {
            return i;
          }
        }

        return null;
      }

      function nextRenderNodeWithBinding(view, nodeIndex) {
        for (var i = nodeIndex; i < view.def.nodes.length; i++) {
          var nodeDef = view.def.nodes[i];

          if (nodeDef.flags & 3
          /* CatRenderNode */
          && nodeDef.bindings && nodeDef.bindings.length) {
            return i;
          }
        }

        return null;
      }

      var DebugContext_ = /*#__PURE__*/function () {
        function DebugContext_(view, nodeIndex) {
          _classCallCheck2(this, DebugContext_);

          this.view = view;
          this.nodeIndex = nodeIndex;

          if (nodeIndex == null) {
            this.nodeIndex = nodeIndex = 0;
          }

          this.nodeDef = view.def.nodes[nodeIndex];
          var elDef = this.nodeDef;
          var elView = view;

          while (elDef && (elDef.flags & 1
          /* TypeElement */
          ) === 0) {
            elDef = elDef.parent;
          }

          if (!elDef) {
            while (!elDef && elView) {
              elDef = viewParentEl(elView);
              elView = elView.parent;
            }
          }

          this.elDef = elDef;
          this.elView = elView;
        }

        _createClass2(DebugContext_, [{
          key: "elOrCompView",
          get: function get() {
            // Has to be done lazily as we use the DebugContext also during creation of elements...
            return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;
          }
        }, {
          key: "injector",
          get: function get() {
            return createInjector$1(this.elView, this.elDef);
          }
        }, {
          key: "component",
          get: function get() {
            return this.elOrCompView.component;
          }
        }, {
          key: "context",
          get: function get() {
            return this.elOrCompView.context;
          }
        }, {
          key: "providerTokens",
          get: function get() {
            var tokens = [];

            if (this.elDef) {
              for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {
                var childDef = this.elView.def.nodes[i];

                if (childDef.flags & 20224
                /* CatProvider */
                ) {
                    tokens.push(childDef.provider.token);
                  }

                i += childDef.childCount;
              }
            }

            return tokens;
          }
        }, {
          key: "references",
          get: function get() {
            var references = {};

            if (this.elDef) {
              collectReferences(this.elView, this.elDef, references);

              for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {
                var childDef = this.elView.def.nodes[i];

                if (childDef.flags & 20224
                /* CatProvider */
                ) {
                    collectReferences(this.elView, childDef, references);
                  }

                i += childDef.childCount;
              }
            }

            return references;
          }
        }, {
          key: "componentRenderElement",
          get: function get() {
            var elData = findHostElement(this.elOrCompView);
            return elData ? elData.renderElement : undefined;
          }
        }, {
          key: "renderNode",
          get: function get() {
            return this.nodeDef.flags & 2
            /* TypeText */
            ? renderNode(this.view, this.nodeDef) : renderNode(this.elView, this.elDef);
          }
        }, {
          key: "logError",
          value: function logError(console) {
            for (var _len14 = arguments.length, values = new Array(_len14 > 1 ? _len14 - 1 : 0), _key15 = 1; _key15 < _len14; _key15++) {
              values[_key15 - 1] = arguments[_key15];
            }

            var logViewDef;
            var logNodeIndex;

            if (this.nodeDef.flags & 2
            /* TypeText */
            ) {
                logViewDef = this.view.def;
                logNodeIndex = this.nodeDef.nodeIndex;
              } else {
              logViewDef = this.elView.def;
              logNodeIndex = this.elDef.nodeIndex;
            } // Note: we only generate a log function for text and element nodes
            // to make the generated code as small as possible.


            var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);
            var currRenderNodeIndex = -1;

            var nodeLogger = function nodeLogger() {
              currRenderNodeIndex++;

              if (currRenderNodeIndex === renderNodeIndex) {
                var _console$error;

                return (_console$error = console.error).bind.apply(_console$error, [console].concat(values));
              } else {
                return NOOP;
              }
            };

            logViewDef.factory(nodeLogger);

            if (currRenderNodeIndex < renderNodeIndex) {
              console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');
              console.error.apply(console, values);
            }
          }
        }]);

        return DebugContext_;
      }();

      function getRenderNodeIndex(viewDef, nodeIndex) {
        var renderNodeIndex = -1;

        for (var i = 0; i <= nodeIndex; i++) {
          var nodeDef = viewDef.nodes[i];

          if (nodeDef.flags & 3
          /* CatRenderNode */
          ) {
              renderNodeIndex++;
            }
        }

        return renderNodeIndex;
      }

      function findHostElement(view) {
        while (view && !isComponentView(view)) {
          view = view.parent;
        }

        if (view.parent) {
          return asElementData(view.parent, viewParentEl(view).nodeIndex);
        }

        return null;
      }

      function collectReferences(view, nodeDef, references) {
        for (var refName in nodeDef.references) {
          references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);
        }
      }

      function callWithDebugContext(action, fn, self, args) {
        var oldAction = _currentAction;
        var oldView = _currentView;
        var oldNodeIndex = _currentNodeIndex;

        try {
          _currentAction = action;
          var result = fn.apply(self, args);
          _currentView = oldView;
          _currentNodeIndex = oldNodeIndex;
          _currentAction = oldAction;
          return result;
        } catch (e) {
          if (isViewDebugError(e) || !_currentView) {
            throw e;
          }

          throw viewWrappedDebugError(e, getCurrentDebugContext());
        }
      }

      function getCurrentDebugContext() {
        return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;
      }

      var DebugRendererFactory2 = /*#__PURE__*/function () {
        function DebugRendererFactory2(delegate) {
          _classCallCheck2(this, DebugRendererFactory2);

          this.delegate = delegate;
        }

        _createClass2(DebugRendererFactory2, [{
          key: "createRenderer",
          value: function createRenderer(element, renderData) {
            return new DebugRenderer2(this.delegate.createRenderer(element, renderData));
          }
        }, {
          key: "begin",
          value: function begin() {
            if (this.delegate.begin) {
              this.delegate.begin();
            }
          }
        }, {
          key: "end",
          value: function end() {
            if (this.delegate.end) {
              this.delegate.end();
            }
          }
        }, {
          key: "whenRenderingDone",
          value: function whenRenderingDone() {
            if (this.delegate.whenRenderingDone) {
              return this.delegate.whenRenderingDone();
            }

            return Promise.resolve(null);
          }
        }]);

        return DebugRendererFactory2;
      }();

      var DebugRenderer2 = /*#__PURE__*/function () {
        function DebugRenderer2(delegate) {
          _classCallCheck2(this, DebugRenderer2);

          this.delegate = delegate;
          /**
           * Factory function used to create a `DebugContext` when a node is created.
           *
           * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.
           *
           * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine
           * or a Render context.
           */

          this.debugContextFactory = getCurrentDebugContext;
          this.data = this.delegate.data;
        }

        _createClass2(DebugRenderer2, [{
          key: "createDebugContext",
          value: function createDebugContext(nativeElement) {
            return this.debugContextFactory(nativeElement);
          }
        }, {
          key: "destroyNode",
          value: function destroyNode(node) {
            var debugNode = getDebugNode$1(node);

            if (debugNode) {
              removeDebugNodeFromIndex(debugNode);

              if (debugNode instanceof DebugNode__PRE_R3__) {
                debugNode.listeners.length = 0;
              }
            }

            if (this.delegate.destroyNode) {
              this.delegate.destroyNode(node);
            }
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.delegate.destroy();
          }
        }, {
          key: "createElement",
          value: function createElement(name, namespace) {
            var el = this.delegate.createElement(name, namespace);
            var debugCtx = this.createDebugContext(el);

            if (debugCtx) {
              var debugEl = new DebugElement__PRE_R3__(el, null, debugCtx);
              debugEl.name = name;
              indexDebugNode(debugEl);
            }

            return el;
          }
        }, {
          key: "createComment",
          value: function createComment(value) {
            var comment = this.delegate.createComment(escapeCommentText(value));
            var debugCtx = this.createDebugContext(comment);

            if (debugCtx) {
              indexDebugNode(new DebugNode__PRE_R3__(comment, null, debugCtx));
            }

            return comment;
          }
        }, {
          key: "createText",
          value: function createText(value) {
            var text = this.delegate.createText(value);
            var debugCtx = this.createDebugContext(text);

            if (debugCtx) {
              indexDebugNode(new DebugNode__PRE_R3__(text, null, debugCtx));
            }

            return text;
          }
        }, {
          key: "appendChild",
          value: function appendChild(parent, newChild) {
            var debugEl = getDebugNode$1(parent);
            var debugChildEl = getDebugNode$1(newChild);

            if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {
              debugEl.addChild(debugChildEl);
            }

            this.delegate.appendChild(parent, newChild);
          }
        }, {
          key: "insertBefore",
          value: function insertBefore(parent, newChild, refChild, isMove) {
            var debugEl = getDebugNode$1(parent);
            var debugChildEl = getDebugNode$1(newChild);
            var debugRefEl = getDebugNode$1(refChild);

            if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {
              debugEl.insertBefore(debugRefEl, debugChildEl);
            }

            this.delegate.insertBefore(parent, newChild, refChild, isMove);
          }
        }, {
          key: "removeChild",
          value: function removeChild(parent, oldChild) {
            var debugEl = getDebugNode$1(parent);
            var debugChildEl = getDebugNode$1(oldChild);

            if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {
              debugEl.removeChild(debugChildEl);
            }

            this.delegate.removeChild(parent, oldChild);
          }
        }, {
          key: "selectRootElement",
          value: function selectRootElement(selectorOrNode, preserveContent) {
            var el = this.delegate.selectRootElement(selectorOrNode, preserveContent);
            var debugCtx = getCurrentDebugContext();

            if (debugCtx) {
              indexDebugNode(new DebugElement__PRE_R3__(el, null, debugCtx));
            }

            return el;
          }
        }, {
          key: "setAttribute",
          value: function setAttribute(el, name, value, namespace) {
            var debugEl = getDebugNode$1(el);

            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
              var fullName = namespace ? namespace + ':' + name : name;
              debugEl.attributes[fullName] = value;
            }

            this.delegate.setAttribute(el, name, value, namespace);
          }
        }, {
          key: "removeAttribute",
          value: function removeAttribute(el, name, namespace) {
            var debugEl = getDebugNode$1(el);

            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
              var fullName = namespace ? namespace + ':' + name : name;
              debugEl.attributes[fullName] = null;
            }

            this.delegate.removeAttribute(el, name, namespace);
          }
        }, {
          key: "addClass",
          value: function addClass(el, name) {
            var debugEl = getDebugNode$1(el);

            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
              debugEl.classes[name] = true;
            }

            this.delegate.addClass(el, name);
          }
        }, {
          key: "removeClass",
          value: function removeClass(el, name) {
            var debugEl = getDebugNode$1(el);

            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
              debugEl.classes[name] = false;
            }

            this.delegate.removeClass(el, name);
          }
        }, {
          key: "setStyle",
          value: function setStyle(el, style, value, flags) {
            var debugEl = getDebugNode$1(el);

            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
              debugEl.styles[style] = value;
            }

            this.delegate.setStyle(el, style, value, flags);
          }
        }, {
          key: "removeStyle",
          value: function removeStyle(el, style, flags) {
            var debugEl = getDebugNode$1(el);

            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
              debugEl.styles[style] = null;
            }

            this.delegate.removeStyle(el, style, flags);
          }
        }, {
          key: "setProperty",
          value: function setProperty(el, name, value) {
            var debugEl = getDebugNode$1(el);

            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
              debugEl.properties[name] = value;
            }

            this.delegate.setProperty(el, name, value);
          }
        }, {
          key: "listen",
          value: function listen(target, eventName, callback) {
            if (typeof target !== 'string') {
              var debugEl = getDebugNode$1(target);

              if (debugEl) {
                debugEl.listeners.push(new _DebugEventListener(eventName, callback));
              }
            }

            return this.delegate.listen(target, eventName, callback);
          }
        }, {
          key: "parentNode",
          value: function parentNode(node) {
            return this.delegate.parentNode(node);
          }
        }, {
          key: "nextSibling",
          value: function nextSibling(node) {
            return this.delegate.nextSibling(node);
          }
        }, {
          key: "setValue",
          value: function setValue(node, value) {
            return this.delegate.setValue(node, value);
          }
        }]);

        return DebugRenderer2;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function overrideProvider(override) {
        initServicesIfNeeded();
        return Services.overrideProvider(override);
      }

      function overrideComponentView(comp, componentFactory) {
        initServicesIfNeeded();
        return Services.overrideComponentView(comp, componentFactory);
      }

      function clearOverrides() {
        initServicesIfNeeded();
        return Services.clearOverrides();
      } // Attention: this function is called as top level function.
      // Putting any logic in here will destroy closure tree shaking!


      function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {
        return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);
      }

      function cloneNgModuleDefinition(def) {
        var providers = Array.from(def.providers);
        var modules = Array.from(def.modules);
        var providersByKey = {};

        for (var key in def.providersByKey) {
          providersByKey[key] = def.providersByKey[key];
        }

        return {
          factory: def.factory,
          scope: def.scope,
          providers: providers,
          modules: modules,
          providersByKey: providersByKey
        };
      }

      var NgModuleFactory_ = /*#__PURE__*/function (_NgModuleFactory3) {
        _inherits(NgModuleFactory_, _NgModuleFactory3);

        var _super31 = _createSuper(NgModuleFactory_);

        function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {
          var _this104;

          _classCallCheck2(this, NgModuleFactory_);

          // Attention: this ctor is called as top level function.
          // Putting any logic in here will destroy closure tree shaking!
          _this104 = _super31.call(this);
          _this104.moduleType = moduleType;
          _this104._bootstrapComponents = _bootstrapComponents;
          _this104._ngModuleDefFactory = _ngModuleDefFactory;
          return _this104;
        }

        _createClass2(NgModuleFactory_, [{
          key: "create",
          value: function create(parentInjector) {
            initServicesIfNeeded(); // Clone the NgModuleDefinition so that any tree shakeable provider definition
            // added to this instance of the NgModuleRef doesn't affect the cached copy.
            // See https://github.com/angular/angular/issues/25018.

            var def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));
            return Services.createNgModuleRef(this.moduleType, parentInjector || _Injector.NULL, this._bootstrapComponents, def);
          }
        }]);

        return NgModuleFactory_;
      }(_NgModuleFactory);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Compiles a partial directive declaration object into a full directive definition object.
       *
       * @codeGenApi
       */


      function _ɵɵngDeclareDirective(decl) {
        var compiler = getCompilerFacade();
        return compiler.compileDirectiveDeclaration(angularCoreEnv, "ng:///".concat(decl.type.name, "/\u0275fac.js"), decl);
      }
      /**
       * Evaluates the class metadata declaration.
       *
       * @codeGenApi
       */


      function _ɵɵngDeclareClassMetadata(decl) {
        var _a, _b;

        setClassMetadata(decl.type, decl.decorators, (_a = decl.ctorParameters) !== null && _a !== void 0 ? _a : null, (_b = decl.propDecorators) !== null && _b !== void 0 ? _b : null);
      }
      /**
       * Compiles a partial component declaration object into a full component definition object.
       *
       * @codeGenApi
       */


      function _ɵɵngDeclareComponent(decl) {
        var compiler = getCompilerFacade();
        return compiler.compileComponentDeclaration(angularCoreEnv, "ng:///".concat(decl.type.name, "/\u0275cmp.js"), decl);
      }
      /**
       * Compiles a partial pipe declaration object into a full pipe definition object.
       *
       * @codeGenApi
       */


      function _ɵɵngDeclareFactory(decl) {
        var compiler = getCompilerFacade();
        return compiler.compileFactoryDeclaration(angularCoreEnv, "ng:///".concat(decl.type.name, "/\u0275fac.js"), decl);
      }
      /**
       * Compiles a partial injectable declaration object into a full injectable definition object.
       *
       * @codeGenApi
       */


      function _ɵɵngDeclareInjectable(decl) {
        var compiler = getCompilerFacade();
        return compiler.compileInjectableDeclaration(angularCoreEnv, "ng:///".concat(decl.type.name, "/\u0275prov.js"), decl);
      }
      /**
       * Compiles a partial injector declaration object into a full injector definition object.
       *
       * @codeGenApi
       */


      function _ɵɵngDeclareInjector(decl) {
        var compiler = getCompilerFacade();
        return compiler.compileInjectorDeclaration(angularCoreEnv, "ng:///".concat(decl.type.name, "/\u0275inj.js"), decl);
      }
      /**
       * Compiles a partial NgModule declaration object into a full NgModule definition object.
       *
       * @codeGenApi
       */


      function _ɵɵngDeclareNgModule(decl) {
        var compiler = getCompilerFacade();
        return compiler.compileNgModuleDeclaration(angularCoreEnv, "ng:///".concat(decl.type.name, "/\u0275mod.js"), decl);
      }
      /**
       * Compiles a partial pipe declaration object into a full pipe definition object.
       *
       * @codeGenApi
       */


      function _ɵɵngDeclarePipe(decl) {
        var compiler = getCompilerFacade();
        return compiler.compilePipeDeclaration(angularCoreEnv, "ng:///".concat(decl.type.name, "/\u0275pipe.js"), decl);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // clang-format on

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      if (typeof ngDevMode !== 'undefined' && ngDevMode) {
        // This helper is to give a reasonable error message to people upgrading to v9 that have not yet
        // installed `@angular/localize` in their app.
        // tslint:disable-next-line: no-toplevel-property-access
        _global.$localize = _global.$localize || function () {
          throw new Error('It looks like your application or one of its dependencies is using i18n.\n' + 'Angular 9 introduced a global `$localize()` function that needs to be loaded.\n' + 'Please run `ng add @angular/localize` from the Angular CLI.\n' + '(For non-CLI projects, add `import \'@angular/localize/init\';` to your `polyfills.ts` file.\n' + 'For server-side rendering applications add the import to your `main.server.ts` file.)');
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // This file only reexports content of the `src` folder. Keep it that way.

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=core.js.map

      /***/

    },

    /***/
    75835:
    /*!************************************************************************************!*\
      !*** ./node_modules/@angular/platform-browser/__ivy_ngcc__/fesm2015/animations.js ***!
      \************************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ANIMATION_MODULE_TYPE": function ANIMATION_MODULE_TYPE() {
          return (
            /* binding */
            _ANIMATION_MODULE_TYPE
          );
        },

        /* harmony export */
        "BrowserAnimationsModule": function BrowserAnimationsModule() {
          return (
            /* binding */
            _BrowserAnimationsModule
          );
        },

        /* harmony export */
        "NoopAnimationsModule": function NoopAnimationsModule() {
          return (
            /* binding */
            _NoopAnimationsModule
          );
        },

        /* harmony export */
        "ɵAnimationRenderer": function ɵAnimationRenderer() {
          return (
            /* binding */
            AnimationRenderer
          );
        },

        /* harmony export */
        "ɵAnimationRendererFactory": function ɵAnimationRendererFactory() {
          return (
            /* binding */
            AnimationRendererFactory
          );
        },

        /* harmony export */
        "ɵBrowserAnimationBuilder": function ɵBrowserAnimationBuilder() {
          return (
            /* binding */
            BrowserAnimationBuilder
          );
        },

        /* harmony export */
        "ɵBrowserAnimationFactory": function ɵBrowserAnimationFactory() {
          return (
            /* binding */
            BrowserAnimationFactory
          );
        },

        /* harmony export */
        "ɵInjectableAnimationEngine": function ɵInjectableAnimationEngine() {
          return (
            /* binding */
            InjectableAnimationEngine
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_animations_animations_a": function ɵangular_packages_platform_browser_animations_animations_a() {
          return (
            /* binding */
            instantiateSupportedAnimationDriver
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_animations_animations_b": function ɵangular_packages_platform_browser_animations_animations_b() {
          return (
            /* binding */
            instantiateDefaultStyleNormalizer
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_animations_animations_c": function ɵangular_packages_platform_browser_animations_animations_c() {
          return (
            /* binding */
            instantiateRendererFactory
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_animations_animations_d": function ɵangular_packages_platform_browser_animations_animations_d() {
          return (
            /* binding */
            BROWSER_ANIMATIONS_PROVIDERS
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_animations_animations_e": function ɵangular_packages_platform_browser_animations_animations_e() {
          return (
            /* binding */
            BROWSER_NOOP_ANIMATIONS_PROVIDERS
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_animations_animations_f": function ɵangular_packages_platform_browser_animations_animations_f() {
          return (
            /* binding */
            BaseAnimationRenderer
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      37716);
      /* harmony import */


      var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/platform-browser */
      39075);
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/animations */
      17238);
      /* harmony import */


      var _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/animations/browser */
      93154);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      38583);
      /**
       * @license Angular v12.0.3
       * (c) 2010-2021 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var BrowserAnimationBuilder = /*#__PURE__*/function (_angular_animations__2) {
        _inherits(BrowserAnimationBuilder, _angular_animations__2);

        var _super32 = _createSuper(BrowserAnimationBuilder);

        function BrowserAnimationBuilder(rootRenderer, doc) {
          var _this105;

          _classCallCheck2(this, BrowserAnimationBuilder);

          _this105 = _super32.call(this);
          _this105._nextAnimationId = 0;
          var typeData = {
            id: '0',
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ViewEncapsulation.None,
            styles: [],
            data: {
              animation: []
            }
          };
          _this105._renderer = rootRenderer.createRenderer(doc.body, typeData);
          return _this105;
        }

        _createClass2(BrowserAnimationBuilder, [{
          key: "build",
          value: function build(animation) {
            var id = this._nextAnimationId.toString();

            this._nextAnimationId++;
            var entry = Array.isArray(animation) ? (0, _angular_animations__WEBPACK_IMPORTED_MODULE_0__.sequence)(animation) : animation;
            issueAnimationCommand(this._renderer, null, id, 'register', [entry]);
            return new BrowserAnimationFactory(id, this._renderer);
          }
        }]);

        return BrowserAnimationBuilder;
      }(_angular_animations__WEBPACK_IMPORTED_MODULE_0__.AnimationBuilder);

      BrowserAnimationBuilder.ɵfac = function BrowserAnimationBuilder_Factory(t) {
        return new (t || BrowserAnimationBuilder)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererFactory2), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_2__.DOCUMENT));
      };

      BrowserAnimationBuilder.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: BrowserAnimationBuilder,
        factory: BrowserAnimationBuilder.ɵfac
      });

      BrowserAnimationBuilder.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererFactory2
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__.DOCUMENT]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](BrowserAnimationBuilder, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererFactory2
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__.DOCUMENT]
            }]
          }];
        }, null);
      })();

      var BrowserAnimationFactory = /*#__PURE__*/function (_angular_animations__3) {
        _inherits(BrowserAnimationFactory, _angular_animations__3);

        var _super33 = _createSuper(BrowserAnimationFactory);

        function BrowserAnimationFactory(_id, _renderer) {
          var _this106;

          _classCallCheck2(this, BrowserAnimationFactory);

          _this106 = _super33.call(this);
          _this106._id = _id;
          _this106._renderer = _renderer;
          return _this106;
        }

        _createClass2(BrowserAnimationFactory, [{
          key: "create",
          value: function create(element, options) {
            return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);
          }
        }]);

        return BrowserAnimationFactory;
      }(_angular_animations__WEBPACK_IMPORTED_MODULE_0__.AnimationFactory);

      var RendererAnimationPlayer = /*#__PURE__*/function () {
        function RendererAnimationPlayer(id, element, options, _renderer) {
          _classCallCheck2(this, RendererAnimationPlayer);

          this.id = id;
          this.element = element;
          this._renderer = _renderer;
          this.parentPlayer = null;
          this._started = false;
          this.totalTime = 0;

          this._command('create', options);
        }

        _createClass2(RendererAnimationPlayer, [{
          key: "_listen",
          value: function _listen(eventName, callback) {
            return this._renderer.listen(this.element, "@@".concat(this.id, ":").concat(eventName), callback);
          }
        }, {
          key: "_command",
          value: function _command(command) {
            for (var _len15 = arguments.length, args = new Array(_len15 > 1 ? _len15 - 1 : 0), _key16 = 1; _key16 < _len15; _key16++) {
              args[_key16 - 1] = arguments[_key16];
            }

            return issueAnimationCommand(this._renderer, this.element, this.id, command, args);
          }
        }, {
          key: "onDone",
          value: function onDone(fn) {
            this._listen('done', fn);
          }
        }, {
          key: "onStart",
          value: function onStart(fn) {
            this._listen('start', fn);
          }
        }, {
          key: "onDestroy",
          value: function onDestroy(fn) {
            this._listen('destroy', fn);
          }
        }, {
          key: "init",
          value: function init() {
            this._command('init');
          }
        }, {
          key: "hasStarted",
          value: function hasStarted() {
            return this._started;
          }
        }, {
          key: "play",
          value: function play() {
            this._command('play');

            this._started = true;
          }
        }, {
          key: "pause",
          value: function pause() {
            this._command('pause');
          }
        }, {
          key: "restart",
          value: function restart() {
            this._command('restart');
          }
        }, {
          key: "finish",
          value: function finish() {
            this._command('finish');
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this._command('destroy');
          }
        }, {
          key: "reset",
          value: function reset() {
            this._command('reset');

            this._started = false;
          }
        }, {
          key: "setPosition",
          value: function setPosition(p) {
            this._command('setPosition', p);
          }
        }, {
          key: "getPosition",
          value: function getPosition() {
            var _a, _b;

            return (_b = (_a = this._renderer.engine.players[+this.id]) === null || _a === void 0 ? void 0 : _a.getPosition()) !== null && _b !== void 0 ? _b : 0;
          }
        }]);

        return RendererAnimationPlayer;
      }();

      function issueAnimationCommand(renderer, element, id, command, args) {
        return renderer.setProperty(element, "@@".concat(id, ":").concat(command), args);
      }

      var ANIMATION_PREFIX = '@';
      var DISABLE_ANIMATIONS_FLAG = '@.disabled';

      var AnimationRendererFactory = /*#__PURE__*/function () {
        function AnimationRendererFactory(delegate, engine, _zone) {
          _classCallCheck2(this, AnimationRendererFactory);

          this.delegate = delegate;
          this.engine = engine;
          this._zone = _zone;
          this._currentId = 0;
          this._microtaskId = 1;
          this._animationCallbacksBuffer = [];
          this._rendererCache = new Map();
          this._cdRecurDepth = 0;
          this.promise = Promise.resolve(0);

          engine.onRemovalComplete = function (element, delegate) {
            // Note: if an component element has a leave animation, and the component
            // a host leave animation, the view engine will call `removeChild` for the parent
            // component renderer as well as for the child component renderer.
            // Therefore, we need to check if we already removed the element.
            if (delegate && delegate.parentNode(element)) {
              delegate.removeChild(element.parentNode, element);
            }
          };
        }

        _createClass2(AnimationRendererFactory, [{
          key: "createRenderer",
          value: function createRenderer(hostElement, type) {
            var _this107 = this;

            var EMPTY_NAMESPACE_ID = ''; // cache the delegates to find out which cached delegate can
            // be used by which cached renderer

            var delegate = this.delegate.createRenderer(hostElement, type);

            if (!hostElement || !type || !type.data || !type.data['animation']) {
              var renderer = this._rendererCache.get(delegate);

              if (!renderer) {
                renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine); // only cache this result when the base renderer is used

                this._rendererCache.set(delegate, renderer);
              }

              return renderer;
            }

            var componentId = type.id;
            var namespaceId = type.id + '-' + this._currentId;
            this._currentId++;
            this.engine.register(namespaceId, hostElement);

            var registerTrigger = function registerTrigger(trigger) {
              if (Array.isArray(trigger)) {
                trigger.forEach(registerTrigger);
              } else {
                _this107.engine.registerTrigger(componentId, namespaceId, hostElement, trigger.name, trigger);
              }
            };

            var animationTriggers = type.data['animation'];
            animationTriggers.forEach(registerTrigger);
            return new AnimationRenderer(this, namespaceId, delegate, this.engine);
          }
        }, {
          key: "begin",
          value: function begin() {
            this._cdRecurDepth++;

            if (this.delegate.begin) {
              this.delegate.begin();
            }
          }
        }, {
          key: "_scheduleCountTask",
          value: function _scheduleCountTask() {
            var _this108 = this;

            // always use promise to schedule microtask instead of use Zone
            this.promise.then(function () {
              _this108._microtaskId++;
            });
          }
          /** @internal */

        }, {
          key: "scheduleListenerCallback",
          value: function scheduleListenerCallback(count, fn, data) {
            var _this109 = this;

            if (count >= 0 && count < this._microtaskId) {
              this._zone.run(function () {
                return fn(data);
              });

              return;
            }

            if (this._animationCallbacksBuffer.length == 0) {
              Promise.resolve(null).then(function () {
                _this109._zone.run(function () {
                  _this109._animationCallbacksBuffer.forEach(function (tuple) {
                    var _tuple2 = _slicedToArray(tuple, 2),
                        fn = _tuple2[0],
                        data = _tuple2[1];

                    fn(data);
                  });

                  _this109._animationCallbacksBuffer = [];
                });
              });
            }

            this._animationCallbacksBuffer.push([fn, data]);
          }
        }, {
          key: "end",
          value: function end() {
            var _this110 = this;

            this._cdRecurDepth--; // this is to prevent animations from running twice when an inner
            // component does CD when a parent component instead has inserted it

            if (this._cdRecurDepth == 0) {
              this._zone.runOutsideAngular(function () {
                _this110._scheduleCountTask();

                _this110.engine.flush(_this110._microtaskId);
              });
            }

            if (this.delegate.end) {
              this.delegate.end();
            }
          }
        }, {
          key: "whenRenderingDone",
          value: function whenRenderingDone() {
            return this.engine.whenRenderingDone();
          }
        }]);

        return AnimationRendererFactory;
      }();

      AnimationRendererFactory.ɵfac = function AnimationRendererFactory_Factory(t) {
        return new (t || AnimationRendererFactory)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererFactory2), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone));
      };

      AnimationRendererFactory.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: AnimationRendererFactory,
        factory: AnimationRendererFactory.ɵfac
      });

      AnimationRendererFactory.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererFactory2
        }, {
          type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](AnimationRendererFactory, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererFactory2
          }, {
            type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone
          }];
        }, null);
      })();

      var BaseAnimationRenderer = /*#__PURE__*/function () {
        function BaseAnimationRenderer(namespaceId, delegate, engine) {
          _classCallCheck2(this, BaseAnimationRenderer);

          this.namespaceId = namespaceId;
          this.delegate = delegate;
          this.engine = engine;
          this.destroyNode = this.delegate.destroyNode ? function (n) {
            return delegate.destroyNode(n);
          } : null;
        }

        _createClass2(BaseAnimationRenderer, [{
          key: "data",
          get: function get() {
            return this.delegate.data;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.engine.destroy(this.namespaceId, this.delegate);
            this.delegate.destroy();
          }
        }, {
          key: "createElement",
          value: function createElement(name, namespace) {
            return this.delegate.createElement(name, namespace);
          }
        }, {
          key: "createComment",
          value: function createComment(value) {
            return this.delegate.createComment(value);
          }
        }, {
          key: "createText",
          value: function createText(value) {
            return this.delegate.createText(value);
          }
        }, {
          key: "appendChild",
          value: function appendChild(parent, newChild) {
            this.delegate.appendChild(parent, newChild);
            this.engine.onInsert(this.namespaceId, newChild, parent, false);
          }
        }, {
          key: "insertBefore",
          value: function insertBefore(parent, newChild, refChild) {
            var isMove = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
            this.delegate.insertBefore(parent, newChild, refChild); // If `isMove` true than we should animate this insert.

            this.engine.onInsert(this.namespaceId, newChild, parent, isMove);
          }
        }, {
          key: "removeChild",
          value: function removeChild(parent, oldChild, isHostElement) {
            this.engine.onRemove(this.namespaceId, oldChild, this.delegate, isHostElement);
          }
        }, {
          key: "selectRootElement",
          value: function selectRootElement(selectorOrNode, preserveContent) {
            return this.delegate.selectRootElement(selectorOrNode, preserveContent);
          }
        }, {
          key: "parentNode",
          value: function parentNode(node) {
            return this.delegate.parentNode(node);
          }
        }, {
          key: "nextSibling",
          value: function nextSibling(node) {
            return this.delegate.nextSibling(node);
          }
        }, {
          key: "setAttribute",
          value: function setAttribute(el, name, value, namespace) {
            this.delegate.setAttribute(el, name, value, namespace);
          }
        }, {
          key: "removeAttribute",
          value: function removeAttribute(el, name, namespace) {
            this.delegate.removeAttribute(el, name, namespace);
          }
        }, {
          key: "addClass",
          value: function addClass(el, name) {
            this.delegate.addClass(el, name);
          }
        }, {
          key: "removeClass",
          value: function removeClass(el, name) {
            this.delegate.removeClass(el, name);
          }
        }, {
          key: "setStyle",
          value: function setStyle(el, style, value, flags) {
            this.delegate.setStyle(el, style, value, flags);
          }
        }, {
          key: "removeStyle",
          value: function removeStyle(el, style, flags) {
            this.delegate.removeStyle(el, style, flags);
          }
        }, {
          key: "setProperty",
          value: function setProperty(el, name, value) {
            if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {
              this.disableAnimations(el, !!value);
            } else {
              this.delegate.setProperty(el, name, value);
            }
          }
        }, {
          key: "setValue",
          value: function setValue(node, value) {
            this.delegate.setValue(node, value);
          }
        }, {
          key: "listen",
          value: function listen(target, eventName, callback) {
            return this.delegate.listen(target, eventName, callback);
          }
        }, {
          key: "disableAnimations",
          value: function disableAnimations(element, value) {
            this.engine.disableAnimations(element, value);
          }
        }]);

        return BaseAnimationRenderer;
      }();

      var AnimationRenderer = /*#__PURE__*/function (_BaseAnimationRendere) {
        _inherits(AnimationRenderer, _BaseAnimationRendere);

        var _super34 = _createSuper(AnimationRenderer);

        function AnimationRenderer(factory, namespaceId, delegate, engine) {
          var _this111;

          _classCallCheck2(this, AnimationRenderer);

          _this111 = _super34.call(this, namespaceId, delegate, engine);
          _this111.factory = factory;
          _this111.namespaceId = namespaceId;
          return _this111;
        }

        _createClass2(AnimationRenderer, [{
          key: "setProperty",
          value: function setProperty(el, name, value) {
            if (name.charAt(0) == ANIMATION_PREFIX) {
              if (name.charAt(1) == '.' && name == DISABLE_ANIMATIONS_FLAG) {
                value = value === undefined ? true : !!value;
                this.disableAnimations(el, value);
              } else {
                this.engine.process(this.namespaceId, el, name.substr(1), value);
              }
            } else {
              this.delegate.setProperty(el, name, value);
            }
          }
        }, {
          key: "listen",
          value: function listen(target, eventName, callback) {
            var _this112 = this;

            if (eventName.charAt(0) == ANIMATION_PREFIX) {
              var element = resolveElementFromTarget(target);
              var name = eventName.substr(1);
              var phase = ''; // @listener.phase is for trigger animation callbacks
              // @@listener is for animation builder callbacks

              if (name.charAt(0) != ANIMATION_PREFIX) {
                var _parseTriggerCallback = parseTriggerCallbackName(name);

                var _parseTriggerCallback2 = _slicedToArray(_parseTriggerCallback, 2);

                name = _parseTriggerCallback2[0];
                phase = _parseTriggerCallback2[1];
              }

              return this.engine.listen(this.namespaceId, element, name, phase, function (event) {
                var countId = event['_data'] || -1;

                _this112.factory.scheduleListenerCallback(countId, callback, event);
              });
            }

            return this.delegate.listen(target, eventName, callback);
          }
        }]);

        return AnimationRenderer;
      }(BaseAnimationRenderer);

      function resolveElementFromTarget(target) {
        switch (target) {
          case 'body':
            return document.body;

          case 'document':
            return document;

          case 'window':
            return window;

          default:
            return target;
        }
      }

      function parseTriggerCallbackName(triggerName) {
        var dotIndex = triggerName.indexOf('.');
        var trigger = triggerName.substring(0, dotIndex);
        var phase = triggerName.substr(dotIndex + 1);
        return [trigger, phase];
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var InjectableAnimationEngine = /*#__PURE__*/function (_angular_animations_b) {
        _inherits(InjectableAnimationEngine, _angular_animations_b);

        var _super35 = _createSuper(InjectableAnimationEngine);

        function InjectableAnimationEngine(doc, driver, normalizer) {
          _classCallCheck2(this, InjectableAnimationEngine);

          return _super35.call(this, doc.body, driver, normalizer);
        }

        _createClass2(InjectableAnimationEngine, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.flush();
          }
        }]);

        return InjectableAnimationEngine;
      }(_angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"]);

      InjectableAnimationEngine.ɵfac = function InjectableAnimationEngine_Factory(t) {
        return new (t || InjectableAnimationEngine)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_2__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__.AnimationDriver), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationStyleNormalizer"]));
      };

      InjectableAnimationEngine.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: InjectableAnimationEngine,
        factory: InjectableAnimationEngine.ɵfac
      });

      InjectableAnimationEngine.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__.DOCUMENT]
          }]
        }, {
          type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__.AnimationDriver
        }, {
          type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationStyleNormalizer"]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](InjectableAnimationEngine, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__.DOCUMENT]
            }]
          }, {
            type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__.AnimationDriver
          }, {
            type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationStyleNormalizer"]
          }];
        }, null);
      })();

      function instantiateSupportedAnimationDriver() {
        return (0, _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵsupportsWebAnimations"])() ? new _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵWebAnimationsDriver"]() : new _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵCssKeyframesDriver"]();
      }

      function instantiateDefaultStyleNormalizer() {
        return new _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵWebAnimationsStyleNormalizer"]();
      }

      function instantiateRendererFactory(renderer, engine, zone) {
        return new AnimationRendererFactory(renderer, engine, zone);
      }
      /**
       * @publicApi
       */


      var _ANIMATION_MODULE_TYPE = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.InjectionToken('AnimationModuleType');

      var SHARED_ANIMATION_PROVIDERS = [{
        provide: _angular_animations__WEBPACK_IMPORTED_MODULE_0__.AnimationBuilder,
        useClass: BrowserAnimationBuilder
      }, {
        provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationStyleNormalizer"],
        useFactory: instantiateDefaultStyleNormalizer
      }, {
        provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"],
        useClass: InjectableAnimationEngine
      }, {
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererFactory2,
        useFactory: instantiateRendererFactory,
        deps: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__["ɵDomRendererFactory2"], _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"], _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone]
      }];
      /**
       * Separate providers from the actual module so that we can do a local modification in Google3 to
       * include them in the BrowserModule.
       */

      var BROWSER_ANIMATIONS_PROVIDERS = [{
        provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__.AnimationDriver,
        useFactory: instantiateSupportedAnimationDriver
      }, {
        provide: _ANIMATION_MODULE_TYPE,
        useValue: 'BrowserAnimations'
      }].concat(SHARED_ANIMATION_PROVIDERS);
      /**
       * Separate providers from the actual module so that we can do a local modification in Google3 to
       * include them in the BrowserTestingModule.
       */

      var BROWSER_NOOP_ANIMATIONS_PROVIDERS = [{
        provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__.AnimationDriver,
        useClass: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵNoopAnimationDriver"]
      }, {
        provide: _ANIMATION_MODULE_TYPE,
        useValue: 'NoopAnimations'
      }].concat(SHARED_ANIMATION_PROVIDERS);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Exports `BrowserModule` with additional [dependency-injection providers](guide/glossary#provider)
       * for use with animations. See [Animations](guide/animations).
       * @publicApi
       */

      var _BrowserAnimationsModule = /*#__PURE__*/function () {
        function _BrowserAnimationsModule() {
          _classCallCheck2(this, _BrowserAnimationsModule);
        }

        _createClass2(_BrowserAnimationsModule, null, [{
          key: "withConfig",
          value:
          /**
           * Configures the module based on the specified object.
           *
           * @param config Object used to configure the behavior of the `BrowserAnimationsModule`.
           * @see `BrowserAnimationsModuleConfig`
           *
           * @usageNotes
           * When registering the `BrowserAnimationsModule`, you can use the `withConfig`
           * function as follows:
           * ```
           * @NgModule({
           *   imports: [BrowserAnimationsModule.withConfig(config)]
           * })
           * class MyNgModule {}
           * ```
           */
          function withConfig(config) {
            return {
              ngModule: _BrowserAnimationsModule,
              providers: config.disableAnimations ? BROWSER_NOOP_ANIMATIONS_PROVIDERS : BROWSER_ANIMATIONS_PROVIDERS
            };
          }
        }]);

        return _BrowserAnimationsModule;
      }();

      _BrowserAnimationsModule.ɵfac = function BrowserAnimationsModule_Factory(t) {
        return new (t || _BrowserAnimationsModule)();
      };

      _BrowserAnimationsModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: _BrowserAnimationsModule
      });
      _BrowserAnimationsModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        providers: BROWSER_ANIMATIONS_PROVIDERS,
        imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__.BrowserModule]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_BrowserAnimationsModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
          args: [{
            exports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__.BrowserModule],
            providers: BROWSER_ANIMATIONS_PROVIDERS
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](_BrowserAnimationsModule, {
          exports: function exports() {
            return [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__.BrowserModule];
          }
        });
      })();
      /**
       * A null player that must be imported to allow disabling of animations.
       * @publicApi
       */


      var _NoopAnimationsModule = function _NoopAnimationsModule() {
        _classCallCheck2(this, _NoopAnimationsModule);
      };

      _NoopAnimationsModule.ɵfac = function NoopAnimationsModule_Factory(t) {
        return new (t || _NoopAnimationsModule)();
      };

      _NoopAnimationsModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: _NoopAnimationsModule
      });
      _NoopAnimationsModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,
        imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__.BrowserModule]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_NoopAnimationsModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
          args: [{
            exports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__.BrowserModule],
            providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](_NoopAnimationsModule, {
          exports: function exports() {
            return [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__.BrowserModule];
          }
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=animations.js.map

      /***/

    },

    /***/
    39075:
    /*!******************************************************************************************!*\
      !*** ./node_modules/@angular/platform-browser/__ivy_ngcc__/fesm2015/platform-browser.js ***!
      \******************************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ɵgetDOM": function ɵgetDOM() {
          return (
            /* reexport safe */
            _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"]
          );
        },

        /* harmony export */
        "BrowserModule": function BrowserModule() {
          return (
            /* binding */
            _BrowserModule
          );
        },

        /* harmony export */
        "BrowserTransferStateModule": function BrowserTransferStateModule() {
          return (
            /* binding */
            _BrowserTransferStateModule
          );
        },

        /* harmony export */
        "By": function By() {
          return (
            /* binding */
            _By
          );
        },

        /* harmony export */
        "DomSanitizer": function DomSanitizer() {
          return (
            /* binding */
            _DomSanitizer
          );
        },

        /* harmony export */
        "EVENT_MANAGER_PLUGINS": function EVENT_MANAGER_PLUGINS() {
          return (
            /* binding */
            _EVENT_MANAGER_PLUGINS
          );
        },

        /* harmony export */
        "EventManager": function EventManager() {
          return (
            /* binding */
            _EventManager
          );
        },

        /* harmony export */
        "HAMMER_GESTURE_CONFIG": function HAMMER_GESTURE_CONFIG() {
          return (
            /* binding */
            _HAMMER_GESTURE_CONFIG
          );
        },

        /* harmony export */
        "HAMMER_LOADER": function HAMMER_LOADER() {
          return (
            /* binding */
            _HAMMER_LOADER
          );
        },

        /* harmony export */
        "HammerGestureConfig": function HammerGestureConfig() {
          return (
            /* binding */
            _HammerGestureConfig
          );
        },

        /* harmony export */
        "HammerModule": function HammerModule() {
          return (
            /* binding */
            _HammerModule
          );
        },

        /* harmony export */
        "Meta": function Meta() {
          return (
            /* binding */
            _Meta
          );
        },

        /* harmony export */
        "Title": function Title() {
          return (
            /* binding */
            _Title
          );
        },

        /* harmony export */
        "TransferState": function TransferState() {
          return (
            /* binding */
            _TransferState
          );
        },

        /* harmony export */
        "VERSION": function VERSION() {
          return (
            /* binding */
            _VERSION3
          );
        },

        /* harmony export */
        "disableDebugTools": function disableDebugTools() {
          return (
            /* binding */
            _disableDebugTools
          );
        },

        /* harmony export */
        "enableDebugTools": function enableDebugTools() {
          return (
            /* binding */
            _enableDebugTools
          );
        },

        /* harmony export */
        "makeStateKey": function makeStateKey() {
          return (
            /* binding */
            _makeStateKey
          );
        },

        /* harmony export */
        "platformBrowser": function platformBrowser() {
          return (
            /* binding */
            _platformBrowser
          );
        },

        /* harmony export */
        "ɵBROWSER_SANITIZATION_PROVIDERS": function ɵBROWSER_SANITIZATION_PROVIDERS() {
          return (
            /* binding */
            BROWSER_SANITIZATION_PROVIDERS
          );
        },

        /* harmony export */
        "ɵBROWSER_SANITIZATION_PROVIDERS__POST_R3__": function ɵBROWSER_SANITIZATION_PROVIDERS__POST_R3__() {
          return (
            /* binding */
            BROWSER_SANITIZATION_PROVIDERS__POST_R3__
          );
        },

        /* harmony export */
        "ɵBrowserDomAdapter": function ɵBrowserDomAdapter() {
          return (
            /* binding */
            BrowserDomAdapter
          );
        },

        /* harmony export */
        "ɵBrowserGetTestability": function ɵBrowserGetTestability() {
          return (
            /* binding */
            BrowserGetTestability
          );
        },

        /* harmony export */
        "ɵDomEventsPlugin": function ɵDomEventsPlugin() {
          return (
            /* binding */
            DomEventsPlugin
          );
        },

        /* harmony export */
        "ɵDomRendererFactory2": function ɵDomRendererFactory2() {
          return (
            /* binding */
            DomRendererFactory2
          );
        },

        /* harmony export */
        "ɵDomSanitizerImpl": function ɵDomSanitizerImpl() {
          return (
            /* binding */
            DomSanitizerImpl
          );
        },

        /* harmony export */
        "ɵDomSharedStylesHost": function ɵDomSharedStylesHost() {
          return (
            /* binding */
            DomSharedStylesHost
          );
        },

        /* harmony export */
        "ɵELEMENT_PROBE_PROVIDERS": function ɵELEMENT_PROBE_PROVIDERS() {
          return (
            /* binding */
            ELEMENT_PROBE_PROVIDERS
          );
        },

        /* harmony export */
        "ɵELEMENT_PROBE_PROVIDERS__POST_R3__": function ɵELEMENT_PROBE_PROVIDERS__POST_R3__() {
          return (
            /* binding */
            ELEMENT_PROBE_PROVIDERS__POST_R3__
          );
        },

        /* harmony export */
        "ɵHAMMER_PROVIDERS__POST_R3__": function ɵHAMMER_PROVIDERS__POST_R3__() {
          return (
            /* binding */
            HAMMER_PROVIDERS__POST_R3__
          );
        },

        /* harmony export */
        "ɵHammerGesturesPlugin": function ɵHammerGesturesPlugin() {
          return (
            /* binding */
            HammerGesturesPlugin
          );
        },

        /* harmony export */
        "ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS": function ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS() {
          return (
            /* binding */
            INTERNAL_BROWSER_PLATFORM_PROVIDERS
          );
        },

        /* harmony export */
        "ɵKeyEventsPlugin": function ɵKeyEventsPlugin() {
          return (
            /* binding */
            KeyEventsPlugin
          );
        },

        /* harmony export */
        "ɵNAMESPACE_URIS": function ɵNAMESPACE_URIS() {
          return (
            /* binding */
            NAMESPACE_URIS
          );
        },

        /* harmony export */
        "ɵSharedStylesHost": function ɵSharedStylesHost() {
          return (
            /* binding */
            SharedStylesHost
          );
        },

        /* harmony export */
        "ɵTRANSITION_ID": function ɵTRANSITION_ID() {
          return (
            /* binding */
            TRANSITION_ID
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_platform_browser_a": function ɵangular_packages_platform_browser_platform_browser_a() {
          return (
            /* binding */
            errorHandler
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_platform_browser_b": function ɵangular_packages_platform_browser_platform_browser_b() {
          return (
            /* binding */
            _document
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_platform_browser_c": function ɵangular_packages_platform_browser_platform_browser_c() {
          return (
            /* binding */
            BROWSER_MODULE_PROVIDERS
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_platform_browser_d": function ɵangular_packages_platform_browser_platform_browser_d() {
          return (
            /* binding */
            createMeta
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_platform_browser_e": function ɵangular_packages_platform_browser_platform_browser_e() {
          return (
            /* binding */
            createTitle
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_platform_browser_f": function ɵangular_packages_platform_browser_platform_browser_f() {
          return (
            /* binding */
            initTransferState
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_platform_browser_g": function ɵangular_packages_platform_browser_platform_browser_g() {
          return (
            /* binding */
            EventManagerPlugin
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_platform_browser_h": function ɵangular_packages_platform_browser_platform_browser_h() {
          return (
            /* binding */
            HAMMER_PROVIDERS__PRE_R3__
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_platform_browser_i": function ɵangular_packages_platform_browser_platform_browser_i() {
          return (
            /* binding */
            HAMMER_PROVIDERS
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_platform_browser_j": function ɵangular_packages_platform_browser_platform_browser_j() {
          return (
            /* binding */
            domSanitizerImplFactory
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_platform_browser_k": function ɵangular_packages_platform_browser_platform_browser_k() {
          return (
            /* binding */
            appInitializerFactory
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_platform_browser_l": function ɵangular_packages_platform_browser_platform_browser_l() {
          return (
            /* binding */
            SERVER_TRANSITION_PROVIDERS
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_platform_browser_m": function ɵangular_packages_platform_browser_platform_browser_m() {
          return (
            /* binding */
            _createNgProbeR2
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_platform_browser_n": function ɵangular_packages_platform_browser_platform_browser_n() {
          return (
            /* binding */
            ELEMENT_PROBE_PROVIDERS__PRE_R3__
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_platform_browser_o": function ɵangular_packages_platform_browser_platform_browser_o() {
          return (
            /* binding */
            BrowserXhr
          );
        },

        /* harmony export */
        "ɵangular_packages_platform_browser_platform_browser_p": function ɵangular_packages_platform_browser_platform_browser_p() {
          return (
            /* binding */
            GenericBrowserDomAdapter
          );
        },

        /* harmony export */
        "ɵescapeHtml": function ɵescapeHtml() {
          return (
            /* binding */
            escapeHtml
          );
        },

        /* harmony export */
        "ɵflattenStyles": function ɵflattenStyles() {
          return (
            /* binding */
            flattenStyles
          );
        },

        /* harmony export */
        "ɵinitDomAdapter": function ɵinitDomAdapter() {
          return (
            /* binding */
            initDomAdapter
          );
        },

        /* harmony export */
        "ɵshimContentAttribute": function ɵshimContentAttribute() {
          return (
            /* binding */
            shimContentAttribute
          );
        },

        /* harmony export */
        "ɵshimHostAttribute": function ɵshimHostAttribute() {
          return (
            /* binding */
            shimHostAttribute
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/common */
      38583);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      37716);
      /**
       * @license Angular v12.0.3
       * (c) 2010-2021 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Provides DOM operations in any browser environment.
       *
       * @security Tread carefully! Interacting with the DOM directly is dangerous and
       * can introduce XSS risks.
       */


      var GenericBrowserDomAdapter = /*#__PURE__*/function (_angular_common__WEBP) {
        _inherits(GenericBrowserDomAdapter, _angular_common__WEBP);

        var _super36 = _createSuper(GenericBrowserDomAdapter);

        function GenericBrowserDomAdapter() {
          var _this113;

          _classCallCheck2(this, GenericBrowserDomAdapter);

          _this113 = _super36.apply(this, arguments);
          _this113.supportsDOMEvents = true;
          return _this113;
        }

        return GenericBrowserDomAdapter;
      }(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵDomAdapter"]);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A `DomAdapter` powered by full browser DOM APIs.
       *
       * @security Tread carefully! Interacting with the DOM directly is dangerous and
       * can introduce XSS risks.
       */

      /* tslint:disable:requireParameterType no-console */


      var BrowserDomAdapter = /*#__PURE__*/function (_GenericBrowserDomAda) {
        _inherits(BrowserDomAdapter, _GenericBrowserDomAda);

        var _super37 = _createSuper(BrowserDomAdapter);

        function BrowserDomAdapter() {
          _classCallCheck2(this, BrowserDomAdapter);

          return _super37.apply(this, arguments);
        }

        _createClass2(BrowserDomAdapter, [{
          key: "onAndCancel",
          value: function onAndCancel(el, evt, listener) {
            el.addEventListener(evt, listener, false); // Needed to follow Dart's subscription semantic, until fix of
            // https://code.google.com/p/dart/issues/detail?id=17406

            return function () {
              el.removeEventListener(evt, listener, false);
            };
          }
        }, {
          key: "dispatchEvent",
          value: function dispatchEvent(el, evt) {
            el.dispatchEvent(evt);
          }
        }, {
          key: "remove",
          value: function remove(node) {
            if (node.parentNode) {
              node.parentNode.removeChild(node);
            }
          }
        }, {
          key: "createElement",
          value: function createElement(tagName, doc) {
            doc = doc || this.getDefaultDocument();
            return doc.createElement(tagName);
          }
        }, {
          key: "createHtmlDocument",
          value: function createHtmlDocument() {
            return document.implementation.createHTMLDocument('fakeTitle');
          }
        }, {
          key: "getDefaultDocument",
          value: function getDefaultDocument() {
            return document;
          }
        }, {
          key: "isElementNode",
          value: function isElementNode(node) {
            return node.nodeType === Node.ELEMENT_NODE;
          }
        }, {
          key: "isShadowRoot",
          value: function isShadowRoot(node) {
            return node instanceof DocumentFragment;
          }
          /** @deprecated No longer being used in Ivy code. To be removed in version 14. */

        }, {
          key: "getGlobalEventTarget",
          value: function getGlobalEventTarget(doc, target) {
            if (target === 'window') {
              return window;
            }

            if (target === 'document') {
              return doc;
            }

            if (target === 'body') {
              return doc.body;
            }

            return null;
          }
        }, {
          key: "getBaseHref",
          value: function getBaseHref(doc) {
            var href = getBaseElementHref();
            return href == null ? null : relativePath(href);
          }
        }, {
          key: "resetBaseElement",
          value: function resetBaseElement() {
            baseElement = null;
          }
        }, {
          key: "getUserAgent",
          value: function getUserAgent() {
            return window.navigator.userAgent;
          }
        }, {
          key: "getCookie",
          value: function getCookie(name) {
            return (0, _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵparseCookieValue"])(document.cookie, name);
          }
        }], [{
          key: "makeCurrent",
          value: function makeCurrent() {
            (0, _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵsetRootDomAdapter"])(new BrowserDomAdapter());
          }
        }]);

        return BrowserDomAdapter;
      }(GenericBrowserDomAdapter);

      var baseElement = null;

      function getBaseElementHref() {
        baseElement = baseElement || document.querySelector('base');
        return baseElement ? baseElement.getAttribute('href') : null;
      } // based on urlUtils.js in AngularJS 1


      var urlParsingNode;

      function relativePath(url) {
        urlParsingNode = urlParsingNode || document.createElement('a');
        urlParsingNode.setAttribute('href', url);
        var pathName = urlParsingNode.pathname;
        return pathName.charAt(0) === '/' ? pathName : "/".concat(pathName);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * An id that identifies a particular application being bootstrapped, that should
       * match across the client/server boundary.
       */


      var TRANSITION_ID = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.InjectionToken('TRANSITION_ID');

      function appInitializerFactory(transitionId, document, injector) {
        return function () {
          // Wait for all application initializers to be completed before removing the styles set by
          // the server.
          injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__.ApplicationInitStatus).donePromise.then(function () {
            var dom = (0, _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])();
            var styles = Array.prototype.slice.apply(document.querySelectorAll("style[ng-transition]"));
            styles.filter(function (el) {
              return el.getAttribute('ng-transition') === transitionId;
            }).forEach(function (el) {
              return dom.remove(el);
            });
          });
        };
      }

      var SERVER_TRANSITION_PROVIDERS = [{
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.APP_INITIALIZER,
        useFactory: appInitializerFactory,
        deps: [TRANSITION_ID, _angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injector],
        multi: true
      }];
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var BrowserGetTestability = /*#__PURE__*/function () {
        function BrowserGetTestability() {
          _classCallCheck2(this, BrowserGetTestability);
        }

        _createClass2(BrowserGetTestability, [{
          key: "addToWindow",
          value: function addToWindow(registry) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"].getAngularTestability = function (elem) {
              var findInAncestors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
              var testability = registry.findTestabilityInTree(elem, findInAncestors);

              if (testability == null) {
                throw new Error('Could not find testability for element.');
              }

              return testability;
            };

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"].getAllAngularTestabilities = function () {
              return registry.getAllTestabilities();
            };

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"].getAllAngularRootElements = function () {
              return registry.getAllRootElements();
            };

            var whenAllStable = function whenAllStable(callback
            /** TODO #9100 */
            ) {
              var testabilities = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"].getAllAngularTestabilities();

              var count = testabilities.length;
              var didWork = false;

              var decrement = function decrement(didWork_
              /** TODO #9100 */
              ) {
                didWork = didWork || didWork_;
                count--;

                if (count == 0) {
                  callback(didWork);
                }
              };

              testabilities.forEach(function (testability
              /** TODO #9100 */
              ) {
                testability.whenStable(decrement);
              });
            };

            if (!_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"].frameworkStabilizers) {
              _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"].frameworkStabilizers = [];
            }

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"].frameworkStabilizers.push(whenAllStable);
          }
        }, {
          key: "findTestabilityInTree",
          value: function findTestabilityInTree(registry, elem, findInAncestors) {
            if (elem == null) {
              return null;
            }

            var t = registry.getTestability(elem);

            if (t != null) {
              return t;
            } else if (!findInAncestors) {
              return null;
            }

            if ((0, _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().isShadowRoot(elem)) {
              return this.findTestabilityInTree(registry, elem.host, true);
            }

            return this.findTestabilityInTree(registry, elem.parentElement, true);
          }
        }], [{
          key: "init",
          value: function init() {
            (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.setTestabilityGetter)(new BrowserGetTestability());
          }
        }]);

        return BrowserGetTestability;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.
       */


      var BrowserXhr = /*#__PURE__*/function () {
        function BrowserXhr() {
          _classCallCheck2(this, BrowserXhr);
        }

        _createClass2(BrowserXhr, [{
          key: "build",
          value: function build() {
            return new XMLHttpRequest();
          }
        }]);

        return BrowserXhr;
      }();

      BrowserXhr.ɵfac = function BrowserXhr_Factory(t) {
        return new (t || BrowserXhr)();
      };

      BrowserXhr.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: BrowserXhr,
        factory: BrowserXhr.ɵfac
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](BrowserXhr, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var CAMEL_CASE_REGEXP = /([A-Z])/g;
      var DASH_CASE_REGEXP = /-([a-z])/g;

      function camelCaseToDashCase(input) {
        return input.replace(CAMEL_CASE_REGEXP, function () {
          for (var _len16 = arguments.length, m = new Array(_len16), _key17 = 0; _key17 < _len16; _key17++) {
            m[_key17] = arguments[_key17];
          }

          return '-' + m[1].toLowerCase();
        });
      }

      function dashCaseToCamelCase(input) {
        return input.replace(DASH_CASE_REGEXP, function () {
          for (var _len17 = arguments.length, m = new Array(_len17), _key18 = 0; _key18 < _len17; _key18++) {
            m[_key18] = arguments[_key18];
          }

          return m[1].toUpperCase();
        });
      }
      /**
       * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if
       * `name` is `'probe'`.
       * @param name Name under which it will be exported. Keep in mind this will be a property of the
       * global `ng` object.
       * @param value The value to export.
       */


      function exportNgVar(name, value) {
        if (typeof COMPILED === 'undefined' || !COMPILED) {
          // Note: we can't export `ng` when using closure enhanced optimization as:
          // - closure declares globals itself for minified names, which sometimes clobber our `ng` global
          // - we can't declare a closure extern as the namespace `ng` is already used within Google
          //   for typings for angularJS (via `goog.provide('ng....')`).
          var ng = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"].ng = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"].ng || {};
          ng[name] = value;
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var ɵ0 = function ɵ0() {
        return {
          'ApplicationRef': _angular_core__WEBPACK_IMPORTED_MODULE_1__.ApplicationRef,
          'NgZone': _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone
        };
      };

      var CORE_TOKENS = ɵ0();
      var INSPECT_GLOBAL_NAME = 'probe';
      var CORE_TOKENS_GLOBAL_NAME = 'coreTokens';
      /**
       * Returns a {@link DebugElement} for the given native DOM element, or
       * null if the given native element does not have an Angular view associated
       * with it.
       */

      function inspectNativeElementR2(element) {
        return (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵgetDebugNodeR2"])(element);
      }

      function _createNgProbeR2(coreTokens) {
        exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElementR2);
        exportNgVar(CORE_TOKENS_GLOBAL_NAME, Object.assign(Object.assign({}, CORE_TOKENS), _ngProbeTokensToMap(coreTokens || [])));
        return function () {
          return inspectNativeElementR2;
        };
      }

      function _ngProbeTokensToMap(tokens) {
        return tokens.reduce(function (prev, t) {
          return prev[t.name] = t.token, prev;
        }, {});
      }
      /**
       * In Ivy, we don't support NgProbe because we have our own set of testing utilities
       * with more robust functionality.
       *
       * We shouldn't bring in NgProbe because it prevents DebugNode and friends from
       * tree-shaking properly.
       */


      var ELEMENT_PROBE_PROVIDERS__POST_R3__ = [];
      /**
       * Providers which support debugging Angular applications (e.g. via `ng.probe`).
       */

      var ELEMENT_PROBE_PROVIDERS__PRE_R3__ = [{
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.APP_INITIALIZER,
        useFactory: _createNgProbeR2,
        deps: [[_angular_core__WEBPACK_IMPORTED_MODULE_1__.NgProbeToken, new _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional()]],
        multi: true
      }];
      var ELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS__POST_R3__;
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The injection token for the event-manager plug-in service.
       *
       * @publicApi
       */

      var _EVENT_MANAGER_PLUGINS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.InjectionToken('EventManagerPlugins');
      /**
       * An injectable service that provides event management for Angular
       * through a browser plug-in.
       *
       * @publicApi
       */


      var _EventManager = /*#__PURE__*/function () {
        /**
         * Initializes an instance of the event-manager service.
         */
        function _EventManager(plugins, _zone) {
          var _this114 = this;

          _classCallCheck2(this, _EventManager);

          this._zone = _zone;
          this._eventNameToPlugin = new Map();
          plugins.forEach(function (p) {
            return p.manager = _this114;
          });
          this._plugins = plugins.slice().reverse();
        }
        /**
         * Registers a handler for a specific element and event.
         *
         * @param element The HTML element to receive event notifications.
         * @param eventName The name of the event to listen for.
         * @param handler A function to call when the notification occurs. Receives the
         * event object as an argument.
         * @returns  A callback function that can be used to remove the handler.
         */


        _createClass2(_EventManager, [{
          key: "addEventListener",
          value: function addEventListener(element, eventName, handler) {
            var plugin = this._findPluginFor(eventName);

            return plugin.addEventListener(element, eventName, handler);
          }
          /**
           * Registers a global handler for an event in a target view.
           *
           * @param target A target for global event notifications. One of "window", "document", or "body".
           * @param eventName The name of the event to listen for.
           * @param handler A function to call when the notification occurs. Receives the
           * event object as an argument.
           * @returns A callback function that can be used to remove the handler.
           * @deprecated No longer being used in Ivy code. To be removed in version 14.
           */

        }, {
          key: "addGlobalEventListener",
          value: function addGlobalEventListener(target, eventName, handler) {
            var plugin = this._findPluginFor(eventName);

            return plugin.addGlobalEventListener(target, eventName, handler);
          }
          /**
           * Retrieves the compilation zone in which event listeners are registered.
           */

        }, {
          key: "getZone",
          value: function getZone() {
            return this._zone;
          }
          /** @internal */

        }, {
          key: "_findPluginFor",
          value: function _findPluginFor(eventName) {
            var plugin = this._eventNameToPlugin.get(eventName);

            if (plugin) {
              return plugin;
            }

            var plugins = this._plugins;

            for (var i = 0; i < plugins.length; i++) {
              var _plugin = plugins[i];

              if (_plugin.supports(eventName)) {
                this._eventNameToPlugin.set(eventName, _plugin);

                return _plugin;
              }
            }

            throw new Error("No event manager plugin found for event ".concat(eventName));
          }
        }]);

        return _EventManager;
      }();

      _EventManager.ɵfac = function EventManager_Factory(t) {
        return new (t || _EventManager)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_EVENT_MANAGER_PLUGINS), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone));
      };

      _EventManager.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: _EventManager,
        factory: _EventManager.ɵfac
      });

      _EventManager.ctorParameters = function () {
        return [{
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
            args: [_EVENT_MANAGER_PLUGINS]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_EventManager, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
        }], function () {
          return [{
            type: Array,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
              args: [_EVENT_MANAGER_PLUGINS]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone
          }];
        }, null);
      })();

      var EventManagerPlugin = /*#__PURE__*/function () {
        function EventManagerPlugin(_doc) {
          _classCallCheck2(this, EventManagerPlugin);

          this._doc = _doc;
        }

        _createClass2(EventManagerPlugin, [{
          key: "addGlobalEventListener",
          value: function addGlobalEventListener(element, eventName, handler) {
            var target = (0, _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().getGlobalEventTarget(this._doc, element);

            if (!target) {
              throw new Error("Unsupported event target ".concat(target, " for event ").concat(eventName));
            }

            return this.addEventListener(target, eventName, handler);
          }
        }]);

        return EventManagerPlugin;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SharedStylesHost = /*#__PURE__*/function () {
        function SharedStylesHost() {
          _classCallCheck2(this, SharedStylesHost);

          /** @internal */
          this._stylesSet = new Set();
        }

        _createClass2(SharedStylesHost, [{
          key: "addStyles",
          value: function addStyles(styles) {
            var _this115 = this;

            var additions = new Set();
            styles.forEach(function (style) {
              if (!_this115._stylesSet.has(style)) {
                _this115._stylesSet.add(style);

                additions.add(style);
              }
            });
            this.onStylesAdded(additions);
          }
        }, {
          key: "onStylesAdded",
          value: function onStylesAdded(additions) {}
        }, {
          key: "getAllStyles",
          value: function getAllStyles() {
            return Array.from(this._stylesSet);
          }
        }]);

        return SharedStylesHost;
      }();

      SharedStylesHost.ɵfac = function SharedStylesHost_Factory(t) {
        return new (t || SharedStylesHost)();
      };

      SharedStylesHost.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: SharedStylesHost,
        factory: SharedStylesHost.ɵfac
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](SharedStylesHost, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
        }], function () {
          return [];
        }, null);
      })();

      var DomSharedStylesHost = /*#__PURE__*/function (_SharedStylesHost) {
        _inherits(DomSharedStylesHost, _SharedStylesHost);

        var _super38 = _createSuper(DomSharedStylesHost);

        function DomSharedStylesHost(_doc) {
          var _this116;

          _classCallCheck2(this, DomSharedStylesHost);

          _this116 = _super38.call(this);
          _this116._doc = _doc; // Maps all registered host nodes to a list of style nodes that have been added to the host node.

          _this116._hostNodes = new Map();

          _this116._hostNodes.set(_doc.head, []);

          return _this116;
        }

        _createClass2(DomSharedStylesHost, [{
          key: "_addStylesToHost",
          value: function _addStylesToHost(styles, host, styleNodes) {
            var _this117 = this;

            styles.forEach(function (style) {
              var styleEl = _this117._doc.createElement('style');

              styleEl.textContent = style;
              styleNodes.push(host.appendChild(styleEl));
            });
          }
        }, {
          key: "addHost",
          value: function addHost(hostNode) {
            var styleNodes = [];

            this._addStylesToHost(this._stylesSet, hostNode, styleNodes);

            this._hostNodes.set(hostNode, styleNodes);
          }
        }, {
          key: "removeHost",
          value: function removeHost(hostNode) {
            var styleNodes = this._hostNodes.get(hostNode);

            if (styleNodes) {
              styleNodes.forEach(removeStyle);
            }

            this._hostNodes["delete"](hostNode);
          }
        }, {
          key: "onStylesAdded",
          value: function onStylesAdded(additions) {
            var _this118 = this;

            this._hostNodes.forEach(function (styleNodes, hostNode) {
              _this118._addStylesToHost(additions, hostNode, styleNodes);
            });
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._hostNodes.forEach(function (styleNodes) {
              return styleNodes.forEach(removeStyle);
            });
          }
        }]);

        return DomSharedStylesHost;
      }(SharedStylesHost);

      DomSharedStylesHost.ɵfac = function DomSharedStylesHost_Factory(t) {
        return new (t || DomSharedStylesHost)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
      };

      DomSharedStylesHost.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: DomSharedStylesHost,
        factory: DomSharedStylesHost.ɵfac
      });

      DomSharedStylesHost.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](DomSharedStylesHost, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
            }]
          }];
        }, null);
      })();

      function removeStyle(styleNode) {
        (0, _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().remove(styleNode);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var NAMESPACE_URIS = {
        'svg': 'http://www.w3.org/2000/svg',
        'xhtml': 'http://www.w3.org/1999/xhtml',
        'xlink': 'http://www.w3.org/1999/xlink',
        'xml': 'http://www.w3.org/XML/1998/namespace',
        'xmlns': 'http://www.w3.org/2000/xmlns/'
      };
      var COMPONENT_REGEX = /%COMP%/g;
      var NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode;
      var COMPONENT_VARIABLE = '%COMP%';
      var HOST_ATTR = "_nghost-".concat(COMPONENT_VARIABLE);
      var CONTENT_ATTR = "_ngcontent-".concat(COMPONENT_VARIABLE);

      function shimContentAttribute(componentShortId) {
        return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
      }

      function shimHostAttribute(componentShortId) {
        return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
      }

      function flattenStyles(compId, styles, target) {
        for (var i = 0; i < styles.length; i++) {
          var style = styles[i];

          if (Array.isArray(style)) {
            flattenStyles(compId, style, target);
          } else {
            style = style.replace(COMPONENT_REGEX, compId);
            target.push(style);
          }
        }

        return target;
      }

      function decoratePreventDefault(eventHandler) {
        // `DebugNode.triggerEventHandler` needs to know if the listener was created with
        // decoratePreventDefault or is a listener added outside the Angular context so it can handle the
        // two differently. In the first case, the special '__ngUnwrap__' token is passed to the unwrap
        // the listener (see below).
        return function (event) {
          // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function
          // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The debug_node
          // can inspect the listener toString contents for the existence of this special token. Because
          // the token is a string literal, it is ensured to not be modified by compiled code.
          if (event === '__ngUnwrap__') {
            return eventHandler;
          }

          var allowDefaultBehavior = eventHandler(event);

          if (allowDefaultBehavior === false) {
            // TODO(tbosch): move preventDefault into event plugins...
            event.preventDefault();
            event.returnValue = false;
          }

          return undefined;
        };
      }

      var hasLoggedNativeEncapsulationWarning = false;

      var DomRendererFactory2 = /*#__PURE__*/function () {
        function DomRendererFactory2(eventManager, sharedStylesHost, appId) {
          _classCallCheck2(this, DomRendererFactory2);

          this.eventManager = eventManager;
          this.sharedStylesHost = sharedStylesHost;
          this.appId = appId;
          this.rendererByCompId = new Map();
          this.defaultRenderer = new DefaultDomRenderer2(eventManager);
        }

        _createClass2(DomRendererFactory2, [{
          key: "createRenderer",
          value: function createRenderer(element, type) {
            if (!element || !type) {
              return this.defaultRenderer;
            }

            switch (type.encapsulation) {
              case _angular_core__WEBPACK_IMPORTED_MODULE_1__.ViewEncapsulation.Emulated:
                {
                  var renderer = this.rendererByCompId.get(type.id);

                  if (!renderer) {
                    renderer = new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type, this.appId);
                    this.rendererByCompId.set(type.id, renderer);
                  }

                  renderer.applyToHost(element);
                  return renderer;
                }

              case 1:
              case _angular_core__WEBPACK_IMPORTED_MODULE_1__.ViewEncapsulation.ShadowDom:
                // TODO(FW-2290): remove the `case 1:` fallback logic and the warning in v12.
                if ((typeof ngDevMode === 'undefined' || ngDevMode) && !hasLoggedNativeEncapsulationWarning && type.encapsulation === 1) {
                  hasLoggedNativeEncapsulationWarning = true;
                  console.warn('ViewEncapsulation.Native is no longer supported. Falling back to ViewEncapsulation.ShadowDom. The fallback will be removed in v12.');
                }

                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);

              default:
                {
                  if (!this.rendererByCompId.has(type.id)) {
                    var styles = flattenStyles(type.id, type.styles, []);
                    this.sharedStylesHost.addStyles(styles);
                    this.rendererByCompId.set(type.id, this.defaultRenderer);
                  }

                  return this.defaultRenderer;
                }
            }
          }
        }, {
          key: "begin",
          value: function begin() {}
        }, {
          key: "end",
          value: function end() {}
        }]);

        return DomRendererFactory2;
      }();

      DomRendererFactory2.ɵfac = function DomRendererFactory2_Factory(t) {
        return new (t || DomRendererFactory2)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_EventManager), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](DomSharedStylesHost), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.APP_ID));
      };

      DomRendererFactory2.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: DomRendererFactory2,
        factory: DomRendererFactory2.ɵfac
      });

      DomRendererFactory2.ctorParameters = function () {
        return [{
          type: _EventManager
        }, {
          type: DomSharedStylesHost
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__.APP_ID]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](DomRendererFactory2, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
        }], function () {
          return [{
            type: _EventManager
          }, {
            type: DomSharedStylesHost
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__.APP_ID]
            }]
          }];
        }, null);
      })();

      var DefaultDomRenderer2 = /*#__PURE__*/function () {
        function DefaultDomRenderer2(eventManager) {
          _classCallCheck2(this, DefaultDomRenderer2);

          this.eventManager = eventManager;
          this.data = Object.create(null);
        }

        _createClass2(DefaultDomRenderer2, [{
          key: "destroy",
          value: function destroy() {}
        }, {
          key: "createElement",
          value: function createElement(name, namespace) {
            if (namespace) {
              // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key
              // will result in undefined, so we just return the namespace here.
              return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);
            }

            return document.createElement(name);
          }
        }, {
          key: "createComment",
          value: function createComment(value) {
            return document.createComment(value);
          }
        }, {
          key: "createText",
          value: function createText(value) {
            return document.createTextNode(value);
          }
        }, {
          key: "appendChild",
          value: function appendChild(parent, newChild) {
            parent.appendChild(newChild);
          }
        }, {
          key: "insertBefore",
          value: function insertBefore(parent, newChild, refChild) {
            if (parent) {
              parent.insertBefore(newChild, refChild);
            }
          }
        }, {
          key: "removeChild",
          value: function removeChild(parent, oldChild) {
            if (parent) {
              parent.removeChild(oldChild);
            }
          }
        }, {
          key: "selectRootElement",
          value: function selectRootElement(selectorOrNode, preserveContent) {
            var el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) : selectorOrNode;

            if (!el) {
              throw new Error("The selector \"".concat(selectorOrNode, "\" did not match any elements"));
            }

            if (!preserveContent) {
              el.textContent = '';
            }

            return el;
          }
        }, {
          key: "parentNode",
          value: function parentNode(node) {
            return node.parentNode;
          }
        }, {
          key: "nextSibling",
          value: function nextSibling(node) {
            return node.nextSibling;
          }
        }, {
          key: "setAttribute",
          value: function setAttribute(el, name, value, namespace) {
            if (namespace) {
              name = namespace + ':' + name; // TODO(FW-811): Ivy may cause issues here because it's passing around
              // full URIs for namespaces, therefore this lookup will fail.

              var namespaceUri = NAMESPACE_URIS[namespace];

              if (namespaceUri) {
                el.setAttributeNS(namespaceUri, name, value);
              } else {
                el.setAttribute(name, value);
              }
            } else {
              el.setAttribute(name, value);
            }
          }
        }, {
          key: "removeAttribute",
          value: function removeAttribute(el, name, namespace) {
            if (namespace) {
              // TODO(FW-811): Ivy may cause issues here because it's passing around
              // full URIs for namespaces, therefore this lookup will fail.
              var namespaceUri = NAMESPACE_URIS[namespace];

              if (namespaceUri) {
                el.removeAttributeNS(namespaceUri, name);
              } else {
                // TODO(FW-811): Since ivy is passing around full URIs for namespaces
                // this could result in properties like `http://www.w3.org/2000/svg:cx="123"`,
                // which is wrong.
                el.removeAttribute("".concat(namespace, ":").concat(name));
              }
            } else {
              el.removeAttribute(name);
            }
          }
        }, {
          key: "addClass",
          value: function addClass(el, name) {
            el.classList.add(name);
          }
        }, {
          key: "removeClass",
          value: function removeClass(el, name) {
            el.classList.remove(name);
          }
        }, {
          key: "setStyle",
          value: function setStyle(el, style, value, flags) {
            if (flags & (_angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererStyleFlags2.DashCase | _angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererStyleFlags2.Important)) {
              el.style.setProperty(style, value, flags & _angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererStyleFlags2.Important ? 'important' : '');
            } else {
              el.style[style] = value;
            }
          }
        }, {
          key: "removeStyle",
          value: function removeStyle(el, style, flags) {
            if (flags & _angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererStyleFlags2.DashCase) {
              el.style.removeProperty(style);
            } else {
              // IE requires '' instead of null
              // see https://github.com/angular/angular/issues/7916
              el.style[style] = '';
            }
          }
        }, {
          key: "setProperty",
          value: function setProperty(el, name, value) {
            NG_DEV_MODE && checkNoSyntheticProp(name, 'property');
            el[name] = value;
          }
        }, {
          key: "setValue",
          value: function setValue(node, value) {
            node.nodeValue = value;
          }
        }, {
          key: "listen",
          value: function listen(target, event, callback) {
            NG_DEV_MODE && checkNoSyntheticProp(event, 'listener');

            if (typeof target === 'string') {
              return this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback));
            }

            return this.eventManager.addEventListener(target, event, decoratePreventDefault(callback));
          }
        }]);

        return DefaultDomRenderer2;
      }();

      var ɵ0$1 = function ɵ0$1() {
        return '@'.charCodeAt(0);
      };

      var AT_CHARCODE = ɵ0$1();

      function checkNoSyntheticProp(name, nameKind) {
        if (name.charCodeAt(0) === AT_CHARCODE) {
          throw new Error("Found the synthetic ".concat(nameKind, " ").concat(name, ". Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application."));
        }
      }

      var EmulatedEncapsulationDomRenderer2 = /*#__PURE__*/function (_DefaultDomRenderer) {
        _inherits(EmulatedEncapsulationDomRenderer2, _DefaultDomRenderer);

        var _super39 = _createSuper(EmulatedEncapsulationDomRenderer2);

        function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component, appId) {
          var _this119;

          _classCallCheck2(this, EmulatedEncapsulationDomRenderer2);

          _this119 = _super39.call(this, eventManager);
          _this119.component = component;
          var styles = flattenStyles(appId + '-' + component.id, component.styles, []);
          sharedStylesHost.addStyles(styles);
          _this119.contentAttr = shimContentAttribute(appId + '-' + component.id);
          _this119.hostAttr = shimHostAttribute(appId + '-' + component.id);
          return _this119;
        }

        _createClass2(EmulatedEncapsulationDomRenderer2, [{
          key: "applyToHost",
          value: function applyToHost(element) {
            _get(_getPrototypeOf(EmulatedEncapsulationDomRenderer2.prototype), "setAttribute", this).call(this, element, this.hostAttr, '');
          }
        }, {
          key: "createElement",
          value: function createElement(parent, name) {
            var el = _get(_getPrototypeOf(EmulatedEncapsulationDomRenderer2.prototype), "createElement", this).call(this, parent, name);

            _get(_getPrototypeOf(EmulatedEncapsulationDomRenderer2.prototype), "setAttribute", this).call(this, el, this.contentAttr, '');

            return el;
          }
        }]);

        return EmulatedEncapsulationDomRenderer2;
      }(DefaultDomRenderer2);

      var ShadowDomRenderer = /*#__PURE__*/function (_DefaultDomRenderer2) {
        _inherits(ShadowDomRenderer, _DefaultDomRenderer2);

        var _super40 = _createSuper(ShadowDomRenderer);

        function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {
          var _this120;

          _classCallCheck2(this, ShadowDomRenderer);

          _this120 = _super40.call(this, eventManager);
          _this120.sharedStylesHost = sharedStylesHost;
          _this120.hostEl = hostEl;
          _this120.shadowRoot = hostEl.attachShadow({
            mode: 'open'
          });

          _this120.sharedStylesHost.addHost(_this120.shadowRoot);

          var styles = flattenStyles(component.id, component.styles, []);

          for (var i = 0; i < styles.length; i++) {
            var styleEl = document.createElement('style');
            styleEl.textContent = styles[i];

            _this120.shadowRoot.appendChild(styleEl);
          }

          return _this120;
        }

        _createClass2(ShadowDomRenderer, [{
          key: "nodeOrShadowRoot",
          value: function nodeOrShadowRoot(node) {
            return node === this.hostEl ? this.shadowRoot : node;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.sharedStylesHost.removeHost(this.shadowRoot);
          }
        }, {
          key: "appendChild",
          value: function appendChild(parent, newChild) {
            return _get(_getPrototypeOf(ShadowDomRenderer.prototype), "appendChild", this).call(this, this.nodeOrShadowRoot(parent), newChild);
          }
        }, {
          key: "insertBefore",
          value: function insertBefore(parent, newChild, refChild) {
            return _get(_getPrototypeOf(ShadowDomRenderer.prototype), "insertBefore", this).call(this, this.nodeOrShadowRoot(parent), newChild, refChild);
          }
        }, {
          key: "removeChild",
          value: function removeChild(parent, oldChild) {
            return _get(_getPrototypeOf(ShadowDomRenderer.prototype), "removeChild", this).call(this, this.nodeOrShadowRoot(parent), oldChild);
          }
        }, {
          key: "parentNode",
          value: function parentNode(node) {
            return this.nodeOrShadowRoot(_get(_getPrototypeOf(ShadowDomRenderer.prototype), "parentNode", this).call(this, this.nodeOrShadowRoot(node)));
          }
        }]);

        return ShadowDomRenderer;
      }(DefaultDomRenderer2);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var DomEventsPlugin = /*#__PURE__*/function (_EventManagerPlugin) {
        _inherits(DomEventsPlugin, _EventManagerPlugin);

        var _super41 = _createSuper(DomEventsPlugin);

        function DomEventsPlugin(doc) {
          _classCallCheck2(this, DomEventsPlugin);

          return _super41.call(this, doc);
        } // This plugin should come last in the list of plugins, because it accepts all
        // events.


        _createClass2(DomEventsPlugin, [{
          key: "supports",
          value: function supports(eventName) {
            return true;
          }
        }, {
          key: "addEventListener",
          value: function addEventListener(element, eventName, handler) {
            var _this121 = this;

            element.addEventListener(eventName, handler, false);
            return function () {
              return _this121.removeEventListener(element, eventName, handler);
            };
          }
        }, {
          key: "removeEventListener",
          value: function removeEventListener(target, eventName, callback) {
            return target.removeEventListener(eventName, callback);
          }
        }]);

        return DomEventsPlugin;
      }(EventManagerPlugin);

      DomEventsPlugin.ɵfac = function DomEventsPlugin_Factory(t) {
        return new (t || DomEventsPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
      };

      DomEventsPlugin.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: DomEventsPlugin,
        factory: DomEventsPlugin.ɵfac
      });

      DomEventsPlugin.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](DomEventsPlugin, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Supported HammerJS recognizer event names.
       */


      var EVENT_NAMES = {
        // pan
        'pan': true,
        'panstart': true,
        'panmove': true,
        'panend': true,
        'pancancel': true,
        'panleft': true,
        'panright': true,
        'panup': true,
        'pandown': true,
        // pinch
        'pinch': true,
        'pinchstart': true,
        'pinchmove': true,
        'pinchend': true,
        'pinchcancel': true,
        'pinchin': true,
        'pinchout': true,
        // press
        'press': true,
        'pressup': true,
        // rotate
        'rotate': true,
        'rotatestart': true,
        'rotatemove': true,
        'rotateend': true,
        'rotatecancel': true,
        // swipe
        'swipe': true,
        'swipeleft': true,
        'swiperight': true,
        'swipeup': true,
        'swipedown': true,
        // tap
        'tap': true,
        'doubletap': true
      };
      /**
       * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.
       * @see `HammerGestureConfig`
       *
       * @ngModule HammerModule
       * @publicApi
       */

      var _HAMMER_GESTURE_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.InjectionToken('HammerGestureConfig');
      /**
       * Injection token used to provide a {@link HammerLoader} to Angular.
       *
       * @publicApi
       */


      var _HAMMER_LOADER = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.InjectionToken('HammerLoader');
      /**
       * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)
       * for gesture recognition. Configures specific event recognition.
       * @publicApi
       */


      var _HammerGestureConfig = /*#__PURE__*/function () {
        function _HammerGestureConfig() {
          _classCallCheck2(this, _HammerGestureConfig);

          /**
           * A set of supported event names for gestures to be used in Angular.
           * Angular supports all built-in recognizers, as listed in
           * [HammerJS documentation](https://hammerjs.github.io/).
           */
          this.events = [];
          /**
           * Maps gesture event names to a set of configuration options
           * that specify overrides to the default values for specific properties.
           *
           * The key is a supported event name to be configured,
           * and the options object contains a set of properties, with override values
           * to be applied to the named recognizer event.
           * For example, to disable recognition of the rotate event, specify
           *  `{"rotate": {"enable": false}}`.
           *
           * Properties that are not present take the HammerJS default values.
           * For information about which properties are supported for which events,
           * and their allowed and default values, see
           * [HammerJS documentation](https://hammerjs.github.io/).
           *
           */

          this.overrides = {};
        }
        /**
         * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)
         * and attaches it to a given HTML element.
         * @param element The element that will recognize gestures.
         * @returns A HammerJS event-manager object.
         */


        _createClass2(_HammerGestureConfig, [{
          key: "buildHammer",
          value: function buildHammer(element) {
            var mc = new Hammer(element, this.options);
            mc.get('pinch').set({
              enable: true
            });
            mc.get('rotate').set({
              enable: true
            });

            for (var eventName in this.overrides) {
              mc.get(eventName).set(this.overrides[eventName]);
            }

            return mc;
          }
        }]);

        return _HammerGestureConfig;
      }();

      _HammerGestureConfig.ɵfac = function HammerGestureConfig_Factory(t) {
        return new (t || _HammerGestureConfig)();
      };

      _HammerGestureConfig.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: _HammerGestureConfig,
        factory: _HammerGestureConfig.ɵfac
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_HammerGestureConfig, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
        }], function () {
          return [];
        }, null);
      })();
      /**
       * Event plugin that adds Hammer support to an application.
       *
       * @ngModule HammerModule
       */


      var HammerGesturesPlugin = /*#__PURE__*/function (_EventManagerPlugin2) {
        _inherits(HammerGesturesPlugin, _EventManagerPlugin2);

        var _super42 = _createSuper(HammerGesturesPlugin);

        function HammerGesturesPlugin(doc, _config, console, loader) {
          var _this122;

          _classCallCheck2(this, HammerGesturesPlugin);

          _this122 = _super42.call(this, doc);
          _this122._config = _config;
          _this122.console = console;
          _this122.loader = loader;
          _this122._loaderPromise = null;
          return _this122;
        }

        _createClass2(HammerGesturesPlugin, [{
          key: "supports",
          value: function supports(eventName) {
            if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
              return false;
            }

            if (!window.Hammer && !this.loader) {
              if (typeof ngDevMode === 'undefined' || ngDevMode) {
                this.console.warn("The \"".concat(eventName, "\" event cannot be bound because Hammer.JS is not ") + "loaded and no custom loader has been specified.");
              }

              return false;
            }

            return true;
          }
        }, {
          key: "addEventListener",
          value: function addEventListener(element, eventName, handler) {
            var _this123 = this;

            var zone = this.manager.getZone();
            eventName = eventName.toLowerCase(); // If Hammer is not present but a loader is specified, we defer adding the event listener
            // until Hammer is loaded.

            if (!window.Hammer && this.loader) {
              this._loaderPromise = this._loaderPromise || this.loader(); // This `addEventListener` method returns a function to remove the added listener.
              // Until Hammer is loaded, the returned function needs to *cancel* the registration rather
              // than remove anything.

              var cancelRegistration = false;

              var deregister = function deregister() {
                cancelRegistration = true;
              };

              this._loaderPromise.then(function () {
                // If Hammer isn't actually loaded when the custom loader resolves, give up.
                if (!window.Hammer) {
                  if (typeof ngDevMode === 'undefined' || ngDevMode) {
                    _this123.console.warn("The custom HAMMER_LOADER completed, but Hammer.JS is not present.");
                  }

                  deregister = function deregister() {};

                  return;
                }

                if (!cancelRegistration) {
                  // Now that Hammer is loaded and the listener is being loaded for real,
                  // the deregistration function changes from canceling registration to removal.
                  deregister = _this123.addEventListener(element, eventName, handler);
                }
              })["catch"](function () {
                if (typeof ngDevMode === 'undefined' || ngDevMode) {
                  _this123.console.warn("The \"".concat(eventName, "\" event cannot be bound because the custom ") + "Hammer.JS loader failed.");
                }

                deregister = function deregister() {};
              }); // Return a function that *executes* `deregister` (and not `deregister` itself) so that we
              // can change the behavior of `deregister` once the listener is added. Using a closure in
              // this way allows us to avoid any additional data structures to track listener removal.


              return function () {
                deregister();
              };
            }

            return zone.runOutsideAngular(function () {
              // Creating the manager bind events, must be done outside of angular
              var mc = _this123._config.buildHammer(element);

              var callback = function callback(eventObj) {
                zone.runGuarded(function () {
                  handler(eventObj);
                });
              };

              mc.on(eventName, callback);
              return function () {
                mc.off(eventName, callback); // destroy mc to prevent memory leak

                if (typeof mc.destroy === 'function') {
                  mc.destroy();
                }
              };
            });
          }
        }, {
          key: "isCustomEvent",
          value: function isCustomEvent(eventName) {
            return this._config.events.indexOf(eventName) > -1;
          }
        }]);

        return HammerGesturesPlugin;
      }(EventManagerPlugin);

      HammerGesturesPlugin.ɵfac = function HammerGesturesPlugin_Factory(t) {
        return new (t || HammerGesturesPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_HAMMER_GESTURE_CONFIG), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵConsole"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_HAMMER_LOADER, 8));
      };

      HammerGesturesPlugin.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: HammerGesturesPlugin,
        factory: HammerGesturesPlugin.ɵfac
      });

      HammerGesturesPlugin.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
          }]
        }, {
          type: _HammerGestureConfig,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
            args: [_HAMMER_GESTURE_CONFIG]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵConsole"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
            args: [_HAMMER_LOADER]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](HammerGesturesPlugin, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
            }]
          }, {
            type: _HammerGestureConfig,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
              args: [_HAMMER_GESTURE_CONFIG]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵConsole"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
              args: [_HAMMER_LOADER]
            }]
          }];
        }, null);
      })();
      /**
       * In Ivy, support for Hammer gestures is optional, so applications must
       * import the `HammerModule` at root to turn on support. This means that
       * Hammer-specific code can be tree-shaken away if not needed.
       */


      var HAMMER_PROVIDERS__POST_R3__ = [];
      /**
       * In View Engine, support for Hammer gestures is built-in by default.
       */

      var HAMMER_PROVIDERS__PRE_R3__ = [{
        provide: _EVENT_MANAGER_PLUGINS,
        useClass: HammerGesturesPlugin,
        multi: true,
        deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT, _HAMMER_GESTURE_CONFIG, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵConsole"], [new _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional(), _HAMMER_LOADER]]
      }, {
        provide: _HAMMER_GESTURE_CONFIG,
        useClass: _HammerGestureConfig,
        deps: []
      }];
      var HAMMER_PROVIDERS = HAMMER_PROVIDERS__POST_R3__;
      /**
       * Adds support for HammerJS.
       *
       * Import this module at the root of your application so that Angular can work with
       * HammerJS to detect gesture events.
       *
       * Note that applications still need to include the HammerJS script itself. This module
       * simply sets up the coordination layer between HammerJS and Angular's EventManager.
       *
       * @publicApi
       */

      var _HammerModule = function _HammerModule() {
        _classCallCheck2(this, _HammerModule);
      };

      _HammerModule.ɵfac = function HammerModule_Factory(t) {
        return new (t || _HammerModule)();
      };

      _HammerModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: _HammerModule
      });
      _HammerModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        providers: HAMMER_PROVIDERS__PRE_R3__
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_HammerModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
          args: [{
            providers: HAMMER_PROVIDERS__PRE_R3__
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Defines supported modifiers for key events.
       */


      var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
      var DOM_KEY_LOCATION_NUMPAD = 3; // Map to convert some key or keyIdentifier values to what will be returned by getEventKey

      var _keyMap = {
        // The following values are here for cross-browser compatibility and to match the W3C standard
        // cf https://www.w3.org/TR/DOM-Level-3-Events-key/
        '\b': 'Backspace',
        '\t': 'Tab',
        '\x7F': 'Delete',
        '\x1B': 'Escape',
        'Del': 'Delete',
        'Esc': 'Escape',
        'Left': 'ArrowLeft',
        'Right': 'ArrowRight',
        'Up': 'ArrowUp',
        'Down': 'ArrowDown',
        'Menu': 'ContextMenu',
        'Scroll': 'ScrollLock',
        'Win': 'OS'
      }; // There is a bug in Chrome for numeric keypad keys:
      // https://code.google.com/p/chromium/issues/detail?id=155654
      // 1, 2, 3 ... are reported as A, B, C ...

      var _chromeNumKeyPadMap = {
        'A': '1',
        'B': '2',
        'C': '3',
        'D': '4',
        'E': '5',
        'F': '6',
        'G': '7',
        'H': '8',
        'I': '9',
        'J': '*',
        'K': '+',
        'M': '-',
        'N': '.',
        'O': '/',
        '\x60': '0',
        '\x90': 'NumLock'
      };

      var ɵ0$2 = function ɵ0$2(event) {
        return event.altKey;
      },
          ɵ1 = function ɵ1(event) {
        return event.ctrlKey;
      },
          ɵ2 = function ɵ2(event) {
        return event.metaKey;
      },
          ɵ3 = function ɵ3(event) {
        return event.shiftKey;
      };
      /**
       * Retrieves modifiers from key-event objects.
       */


      var MODIFIER_KEY_GETTERS = {
        'alt': ɵ0$2,
        'control': ɵ1,
        'meta': ɵ2,
        'shift': ɵ3
      };
      /**
       * @publicApi
       * A browser plug-in that provides support for handling of key events in Angular.
       */

      var KeyEventsPlugin = /*#__PURE__*/function (_EventManagerPlugin3) {
        _inherits(KeyEventsPlugin, _EventManagerPlugin3);

        var _super43 = _createSuper(KeyEventsPlugin);

        /**
         * Initializes an instance of the browser plug-in.
         * @param doc The document in which key events will be detected.
         */
        function KeyEventsPlugin(doc) {
          _classCallCheck2(this, KeyEventsPlugin);

          return _super43.call(this, doc);
        }
        /**
         * Reports whether a named key event is supported.
         * @param eventName The event name to query.
         * @return True if the named key event is supported.
         */


        _createClass2(KeyEventsPlugin, [{
          key: "supports",
          value: function supports(eventName) {
            return KeyEventsPlugin.parseEventName(eventName) != null;
          }
          /**
           * Registers a handler for a specific element and key event.
           * @param element The HTML element to receive event notifications.
           * @param eventName The name of the key event to listen for.
           * @param handler A function to call when the notification occurs. Receives the
           * event object as an argument.
           * @returns The key event that was registered.
           */

        }, {
          key: "addEventListener",
          value: function addEventListener(element, eventName, handler) {
            var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
            var outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
            return this.manager.getZone().runOutsideAngular(function () {
              return (0, _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
            });
          }
        }], [{
          key: "parseEventName",
          value: function parseEventName(eventName) {
            var parts = eventName.toLowerCase().split('.');
            var domEventName = parts.shift();

            if (parts.length === 0 || !(domEventName === 'keydown' || domEventName === 'keyup')) {
              return null;
            }

            var key = KeyEventsPlugin._normalizeKey(parts.pop());

            var fullKey = '';
            MODIFIER_KEYS.forEach(function (modifierName) {
              var index = parts.indexOf(modifierName);

              if (index > -1) {
                parts.splice(index, 1);
                fullKey += modifierName + '.';
              }
            });
            fullKey += key;

            if (parts.length != 0 || key.length === 0) {
              // returning null instead of throwing to let another plugin process the event
              return null;
            } // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.
            //       The code must remain in the `result['domEventName']` form.
            // return {domEventName, fullKey};


            var result = {};
            result['domEventName'] = domEventName;
            result['fullKey'] = fullKey;
            return result;
          }
        }, {
          key: "getEventFullKey",
          value: function getEventFullKey(event) {
            var fullKey = '';
            var key = getEventKey(event);
            key = key.toLowerCase();

            if (key === ' ') {
              key = 'space'; // for readability
            } else if (key === '.') {
              key = 'dot'; // because '.' is used as a separator in event names
            }

            MODIFIER_KEYS.forEach(function (modifierName) {
              if (modifierName != key) {
                var modifierGetter = MODIFIER_KEY_GETTERS[modifierName];

                if (modifierGetter(event)) {
                  fullKey += modifierName + '.';
                }
              }
            });
            fullKey += key;
            return fullKey;
          }
          /**
           * Configures a handler callback for a key event.
           * @param fullKey The event name that combines all simultaneous keystrokes.
           * @param handler The function that responds to the key event.
           * @param zone The zone in which the event occurred.
           * @returns A callback function.
           */

        }, {
          key: "eventCallback",
          value: function eventCallback(fullKey, handler, zone) {
            return function (event
            /** TODO #9100 */
            ) {
              if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
                zone.runGuarded(function () {
                  return handler(event);
                });
              }
            };
          }
          /** @internal */

        }, {
          key: "_normalizeKey",
          value: function _normalizeKey(keyName) {
            // TODO: switch to a Map if the mapping grows too much
            switch (keyName) {
              case 'esc':
                return 'escape';

              default:
                return keyName;
            }
          }
        }]);

        return KeyEventsPlugin;
      }(EventManagerPlugin);

      KeyEventsPlugin.ɵfac = function KeyEventsPlugin_Factory(t) {
        return new (t || KeyEventsPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
      };

      KeyEventsPlugin.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: KeyEventsPlugin,
        factory: KeyEventsPlugin.ɵfac
      });

      KeyEventsPlugin.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](KeyEventsPlugin, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
            }]
          }];
        }, null);
      })();

      function getEventKey(event) {
        var key = event.key;

        if (key == null) {
          key = event.keyIdentifier; // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
          // Safari cf
          // https://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces

          if (key == null) {
            return 'Unidentified';
          }

          if (key.startsWith('U+')) {
            key = String.fromCharCode(parseInt(key.substring(2), 16));

            if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
              // There is a bug in Chrome for numeric keypad keys:
              // https://code.google.com/p/chromium/issues/detail?id=155654
              // 1, 2, 3 ... are reported as A, B, C ...
              key = _chromeNumKeyPadMap[key];
            }
          }
        }

        return _keyMap[key] || key;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
       * values to be safe to use in the different DOM contexts.
       *
       * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
       * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
       * the website.
       *
       * In specific situations, it might be necessary to disable sanitization, for example if the
       * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
       * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
       * methods, and then binding to that value from the template.
       *
       * These situations should be very rare, and extraordinary care must be taken to avoid creating a
       * Cross Site Scripting (XSS) security bug!
       *
       * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
       * close as possible to the source of the value, to make it easy to verify no security bug is
       * created by its use.
       *
       * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
       * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
       * code. The sanitizer leaves safe values intact.
       *
       * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
       * sanitization for the value passed in. Carefully check and audit all values and code paths going
       * into this call. Make sure any user data is appropriately escaped for this security context.
       * For more detail, see the [Security Guide](https://g.co/ng/security).
       *
       * @publicApi
       */


      var _DomSanitizer = function _DomSanitizer() {
        _classCallCheck2(this, _DomSanitizer);
      };

      _DomSanitizer.ɵfac = function DomSanitizer_Factory(t) {
        return new (t || _DomSanitizer)();
      };

      _DomSanitizer.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function DomSanitizer_Factory() {
          return (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(DomSanitizerImpl);
        },
        token: _DomSanitizer,
        providedIn: "root"
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_DomSanitizer, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
          args: [{
            providedIn: 'root',
            useExisting: (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function () {
              return DomSanitizerImpl;
            })
          }]
        }], null, null);
      })();

      function domSanitizerImplFactory(injector) {
        return new DomSanitizerImpl(injector.get(_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
      }

      var DomSanitizerImpl = /*#__PURE__*/function (_DomSanitizer2) {
        _inherits(DomSanitizerImpl, _DomSanitizer2);

        var _super44 = _createSuper(DomSanitizerImpl);

        function DomSanitizerImpl(_doc) {
          var _this124;

          _classCallCheck2(this, DomSanitizerImpl);

          _this124 = _super44.call(this);
          _this124._doc = _doc;
          return _this124;
        }

        _createClass2(DomSanitizerImpl, [{
          key: "sanitize",
          value: function sanitize(ctx, value) {
            if (value == null) return null;

            switch (ctx) {
              case _angular_core__WEBPACK_IMPORTED_MODULE_1__.SecurityContext.NONE:
                return value;

              case _angular_core__WEBPACK_IMPORTED_MODULE_1__.SecurityContext.HTML:
                if ((0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "HTML"
                /* Html */
                )) {
                  return (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }

                return (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵ_sanitizeHtml"])(this._doc, String(value)).toString();

              case _angular_core__WEBPACK_IMPORTED_MODULE_1__.SecurityContext.STYLE:
                if ((0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "Style"
                /* Style */
                )) {
                  return (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }

                return value;

              case _angular_core__WEBPACK_IMPORTED_MODULE_1__.SecurityContext.SCRIPT:
                if ((0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "Script"
                /* Script */
                )) {
                  return (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }

                throw new Error('unsafe value used in a script context');

              case _angular_core__WEBPACK_IMPORTED_MODULE_1__.SecurityContext.URL:
                var type = (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵgetSanitizationBypassType"])(value);

                if ((0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "URL"
                /* Url */
                )) {
                  return (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }

                return (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵ_sanitizeUrl"])(String(value));

              case _angular_core__WEBPACK_IMPORTED_MODULE_1__.SecurityContext.RESOURCE_URL:
                if ((0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "ResourceURL"
                /* ResourceUrl */
                )) {
                  return (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }

                throw new Error('unsafe value used in a resource URL context (see https://g.co/ng/security#xss)');

              default:
                throw new Error("Unexpected SecurityContext ".concat(ctx, " (see https://g.co/ng/security#xss)"));
            }
          }
        }, {
          key: "bypassSecurityTrustHtml",
          value: function bypassSecurityTrustHtml(value) {
            return (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustHtml"])(value);
          }
        }, {
          key: "bypassSecurityTrustStyle",
          value: function bypassSecurityTrustStyle(value) {
            return (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustStyle"])(value);
          }
        }, {
          key: "bypassSecurityTrustScript",
          value: function bypassSecurityTrustScript(value) {
            return (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustScript"])(value);
          }
        }, {
          key: "bypassSecurityTrustUrl",
          value: function bypassSecurityTrustUrl(value) {
            return (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustUrl"])(value);
          }
        }, {
          key: "bypassSecurityTrustResourceUrl",
          value: function bypassSecurityTrustResourceUrl(value) {
            return (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustResourceUrl"])(value);
          }
        }]);

        return DomSanitizerImpl;
      }(_DomSanitizer);

      DomSanitizerImpl.ɵfac = function DomSanitizerImpl_Factory(t) {
        return new (t || DomSanitizerImpl)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
      };

      DomSanitizerImpl.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function DomSanitizerImpl_Factory() {
          return domSanitizerImplFactory((0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__.INJECTOR));
        },
        token: DomSanitizerImpl,
        providedIn: "root"
      });

      DomSanitizerImpl.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](DomSanitizerImpl, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
          args: [{
            providedIn: 'root',
            useFactory: domSanitizerImplFactory,
            deps: [_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injector]
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function initDomAdapter() {
        BrowserDomAdapter.makeCurrent();
        BrowserGetTestability.init();
      }

      function errorHandler() {
        return new _angular_core__WEBPACK_IMPORTED_MODULE_1__.ErrorHandler();
      }

      function _document() {
        // Tell ivy about the global document
        (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetDocument"])(document);
        return document;
      }

      var ɵ0$3 = _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵPLATFORM_BROWSER_ID"];
      var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.PLATFORM_ID,
        useValue: ɵ0$3
      }, {
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.PLATFORM_INITIALIZER,
        useValue: initDomAdapter,
        multi: true
      }, {
        provide: _angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT,
        useFactory: _document,
        deps: []
      }];
      var BROWSER_SANITIZATION_PROVIDERS__PRE_R3__ = [{
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Sanitizer,
        useExisting: _DomSanitizer
      }, {
        provide: _DomSanitizer,
        useClass: DomSanitizerImpl,
        deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
      }];
      var BROWSER_SANITIZATION_PROVIDERS__POST_R3__ = [];
      /**
       * @security Replacing built-in sanitization providers exposes the application to XSS risks.
       * Attacker-controlled data introduced by an unsanitized provider could expose your
       * application to XSS risks. For more detail, see the [Security Guide](https://g.co/ng/security).
       * @publicApi
       */

      var BROWSER_SANITIZATION_PROVIDERS = BROWSER_SANITIZATION_PROVIDERS__POST_R3__;
      /**
       * A factory function that returns a `PlatformRef` instance associated with browser service
       * providers.
       *
       * @publicApi
       */

      var _platformBrowser = (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.createPlatformFactory)(_angular_core__WEBPACK_IMPORTED_MODULE_1__.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);

      var BROWSER_MODULE_PROVIDERS = [BROWSER_SANITIZATION_PROVIDERS, {
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵINJECTOR_SCOPE"],
        useValue: 'root'
      }, {
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ErrorHandler,
        useFactory: errorHandler,
        deps: []
      }, {
        provide: _EVENT_MANAGER_PLUGINS,
        useClass: DomEventsPlugin,
        multi: true,
        deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT, _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone, _angular_core__WEBPACK_IMPORTED_MODULE_1__.PLATFORM_ID]
      }, {
        provide: _EVENT_MANAGER_PLUGINS,
        useClass: KeyEventsPlugin,
        multi: true,
        deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
      }, HAMMER_PROVIDERS, {
        provide: DomRendererFactory2,
        useClass: DomRendererFactory2,
        deps: [_EventManager, DomSharedStylesHost, _angular_core__WEBPACK_IMPORTED_MODULE_1__.APP_ID]
      }, {
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererFactory2,
        useExisting: DomRendererFactory2
      }, {
        provide: SharedStylesHost,
        useExisting: DomSharedStylesHost
      }, {
        provide: DomSharedStylesHost,
        useClass: DomSharedStylesHost,
        deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
      }, {
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Testability,
        useClass: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Testability,
        deps: [_angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone]
      }, {
        provide: _EventManager,
        useClass: _EventManager,
        deps: [_EVENT_MANAGER_PLUGINS, _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone]
      }, {
        provide: _angular_common__WEBPACK_IMPORTED_MODULE_0__.XhrFactory,
        useClass: BrowserXhr,
        deps: []
      }, ELEMENT_PROBE_PROVIDERS];
      /**
       * Exports required infrastructure for all Angular apps.
       * Included by default in all Angular apps created with the CLI
       * `new` command.
       * Re-exports `CommonModule` and `ApplicationModule`, making their
       * exports and providers available to all apps.
       *
       * @publicApi
       */

      var _BrowserModule = /*#__PURE__*/function () {
        function _BrowserModule(parentModule) {
          _classCallCheck2(this, _BrowserModule);

          if (parentModule) {
            throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
          }
        }
        /**
         * Configures a browser-based app to transition from a server-rendered app, if
         * one is present on the page.
         *
         * @param params An object containing an identifier for the app to transition.
         * The ID must match between the client and server versions of the app.
         * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.
         */


        _createClass2(_BrowserModule, null, [{
          key: "withServerTransition",
          value: function withServerTransition(params) {
            return {
              ngModule: _BrowserModule,
              providers: [{
                provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.APP_ID,
                useValue: params.appId
              }, {
                provide: TRANSITION_ID,
                useExisting: _angular_core__WEBPACK_IMPORTED_MODULE_1__.APP_ID
              }, SERVER_TRANSITION_PROVIDERS]
            };
          }
        }]);

        return _BrowserModule;
      }();

      _BrowserModule.ɵfac = function BrowserModule_Factory(t) {
        return new (t || _BrowserModule)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_BrowserModule, 12));
      };

      _BrowserModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: _BrowserModule
      });
      _BrowserModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        providers: BROWSER_MODULE_PROVIDERS,
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.CommonModule, _angular_core__WEBPACK_IMPORTED_MODULE_1__.ApplicationModule]
      });

      _BrowserModule.ctorParameters = function () {
        return [{
          type: _BrowserModule,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.SkipSelf
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
            args: [_BrowserModule]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_BrowserModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
          args: [{
            providers: BROWSER_MODULE_PROVIDERS,
            exports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.CommonModule, _angular_core__WEBPACK_IMPORTED_MODULE_1__.ApplicationModule]
          }]
        }], function () {
          return [{
            type: _BrowserModule,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.SkipSelf
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
              args: [_BrowserModule]
            }]
          }];
        }, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](_BrowserModule, {
          exports: function exports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_0__.CommonModule, _angular_core__WEBPACK_IMPORTED_MODULE_1__.ApplicationModule];
          }
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Factory to create a `Meta` service instance for the current DOM document.
       */


      function createMeta() {
        return new _Meta((0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
      }
      /**
       * A service for managing HTML `<meta>` tags.
       *
       * Properties of the `MetaDefinition` object match the attributes of the
       * HTML `<meta>` tag. These tags define document metadata that is important for
       * things like configuring a Content Security Policy, defining browser compatibility
       * and security settings, setting HTTP Headers, defining rich content for social sharing,
       * and Search Engine Optimization (SEO).
       *
       * To identify specific `<meta>` tags in a document, use an attribute selection
       * string in the format `"tag_attribute='value string'"`.
       * For example, an `attrSelector` value of `"name='description'"` matches a tag
       * whose `name` attribute has the value `"description"`.
       * Selectors are used with the `querySelector()` Document method,
       * in the format `meta[{attrSelector}]`.
       *
       * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)
       * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)
       *
       *
       * @publicApi
       */


      var _Meta = /*#__PURE__*/function () {
        function _Meta(_doc) {
          _classCallCheck2(this, _Meta);

          this._doc = _doc;
          this._dom = (0, _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])();
        }
        /**
         * Retrieves or creates a specific `<meta>` tag element in the current HTML document.
         * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
         * values in the provided tag definition, and verifies that all other attribute values are equal.
         * If an existing element is found, it is returned and is not modified in any way.
         * @param tag The definition of a `<meta>` element to match or create.
         * @param forceCreation True to create a new element without checking whether one already exists.
         * @returns The existing element with the same attributes and values if found,
         * the new element if no match is found, or `null` if the tag parameter is not defined.
         */


        _createClass2(_Meta, [{
          key: "addTag",
          value: function addTag(tag) {
            var forceCreation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            if (!tag) return null;
            return this._getOrCreateElement(tag, forceCreation);
          }
          /**
           * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.
           * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
           * values in the provided tag definition, and verifies that all other attribute values are equal.
           * @param tags An array of tag definitions to match or create.
           * @param forceCreation True to create new elements without checking whether they already exist.
           * @returns The matching elements if found, or the new elements.
           */

        }, {
          key: "addTags",
          value: function addTags(tags) {
            var _this125 = this;

            var forceCreation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            if (!tags) return [];
            return tags.reduce(function (result, tag) {
              if (tag) {
                result.push(_this125._getOrCreateElement(tag, forceCreation));
              }

              return result;
            }, []);
          }
          /**
           * Retrieves a `<meta>` tag element in the current HTML document.
           * @param attrSelector The tag attribute and value to match against, in the format
           * `"tag_attribute='value string'"`.
           * @returns The matching element, if any.
           */

        }, {
          key: "getTag",
          value: function getTag(attrSelector) {
            if (!attrSelector) return null;
            return this._doc.querySelector("meta[".concat(attrSelector, "]")) || null;
          }
          /**
           * Retrieves a set of `<meta>` tag elements in the current HTML document.
           * @param attrSelector The tag attribute and value to match against, in the format
           * `"tag_attribute='value string'"`.
           * @returns The matching elements, if any.
           */

        }, {
          key: "getTags",
          value: function getTags(attrSelector) {
            if (!attrSelector) return [];

            var list
            /*NodeList*/
            = this._doc.querySelectorAll("meta[".concat(attrSelector, "]"));

            return list ? [].slice.call(list) : [];
          }
          /**
           * Modifies an existing `<meta>` tag element in the current HTML document.
           * @param tag The tag description with which to replace the existing tag content.
           * @param selector A tag attribute and value to match against, to identify
           * an existing tag. A string in the format `"tag_attribute=`value string`"`.
           * If not supplied, matches a tag with the same `name` or `property` attribute value as the
           * replacement tag.
           * @return The modified element.
           */

        }, {
          key: "updateTag",
          value: function updateTag(tag, selector) {
            if (!tag) return null;
            selector = selector || this._parseSelector(tag);
            var meta = this.getTag(selector);

            if (meta) {
              return this._setMetaElementAttributes(tag, meta);
            }

            return this._getOrCreateElement(tag, true);
          }
          /**
           * Removes an existing `<meta>` tag element from the current HTML document.
           * @param attrSelector A tag attribute and value to match against, to identify
           * an existing tag. A string in the format `"tag_attribute=`value string`"`.
           */

        }, {
          key: "removeTag",
          value: function removeTag(attrSelector) {
            this.removeTagElement(this.getTag(attrSelector));
          }
          /**
           * Removes an existing `<meta>` tag element from the current HTML document.
           * @param meta The tag definition to match against to identify an existing tag.
           */

        }, {
          key: "removeTagElement",
          value: function removeTagElement(meta) {
            if (meta) {
              this._dom.remove(meta);
            }
          }
        }, {
          key: "_getOrCreateElement",
          value: function _getOrCreateElement(meta) {
            var forceCreation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (!forceCreation) {
              var selector = this._parseSelector(meta);

              var elem = this.getTag(selector); // It's allowed to have multiple elements with the same name so it's not enough to
              // just check that element with the same name already present on the page. We also need to
              // check if element has tag attributes

              if (elem && this._containsAttributes(meta, elem)) return elem;
            }

            var element = this._dom.createElement('meta');

            this._setMetaElementAttributes(meta, element);

            var head = this._doc.getElementsByTagName('head')[0];

            head.appendChild(element);
            return element;
          }
        }, {
          key: "_setMetaElementAttributes",
          value: function _setMetaElementAttributes(tag, el) {
            var _this126 = this;

            Object.keys(tag).forEach(function (prop) {
              return el.setAttribute(_this126._getMetaKeyMap(prop), tag[prop]);
            });
            return el;
          }
        }, {
          key: "_parseSelector",
          value: function _parseSelector(tag) {
            var attr = tag.name ? 'name' : 'property';
            return "".concat(attr, "=\"").concat(tag[attr], "\"");
          }
        }, {
          key: "_containsAttributes",
          value: function _containsAttributes(tag, elem) {
            var _this127 = this;

            return Object.keys(tag).every(function (key) {
              return elem.getAttribute(_this127._getMetaKeyMap(key)) === tag[key];
            });
          }
        }, {
          key: "_getMetaKeyMap",
          value: function _getMetaKeyMap(prop) {
            return META_KEYS_MAP[prop] || prop;
          }
        }]);

        return _Meta;
      }();

      _Meta.ɵfac = function Meta_Factory(t) {
        return new (t || _Meta)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
      };

      _Meta.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: createMeta,
        token: _Meta,
        providedIn: "root"
      });

      _Meta.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_Meta, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
          args: [{
            providedIn: 'root',
            useFactory: createMeta,
            deps: []
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
            }]
          }];
        }, null);
      })();
      /**
       * Mapping for MetaDefinition properties with their correct meta attribute names
       */


      var META_KEYS_MAP = {
        httpEquiv: 'http-equiv'
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Factory to create Title service.
       */

      function createTitle() {
        return new _Title((0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
      }
      /**
       * A service that can be used to get and set the title of a current HTML document.
       *
       * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)
       * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
       * (representing the `<title>` tag). Instead, this service can be used to set and get the current
       * title value.
       *
       * @publicApi
       */


      var _Title = /*#__PURE__*/function () {
        function _Title(_doc) {
          _classCallCheck2(this, _Title);

          this._doc = _doc;
        }
        /**
         * Get the title of the current HTML document.
         */


        _createClass2(_Title, [{
          key: "getTitle",
          value: function getTitle() {
            return this._doc.title;
          }
          /**
           * Set the title of the current HTML document.
           * @param newTitle
           */

        }, {
          key: "setTitle",
          value: function setTitle(newTitle) {
            this._doc.title = newTitle || '';
          }
        }]);

        return _Title;
      }();

      _Title.ɵfac = function Title_Factory(t) {
        return new (t || _Title)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
      };

      _Title.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: createTitle,
        token: _Title,
        providedIn: "root"
      });

      _Title.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_Title, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
          args: [{
            providedIn: 'root',
            useFactory: createTitle,
            deps: []
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var win = typeof window !== 'undefined' && window || {};
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var ChangeDetectionPerfRecord = function ChangeDetectionPerfRecord(msPerTick, numTicks) {
        _classCallCheck2(this, ChangeDetectionPerfRecord);

        this.msPerTick = msPerTick;
        this.numTicks = numTicks;
      };
      /**
       * Entry point for all Angular profiling-related debug tools. This object
       * corresponds to the `ng.profiler` in the dev console.
       */


      var AngularProfiler = /*#__PURE__*/function () {
        function AngularProfiler(ref) {
          _classCallCheck2(this, AngularProfiler);

          this.appRef = ref.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__.ApplicationRef);
        } // tslint:disable:no-console

        /**
         * Exercises change detection in a loop and then prints the average amount of
         * time in milliseconds how long a single round of change detection takes for
         * the current state of the UI. It runs a minimum of 5 rounds for a minimum
         * of 500 milliseconds.
         *
         * Optionally, a user may pass a `config` parameter containing a map of
         * options. Supported options are:
         *
         * `record` (boolean) - causes the profiler to record a CPU profile while
         * it exercises the change detector. Example:
         *
         * ```
         * ng.profiler.timeChangeDetection({record: true})
         * ```
         */


        _createClass2(AngularProfiler, [{
          key: "timeChangeDetection",
          value: function timeChangeDetection(config) {
            var record = config && config['record'];
            var profileName = 'Change Detection'; // Profiler is not available in Android browsers without dev tools opened

            var isProfilerAvailable = win.console.profile != null;

            if (record && isProfilerAvailable) {
              win.console.profile(profileName);
            }

            var start = performanceNow();
            var numTicks = 0;

            while (numTicks < 5 || performanceNow() - start < 500) {
              this.appRef.tick();
              numTicks++;
            }

            var end = performanceNow();

            if (record && isProfilerAvailable) {
              win.console.profileEnd(profileName);
            }

            var msPerTick = (end - start) / numTicks;
            win.console.log("ran ".concat(numTicks, " change detection cycles"));
            win.console.log("".concat(msPerTick.toFixed(2), " ms per check"));
            return new ChangeDetectionPerfRecord(msPerTick, numTicks);
          }
        }]);

        return AngularProfiler;
      }();

      function performanceNow() {
        return win.performance && win.performance.now ? win.performance.now() : new Date().getTime();
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var PROFILER_GLOBAL_NAME = 'profiler';
      /**
       * Enabled Angular debug tools that are accessible via your browser's
       * developer console.
       *
       * Usage:
       *
       * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
       * 1. Type `ng.` (usually the console will show auto-complete suggestion)
       * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
       *    then hit Enter.
       *
       * @publicApi
       */

      function _enableDebugTools(ref) {
        exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));
        return ref;
      }
      /**
       * Disables Angular tools.
       *
       * @publicApi
       */


      function _disableDebugTools() {
        exportNgVar(PROFILER_GLOBAL_NAME, null);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function escapeHtml(text) {
        var escapedText = {
          '&': '&a;',
          '"': '&q;',
          '\'': '&s;',
          '<': '&l;',
          '>': '&g;'
        };
        return text.replace(/[&"'<>]/g, function (s) {
          return escapedText[s];
        });
      }

      function unescapeHtml(text) {
        var unescapedText = {
          '&a;': '&',
          '&q;': '"',
          '&s;': '\'',
          '&l;': '<',
          '&g;': '>'
        };
        return text.replace(/&[^;]+;/g, function (s) {
          return unescapedText[s];
        });
      }
      /**
       * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.
       *
       * Example:
       *
       * ```
       * const COUNTER_KEY = makeStateKey<number>('counter');
       * let value = 10;
       *
       * transferState.set(COUNTER_KEY, value);
       * ```
       *
       * @publicApi
       */


      function _makeStateKey(key) {
        return key;
      }
      /**
       * A key value store that is transferred from the application on the server side to the application
       * on the client side.
       *
       * `TransferState` will be available as an injectable token. To use it import
       * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.
       *
       * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only
       * boolean, number, string, null and non-class objects will be serialized and deserialized in a
       * non-lossy manner.
       *
       * @publicApi
       */


      var _TransferState = /*#__PURE__*/function () {
        function _TransferState() {
          _classCallCheck2(this, _TransferState);

          this.store = {};
          this.onSerializeCallbacks = {};
        }
        /** @internal */


        _createClass2(_TransferState, [{
          key: "get",
          value:
          /**
           * Get the value corresponding to a key. Return `defaultValue` if key is not found.
           */
          function get(key, defaultValue) {
            return this.store[key] !== undefined ? this.store[key] : defaultValue;
          }
          /**
           * Set the value corresponding to a key.
           */

        }, {
          key: "set",
          value: function set(key, value) {
            this.store[key] = value;
          }
          /**
           * Remove a key from the store.
           */

        }, {
          key: "remove",
          value: function remove(key) {
            delete this.store[key];
          }
          /**
           * Test whether a key exists in the store.
           */

        }, {
          key: "hasKey",
          value: function hasKey(key) {
            return this.store.hasOwnProperty(key);
          }
          /**
           * Register a callback to provide the value for a key when `toJson` is called.
           */

        }, {
          key: "onSerialize",
          value: function onSerialize(key, callback) {
            this.onSerializeCallbacks[key] = callback;
          }
          /**
           * Serialize the current state of the store to JSON.
           */

        }, {
          key: "toJson",
          value: function toJson() {
            // Call the onSerialize callbacks and put those values into the store.
            for (var key in this.onSerializeCallbacks) {
              if (this.onSerializeCallbacks.hasOwnProperty(key)) {
                try {
                  this.store[key] = this.onSerializeCallbacks[key]();
                } catch (e) {
                  console.warn('Exception in onSerialize callback: ', e);
                }
              }
            }

            return JSON.stringify(this.store);
          }
        }], [{
          key: "init",
          value: function init(initState) {
            var transferState = new _TransferState();
            transferState.store = initState;
            return transferState;
          }
        }]);

        return _TransferState;
      }();

      _TransferState.ɵfac = function TransferState_Factory(t) {
        return new (t || _TransferState)();
      };

      _TransferState.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: _TransferState,
        factory: _TransferState.ɵfac
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_TransferState, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
        }], function () {
          return [];
        }, null);
      })();

      function initTransferState(doc, appId) {
        // Locate the script tag with the JSON data transferred from the server.
        // The id of the script tag is set to the Angular appId + 'state'.
        var script = doc.getElementById(appId + '-state');
        var initialState = {};

        if (script && script.textContent) {
          try {
            // Avoid using any here as it triggers lint errors in google3 (any is not allowed).
            initialState = JSON.parse(unescapeHtml(script.textContent));
          } catch (e) {
            console.warn('Exception while restoring TransferState for app ' + appId, e);
          }
        }

        return _TransferState.init(initialState);
      }
      /**
       * NgModule to install on the client side while using the `TransferState` to transfer state from
       * server to client.
       *
       * @publicApi
       */


      var _BrowserTransferStateModule = function _BrowserTransferStateModule() {
        _classCallCheck2(this, _BrowserTransferStateModule);
      };

      _BrowserTransferStateModule.ɵfac = function BrowserTransferStateModule_Factory(t) {
        return new (t || _BrowserTransferStateModule)();
      };

      _BrowserTransferStateModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: _BrowserTransferStateModule
      });
      _BrowserTransferStateModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        providers: [{
          provide: _TransferState,
          useFactory: initTransferState,
          deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT, _angular_core__WEBPACK_IMPORTED_MODULE_1__.APP_ID]
        }]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_BrowserTransferStateModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
          args: [{
            providers: [{
              provide: _TransferState,
              useFactory: initTransferState,
              deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT, _angular_core__WEBPACK_IMPORTED_MODULE_1__.APP_ID]
            }]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Predicates for use with {@link DebugElement}'s query functions.
       *
       * @publicApi
       */


      var _By = /*#__PURE__*/function () {
        function _By() {
          _classCallCheck2(this, _By);
        }

        _createClass2(_By, null, [{
          key: "all",
          value:
          /**
           * Match all nodes.
           *
           * @usageNotes
           * ### Example
           *
           * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
           */
          function all() {
            return function () {
              return true;
            };
          }
          /**
           * Match elements by the given CSS selector.
           *
           * @usageNotes
           * ### Example
           *
           * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
           */

        }, {
          key: "css",
          value: function css(selector) {
            return function (debugElement) {
              return debugElement.nativeElement != null ? elementMatches(debugElement.nativeElement, selector) : false;
            };
          }
          /**
           * Match nodes that have the given directive present.
           *
           * @usageNotes
           * ### Example
           *
           * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
           */

        }, {
          key: "directive",
          value: function directive(type) {
            return function (debugNode) {
              return debugNode.providerTokens.indexOf(type) !== -1;
            };
          }
        }]);

        return _By;
      }();

      function elementMatches(n, selector) {
        if ((0, _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().isElementNode(n)) {
          return n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
        }

        return false;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @publicApi
       */


      var _VERSION3 = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.Version('12.0.3');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // This file only reexports content of the `src` folder. Keep it that way.

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=platform-browser.js.map

      /***/

    },

    /***/
    39895:
    /*!**********************************************************************!*\
      !*** ./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js ***!
      \**********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ActivatedRoute": function ActivatedRoute() {
          return (
            /* binding */
            _ActivatedRoute
          );
        },

        /* harmony export */
        "ActivatedRouteSnapshot": function ActivatedRouteSnapshot() {
          return (
            /* binding */
            _ActivatedRouteSnapshot
          );
        },

        /* harmony export */
        "ActivationEnd": function ActivationEnd() {
          return (
            /* binding */
            _ActivationEnd
          );
        },

        /* harmony export */
        "ActivationStart": function ActivationStart() {
          return (
            /* binding */
            _ActivationStart
          );
        },

        /* harmony export */
        "BaseRouteReuseStrategy": function BaseRouteReuseStrategy() {
          return (
            /* binding */
            _BaseRouteReuseStrategy
          );
        },

        /* harmony export */
        "ChildActivationEnd": function ChildActivationEnd() {
          return (
            /* binding */
            _ChildActivationEnd
          );
        },

        /* harmony export */
        "ChildActivationStart": function ChildActivationStart() {
          return (
            /* binding */
            _ChildActivationStart
          );
        },

        /* harmony export */
        "ChildrenOutletContexts": function ChildrenOutletContexts() {
          return (
            /* binding */
            _ChildrenOutletContexts
          );
        },

        /* harmony export */
        "DefaultUrlSerializer": function DefaultUrlSerializer() {
          return (
            /* binding */
            _DefaultUrlSerializer
          );
        },

        /* harmony export */
        "GuardsCheckEnd": function GuardsCheckEnd() {
          return (
            /* binding */
            _GuardsCheckEnd
          );
        },

        /* harmony export */
        "GuardsCheckStart": function GuardsCheckStart() {
          return (
            /* binding */
            _GuardsCheckStart
          );
        },

        /* harmony export */
        "NavigationCancel": function NavigationCancel() {
          return (
            /* binding */
            _NavigationCancel
          );
        },

        /* harmony export */
        "NavigationEnd": function NavigationEnd() {
          return (
            /* binding */
            _NavigationEnd
          );
        },

        /* harmony export */
        "NavigationError": function NavigationError() {
          return (
            /* binding */
            _NavigationError
          );
        },

        /* harmony export */
        "NavigationStart": function NavigationStart() {
          return (
            /* binding */
            _NavigationStart
          );
        },

        /* harmony export */
        "NoPreloading": function NoPreloading() {
          return (
            /* binding */
            _NoPreloading
          );
        },

        /* harmony export */
        "OutletContext": function OutletContext() {
          return (
            /* binding */
            _OutletContext
          );
        },

        /* harmony export */
        "PRIMARY_OUTLET": function PRIMARY_OUTLET() {
          return (
            /* binding */
            _PRIMARY_OUTLET
          );
        },

        /* harmony export */
        "PreloadAllModules": function PreloadAllModules() {
          return (
            /* binding */
            _PreloadAllModules
          );
        },

        /* harmony export */
        "PreloadingStrategy": function PreloadingStrategy() {
          return (
            /* binding */
            _PreloadingStrategy
          );
        },

        /* harmony export */
        "ROUTER_CONFIGURATION": function ROUTER_CONFIGURATION() {
          return (
            /* binding */
            _ROUTER_CONFIGURATION
          );
        },

        /* harmony export */
        "ROUTER_INITIALIZER": function ROUTER_INITIALIZER() {
          return (
            /* binding */
            _ROUTER_INITIALIZER
          );
        },

        /* harmony export */
        "ROUTES": function ROUTES() {
          return (
            /* binding */
            _ROUTES
          );
        },

        /* harmony export */
        "ResolveEnd": function ResolveEnd() {
          return (
            /* binding */
            _ResolveEnd
          );
        },

        /* harmony export */
        "ResolveStart": function ResolveStart() {
          return (
            /* binding */
            _ResolveStart
          );
        },

        /* harmony export */
        "RouteConfigLoadEnd": function RouteConfigLoadEnd() {
          return (
            /* binding */
            _RouteConfigLoadEnd
          );
        },

        /* harmony export */
        "RouteConfigLoadStart": function RouteConfigLoadStart() {
          return (
            /* binding */
            _RouteConfigLoadStart
          );
        },

        /* harmony export */
        "RouteReuseStrategy": function RouteReuseStrategy() {
          return (
            /* binding */
            _RouteReuseStrategy
          );
        },

        /* harmony export */
        "Router": function Router() {
          return (
            /* binding */
            _Router
          );
        },

        /* harmony export */
        "RouterEvent": function RouterEvent() {
          return (
            /* binding */
            _RouterEvent
          );
        },

        /* harmony export */
        "RouterLink": function RouterLink() {
          return (
            /* binding */
            _RouterLink
          );
        },

        /* harmony export */
        "RouterLinkActive": function RouterLinkActive() {
          return (
            /* binding */
            _RouterLinkActive
          );
        },

        /* harmony export */
        "RouterLinkWithHref": function RouterLinkWithHref() {
          return (
            /* binding */
            _RouterLinkWithHref
          );
        },

        /* harmony export */
        "RouterModule": function RouterModule() {
          return (
            /* binding */
            _RouterModule
          );
        },

        /* harmony export */
        "RouterOutlet": function RouterOutlet() {
          return (
            /* binding */
            _RouterOutlet
          );
        },

        /* harmony export */
        "RouterPreloader": function RouterPreloader() {
          return (
            /* binding */
            _RouterPreloader
          );
        },

        /* harmony export */
        "RouterState": function RouterState() {
          return (
            /* binding */
            _RouterState
          );
        },

        /* harmony export */
        "RouterStateSnapshot": function RouterStateSnapshot() {
          return (
            /* binding */
            _RouterStateSnapshot
          );
        },

        /* harmony export */
        "RoutesRecognized": function RoutesRecognized() {
          return (
            /* binding */
            _RoutesRecognized
          );
        },

        /* harmony export */
        "Scroll": function Scroll() {
          return (
            /* binding */
            _Scroll
          );
        },

        /* harmony export */
        "UrlHandlingStrategy": function UrlHandlingStrategy() {
          return (
            /* binding */
            _UrlHandlingStrategy
          );
        },

        /* harmony export */
        "UrlSegment": function UrlSegment() {
          return (
            /* binding */
            _UrlSegment
          );
        },

        /* harmony export */
        "UrlSegmentGroup": function UrlSegmentGroup() {
          return (
            /* binding */
            _UrlSegmentGroup
          );
        },

        /* harmony export */
        "UrlSerializer": function UrlSerializer() {
          return (
            /* binding */
            _UrlSerializer
          );
        },

        /* harmony export */
        "UrlTree": function UrlTree() {
          return (
            /* binding */
            _UrlTree
          );
        },

        /* harmony export */
        "VERSION": function VERSION() {
          return (
            /* binding */
            _VERSION4
          );
        },

        /* harmony export */
        "convertToParamMap": function convertToParamMap() {
          return (
            /* binding */
            _convertToParamMap
          );
        },

        /* harmony export */
        "provideRoutes": function provideRoutes() {
          return (
            /* binding */
            _provideRoutes
          );
        },

        /* harmony export */
        "ɵEmptyOutletComponent": function ɵEmptyOutletComponent() {
          return (
            /* binding */
            _ɵEmptyOutletComponent
          );
        },

        /* harmony export */
        "ɵROUTER_PROVIDERS": function ɵROUTER_PROVIDERS() {
          return (
            /* binding */
            ROUTER_PROVIDERS
          );
        },

        /* harmony export */
        "ɵangular_packages_router_router_a": function ɵangular_packages_router_router_a() {
          return (
            /* binding */
            ROUTER_FORROOT_GUARD
          );
        },

        /* harmony export */
        "ɵangular_packages_router_router_b": function ɵangular_packages_router_router_b() {
          return (
            /* binding */
            routerNgProbeToken
          );
        },

        /* harmony export */
        "ɵangular_packages_router_router_c": function ɵangular_packages_router_router_c() {
          return (
            /* binding */
            createRouterScroller
          );
        },

        /* harmony export */
        "ɵangular_packages_router_router_d": function ɵangular_packages_router_router_d() {
          return (
            /* binding */
            provideLocationStrategy
          );
        },

        /* harmony export */
        "ɵangular_packages_router_router_e": function ɵangular_packages_router_router_e() {
          return (
            /* binding */
            provideForRootGuard
          );
        },

        /* harmony export */
        "ɵangular_packages_router_router_f": function ɵangular_packages_router_router_f() {
          return (
            /* binding */
            setupRouter
          );
        },

        /* harmony export */
        "ɵangular_packages_router_router_g": function ɵangular_packages_router_router_g() {
          return (
            /* binding */
            rootRoute
          );
        },

        /* harmony export */
        "ɵangular_packages_router_router_h": function ɵangular_packages_router_router_h() {
          return (
            /* binding */
            RouterInitializer
          );
        },

        /* harmony export */
        "ɵangular_packages_router_router_i": function ɵangular_packages_router_router_i() {
          return (
            /* binding */
            getAppInitializer
          );
        },

        /* harmony export */
        "ɵangular_packages_router_router_j": function ɵangular_packages_router_router_j() {
          return (
            /* binding */
            getBootstrapListener
          );
        },

        /* harmony export */
        "ɵangular_packages_router_router_k": function ɵangular_packages_router_router_k() {
          return (
            /* binding */
            provideRouterInitializer
          );
        },

        /* harmony export */
        "ɵangular_packages_router_router_l": function ɵangular_packages_router_router_l() {
          return (
            /* binding */
            _ɵEmptyOutletComponent
          );
        },

        /* harmony export */
        "ɵangular_packages_router_router_m": function ɵangular_packages_router_router_m() {
          return (
            /* binding */
            Tree
          );
        },

        /* harmony export */
        "ɵangular_packages_router_router_n": function ɵangular_packages_router_router_n() {
          return (
            /* binding */
            TreeNode
          );
        },

        /* harmony export */
        "ɵangular_packages_router_router_o": function ɵangular_packages_router_router_o() {
          return (
            /* binding */
            RouterScroller
          );
        },

        /* harmony export */
        "ɵassignExtraOptionsToRouter": function ɵassignExtraOptionsToRouter() {
          return (
            /* binding */
            assignExtraOptionsToRouter
          );
        },

        /* harmony export */
        "ɵflatten": function ɵflatten() {
          return (
            /* binding */
            flatten
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(
      /*! @angular/common */
      38583);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      37716);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs */
      69412);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      25917);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs */
      26215);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs */
      9112);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! rxjs */
      69165);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
      /*! rxjs */
      13410);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
      /*! rxjs */
      29923);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
      /*! rxjs */
      41439);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(
      /*! rxjs */
      59193);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(
      /*! rxjs */
      52441);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(
      /*! rxjs */
      79765);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! rxjs/operators */
      88002);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs/operators */
      43190);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! rxjs/operators */
      15257);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! rxjs/operators */
      39761);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! rxjs/operators */
      42145);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! rxjs/operators */
      45435);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! rxjs/operators */
      5304);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! rxjs/operators */
      94612);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! rxjs/operators */
      12627);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
      /*! rxjs/operators */
      28049);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
      /*! rxjs/operators */
      19773);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
      /*! rxjs/operators */
      68307);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
      /*! rxjs/operators */
      548);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(
      /*! rxjs/operators */
      51307);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(
      /*! rxjs/operators */
      68939);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(
      /*! rxjs/operators */
      63282);
      /**
       * @license Angular v12.0.3
       * (c) 2010-2021 Google LLC. https://angular.io/
       * License: MIT
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Base for events the router goes through, as opposed to events tied to a specific
       * route. Fired one time for any given navigation.
       *
       * The following code shows how a class subscribes to router events.
       *
       * ```ts
       * class MyService {
       *   constructor(public router: Router, logger: Logger) {
       *     router.events.pipe(
       *        filter((e: Event): e is RouterEvent => e instanceof RouterEvent)
       *     ).subscribe((e: RouterEvent) => {
       *       logger.log(e.id, e.url);
       *     });
       *   }
       * }
       * ```
       *
       * @see `Event`
       * @see [Router events summary](guide/router-reference#router-events)
       * @publicApi
       */


      var _RouterEvent = function _RouterEvent(
      /** A unique ID that the router assigns to every router navigation. */
      id,
      /** The URL that is the destination for this navigation. */
      url) {
        _classCallCheck2(this, _RouterEvent);

        this.id = id;
        this.url = url;
      };
      /**
       * An event triggered when a navigation starts.
       *
       * @publicApi
       */


      var _NavigationStart = /*#__PURE__*/function (_RouterEvent2) {
        _inherits(_NavigationStart, _RouterEvent2);

        var _super45 = _createSuper(_NavigationStart);

        function _NavigationStart(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url) {
          var _this128;

          var navigationTrigger = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'imperative';
          var restoredState = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

          _classCallCheck2(this, _NavigationStart);

          _this128 = _super45.call(this, id, url);
          _this128.navigationTrigger = navigationTrigger;
          _this128.restoredState = restoredState;
          return _this128;
        }
        /** @docsNotRequired */


        _createClass2(_NavigationStart, [{
          key: "toString",
          value: function toString() {
            return "NavigationStart(id: ".concat(this.id, ", url: '").concat(this.url, "')");
          }
        }]);

        return _NavigationStart;
      }(_RouterEvent);
      /**
       * An event triggered when a navigation ends successfully.
       *
       * @see `NavigationStart`
       * @see `NavigationCancel`
       * @see `NavigationError`
       *
       * @publicApi
       */


      var _NavigationEnd = /*#__PURE__*/function (_RouterEvent3) {
        _inherits(_NavigationEnd, _RouterEvent3);

        var _super46 = _createSuper(_NavigationEnd);

        function _NavigationEnd(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url,
        /** @docsNotRequired */
        urlAfterRedirects) {
          var _this129;

          _classCallCheck2(this, _NavigationEnd);

          _this129 = _super46.call(this, id, url);
          _this129.urlAfterRedirects = urlAfterRedirects;
          return _this129;
        }
        /** @docsNotRequired */


        _createClass2(_NavigationEnd, [{
          key: "toString",
          value: function toString() {
            return "NavigationEnd(id: ".concat(this.id, ", url: '").concat(this.url, "', urlAfterRedirects: '").concat(this.urlAfterRedirects, "')");
          }
        }]);

        return _NavigationEnd;
      }(_RouterEvent);
      /**
       * An event triggered when a navigation is canceled, directly or indirectly.
       * This can happen for several reasons including when a route guard
       * returns `false` or initiates a redirect by returning a `UrlTree`.
       *
       * @see `NavigationStart`
       * @see `NavigationEnd`
       * @see `NavigationError`
       *
       * @publicApi
       */


      var _NavigationCancel = /*#__PURE__*/function (_RouterEvent4) {
        _inherits(_NavigationCancel, _RouterEvent4);

        var _super47 = _createSuper(_NavigationCancel);

        function _NavigationCancel(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url,
        /** @docsNotRequired */
        reason) {
          var _this130;

          _classCallCheck2(this, _NavigationCancel);

          _this130 = _super47.call(this, id, url);
          _this130.reason = reason;
          return _this130;
        }
        /** @docsNotRequired */


        _createClass2(_NavigationCancel, [{
          key: "toString",
          value: function toString() {
            return "NavigationCancel(id: ".concat(this.id, ", url: '").concat(this.url, "')");
          }
        }]);

        return _NavigationCancel;
      }(_RouterEvent);
      /**
       * An event triggered when a navigation fails due to an unexpected error.
       *
       * @see `NavigationStart`
       * @see `NavigationEnd`
       * @see `NavigationCancel`
       *
       * @publicApi
       */


      var _NavigationError = /*#__PURE__*/function (_RouterEvent5) {
        _inherits(_NavigationError, _RouterEvent5);

        var _super48 = _createSuper(_NavigationError);

        function _NavigationError(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url,
        /** @docsNotRequired */
        error) {
          var _this131;

          _classCallCheck2(this, _NavigationError);

          _this131 = _super48.call(this, id, url);
          _this131.error = error;
          return _this131;
        }
        /** @docsNotRequired */


        _createClass2(_NavigationError, [{
          key: "toString",
          value: function toString() {
            return "NavigationError(id: ".concat(this.id, ", url: '").concat(this.url, "', error: ").concat(this.error, ")");
          }
        }]);

        return _NavigationError;
      }(_RouterEvent);
      /**
       * An event triggered when routes are recognized.
       *
       * @publicApi
       */


      var _RoutesRecognized = /*#__PURE__*/function (_RouterEvent6) {
        _inherits(_RoutesRecognized, _RouterEvent6);

        var _super49 = _createSuper(_RoutesRecognized);

        function _RoutesRecognized(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url,
        /** @docsNotRequired */
        urlAfterRedirects,
        /** @docsNotRequired */
        state) {
          var _this132;

          _classCallCheck2(this, _RoutesRecognized);

          _this132 = _super49.call(this, id, url);
          _this132.urlAfterRedirects = urlAfterRedirects;
          _this132.state = state;
          return _this132;
        }
        /** @docsNotRequired */


        _createClass2(_RoutesRecognized, [{
          key: "toString",
          value: function toString() {
            return "RoutesRecognized(id: ".concat(this.id, ", url: '").concat(this.url, "', urlAfterRedirects: '").concat(this.urlAfterRedirects, "', state: ").concat(this.state, ")");
          }
        }]);

        return _RoutesRecognized;
      }(_RouterEvent);
      /**
       * An event triggered at the start of the Guard phase of routing.
       *
       * @see `GuardsCheckEnd`
       *
       * @publicApi
       */


      var _GuardsCheckStart = /*#__PURE__*/function (_RouterEvent7) {
        _inherits(_GuardsCheckStart, _RouterEvent7);

        var _super50 = _createSuper(_GuardsCheckStart);

        function _GuardsCheckStart(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url,
        /** @docsNotRequired */
        urlAfterRedirects,
        /** @docsNotRequired */
        state) {
          var _this133;

          _classCallCheck2(this, _GuardsCheckStart);

          _this133 = _super50.call(this, id, url);
          _this133.urlAfterRedirects = urlAfterRedirects;
          _this133.state = state;
          return _this133;
        }

        _createClass2(_GuardsCheckStart, [{
          key: "toString",
          value: function toString() {
            return "GuardsCheckStart(id: ".concat(this.id, ", url: '").concat(this.url, "', urlAfterRedirects: '").concat(this.urlAfterRedirects, "', state: ").concat(this.state, ")");
          }
        }]);

        return _GuardsCheckStart;
      }(_RouterEvent);
      /**
       * An event triggered at the end of the Guard phase of routing.
       *
       * @see `GuardsCheckStart`
       *
       * @publicApi
       */


      var _GuardsCheckEnd = /*#__PURE__*/function (_RouterEvent8) {
        _inherits(_GuardsCheckEnd, _RouterEvent8);

        var _super51 = _createSuper(_GuardsCheckEnd);

        function _GuardsCheckEnd(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url,
        /** @docsNotRequired */
        urlAfterRedirects,
        /** @docsNotRequired */
        state,
        /** @docsNotRequired */
        shouldActivate) {
          var _this134;

          _classCallCheck2(this, _GuardsCheckEnd);

          _this134 = _super51.call(this, id, url);
          _this134.urlAfterRedirects = urlAfterRedirects;
          _this134.state = state;
          _this134.shouldActivate = shouldActivate;
          return _this134;
        }

        _createClass2(_GuardsCheckEnd, [{
          key: "toString",
          value: function toString() {
            return "GuardsCheckEnd(id: ".concat(this.id, ", url: '").concat(this.url, "', urlAfterRedirects: '").concat(this.urlAfterRedirects, "', state: ").concat(this.state, ", shouldActivate: ").concat(this.shouldActivate, ")");
          }
        }]);

        return _GuardsCheckEnd;
      }(_RouterEvent);
      /**
       * An event triggered at the start of the Resolve phase of routing.
       *
       * Runs in the "resolve" phase whether or not there is anything to resolve.
       * In future, may change to only run when there are things to be resolved.
       *
       * @see `ResolveEnd`
       *
       * @publicApi
       */


      var _ResolveStart = /*#__PURE__*/function (_RouterEvent9) {
        _inherits(_ResolveStart, _RouterEvent9);

        var _super52 = _createSuper(_ResolveStart);

        function _ResolveStart(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url,
        /** @docsNotRequired */
        urlAfterRedirects,
        /** @docsNotRequired */
        state) {
          var _this135;

          _classCallCheck2(this, _ResolveStart);

          _this135 = _super52.call(this, id, url);
          _this135.urlAfterRedirects = urlAfterRedirects;
          _this135.state = state;
          return _this135;
        }

        _createClass2(_ResolveStart, [{
          key: "toString",
          value: function toString() {
            return "ResolveStart(id: ".concat(this.id, ", url: '").concat(this.url, "', urlAfterRedirects: '").concat(this.urlAfterRedirects, "', state: ").concat(this.state, ")");
          }
        }]);

        return _ResolveStart;
      }(_RouterEvent);
      /**
       * An event triggered at the end of the Resolve phase of routing.
       * @see `ResolveStart`.
       *
       * @publicApi
       */


      var _ResolveEnd = /*#__PURE__*/function (_RouterEvent10) {
        _inherits(_ResolveEnd, _RouterEvent10);

        var _super53 = _createSuper(_ResolveEnd);

        function _ResolveEnd(
        /** @docsNotRequired */
        id,
        /** @docsNotRequired */
        url,
        /** @docsNotRequired */
        urlAfterRedirects,
        /** @docsNotRequired */
        state) {
          var _this136;

          _classCallCheck2(this, _ResolveEnd);

          _this136 = _super53.call(this, id, url);
          _this136.urlAfterRedirects = urlAfterRedirects;
          _this136.state = state;
          return _this136;
        }

        _createClass2(_ResolveEnd, [{
          key: "toString",
          value: function toString() {
            return "ResolveEnd(id: ".concat(this.id, ", url: '").concat(this.url, "', urlAfterRedirects: '").concat(this.urlAfterRedirects, "', state: ").concat(this.state, ")");
          }
        }]);

        return _ResolveEnd;
      }(_RouterEvent);
      /**
       * An event triggered before lazy loading a route configuration.
       *
       * @see `RouteConfigLoadEnd`
       *
       * @publicApi
       */


      var _RouteConfigLoadStart = /*#__PURE__*/function () {
        function _RouteConfigLoadStart(
        /** @docsNotRequired */
        route) {
          _classCallCheck2(this, _RouteConfigLoadStart);

          this.route = route;
        }

        _createClass2(_RouteConfigLoadStart, [{
          key: "toString",
          value: function toString() {
            return "RouteConfigLoadStart(path: ".concat(this.route.path, ")");
          }
        }]);

        return _RouteConfigLoadStart;
      }();
      /**
       * An event triggered when a route has been lazy loaded.
       *
       * @see `RouteConfigLoadStart`
       *
       * @publicApi
       */


      var _RouteConfigLoadEnd = /*#__PURE__*/function () {
        function _RouteConfigLoadEnd(
        /** @docsNotRequired */
        route) {
          _classCallCheck2(this, _RouteConfigLoadEnd);

          this.route = route;
        }

        _createClass2(_RouteConfigLoadEnd, [{
          key: "toString",
          value: function toString() {
            return "RouteConfigLoadEnd(path: ".concat(this.route.path, ")");
          }
        }]);

        return _RouteConfigLoadEnd;
      }();
      /**
       * An event triggered at the start of the child-activation
       * part of the Resolve phase of routing.
       * @see  `ChildActivationEnd`
       * @see `ResolveStart`
       *
       * @publicApi
       */


      var _ChildActivationStart = /*#__PURE__*/function () {
        function _ChildActivationStart(
        /** @docsNotRequired */
        snapshot) {
          _classCallCheck2(this, _ChildActivationStart);

          this.snapshot = snapshot;
        }

        _createClass2(_ChildActivationStart, [{
          key: "toString",
          value: function toString() {
            var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
            return "ChildActivationStart(path: '".concat(path, "')");
          }
        }]);

        return _ChildActivationStart;
      }();
      /**
       * An event triggered at the end of the child-activation part
       * of the Resolve phase of routing.
       * @see `ChildActivationStart`
       * @see `ResolveStart`
       * @publicApi
       */


      var _ChildActivationEnd = /*#__PURE__*/function () {
        function _ChildActivationEnd(
        /** @docsNotRequired */
        snapshot) {
          _classCallCheck2(this, _ChildActivationEnd);

          this.snapshot = snapshot;
        }

        _createClass2(_ChildActivationEnd, [{
          key: "toString",
          value: function toString() {
            var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
            return "ChildActivationEnd(path: '".concat(path, "')");
          }
        }]);

        return _ChildActivationEnd;
      }();
      /**
       * An event triggered at the start of the activation part
       * of the Resolve phase of routing.
       * @see `ActivationEnd`
       * @see `ResolveStart`
       *
       * @publicApi
       */


      var _ActivationStart = /*#__PURE__*/function () {
        function _ActivationStart(
        /** @docsNotRequired */
        snapshot) {
          _classCallCheck2(this, _ActivationStart);

          this.snapshot = snapshot;
        }

        _createClass2(_ActivationStart, [{
          key: "toString",
          value: function toString() {
            var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
            return "ActivationStart(path: '".concat(path, "')");
          }
        }]);

        return _ActivationStart;
      }();
      /**
       * An event triggered at the end of the activation part
       * of the Resolve phase of routing.
       * @see `ActivationStart`
       * @see `ResolveStart`
       *
       * @publicApi
       */


      var _ActivationEnd = /*#__PURE__*/function () {
        function _ActivationEnd(
        /** @docsNotRequired */
        snapshot) {
          _classCallCheck2(this, _ActivationEnd);

          this.snapshot = snapshot;
        }

        _createClass2(_ActivationEnd, [{
          key: "toString",
          value: function toString() {
            var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
            return "ActivationEnd(path: '".concat(path, "')");
          }
        }]);

        return _ActivationEnd;
      }();
      /**
       * An event triggered by scrolling.
       *
       * @publicApi
       */


      var _Scroll = /*#__PURE__*/function () {
        function _Scroll(
        /** @docsNotRequired */
        routerEvent,
        /** @docsNotRequired */
        position,
        /** @docsNotRequired */
        anchor) {
          _classCallCheck2(this, _Scroll);

          this.routerEvent = routerEvent;
          this.position = position;
          this.anchor = anchor;
        }

        _createClass2(_Scroll, [{
          key: "toString",
          value: function toString() {
            var pos = this.position ? "".concat(this.position[0], ", ").concat(this.position[1]) : null;
            return "Scroll(anchor: '".concat(this.anchor, "', position: '").concat(pos, "')");
          }
        }]);

        return _Scroll;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The primary routing outlet.
       *
       * @publicApi
       */


      var _PRIMARY_OUTLET = 'primary';

      var ParamsAsMap = /*#__PURE__*/function () {
        function ParamsAsMap(params) {
          _classCallCheck2(this, ParamsAsMap);

          this.params = params || {};
        }

        _createClass2(ParamsAsMap, [{
          key: "has",
          value: function has(name) {
            return Object.prototype.hasOwnProperty.call(this.params, name);
          }
        }, {
          key: "get",
          value: function get(name) {
            if (this.has(name)) {
              var v = this.params[name];
              return Array.isArray(v) ? v[0] : v;
            }

            return null;
          }
        }, {
          key: "getAll",
          value: function getAll(name) {
            if (this.has(name)) {
              var v = this.params[name];
              return Array.isArray(v) ? v : [v];
            }

            return [];
          }
        }, {
          key: "keys",
          get: function get() {
            return Object.keys(this.params);
          }
        }]);

        return ParamsAsMap;
      }();
      /**
       * Converts a `Params` instance to a `ParamMap`.
       * @param params The instance to convert.
       * @returns The new map instance.
       *
       * @publicApi
       */


      function _convertToParamMap(params) {
        return new ParamsAsMap(params);
      }

      var NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';

      function navigationCancelingError(message) {
        var error = Error('NavigationCancelingError: ' + message);
        error[NAVIGATION_CANCELING_ERROR] = true;
        return error;
      }

      function isNavigationCancelingError(error) {
        return error && error[NAVIGATION_CANCELING_ERROR];
      } // Matches the route configuration (`route`) against the actual URL (`segments`).


      function defaultUrlMatcher(segments, segmentGroup, route) {
        var parts = route.path.split('/');

        if (parts.length > segments.length) {
          // The actual URL is shorter than the config, no match
          return null;
        }

        if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || parts.length < segments.length)) {
          // The config is longer than the actual URL but we are looking for a full match, return null
          return null;
        }

        var posParams = {}; // Check each config part against the actual URL

        for (var index = 0; index < parts.length; index++) {
          var part = parts[index];
          var segment = segments[index];
          var isParameter = part.startsWith(':');

          if (isParameter) {
            posParams[part.substring(1)] = segment;
          } else if (part !== segment.path) {
            // The actual URL part does not match the config, no match
            return null;
          }
        }

        return {
          consumed: segments.slice(0, parts.length),
          posParams: posParams
        };
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function shallowEqualArrays(a, b) {
        if (a.length !== b.length) return false;

        for (var i = 0; i < a.length; ++i) {
          if (!shallowEqual(a[i], b[i])) return false;
        }

        return true;
      }

      function shallowEqual(a, b) {
        // While `undefined` should never be possible, it would sometimes be the case in IE 11
        // and pre-chromium Edge. The check below accounts for this edge case.
        var k1 = a ? Object.keys(a) : undefined;
        var k2 = b ? Object.keys(b) : undefined;

        if (!k1 || !k2 || k1.length != k2.length) {
          return false;
        }

        var key;

        for (var i = 0; i < k1.length; i++) {
          key = k1[i];

          if (!equalArraysOrString(a[key], b[key])) {
            return false;
          }
        }

        return true;
      }
      /**
       * Test equality for arrays of strings or a string.
       */


      function equalArraysOrString(a, b) {
        if (Array.isArray(a) && Array.isArray(b)) {
          if (a.length !== b.length) return false;

          var aSorted = _toConsumableArray(a).sort();

          var bSorted = _toConsumableArray(b).sort();

          return aSorted.every(function (val, index) {
            return bSorted[index] === val;
          });
        } else {
          return a === b;
        }
      }
      /**
       * Flattens single-level nested arrays.
       */


      function flatten(arr) {
        return Array.prototype.concat.apply([], arr);
      }
      /**
       * Return the last element of an array.
       */


      function last(a) {
        return a.length > 0 ? a[a.length - 1] : null;
      }
      /**
       * Verifys all booleans in an array are `true`.
       */


      function and(bools) {
        return !bools.some(function (v) {
          return !v;
        });
      }

      function forEach(map, callback) {
        for (var prop in map) {
          if (map.hasOwnProperty(prop)) {
            callback(map[prop], prop);
          }
        }
      }

      function wrapIntoObservable(value) {
        if ((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisObservable"])(value)) {
          return value;
        }

        if ((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisPromise"])(value)) {
          // Use `Promise.resolve()` to wrap promise-like instances.
          // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the
          // change detection.
          return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(Promise.resolve(value));
        }

        return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(value);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function createEmptyUrlTree() {
        return new _UrlTree(new _UrlSegmentGroup([], {}), {}, null);
      }

      var pathCompareMap = {
        'exact': equalSegmentGroups,
        'subset': containsSegmentGroup
      };
      var paramCompareMap = {
        'exact': equalParams,
        'subset': containsParams,
        'ignored': function ignored() {
          return true;
        }
      };

      function containsTree(container, containee, options) {
        return pathCompareMap[options.paths](container.root, containee.root, options.matrixParams) && paramCompareMap[options.queryParams](container.queryParams, containee.queryParams) && !(options.fragment === 'exact' && container.fragment !== containee.fragment);
      }

      function equalParams(container, containee) {
        // TODO: This does not handle array params correctly.
        return shallowEqual(container, containee);
      }

      function equalSegmentGroups(container, containee, matrixParams) {
        if (!equalPath(container.segments, containee.segments)) return false;

        if (!matrixParamsMatch(container.segments, containee.segments, matrixParams)) {
          return false;
        }

        if (container.numberOfChildren !== containee.numberOfChildren) return false;

        for (var c in containee.children) {
          if (!container.children[c]) return false;
          if (!equalSegmentGroups(container.children[c], containee.children[c], matrixParams)) return false;
        }

        return true;
      }

      function containsParams(container, containee) {
        return Object.keys(containee).length <= Object.keys(container).length && Object.keys(containee).every(function (key) {
          return equalArraysOrString(container[key], containee[key]);
        });
      }

      function containsSegmentGroup(container, containee, matrixParams) {
        return containsSegmentGroupHelper(container, containee, containee.segments, matrixParams);
      }

      function containsSegmentGroupHelper(container, containee, containeePaths, matrixParams) {
        if (container.segments.length > containeePaths.length) {
          var current = container.segments.slice(0, containeePaths.length);
          if (!equalPath(current, containeePaths)) return false;
          if (containee.hasChildren()) return false;
          if (!matrixParamsMatch(current, containeePaths, matrixParams)) return false;
          return true;
        } else if (container.segments.length === containeePaths.length) {
          if (!equalPath(container.segments, containeePaths)) return false;
          if (!matrixParamsMatch(container.segments, containeePaths, matrixParams)) return false;

          for (var c in containee.children) {
            if (!container.children[c]) return false;

            if (!containsSegmentGroup(container.children[c], containee.children[c], matrixParams)) {
              return false;
            }
          }

          return true;
        } else {
          var _current = containeePaths.slice(0, container.segments.length);

          var next = containeePaths.slice(container.segments.length);
          if (!equalPath(container.segments, _current)) return false;
          if (!matrixParamsMatch(container.segments, _current, matrixParams)) return false;
          if (!container.children[_PRIMARY_OUTLET]) return false;
          return containsSegmentGroupHelper(container.children[_PRIMARY_OUTLET], containee, next, matrixParams);
        }
      }

      function matrixParamsMatch(containerPaths, containeePaths, options) {
        return containeePaths.every(function (containeeSegment, i) {
          return paramCompareMap[options](containerPaths[i].parameters, containeeSegment.parameters);
        });
      }
      /**
       * @description
       *
       * Represents the parsed URL.
       *
       * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a
       * serialized tree.
       * UrlTree is a data structure that provides a lot of affordances in dealing with URLs
       *
       * @usageNotes
       * ### Example
       *
       * ```
       * @Component({templateUrl:'template.html'})
       * class MyComponent {
       *   constructor(router: Router) {
       *     const tree: UrlTree =
       *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');
       *     const f = tree.fragment; // return 'fragment'
       *     const q = tree.queryParams; // returns {debug: 'true'}
       *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];
       *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'
       *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'
       *     g.children['support'].segments; // return 1 segment 'help'
       *   }
       * }
       * ```
       *
       * @publicApi
       */


      var _UrlTree = /*#__PURE__*/function () {
        /** @internal */
        function _UrlTree(
        /** The root segment group of the URL tree */
        root,
        /** The query params of the URL */
        queryParams,
        /** The fragment of the URL */
        fragment) {
          _classCallCheck2(this, _UrlTree);

          this.root = root;
          this.queryParams = queryParams;
          this.fragment = fragment;
        }

        _createClass2(_UrlTree, [{
          key: "queryParamMap",
          get: function get() {
            if (!this._queryParamMap) {
              this._queryParamMap = _convertToParamMap(this.queryParams);
            }

            return this._queryParamMap;
          }
          /** @docsNotRequired */

        }, {
          key: "toString",
          value: function toString() {
            return DEFAULT_SERIALIZER.serialize(this);
          }
        }]);

        return _UrlTree;
      }();
      /**
       * @description
       *
       * Represents the parsed URL segment group.
       *
       * See `UrlTree` for more information.
       *
       * @publicApi
       */


      var _UrlSegmentGroup = /*#__PURE__*/function () {
        function _UrlSegmentGroup(
        /** The URL segments of this group. See `UrlSegment` for more information */
        segments,
        /** The list of children of this group */
        children) {
          var _this137 = this;

          _classCallCheck2(this, _UrlSegmentGroup);

          this.segments = segments;
          this.children = children;
          /** The parent node in the url tree */

          this.parent = null;
          forEach(children, function (v, k) {
            return v.parent = _this137;
          });
        }
        /** Whether the segment has child segments */


        _createClass2(_UrlSegmentGroup, [{
          key: "hasChildren",
          value: function hasChildren() {
            return this.numberOfChildren > 0;
          }
          /** Number of child segments */

        }, {
          key: "numberOfChildren",
          get: function get() {
            return Object.keys(this.children).length;
          }
          /** @docsNotRequired */

        }, {
          key: "toString",
          value: function toString() {
            return serializePaths(this);
          }
        }]);

        return _UrlSegmentGroup;
      }();
      /**
       * @description
       *
       * Represents a single URL segment.
       *
       * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix
       * parameters associated with the segment.
       *
       * @usageNotes
       * ### Example
       *
       * ```
       * @Component({templateUrl:'template.html'})
       * class MyComponent {
       *   constructor(router: Router) {
       *     const tree: UrlTree = router.parseUrl('/team;id=33');
       *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];
       *     const s: UrlSegment[] = g.segments;
       *     s[0].path; // returns 'team'
       *     s[0].parameters; // returns {id: 33}
       *   }
       * }
       * ```
       *
       * @publicApi
       */


      var _UrlSegment = /*#__PURE__*/function () {
        function _UrlSegment(
        /** The path part of a URL segment */
        path,
        /** The matrix parameters associated with a segment */
        parameters) {
          _classCallCheck2(this, _UrlSegment);

          this.path = path;
          this.parameters = parameters;
        }

        _createClass2(_UrlSegment, [{
          key: "parameterMap",
          get: function get() {
            if (!this._parameterMap) {
              this._parameterMap = _convertToParamMap(this.parameters);
            }

            return this._parameterMap;
          }
          /** @docsNotRequired */

        }, {
          key: "toString",
          value: function toString() {
            return serializePath(this);
          }
        }]);

        return _UrlSegment;
      }();

      function equalSegments(as, bs) {
        return equalPath(as, bs) && as.every(function (a, i) {
          return shallowEqual(a.parameters, bs[i].parameters);
        });
      }

      function equalPath(as, bs) {
        if (as.length !== bs.length) return false;
        return as.every(function (a, i) {
          return a.path === bs[i].path;
        });
      }

      function mapChildrenIntoArray(segment, fn) {
        var res = [];
        forEach(segment.children, function (child, childOutlet) {
          if (childOutlet === _PRIMARY_OUTLET) {
            res = res.concat(fn(child, childOutlet));
          }
        });
        forEach(segment.children, function (child, childOutlet) {
          if (childOutlet !== _PRIMARY_OUTLET) {
            res = res.concat(fn(child, childOutlet));
          }
        });
        return res;
      }
      /**
       * @description
       *
       * Serializes and deserializes a URL string into a URL tree.
       *
       * The url serialization strategy is customizable. You can
       * make all URLs case insensitive by providing a custom UrlSerializer.
       *
       * See `DefaultUrlSerializer` for an example of a URL serializer.
       *
       * @publicApi
       */


      var _UrlSerializer = function _UrlSerializer() {
        _classCallCheck2(this, _UrlSerializer);
      };
      /**
       * @description
       *
       * A default implementation of the `UrlSerializer`.
       *
       * Example URLs:
       *
       * ```
       * /inbox/33(popup:compose)
       * /inbox/33;open=true/messages/44
       * ```
       *
       * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the
       * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to
       * specify route specific parameters.
       *
       * @publicApi
       */


      var _DefaultUrlSerializer = /*#__PURE__*/function () {
        function _DefaultUrlSerializer() {
          _classCallCheck2(this, _DefaultUrlSerializer);
        }

        _createClass2(_DefaultUrlSerializer, [{
          key: "parse",
          value:
          /** Parses a url into a `UrlTree` */
          function parse(url) {
            var p = new UrlParser(url);
            return new _UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
          }
          /** Converts a `UrlTree` into a url */

        }, {
          key: "serialize",
          value: function serialize(tree) {
            var segment = "/".concat(serializeSegment(tree.root, true));
            var query = serializeQueryParams(tree.queryParams);
            var fragment = typeof tree.fragment === "string" ? "#".concat(encodeUriFragment(tree.fragment)) : '';
            return "".concat(segment).concat(query).concat(fragment);
          }
        }]);

        return _DefaultUrlSerializer;
      }();

      var DEFAULT_SERIALIZER = new _DefaultUrlSerializer();

      function serializePaths(segment) {
        return segment.segments.map(function (p) {
          return serializePath(p);
        }).join('/');
      }

      function serializeSegment(segment, root) {
        if (!segment.hasChildren()) {
          return serializePaths(segment);
        }

        if (root) {
          var primary = segment.children[_PRIMARY_OUTLET] ? serializeSegment(segment.children[_PRIMARY_OUTLET], false) : '';
          var children = [];
          forEach(segment.children, function (v, k) {
            if (k !== _PRIMARY_OUTLET) {
              children.push("".concat(k, ":").concat(serializeSegment(v, false)));
            }
          });
          return children.length > 0 ? "".concat(primary, "(").concat(children.join('//'), ")") : primary;
        } else {
          var _children = mapChildrenIntoArray(segment, function (v, k) {
            if (k === _PRIMARY_OUTLET) {
              return [serializeSegment(segment.children[_PRIMARY_OUTLET], false)];
            }

            return ["".concat(k, ":").concat(serializeSegment(v, false))];
          }); // use no parenthesis if the only child is a primary outlet route


          if (Object.keys(segment.children).length === 1 && segment.children[_PRIMARY_OUTLET] != null) {
            return "".concat(serializePaths(segment), "/").concat(_children[0]);
          }

          return "".concat(serializePaths(segment), "/(").concat(_children.join('//'), ")");
        }
      }
      /**
       * Encodes a URI string with the default encoding. This function will only ever be called from
       * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need
       * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't
       * have to be encoded per https://url.spec.whatwg.org.
       */


      function encodeUriString(s) {
        return encodeURIComponent(s).replace(/%40/g, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',');
      }
      /**
       * This function should be used to encode both keys and values in a query string key/value. In
       * the following URL, you need to call encodeUriQuery on "k" and "v":
       *
       * http://www.site.org/html;mk=mv?k=v#f
       */


      function encodeUriQuery(s) {
        return encodeUriString(s).replace(/%3B/gi, ';');
      }
      /**
       * This function should be used to encode a URL fragment. In the following URL, you need to call
       * encodeUriFragment on "f":
       *
       * http://www.site.org/html;mk=mv?k=v#f
       */


      function encodeUriFragment(s) {
        return encodeURI(s);
      }
      /**
       * This function should be run on any URI segment as well as the key and value in a key/value
       * pair for matrix params. In the following URL, you need to call encodeUriSegment on "html",
       * "mk", and "mv":
       *
       * http://www.site.org/html;mk=mv?k=v#f
       */


      function encodeUriSegment(s) {
        return encodeUriString(s).replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/%26/gi, '&');
      }

      function decode(s) {
        return decodeURIComponent(s);
      } // Query keys/values should have the "+" replaced first, as "+" in a query string is " ".
      // decodeURIComponent function will not decode "+" as a space.


      function decodeQuery(s) {
        return decode(s.replace(/\+/g, '%20'));
      }

      function serializePath(path) {
        return "".concat(encodeUriSegment(path.path)).concat(serializeMatrixParams(path.parameters));
      }

      function serializeMatrixParams(params) {
        return Object.keys(params).map(function (key) {
          return ";".concat(encodeUriSegment(key), "=").concat(encodeUriSegment(params[key]));
        }).join('');
      }

      function serializeQueryParams(params) {
        var strParams = Object.keys(params).map(function (name) {
          var value = params[name];
          return Array.isArray(value) ? value.map(function (v) {
            return "".concat(encodeUriQuery(name), "=").concat(encodeUriQuery(v));
          }).join('&') : "".concat(encodeUriQuery(name), "=").concat(encodeUriQuery(value));
        });
        return strParams.length ? "?".concat(strParams.join('&')) : '';
      }

      var SEGMENT_RE = /^[^\/()?;=#]+/;

      function matchSegments(str) {
        var match = str.match(SEGMENT_RE);
        return match ? match[0] : '';
      }

      var QUERY_PARAM_RE = /^[^=?&#]+/; // Return the name of the query param at the start of the string or an empty string

      function matchQueryParams(str) {
        var match = str.match(QUERY_PARAM_RE);
        return match ? match[0] : '';
      }

      var QUERY_PARAM_VALUE_RE = /^[^?&#]+/; // Return the value of the query param at the start of the string or an empty string

      function matchUrlQueryParamValue(str) {
        var match = str.match(QUERY_PARAM_VALUE_RE);
        return match ? match[0] : '';
      }

      var UrlParser = /*#__PURE__*/function () {
        function UrlParser(url) {
          _classCallCheck2(this, UrlParser);

          this.url = url;
          this.remaining = url;
        }

        _createClass2(UrlParser, [{
          key: "parseRootSegment",
          value: function parseRootSegment() {
            this.consumeOptional('/');

            if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {
              return new _UrlSegmentGroup([], {});
            } // The root segment group never has segments


            return new _UrlSegmentGroup([], this.parseChildren());
          }
        }, {
          key: "parseQueryParams",
          value: function parseQueryParams() {
            var params = {};

            if (this.consumeOptional('?')) {
              do {
                this.parseQueryParam(params);
              } while (this.consumeOptional('&'));
            }

            return params;
          }
        }, {
          key: "parseFragment",
          value: function parseFragment() {
            return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;
          }
        }, {
          key: "parseChildren",
          value: function parseChildren() {
            if (this.remaining === '') {
              return {};
            }

            this.consumeOptional('/');
            var segments = [];

            if (!this.peekStartsWith('(')) {
              segments.push(this.parseSegment());
            }

            while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {
              this.capture('/');
              segments.push(this.parseSegment());
            }

            var children = {};

            if (this.peekStartsWith('/(')) {
              this.capture('/');
              children = this.parseParens(true);
            }

            var res = {};

            if (this.peekStartsWith('(')) {
              res = this.parseParens(false);
            }

            if (segments.length > 0 || Object.keys(children).length > 0) {
              res[_PRIMARY_OUTLET] = new _UrlSegmentGroup(segments, children);
            }

            return res;
          } // parse a segment with its matrix parameters
          // ie `name;k1=v1;k2`

        }, {
          key: "parseSegment",
          value: function parseSegment() {
            var path = matchSegments(this.remaining);

            if (path === '' && this.peekStartsWith(';')) {
              throw new Error("Empty path url segment cannot have parameters: '".concat(this.remaining, "'."));
            }

            this.capture(path);
            return new _UrlSegment(decode(path), this.parseMatrixParams());
          }
        }, {
          key: "parseMatrixParams",
          value: function parseMatrixParams() {
            var params = {};

            while (this.consumeOptional(';')) {
              this.parseParam(params);
            }

            return params;
          }
        }, {
          key: "parseParam",
          value: function parseParam(params) {
            var key = matchSegments(this.remaining);

            if (!key) {
              return;
            }

            this.capture(key);
            var value = '';

            if (this.consumeOptional('=')) {
              var valueMatch = matchSegments(this.remaining);

              if (valueMatch) {
                value = valueMatch;
                this.capture(value);
              }
            }

            params[decode(key)] = decode(value);
          } // Parse a single query parameter `name[=value]`

        }, {
          key: "parseQueryParam",
          value: function parseQueryParam(params) {
            var key = matchQueryParams(this.remaining);

            if (!key) {
              return;
            }

            this.capture(key);
            var value = '';

            if (this.consumeOptional('=')) {
              var valueMatch = matchUrlQueryParamValue(this.remaining);

              if (valueMatch) {
                value = valueMatch;
                this.capture(value);
              }
            }

            var decodedKey = decodeQuery(key);
            var decodedVal = decodeQuery(value);

            if (params.hasOwnProperty(decodedKey)) {
              // Append to existing values
              var currentVal = params[decodedKey];

              if (!Array.isArray(currentVal)) {
                currentVal = [currentVal];
                params[decodedKey] = currentVal;
              }

              currentVal.push(decodedVal);
            } else {
              // Create a new value
              params[decodedKey] = decodedVal;
            }
          } // parse `(a/b//outlet_name:c/d)`

        }, {
          key: "parseParens",
          value: function parseParens(allowPrimary) {
            var segments = {};
            this.capture('(');

            while (!this.consumeOptional(')') && this.remaining.length > 0) {
              var path = matchSegments(this.remaining);
              var next = this.remaining[path.length]; // if is is not one of these characters, then the segment was unescaped
              // or the group was not closed

              if (next !== '/' && next !== ')' && next !== ';') {
                throw new Error("Cannot parse url '".concat(this.url, "'"));
              }

              var outletName = undefined;

              if (path.indexOf(':') > -1) {
                outletName = path.substr(0, path.indexOf(':'));
                this.capture(outletName);
                this.capture(':');
              } else if (allowPrimary) {
                outletName = _PRIMARY_OUTLET;
              }

              var children = this.parseChildren();
              segments[outletName] = Object.keys(children).length === 1 ? children[_PRIMARY_OUTLET] : new _UrlSegmentGroup([], children);
              this.consumeOptional('//');
            }

            return segments;
          }
        }, {
          key: "peekStartsWith",
          value: function peekStartsWith(str) {
            return this.remaining.startsWith(str);
          } // Consumes the prefix when it is present and returns whether it has been consumed

        }, {
          key: "consumeOptional",
          value: function consumeOptional(str) {
            if (this.peekStartsWith(str)) {
              this.remaining = this.remaining.substring(str.length);
              return true;
            }

            return false;
          }
        }, {
          key: "capture",
          value: function capture(str) {
            if (!this.consumeOptional(str)) {
              throw new Error("Expected \"".concat(str, "\"."));
            }
          }
        }]);

        return UrlParser;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var Tree = /*#__PURE__*/function () {
        function Tree(root) {
          _classCallCheck2(this, Tree);

          this._root = root;
        }

        _createClass2(Tree, [{
          key: "root",
          get: function get() {
            return this._root.value;
          }
          /**
           * @internal
           */

        }, {
          key: "parent",
          value: function parent(t) {
            var p = this.pathFromRoot(t);
            return p.length > 1 ? p[p.length - 2] : null;
          }
          /**
           * @internal
           */

        }, {
          key: "children",
          value: function children(t) {
            var n = findNode(t, this._root);
            return n ? n.children.map(function (t) {
              return t.value;
            }) : [];
          }
          /**
           * @internal
           */

        }, {
          key: "firstChild",
          value: function firstChild(t) {
            var n = findNode(t, this._root);
            return n && n.children.length > 0 ? n.children[0].value : null;
          }
          /**
           * @internal
           */

        }, {
          key: "siblings",
          value: function siblings(t) {
            var p = findPath(t, this._root);
            if (p.length < 2) return [];
            var c = p[p.length - 2].children.map(function (c) {
              return c.value;
            });
            return c.filter(function (cc) {
              return cc !== t;
            });
          }
          /**
           * @internal
           */

        }, {
          key: "pathFromRoot",
          value: function pathFromRoot(t) {
            return findPath(t, this._root).map(function (s) {
              return s.value;
            });
          }
        }]);

        return Tree;
      }(); // DFS for the node matching the value


      function findNode(value, node) {
        if (value === node.value) return node;

        var _iterator10 = _createForOfIteratorHelper(node.children),
            _step10;

        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var child = _step10.value;

            var _node = findNode(value, child);

            if (_node) return _node;
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }

        return null;
      } // Return the path to the node with the given value using DFS


      function findPath(value, node) {
        if (value === node.value) return [node];

        var _iterator11 = _createForOfIteratorHelper(node.children),
            _step11;

        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var child = _step11.value;
            var path = findPath(value, child);

            if (path.length) {
              path.unshift(node);
              return path;
            }
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }

        return [];
      }

      var TreeNode = /*#__PURE__*/function () {
        function TreeNode(value, children) {
          _classCallCheck2(this, TreeNode);

          this.value = value;
          this.children = children;
        }

        _createClass2(TreeNode, [{
          key: "toString",
          value: function toString() {
            return "TreeNode(".concat(this.value, ")");
          }
        }]);

        return TreeNode;
      }(); // Return the list of T indexed by outlet name


      function nodeChildrenAsMap(node) {
        var map = {};

        if (node) {
          node.children.forEach(function (child) {
            return map[child.value.outlet] = child;
          });
        }

        return map;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Represents the state of the router as a tree of activated routes.
       *
       * @usageNotes
       *
       * Every node in the route tree is an `ActivatedRoute` instance
       * that knows about the "consumed" URL segments, the extracted parameters,
       * and the resolved data.
       * Use the `ActivatedRoute` properties to traverse the tree from any node.
       *
       * The following fragment shows how a component gets the root node
       * of the current state to establish its own route tree:
       *
       * ```
       * @Component({templateUrl:'template.html'})
       * class MyComponent {
       *   constructor(router: Router) {
       *     const state: RouterState = router.routerState;
       *     const root: ActivatedRoute = state.root;
       *     const child = root.firstChild;
       *     const id: Observable<string> = child.params.map(p => p.id);
       *     //...
       *   }
       * }
       * ```
       *
       * @see `ActivatedRoute`
       * @see [Getting route information](guide/router#getting-route-information)
       *
       * @publicApi
       */


      var _RouterState = /*#__PURE__*/function (_Tree) {
        _inherits(_RouterState, _Tree);

        var _super54 = _createSuper(_RouterState);

        /** @internal */
        function _RouterState(root,
        /** The current snapshot of the router state */
        snapshot) {
          var _this138;

          _classCallCheck2(this, _RouterState);

          _this138 = _super54.call(this, root);
          _this138.snapshot = snapshot;
          setRouterState(_assertThisInitialized(_this138), root);
          return _this138;
        }

        _createClass2(_RouterState, [{
          key: "toString",
          value: function toString() {
            return this.snapshot.toString();
          }
        }]);

        return _RouterState;
      }(Tree);

      function createEmptyState(urlTree, rootComponent) {
        var snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
        var emptyUrl = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([new _UrlSegment('', {})]);
        var emptyParams = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject({});
        var emptyData = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject({});
        var emptyQueryParams = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject({});
        var fragment = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject('');
        var activated = new _ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, _PRIMARY_OUTLET, rootComponent, snapshot.root);
        activated.snapshot = snapshot.root;
        return new _RouterState(new TreeNode(activated, []), snapshot);
      }

      function createEmptyStateSnapshot(urlTree, rootComponent) {
        var emptyParams = {};
        var emptyData = {};
        var emptyQueryParams = {};
        var fragment = '';
        var activated = new _ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, _PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});
        return new _RouterStateSnapshot('', new TreeNode(activated, []));
      }
      /**
       * Provides access to information about a route associated with a component
       * that is loaded in an outlet.
       * Use to traverse the `RouterState` tree and extract information from nodes.
       *
       * The following example shows how to construct a component using information from a
       * currently activated route.
       *
       * Note: the observables in this class only emit when the current and previous values differ based
       * on shallow equality. For example, changing deeply nested properties in resolved `data` will not
       * cause the `ActivatedRoute.data` `Observable` to emit a new value.
       *
       * {@example router/activated-route/module.ts region="activated-route"
       *     header="activated-route.component.ts"}
       *
       * @see [Getting route information](guide/router#getting-route-information)
       *
       * @publicApi
       */


      var _ActivatedRoute = /*#__PURE__*/function () {
        /** @internal */
        function _ActivatedRoute(
        /** An observable of the URL segments matched by this route. */
        url,
        /** An observable of the matrix parameters scoped to this route. */
        params,
        /** An observable of the query parameters shared by all the routes. */
        queryParams,
        /** An observable of the URL fragment shared by all the routes. */
        fragment,
        /** An observable of the static and resolved data of this route. */
        data,
        /** The outlet name of the route, a constant. */
        outlet,
        /** The component of the route, a constant. */
        // TODO(vsavkin): remove |string
        component, futureSnapshot) {
          _classCallCheck2(this, _ActivatedRoute);

          this.url = url;
          this.params = params;
          this.queryParams = queryParams;
          this.fragment = fragment;
          this.data = data;
          this.outlet = outlet;
          this.component = component;
          this._futureSnapshot = futureSnapshot;
        }
        /** The configuration used to match this route. */


        _createClass2(_ActivatedRoute, [{
          key: "routeConfig",
          get: function get() {
            return this._futureSnapshot.routeConfig;
          }
          /** The root of the router state. */

        }, {
          key: "root",
          get: function get() {
            return this._routerState.root;
          }
          /** The parent of this route in the router state tree. */

        }, {
          key: "parent",
          get: function get() {
            return this._routerState.parent(this);
          }
          /** The first child of this route in the router state tree. */

        }, {
          key: "firstChild",
          get: function get() {
            return this._routerState.firstChild(this);
          }
          /** The children of this route in the router state tree. */

        }, {
          key: "children",
          get: function get() {
            return this._routerState.children(this);
          }
          /** The path from the root of the router state tree to this route. */

        }, {
          key: "pathFromRoot",
          get: function get() {
            return this._routerState.pathFromRoot(this);
          }
          /**
           * An Observable that contains a map of the required and optional parameters
           * specific to the route.
           * The map supports retrieving single and multiple values from the same parameter.
           */

        }, {
          key: "paramMap",
          get: function get() {
            if (!this._paramMap) {
              this._paramMap = this.params.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (p) {
                return _convertToParamMap(p);
              }));
            }

            return this._paramMap;
          }
          /**
           * An Observable that contains a map of the query parameters available to all routes.
           * The map supports retrieving single and multiple values from the query parameter.
           */

        }, {
          key: "queryParamMap",
          get: function get() {
            if (!this._queryParamMap) {
              this._queryParamMap = this.queryParams.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (p) {
                return _convertToParamMap(p);
              }));
            }

            return this._queryParamMap;
          }
        }, {
          key: "toString",
          value: function toString() {
            return this.snapshot ? this.snapshot.toString() : "Future(".concat(this._futureSnapshot, ")");
          }
        }]);

        return _ActivatedRoute;
      }();
      /**
       * Returns the inherited params, data, and resolve for a given route.
       * By default, this only inherits values up to the nearest path-less or component-less route.
       * @internal
       */


      function inheritedParamsDataResolve(route) {
        var paramsInheritanceStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'emptyOnly';
        var pathFromRoot = route.pathFromRoot;
        var inheritingStartingFrom = 0;

        if (paramsInheritanceStrategy !== 'always') {
          inheritingStartingFrom = pathFromRoot.length - 1;

          while (inheritingStartingFrom >= 1) {
            var current = pathFromRoot[inheritingStartingFrom];
            var parent = pathFromRoot[inheritingStartingFrom - 1]; // current route is an empty path => inherits its parent's params and data

            if (current.routeConfig && current.routeConfig.path === '') {
              inheritingStartingFrom--; // parent is componentless => current route should inherit its params and data
            } else if (!parent.component) {
              inheritingStartingFrom--;
            } else {
              break;
            }
          }
        }

        return flattenInherited(pathFromRoot.slice(inheritingStartingFrom));
      }
      /** @internal */


      function flattenInherited(pathFromRoot) {
        return pathFromRoot.reduce(function (res, curr) {
          var params = Object.assign(Object.assign({}, res.params), curr.params);
          var data = Object.assign(Object.assign({}, res.data), curr.data);
          var resolve = Object.assign(Object.assign({}, res.resolve), curr._resolvedData);
          return {
            params: params,
            data: data,
            resolve: resolve
          };
        }, {
          params: {},
          data: {},
          resolve: {}
        });
      }
      /**
       * @description
       *
       * Contains the information about a route associated with a component loaded in an
       * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to
       * traverse the router state tree.
       *
       * The following example initializes a component with route information extracted
       * from the snapshot of the root node at the time of creation.
       *
       * ```
       * @Component({templateUrl:'./my-component.html'})
       * class MyComponent {
       *   constructor(route: ActivatedRoute) {
       *     const id: string = route.snapshot.params.id;
       *     const url: string = route.snapshot.url.join('');
       *     const user = route.snapshot.data.user;
       *   }
       * }
       * ```
       *
       * @publicApi
       */


      var _ActivatedRouteSnapshot = /*#__PURE__*/function () {
        /** @internal */
        function _ActivatedRouteSnapshot(
        /** The URL segments matched by this route */
        url,
        /**
         *  The matrix parameters scoped to this route.
         *
         *  You can compute all params (or data) in the router state or to get params outside
         *  of an activated component by traversing the `RouterState` tree as in the following
         *  example:
         *  ```
         *  collectRouteParams(router: Router) {
         *    let params = {};
         *    let stack: ActivatedRouteSnapshot[] = [router.routerState.snapshot.root];
         *    while (stack.length > 0) {
         *      const route = stack.pop()!;
         *      params = {...params, ...route.params};
         *      stack.push(...route.children);
         *    }
         *    return params;
         *  }
         *  ```
         */
        params,
        /** The query parameters shared by all the routes */
        queryParams,
        /** The URL fragment shared by all the routes */
        fragment,
        /** The static and resolved data of this route */
        data,
        /** The outlet name of the route */
        outlet,
        /** The component of the route */
        component, routeConfig, urlSegment, lastPathIndex, resolve) {
          _classCallCheck2(this, _ActivatedRouteSnapshot);

          this.url = url;
          this.params = params;
          this.queryParams = queryParams;
          this.fragment = fragment;
          this.data = data;
          this.outlet = outlet;
          this.component = component;
          this.routeConfig = routeConfig;
          this._urlSegment = urlSegment;
          this._lastPathIndex = lastPathIndex;
          this._resolve = resolve;
        }
        /** The root of the router state */


        _createClass2(_ActivatedRouteSnapshot, [{
          key: "root",
          get: function get() {
            return this._routerState.root;
          }
          /** The parent of this route in the router state tree */

        }, {
          key: "parent",
          get: function get() {
            return this._routerState.parent(this);
          }
          /** The first child of this route in the router state tree */

        }, {
          key: "firstChild",
          get: function get() {
            return this._routerState.firstChild(this);
          }
          /** The children of this route in the router state tree */

        }, {
          key: "children",
          get: function get() {
            return this._routerState.children(this);
          }
          /** The path from the root of the router state tree to this route */

        }, {
          key: "pathFromRoot",
          get: function get() {
            return this._routerState.pathFromRoot(this);
          }
        }, {
          key: "paramMap",
          get: function get() {
            if (!this._paramMap) {
              this._paramMap = _convertToParamMap(this.params);
            }

            return this._paramMap;
          }
        }, {
          key: "queryParamMap",
          get: function get() {
            if (!this._queryParamMap) {
              this._queryParamMap = _convertToParamMap(this.queryParams);
            }

            return this._queryParamMap;
          }
        }, {
          key: "toString",
          value: function toString() {
            var url = this.url.map(function (segment) {
              return segment.toString();
            }).join('/');
            var matched = this.routeConfig ? this.routeConfig.path : '';
            return "Route(url:'".concat(url, "', path:'").concat(matched, "')");
          }
        }]);

        return _ActivatedRouteSnapshot;
      }();
      /**
       * @description
       *
       * Represents the state of the router at a moment in time.
       *
       * This is a tree of activated route snapshots. Every node in this tree knows about
       * the "consumed" URL segments, the extracted parameters, and the resolved data.
       *
       * The following example shows how a component is initialized with information
       * from the snapshot of the root node's state at the time of creation.
       *
       * ```
       * @Component({templateUrl:'template.html'})
       * class MyComponent {
       *   constructor(router: Router) {
       *     const state: RouterState = router.routerState;
       *     const snapshot: RouterStateSnapshot = state.snapshot;
       *     const root: ActivatedRouteSnapshot = snapshot.root;
       *     const child = root.firstChild;
       *     const id: Observable<string> = child.params.map(p => p.id);
       *     //...
       *   }
       * }
       * ```
       *
       * @publicApi
       */


      var _RouterStateSnapshot = /*#__PURE__*/function (_Tree2) {
        _inherits(_RouterStateSnapshot, _Tree2);

        var _super55 = _createSuper(_RouterStateSnapshot);

        /** @internal */
        function _RouterStateSnapshot(
        /** The url from which this snapshot was created */
        url, root) {
          var _this139;

          _classCallCheck2(this, _RouterStateSnapshot);

          _this139 = _super55.call(this, root);
          _this139.url = url;
          setRouterState(_assertThisInitialized(_this139), root);
          return _this139;
        }

        _createClass2(_RouterStateSnapshot, [{
          key: "toString",
          value: function toString() {
            return serializeNode(this._root);
          }
        }]);

        return _RouterStateSnapshot;
      }(Tree);

      function setRouterState(state, node) {
        node.value._routerState = state;
        node.children.forEach(function (c) {
          return setRouterState(state, c);
        });
      }

      function serializeNode(node) {
        var c = node.children.length > 0 ? " { ".concat(node.children.map(serializeNode).join(', '), " } ") : '';
        return "".concat(node.value).concat(c);
      }
      /**
       * The expectation is that the activate route is created with the right set of parameters.
       * So we push new values into the observables only when they are not the initial values.
       * And we detect that by checking if the snapshot field is set.
       */


      function advanceActivatedRoute(route) {
        if (route.snapshot) {
          var currentSnapshot = route.snapshot;
          var nextSnapshot = route._futureSnapshot;
          route.snapshot = nextSnapshot;

          if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {
            route.queryParams.next(nextSnapshot.queryParams);
          }

          if (currentSnapshot.fragment !== nextSnapshot.fragment) {
            route.fragment.next(nextSnapshot.fragment);
          }

          if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {
            route.params.next(nextSnapshot.params);
          }

          if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {
            route.url.next(nextSnapshot.url);
          }

          if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {
            route.data.next(nextSnapshot.data);
          }
        } else {
          route.snapshot = route._futureSnapshot; // this is for resolved data

          route.data.next(route._futureSnapshot.data);
        }
      }

      function equalParamsAndUrlSegments(a, b) {
        var equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);
        var parentsMismatch = !a.parent !== !b.parent;
        return equalUrlParams && !parentsMismatch && (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function createRouterState(routeReuseStrategy, curr, prevState) {
        var root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);
        return new _RouterState(root, curr);
      }

      function createNode(routeReuseStrategy, curr, prevState) {
        // reuse an activated route that is currently displayed on the screen
        if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {
          var value = prevState.value;
          value._futureSnapshot = curr.value;
          var children = createOrReuseChildren(routeReuseStrategy, curr, prevState);
          return new TreeNode(value, children);
        } else {
          if (routeReuseStrategy.shouldAttach(curr.value)) {
            // retrieve an activated route that is used to be displayed, but is not currently displayed
            var detachedRouteHandle = routeReuseStrategy.retrieve(curr.value);

            if (detachedRouteHandle !== null) {
              var _tree = detachedRouteHandle.route;
              setFutureSnapshotsOfActivatedRoutes(curr, _tree);
              return _tree;
            }
          }

          var _value5 = createActivatedRoute(curr.value);

          var _children2 = curr.children.map(function (c) {
            return createNode(routeReuseStrategy, c);
          });

          return new TreeNode(_value5, _children2);
        }
      }

      function setFutureSnapshotsOfActivatedRoutes(curr, result) {
        if (curr.value.routeConfig !== result.value.routeConfig) {
          throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');
        }

        if (curr.children.length !== result.children.length) {
          throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');
        }

        result.value._futureSnapshot = curr.value;

        for (var i = 0; i < curr.children.length; ++i) {
          setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);
        }
      }

      function createOrReuseChildren(routeReuseStrategy, curr, prevState) {
        return curr.children.map(function (child) {
          var _iterator12 = _createForOfIteratorHelper(prevState.children),
              _step12;

          try {
            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
              var p = _step12.value;

              if (routeReuseStrategy.shouldReuseRoute(child.value, p.value.snapshot)) {
                return createNode(routeReuseStrategy, child, p);
              }
            }
          } catch (err) {
            _iterator12.e(err);
          } finally {
            _iterator12.f();
          }

          return createNode(routeReuseStrategy, child);
        });
      }

      function createActivatedRoute(c) {
        return new _ActivatedRoute(new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject(c.url), new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject(c.params), new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject(c.queryParams), new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject(c.fragment), new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject(c.data), c.outlet, c.component, c);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function _createUrlTree(route, urlTree, commands, queryParams, fragment) {
        if (commands.length === 0) {
          return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);
        }

        var nav = computeNavigation(commands);

        if (nav.toRoot()) {
          return tree(urlTree.root, new _UrlSegmentGroup([], {}), urlTree, queryParams, fragment);
        }

        var startingPosition = findStartingPosition(nav, urlTree, route);
        var segmentGroup = startingPosition.processChildren ? updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) : updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);
        return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);
      }

      function isMatrixParams(command) {
        return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;
      }
      /**
       * Determines if a given command has an `outlets` map. When we encounter a command
       * with an outlets k/v map, we need to apply each outlet individually to the existing segment.
       */


      function isCommandWithOutlets(command) {
        return typeof command === 'object' && command != null && command.outlets;
      }

      function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {
        var qp = {};

        if (queryParams) {
          forEach(queryParams, function (value, name) {
            qp[name] = Array.isArray(value) ? value.map(function (v) {
              return "".concat(v);
            }) : "".concat(value);
          });
        }

        if (urlTree.root === oldSegmentGroup) {
          return new _UrlTree(newSegmentGroup, qp, fragment);
        }

        return new _UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);
      }

      function replaceSegment(current, oldSegment, newSegment) {
        var children = {};
        forEach(current.children, function (c, outletName) {
          if (c === oldSegment) {
            children[outletName] = newSegment;
          } else {
            children[outletName] = replaceSegment(c, oldSegment, newSegment);
          }
        });
        return new _UrlSegmentGroup(current.segments, children);
      }

      var Navigation = /*#__PURE__*/function () {
        function Navigation(isAbsolute, numberOfDoubleDots, commands) {
          _classCallCheck2(this, Navigation);

          this.isAbsolute = isAbsolute;
          this.numberOfDoubleDots = numberOfDoubleDots;
          this.commands = commands;

          if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {
            throw new Error('Root segment cannot have matrix parameters');
          }

          var cmdWithOutlet = commands.find(isCommandWithOutlets);

          if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {
            throw new Error('{outlets:{}} has to be the last command');
          }
        }

        _createClass2(Navigation, [{
          key: "toRoot",
          value: function toRoot() {
            return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';
          }
        }]);

        return Navigation;
      }();
      /** Transforms commands to a normalized `Navigation` */


      function computeNavigation(commands) {
        if (typeof commands[0] === 'string' && commands.length === 1 && commands[0] === '/') {
          return new Navigation(true, 0, commands);
        }

        var numberOfDoubleDots = 0;
        var isAbsolute = false;
        var res = commands.reduce(function (res, cmd, cmdIdx) {
          if (typeof cmd === 'object' && cmd != null) {
            if (cmd.outlets) {
              var outlets = {};
              forEach(cmd.outlets, function (commands, name) {
                outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;
              });
              return [].concat(_toConsumableArray(res), [{
                outlets: outlets
              }]);
            }

            if (cmd.segmentPath) {
              return [].concat(_toConsumableArray(res), [cmd.segmentPath]);
            }
          }

          if (!(typeof cmd === 'string')) {
            return [].concat(_toConsumableArray(res), [cmd]);
          }

          if (cmdIdx === 0) {
            cmd.split('/').forEach(function (urlPart, partIndex) {
              if (partIndex == 0 && urlPart === '.') {// skip './a'
              } else if (partIndex == 0 && urlPart === '') {
                //  '/a'
                isAbsolute = true;
              } else if (urlPart === '..') {
                //  '../a'
                numberOfDoubleDots++;
              } else if (urlPart != '') {
                res.push(urlPart);
              }
            });
            return res;
          }

          return [].concat(_toConsumableArray(res), [cmd]);
        }, []);
        return new Navigation(isAbsolute, numberOfDoubleDots, res);
      }

      var Position = function Position(segmentGroup, processChildren, index) {
        _classCallCheck2(this, Position);

        this.segmentGroup = segmentGroup;
        this.processChildren = processChildren;
        this.index = index;
      };

      function findStartingPosition(nav, tree, route) {
        if (nav.isAbsolute) {
          return new Position(tree.root, true, 0);
        }

        if (route.snapshot._lastPathIndex === -1) {
          var segmentGroup = route.snapshot._urlSegment; // Pathless ActivatedRoute has _lastPathIndex === -1 but should not process children
          // see issue #26224, #13011, #35687
          // However, if the ActivatedRoute is the root we should process children like above.

          var processChildren = segmentGroup === tree.root;
          return new Position(segmentGroup, processChildren, 0);
        }

        var modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;
        var index = route.snapshot._lastPathIndex + modifier;
        return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);
      }

      function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
        var g = group;
        var ci = index;
        var dd = numberOfDoubleDots;

        while (dd > ci) {
          dd -= ci;
          g = g.parent;

          if (!g) {
            throw new Error('Invalid number of \'../\'');
          }

          ci = g.segments.length;
        }

        return new Position(g, false, ci - dd);
      }

      function getOutlets(commands) {
        if (isCommandWithOutlets(commands[0])) {
          return commands[0].outlets;
        }

        return _defineProperty({}, _PRIMARY_OUTLET, commands);
      }

      function updateSegmentGroup(segmentGroup, startIndex, commands) {
        if (!segmentGroup) {
          segmentGroup = new _UrlSegmentGroup([], {});
        }

        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
          return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
        }

        var m = prefixedWith(segmentGroup, startIndex, commands);
        var slicedCommands = commands.slice(m.commandIndex);

        if (m.match && m.pathIndex < segmentGroup.segments.length) {
          var g = new _UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
          g.children[_PRIMARY_OUTLET] = new _UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
          return updateSegmentGroupChildren(g, 0, slicedCommands);
        } else if (m.match && slicedCommands.length === 0) {
          return new _UrlSegmentGroup(segmentGroup.segments, {});
        } else if (m.match && !segmentGroup.hasChildren()) {
          return createNewSegmentGroup(segmentGroup, startIndex, commands);
        } else if (m.match) {
          return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
        } else {
          return createNewSegmentGroup(segmentGroup, startIndex, commands);
        }
      }

      function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
        if (commands.length === 0) {
          return new _UrlSegmentGroup(segmentGroup.segments, {});
        } else {
          var outlets = getOutlets(commands);
          var children = {};
          forEach(outlets, function (commands, outlet) {
            if (typeof commands === 'string') {
              commands = [commands];
            }

            if (commands !== null) {
              children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);
            }
          });
          forEach(segmentGroup.children, function (child, childOutlet) {
            if (outlets[childOutlet] === undefined) {
              children[childOutlet] = child;
            }
          });
          return new _UrlSegmentGroup(segmentGroup.segments, children);
        }
      }

      function prefixedWith(segmentGroup, startIndex, commands) {
        var currentCommandIndex = 0;
        var currentPathIndex = startIndex;
        var noMatch = {
          match: false,
          pathIndex: 0,
          commandIndex: 0
        };

        while (currentPathIndex < segmentGroup.segments.length) {
          if (currentCommandIndex >= commands.length) return noMatch;
          var path = segmentGroup.segments[currentPathIndex];
          var command = commands[currentCommandIndex]; // Do not try to consume command as part of the prefixing if it has outlets because it can
          // contain outlets other than the one being processed. Consuming the outlets command would
          // result in other outlets being ignored.

          if (isCommandWithOutlets(command)) {
            break;
          }

          var curr = "".concat(command);
          var next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
          if (currentPathIndex > 0 && curr === undefined) break;

          if (curr && next && typeof next === 'object' && next.outlets === undefined) {
            if (!compare(curr, next, path)) return noMatch;
            currentCommandIndex += 2;
          } else {
            if (!compare(curr, {}, path)) return noMatch;
            currentCommandIndex++;
          }

          currentPathIndex++;
        }

        return {
          match: true,
          pathIndex: currentPathIndex,
          commandIndex: currentCommandIndex
        };
      }

      function createNewSegmentGroup(segmentGroup, startIndex, commands) {
        var paths = segmentGroup.segments.slice(0, startIndex);
        var i = 0;

        while (i < commands.length) {
          var command = commands[i];

          if (isCommandWithOutlets(command)) {
            var children = createNewSegmentChildren(command.outlets);
            return new _UrlSegmentGroup(paths, children);
          } // if we start with an object literal, we need to reuse the path part from the segment


          if (i === 0 && isMatrixParams(commands[0])) {
            var p = segmentGroup.segments[startIndex];
            paths.push(new _UrlSegment(p.path, stringify(commands[0])));
            i++;
            continue;
          }

          var curr = isCommandWithOutlets(command) ? command.outlets[_PRIMARY_OUTLET] : "".concat(command);
          var next = i < commands.length - 1 ? commands[i + 1] : null;

          if (curr && next && isMatrixParams(next)) {
            paths.push(new _UrlSegment(curr, stringify(next)));
            i += 2;
          } else {
            paths.push(new _UrlSegment(curr, {}));
            i++;
          }
        }

        return new _UrlSegmentGroup(paths, {});
      }

      function createNewSegmentChildren(outlets) {
        var children = {};
        forEach(outlets, function (commands, outlet) {
          if (typeof commands === 'string') {
            commands = [commands];
          }

          if (commands !== null) {
            children[outlet] = createNewSegmentGroup(new _UrlSegmentGroup([], {}), 0, commands);
          }
        });
        return children;
      }

      function stringify(params) {
        var res = {};
        forEach(params, function (v, k) {
          return res[k] = "".concat(v);
        });
        return res;
      }

      function compare(path, params, segment) {
        return path == segment.path && shallowEqual(params, segment.parameters);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var activateRoutes = function activateRoutes(rootContexts, routeReuseStrategy, forwardEvent) {
        return (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (t) {
          new ActivateRoutes(routeReuseStrategy, t.targetRouterState, t.currentRouterState, forwardEvent).activate(rootContexts);
          return t;
        });
      };

      var ActivateRoutes = /*#__PURE__*/function () {
        function ActivateRoutes(routeReuseStrategy, futureState, currState, forwardEvent) {
          _classCallCheck2(this, ActivateRoutes);

          this.routeReuseStrategy = routeReuseStrategy;
          this.futureState = futureState;
          this.currState = currState;
          this.forwardEvent = forwardEvent;
        }

        _createClass2(ActivateRoutes, [{
          key: "activate",
          value: function activate(parentContexts) {
            var futureRoot = this.futureState._root;
            var currRoot = this.currState ? this.currState._root : null;
            this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);
            advanceActivatedRoute(this.futureState.root);
            this.activateChildRoutes(futureRoot, currRoot, parentContexts);
          } // De-activate the child route that are not re-used for the future state

        }, {
          key: "deactivateChildRoutes",
          value: function deactivateChildRoutes(futureNode, currNode, contexts) {
            var _this140 = this;

            var children = nodeChildrenAsMap(currNode); // Recurse on the routes active in the future state to de-activate deeper children

            futureNode.children.forEach(function (futureChild) {
              var childOutletName = futureChild.value.outlet;

              _this140.deactivateRoutes(futureChild, children[childOutletName], contexts);

              delete children[childOutletName];
            }); // De-activate the routes that will not be re-used

            forEach(children, function (v, childName) {
              _this140.deactivateRouteAndItsChildren(v, contexts);
            });
          }
        }, {
          key: "deactivateRoutes",
          value: function deactivateRoutes(futureNode, currNode, parentContext) {
            var future = futureNode.value;
            var curr = currNode ? currNode.value : null;

            if (future === curr) {
              // Reusing the node, check to see if the children need to be de-activated
              if (future.component) {
                // If we have a normal route, we need to go through an outlet.
                var context = parentContext.getContext(future.outlet);

                if (context) {
                  this.deactivateChildRoutes(futureNode, currNode, context.children);
                }
              } else {
                // if we have a componentless route, we recurse but keep the same outlet map.
                this.deactivateChildRoutes(futureNode, currNode, parentContext);
              }
            } else {
              if (curr) {
                // Deactivate the current route which will not be re-used
                this.deactivateRouteAndItsChildren(currNode, parentContext);
              }
            }
          }
        }, {
          key: "deactivateRouteAndItsChildren",
          value: function deactivateRouteAndItsChildren(route, parentContexts) {
            if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {
              this.detachAndStoreRouteSubtree(route, parentContexts);
            } else {
              this.deactivateRouteAndOutlet(route, parentContexts);
            }
          }
        }, {
          key: "detachAndStoreRouteSubtree",
          value: function detachAndStoreRouteSubtree(route, parentContexts) {
            var context = parentContexts.getContext(route.value.outlet);

            if (context && context.outlet) {
              var componentRef = context.outlet.detach();
              var contexts = context.children.onOutletDeactivated();
              this.routeReuseStrategy.store(route.value.snapshot, {
                componentRef: componentRef,
                route: route,
                contexts: contexts
              });
            }
          }
        }, {
          key: "deactivateRouteAndOutlet",
          value: function deactivateRouteAndOutlet(route, parentContexts) {
            var context = parentContexts.getContext(route.value.outlet); // The context could be `null` if we are on a componentless route but there may still be
            // children that need deactivating.

            var contexts = context && route.value.component ? context.children : parentContexts;
            var children = nodeChildrenAsMap(route);

            for (var _i26 = 0, _Object$keys = Object.keys(children); _i26 < _Object$keys.length; _i26++) {
              var childOutlet = _Object$keys[_i26];
              this.deactivateRouteAndItsChildren(children[childOutlet], contexts);
            }

            if (context && context.outlet) {
              // Destroy the component
              context.outlet.deactivate(); // Destroy the contexts for all the outlets that were in the component

              context.children.onOutletDeactivated(); // Clear the information about the attached component on the context but keep the reference to
              // the outlet.

              context.attachRef = null;
              context.resolver = null;
              context.route = null;
            }
          }
        }, {
          key: "activateChildRoutes",
          value: function activateChildRoutes(futureNode, currNode, contexts) {
            var _this141 = this;

            var children = nodeChildrenAsMap(currNode);
            futureNode.children.forEach(function (c) {
              _this141.activateRoutes(c, children[c.value.outlet], contexts);

              _this141.forwardEvent(new _ActivationEnd(c.value.snapshot));
            });

            if (futureNode.children.length) {
              this.forwardEvent(new _ChildActivationEnd(futureNode.value.snapshot));
            }
          }
        }, {
          key: "activateRoutes",
          value: function activateRoutes(futureNode, currNode, parentContexts) {
            var future = futureNode.value;
            var curr = currNode ? currNode.value : null;
            advanceActivatedRoute(future); // reusing the node

            if (future === curr) {
              if (future.component) {
                // If we have a normal route, we need to go through an outlet.
                var context = parentContexts.getOrCreateContext(future.outlet);
                this.activateChildRoutes(futureNode, currNode, context.children);
              } else {
                // if we have a componentless route, we recurse but keep the same outlet map.
                this.activateChildRoutes(futureNode, currNode, parentContexts);
              }
            } else {
              if (future.component) {
                // if we have a normal route, we need to place the component into the outlet and recurse.
                var _context3 = parentContexts.getOrCreateContext(future.outlet);

                if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {
                  var stored = this.routeReuseStrategy.retrieve(future.snapshot);
                  this.routeReuseStrategy.store(future.snapshot, null);

                  _context3.children.onOutletReAttached(stored.contexts);

                  _context3.attachRef = stored.componentRef;
                  _context3.route = stored.route.value;

                  if (_context3.outlet) {
                    // Attach right away when the outlet has already been instantiated
                    // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated
                    _context3.outlet.attach(stored.componentRef, stored.route.value);
                  }

                  advanceActivatedRouteNodeAndItsChildren(stored.route);
                } else {
                  var config = parentLoadedConfig(future.snapshot);
                  var cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;
                  _context3.attachRef = null;
                  _context3.route = future;
                  _context3.resolver = cmpFactoryResolver;

                  if (_context3.outlet) {
                    // Activate the outlet when it has already been instantiated
                    // Otherwise it will get activated from its `ngOnInit` when instantiated
                    _context3.outlet.activateWith(future, cmpFactoryResolver);
                  }

                  this.activateChildRoutes(futureNode, null, _context3.children);
                }
              } else {
                // if we have a componentless route, we recurse but keep the same outlet map.
                this.activateChildRoutes(futureNode, null, parentContexts);
              }
            }
          }
        }]);

        return ActivateRoutes;
      }();

      function advanceActivatedRouteNodeAndItsChildren(node) {
        advanceActivatedRoute(node.value);
        node.children.forEach(advanceActivatedRouteNodeAndItsChildren);
      }

      function parentLoadedConfig(snapshot) {
        for (var s = snapshot.parent; s; s = s.parent) {
          var route = s.routeConfig;
          if (route && route._loadedConfig) return route._loadedConfig;
          if (route && route.component) return null;
        }

        return null;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var LoadedRouterConfig = function LoadedRouterConfig(routes, module) {
        _classCallCheck2(this, LoadedRouterConfig);

        this.routes = routes;
        this.module = module;
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Simple function check, but generic so type inference will flow. Example:
       *
       * function product(a: number, b: number) {
       *   return a * b;
       * }
       *
       * if (isFunction<product>(fn)) {
       *   return fn(1, 2);
       * } else {
       *   throw "Must provide the `product` function";
       * }
       */


      function isFunction(v) {
        return typeof v === 'function';
      }

      function isBoolean(v) {
        return typeof v === 'boolean';
      }

      function isUrlTree(v) {
        return v instanceof _UrlTree;
      }

      function isCanLoad(guard) {
        return guard && isFunction(guard.canLoad);
      }

      function isCanActivate(guard) {
        return guard && isFunction(guard.canActivate);
      }

      function isCanActivateChild(guard) {
        return guard && isFunction(guard.canActivateChild);
      }

      function isCanDeactivate(guard) {
        return guard && isFunction(guard.canDeactivate);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var INITIAL_VALUE = Symbol('INITIAL_VALUE');

      function prioritizedGuardValue() {
        return (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.switchMap)(function (obs) {
          return (0, rxjs__WEBPACK_IMPORTED_MODULE_6__.combineLatest)(obs.map(function (o) {
            return o.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.take)(1), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.startWith)(INITIAL_VALUE));
          })).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.scan)(function (acc, list) {
            var isPending = false;
            return list.reduce(function (innerAcc, val, i) {
              if (innerAcc !== INITIAL_VALUE) return innerAcc; // Toggle pending flag if any values haven't been set yet

              if (val === INITIAL_VALUE) isPending = true; // Any other return values are only valid if we haven't yet hit a pending
              // call. This guarantees that in the case of a guard at the bottom of the
              // tree that returns a redirect, we will wait for the higher priority
              // guard at the top to finish before performing the redirect.

              if (!isPending) {
                // Early return when we hit a `false` value as that should always
                // cancel navigation
                if (val === false) return val;

                if (i === list.length - 1 || isUrlTree(val)) {
                  return val;
                }
              }

              return innerAcc;
            }, acc);
          }, INITIAL_VALUE), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.filter)(function (item) {
            return item !== INITIAL_VALUE;
          }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (item) {
            return isUrlTree(item) ? item : item === true;
          }), //
          (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.take)(1));
        });
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * This component is used internally within the router to be a placeholder when an empty
       * router-outlet is needed. For example, with a config such as:
       *
       * `{path: 'parent', outlet: 'nav', children: [...]}`
       *
       * In order to render, there needs to be a component on this config, which will default
       * to this `EmptyOutletComponent`.
       */


      var _ɵEmptyOutletComponent = function _ɵEmptyOutletComponent() {
        _classCallCheck2(this, _ɵEmptyOutletComponent);
      };

      _ɵEmptyOutletComponent.ɵfac = function ɵEmptyOutletComponent_Factory(t) {
        return new (t || _ɵEmptyOutletComponent)();
      };

      _ɵEmptyOutletComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: _ɵEmptyOutletComponent,
        selectors: [["ng-component"]],
        decls: 1,
        vars: 0,
        template: function ɵEmptyOutletComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "router-outlet");
          }
        },
        directives: function directives() {
          return [_RouterOutlet];
        },
        encapsulation: 2
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_ɵEmptyOutletComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
          args: [{
            template: "<router-outlet></router-outlet>"
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function validateConfig(config) {
        var parentPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

        // forEach doesn't iterate undefined values
        for (var i = 0; i < config.length; i++) {
          var route = config[i];
          var fullPath = getFullPath(parentPath, route);
          validateNode(route, fullPath);
        }
      }

      function validateNode(route, fullPath) {
        if (typeof ngDevMode === 'undefined' || ngDevMode) {
          if (!route) {
            throw new Error("\n      Invalid configuration of route '".concat(fullPath, "': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    "));
          }

          if (Array.isArray(route)) {
            throw new Error("Invalid configuration of route '".concat(fullPath, "': Array cannot be specified"));
          }

          if (!route.component && !route.children && !route.loadChildren && route.outlet && route.outlet !== _PRIMARY_OUTLET) {
            throw new Error("Invalid configuration of route '".concat(fullPath, "': a componentless route without children or loadChildren cannot have a named outlet set"));
          }

          if (route.redirectTo && route.children) {
            throw new Error("Invalid configuration of route '".concat(fullPath, "': redirectTo and children cannot be used together"));
          }

          if (route.redirectTo && route.loadChildren) {
            throw new Error("Invalid configuration of route '".concat(fullPath, "': redirectTo and loadChildren cannot be used together"));
          }

          if (route.children && route.loadChildren) {
            throw new Error("Invalid configuration of route '".concat(fullPath, "': children and loadChildren cannot be used together"));
          }

          if (route.redirectTo && route.component) {
            throw new Error("Invalid configuration of route '".concat(fullPath, "': redirectTo and component cannot be used together"));
          }

          if (route.redirectTo && route.canActivate) {
            throw new Error("Invalid configuration of route '".concat(fullPath, "': redirectTo and canActivate cannot be used together. Redirects happen before activation ") + "so canActivate will never be executed.");
          }

          if (route.path && route.matcher) {
            throw new Error("Invalid configuration of route '".concat(fullPath, "': path and matcher cannot be used together"));
          }

          if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {
            throw new Error("Invalid configuration of route '".concat(fullPath, "'. One of the following must be provided: component, redirectTo, children or loadChildren"));
          }

          if (route.path === void 0 && route.matcher === void 0) {
            throw new Error("Invalid configuration of route '".concat(fullPath, "': routes must have either a path or a matcher specified"));
          }

          if (typeof route.path === 'string' && route.path.charAt(0) === '/') {
            throw new Error("Invalid configuration of route '".concat(fullPath, "': path cannot start with a slash"));
          }

          if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {
            var exp = "The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.";
            throw new Error("Invalid configuration of route '{path: \"".concat(fullPath, "\", redirectTo: \"").concat(route.redirectTo, "\"}': please provide 'pathMatch'. ").concat(exp));
          }

          if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {
            throw new Error("Invalid configuration of route '".concat(fullPath, "': pathMatch can only be set to 'prefix' or 'full'"));
          }
        }

        if (route.children) {
          validateConfig(route.children, fullPath);
        }
      }

      function getFullPath(parentPath, currentRoute) {
        if (!currentRoute) {
          return parentPath;
        }

        if (!parentPath && !currentRoute.path) {
          return '';
        } else if (parentPath && !currentRoute.path) {
          return "".concat(parentPath, "/");
        } else if (!parentPath && currentRoute.path) {
          return currentRoute.path;
        } else {
          return "".concat(parentPath, "/").concat(currentRoute.path);
        }
      }
      /**
       * Makes a copy of the config and adds any default required properties.
       */


      function standardizeConfig(r) {
        var children = r.children && r.children.map(standardizeConfig);
        var c = children ? Object.assign(Object.assign({}, r), {
          children: children
        }) : Object.assign({}, r);

        if (!c.component && (children || c.loadChildren) && c.outlet && c.outlet !== _PRIMARY_OUTLET) {
          c.component = _ɵEmptyOutletComponent;
        }

        return c;
      }
      /** Returns the `route.outlet` or PRIMARY_OUTLET if none exists. */


      function getOutlet(route) {
        return route.outlet || _PRIMARY_OUTLET;
      }
      /**
       * Sorts the `routes` such that the ones with an outlet matching `outletName` come first.
       * The order of the configs is otherwise preserved.
       */


      function sortByMatchingOutlets(routes, outletName) {
        var sortedConfig = routes.filter(function (r) {
          return getOutlet(r) === outletName;
        });
        sortedConfig.push.apply(sortedConfig, _toConsumableArray(routes.filter(function (r) {
          return getOutlet(r) !== outletName;
        })));
        return sortedConfig;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var noMatch = {
        matched: false,
        consumedSegments: [],
        lastChild: 0,
        parameters: {},
        positionalParamSegments: {}
      };

      function match(segmentGroup, route, segments) {
        var _a;

        if (route.path === '') {
          if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {
            return Object.assign({}, noMatch);
          }

          return {
            matched: true,
            consumedSegments: [],
            lastChild: 0,
            parameters: {},
            positionalParamSegments: {}
          };
        }

        var matcher = route.matcher || defaultUrlMatcher;
        var res = matcher(segments, segmentGroup, route);
        if (!res) return Object.assign({}, noMatch);
        var posParams = {};
        forEach(res.posParams, function (v, k) {
          posParams[k] = v.path;
        });
        var parameters = res.consumed.length > 0 ? Object.assign(Object.assign({}, posParams), res.consumed[res.consumed.length - 1].parameters) : posParams;
        return {
          matched: true,
          consumedSegments: res.consumed,
          lastChild: res.consumed.length,
          // TODO(atscott): investigate combining parameters and positionalParamSegments
          parameters: parameters,
          positionalParamSegments: (_a = res.posParams) !== null && _a !== void 0 ? _a : {}
        };
      }

      function split(segmentGroup, consumedSegments, slicedSegments, config) {
        var relativeLinkResolution = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'corrected';

        if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {
          var _s2 = new _UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new _UrlSegmentGroup(slicedSegments, segmentGroup.children)));

          _s2._sourceSegment = segmentGroup;
          _s2._segmentIndexShift = consumedSegments.length;
          return {
            segmentGroup: _s2,
            slicedSegments: []
          };
        }

        if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {
          var _s3 = new _UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, config, segmentGroup.children, relativeLinkResolution));

          _s3._sourceSegment = segmentGroup;
          _s3._segmentIndexShift = consumedSegments.length;
          return {
            segmentGroup: _s3,
            slicedSegments: slicedSegments
          };
        }

        var s = new _UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
        s._sourceSegment = segmentGroup;
        s._segmentIndexShift = consumedSegments.length;
        return {
          segmentGroup: s,
          slicedSegments: slicedSegments
        };
      }

      function addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, routes, children, relativeLinkResolution) {
        var res = {};

        var _iterator13 = _createForOfIteratorHelper(routes),
            _step13;

        try {
          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
            var r = _step13.value;

            if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {
              var s = new _UrlSegmentGroup([], {});
              s._sourceSegment = segmentGroup;

              if (relativeLinkResolution === 'legacy') {
                s._segmentIndexShift = segmentGroup.segments.length;
              } else {
                s._segmentIndexShift = consumedSegments.length;
              }

              res[getOutlet(r)] = s;
            }
          }
        } catch (err) {
          _iterator13.e(err);
        } finally {
          _iterator13.f();
        }

        return Object.assign(Object.assign({}, children), res);
      }

      function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {
        var res = {};
        res[_PRIMARY_OUTLET] = primarySegment;
        primarySegment._sourceSegment = segmentGroup;
        primarySegment._segmentIndexShift = consumedSegments.length;

        var _iterator14 = _createForOfIteratorHelper(routes),
            _step14;

        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var r = _step14.value;

            if (r.path === '' && getOutlet(r) !== _PRIMARY_OUTLET) {
              var s = new _UrlSegmentGroup([], {});
              s._sourceSegment = segmentGroup;
              s._segmentIndexShift = consumedSegments.length;
              res[getOutlet(r)] = s;
            }
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }

        return res;
      }

      function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {
        return routes.some(function (r) {
          return emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== _PRIMARY_OUTLET;
        });
      }

      function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {
        return routes.some(function (r) {
          return emptyPathMatch(segmentGroup, slicedSegments, r);
        });
      }

      function emptyPathMatch(segmentGroup, slicedSegments, r) {
        if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {
          return false;
        }

        return r.path === '';
      }
      /**
       * Determines if `route` is a path match for the `rawSegment`, `segments`, and `outlet` without
       * verifying that its children are a full match for the remainder of the `rawSegment` children as
       * well.
       */


      function isImmediateMatch(route, rawSegment, segments, outlet) {
        // We allow matches to empty paths when the outlets differ so we can match a url like `/(b:b)` to
        // a config like
        // * `{path: '', children: [{path: 'b', outlet: 'b'}]}`
        // or even
        // * `{path: '', outlet: 'a', children: [{path: 'b', outlet: 'b'}]`
        //
        // The exception here is when the segment outlet is for the primary outlet. This would
        // result in a match inside the named outlet because all children there are written as primary
        // outlets. So we need to prevent child named outlet matches in a url like `/b` in a config like
        // * `{path: '', outlet: 'x' children: [{path: 'b'}]}`
        // This should only match if the url is `/(x:b)`.
        if (getOutlet(route) !== outlet && (outlet === _PRIMARY_OUTLET || !emptyPathMatch(rawSegment, segments, route))) {
          return false;
        }

        if (route.path === '**') {
          return true;
        }

        return match(rawSegment, route, segments).matched;
      }

      function noLeftoversInUrl(segmentGroup, segments, outlet) {
        return segments.length === 0 && !segmentGroup.children[outlet];
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var NoMatch = function NoMatch(segmentGroup) {
        _classCallCheck2(this, NoMatch);

        this.segmentGroup = segmentGroup || null;
      };

      var AbsoluteRedirect = function AbsoluteRedirect(urlTree) {
        _classCallCheck2(this, AbsoluteRedirect);

        this.urlTree = urlTree;
      };

      function noMatch$1(segmentGroup) {
        return new rxjs__WEBPACK_IMPORTED_MODULE_11__.Observable(function (obs) {
          return obs.error(new NoMatch(segmentGroup));
        });
      }

      function absoluteRedirect(newTree) {
        return new rxjs__WEBPACK_IMPORTED_MODULE_11__.Observable(function (obs) {
          return obs.error(new AbsoluteRedirect(newTree));
        });
      }

      function namedOutletsRedirect(redirectTo) {
        return new rxjs__WEBPACK_IMPORTED_MODULE_11__.Observable(function (obs) {
          return obs.error(new Error("Only absolute redirects can have named outlets. redirectTo: '".concat(redirectTo, "'")));
        });
      }

      function canLoadFails(route) {
        return new rxjs__WEBPACK_IMPORTED_MODULE_11__.Observable(function (obs) {
          return obs.error(navigationCancelingError("Cannot load children because the guard of the route \"path: '".concat(route.path, "'\" returned false")));
        });
      }
      /**
       * Returns the `UrlTree` with the redirection applied.
       *
       * Lazy modules are loaded along the way.
       */


      function applyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {
        return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();
      }

      var ApplyRedirects = /*#__PURE__*/function () {
        function ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {
          _classCallCheck2(this, ApplyRedirects);

          this.configLoader = configLoader;
          this.urlSerializer = urlSerializer;
          this.urlTree = urlTree;
          this.config = config;
          this.allowRedirects = true;
          this.ngModule = moduleInjector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModuleRef);
        }

        _createClass2(ApplyRedirects, [{
          key: "apply",
          value: function apply() {
            var _this142 = this;

            var splitGroup = split(this.urlTree.root, [], [], this.config).segmentGroup; // TODO(atscott): creating a new segment removes the _sourceSegment _segmentIndexShift, which is
            // only necessary to prevent failures in tests which assert exact object matches. The `split` is
            // now shared between `applyRedirects` and `recognize` but only the `recognize` step needs these
            // properties. Before the implementations were merged, the `applyRedirects` would not assign
            // them. We should be able to remove this logic as a "breaking change" but should do some more
            // investigation into the failures first.

            var rootSegmentGroup = new _UrlSegmentGroup(splitGroup.segments, splitGroup.children);
            var expanded$ = this.expandSegmentGroup(this.ngModule, this.config, rootSegmentGroup, _PRIMARY_OUTLET);
            var urlTrees$ = expanded$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (rootSegmentGroup) {
              return _this142.createUrlTree(squashSegmentGroup(rootSegmentGroup), _this142.urlTree.queryParams, _this142.urlTree.fragment);
            }));
            return urlTrees$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.catchError)(function (e) {
              if (e instanceof AbsoluteRedirect) {
                // After an absolute redirect we do not apply any more redirects!
                // If this implementation changes, update the documentation note in `redirectTo`.
                _this142.allowRedirects = false; // we need to run matching, so we can fetch all lazy-loaded modules

                return _this142.match(e.urlTree);
              }

              if (e instanceof NoMatch) {
                throw _this142.noMatchError(e);
              }

              throw e;
            }));
          }
        }, {
          key: "match",
          value: function match(tree) {
            var _this143 = this;

            var expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, _PRIMARY_OUTLET);
            var mapped$ = expanded$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (rootSegmentGroup) {
              return _this143.createUrlTree(squashSegmentGroup(rootSegmentGroup), tree.queryParams, tree.fragment);
            }));
            return mapped$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.catchError)(function (e) {
              if (e instanceof NoMatch) {
                throw _this143.noMatchError(e);
              }

              throw e;
            }));
          }
        }, {
          key: "noMatchError",
          value: function noMatchError(e) {
            return new Error("Cannot match any routes. URL Segment: '".concat(e.segmentGroup, "'"));
          }
        }, {
          key: "createUrlTree",
          value: function createUrlTree(rootCandidate, queryParams, fragment) {
            var root = rootCandidate.segments.length > 0 ? new _UrlSegmentGroup([], _defineProperty({}, _PRIMARY_OUTLET, rootCandidate)) : rootCandidate;
            return new _UrlTree(root, queryParams, fragment);
          }
        }, {
          key: "expandSegmentGroup",
          value: function expandSegmentGroup(ngModule, routes, segmentGroup, outlet) {
            if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
              return this.expandChildren(ngModule, routes, segmentGroup).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (children) {
                return new _UrlSegmentGroup([], children);
              }));
            }

            return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);
          } // Recursively expand segment groups for all the child outlets

        }, {
          key: "expandChildren",
          value: function expandChildren(ngModule, routes, segmentGroup) {
            var _this144 = this;

            // Expand outlets one at a time, starting with the primary outlet. We need to do it this way
            // because an absolute redirect from the primary outlet takes precedence.
            var childOutlets = [];

            for (var _i27 = 0, _Object$keys2 = Object.keys(segmentGroup.children); _i27 < _Object$keys2.length; _i27++) {
              var child = _Object$keys2[_i27];

              if (child === 'primary') {
                childOutlets.unshift(child);
              } else {
                childOutlets.push(child);
              }
            }

            return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(childOutlets).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.concatMap)(function (childOutlet) {
              var child = segmentGroup.children[childOutlet]; // Sort the routes so routes with outlets that match the segment appear
              // first, followed by routes for other outlets, which might match if they have an
              // empty path.

              var sortedRoutes = sortByMatchingOutlets(routes, childOutlet);
              return _this144.expandSegmentGroup(ngModule, sortedRoutes, child, childOutlet).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (s) {
                return {
                  segment: s,
                  outlet: childOutlet
                };
              }));
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.scan)(function (children, expandedChild) {
              children[expandedChild.outlet] = expandedChild.segment;
              return children;
            }, {}), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_14__.last)());
          }
        }, {
          key: "expandSegment",
          value: function expandSegment(ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {
            var _this145 = this;

            return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(routes).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.concatMap)(function (r) {
              var expanded$ = _this145.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);

              return expanded$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.catchError)(function (e) {
                if (e instanceof NoMatch) {
                  return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(null);
                }

                throw e;
              }));
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.first)(function (s) {
              return !!s;
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.catchError)(function (e, _) {
              if (e instanceof rxjs__WEBPACK_IMPORTED_MODULE_16__.EmptyError || e.name === 'EmptyError') {
                if (noLeftoversInUrl(segmentGroup, segments, outlet)) {
                  return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(new _UrlSegmentGroup([], {}));
                }

                throw new NoMatch(segmentGroup);
              }

              throw e;
            }));
          }
        }, {
          key: "expandSegmentAgainstRoute",
          value: function expandSegmentAgainstRoute(ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {
            if (!isImmediateMatch(route, segmentGroup, paths, outlet)) {
              return noMatch$1(segmentGroup);
            }

            if (route.redirectTo === undefined) {
              return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths, outlet);
            }

            if (allowRedirects && this.allowRedirects) {
              return this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet);
            }

            return noMatch$1(segmentGroup);
          }
        }, {
          key: "expandSegmentAgainstRouteUsingRedirect",
          value: function expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet) {
            if (route.path === '**') {
              return this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet);
            }

            return this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);
          }
        }, {
          key: "expandWildCardWithParamsAgainstRouteUsingRedirect",
          value: function expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet) {
            var _this146 = this;

            var newTree = this.applyRedirectCommands([], route.redirectTo, {});

            if (route.redirectTo.startsWith('/')) {
              return absoluteRedirect(newTree);
            }

            return this.lineralizeSegments(route, newTree).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(function (newSegments) {
              var group = new _UrlSegmentGroup(newSegments, {});
              return _this146.expandSegment(ngModule, group, routes, newSegments, outlet, false);
            }));
          }
        }, {
          key: "expandRegularSegmentAgainstRouteUsingRedirect",
          value: function expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet) {
            var _this147 = this;

            var _match = match(segmentGroup, route, segments),
                matched = _match.matched,
                consumedSegments = _match.consumedSegments,
                lastChild = _match.lastChild,
                positionalParamSegments = _match.positionalParamSegments;

            if (!matched) return noMatch$1(segmentGroup);
            var newTree = this.applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments);

            if (route.redirectTo.startsWith('/')) {
              return absoluteRedirect(newTree);
            }

            return this.lineralizeSegments(route, newTree).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(function (newSegments) {
              return _this147.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);
            }));
          }
        }, {
          key: "matchSegmentAgainstRoute",
          value: function matchSegmentAgainstRoute(ngModule, rawSegmentGroup, route, segments, outlet) {
            var _this148 = this;

            if (route.path === '**') {
              if (route.loadChildren) {
                var loaded$ = route._loadedConfig ? (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(route._loadedConfig) : this.configLoader.load(ngModule.injector, route);
                return loaded$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (cfg) {
                  route._loadedConfig = cfg;
                  return new _UrlSegmentGroup(segments, {});
                }));
              }

              return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(new _UrlSegmentGroup(segments, {}));
            }

            var _match2 = match(rawSegmentGroup, route, segments),
                matched = _match2.matched,
                consumedSegments = _match2.consumedSegments,
                lastChild = _match2.lastChild;

            if (!matched) return noMatch$1(rawSegmentGroup);
            var rawSlicedSegments = segments.slice(lastChild);
            var childConfig$ = this.getChildConfig(ngModule, route, segments);
            return childConfig$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(function (routerConfig) {
              var childModule = routerConfig.module;
              var childConfig = routerConfig.routes;

              var _split = split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig),
                  splitSegmentGroup = _split.segmentGroup,
                  slicedSegments = _split.slicedSegments; // See comment on the other call to `split` about why this is necessary.


              var segmentGroup = new _UrlSegmentGroup(splitSegmentGroup.segments, splitSegmentGroup.children);

              if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
                var _expanded$ = _this148.expandChildren(childModule, childConfig, segmentGroup);

                return _expanded$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (children) {
                  return new _UrlSegmentGroup(consumedSegments, children);
                }));
              }

              if (childConfig.length === 0 && slicedSegments.length === 0) {
                return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(new _UrlSegmentGroup(consumedSegments, {}));
              }

              var matchedOnOutlet = getOutlet(route) === outlet;

              var expanded$ = _this148.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, matchedOnOutlet ? _PRIMARY_OUTLET : outlet, true);

              return expanded$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (cs) {
                return new _UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children);
              }));
            }));
          }
        }, {
          key: "getChildConfig",
          value: function getChildConfig(ngModule, route, segments) {
            var _this149 = this;

            if (route.children) {
              // The children belong to the same module
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(new LoadedRouterConfig(route.children, ngModule));
            }

            if (route.loadChildren) {
              // lazy children belong to the loaded module
              if (route._loadedConfig !== undefined) {
                return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(route._loadedConfig);
              }

              return this.runCanLoadGuards(ngModule.injector, route, segments).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(function (shouldLoadResult) {
                if (shouldLoadResult) {
                  return _this149.configLoader.load(ngModule.injector, route).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (cfg) {
                    route._loadedConfig = cfg;
                    return cfg;
                  }));
                }

                return canLoadFails(route);
              }));
            }

            return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(new LoadedRouterConfig([], ngModule));
          }
        }, {
          key: "runCanLoadGuards",
          value: function runCanLoadGuards(moduleInjector, route, segments) {
            var _this150 = this;

            var canLoad = route.canLoad;
            if (!canLoad || canLoad.length === 0) return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(true);
            var canLoadObservables = canLoad.map(function (injectionToken) {
              var guard = moduleInjector.get(injectionToken);
              var guardVal;

              if (isCanLoad(guard)) {
                guardVal = guard.canLoad(route, segments);
              } else if (isFunction(guard)) {
                guardVal = guard(route, segments);
              } else {
                throw new Error('Invalid CanLoad guard');
              }

              return wrapIntoObservable(guardVal);
            });
            return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(canLoadObservables).pipe(prioritizedGuardValue(), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(function (result) {
              if (!isUrlTree(result)) return;
              var error = navigationCancelingError("Redirecting to \"".concat(_this150.urlSerializer.serialize(result), "\""));
              error.url = result;
              throw error;
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (result) {
              return result === true;
            }));
          }
        }, {
          key: "lineralizeSegments",
          value: function lineralizeSegments(route, urlTree) {
            var res = [];
            var c = urlTree.root;

            while (true) {
              res = res.concat(c.segments);

              if (c.numberOfChildren === 0) {
                return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(res);
              }

              if (c.numberOfChildren > 1 || !c.children[_PRIMARY_OUTLET]) {
                return namedOutletsRedirect(route.redirectTo);
              }

              c = c.children[_PRIMARY_OUTLET];
            }
          }
        }, {
          key: "applyRedirectCommands",
          value: function applyRedirectCommands(segments, redirectTo, posParams) {
            return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);
          }
        }, {
          key: "applyRedirectCreatreUrlTree",
          value: function applyRedirectCreatreUrlTree(redirectTo, urlTree, segments, posParams) {
            var newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);
            return new _UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);
          }
        }, {
          key: "createQueryParams",
          value: function createQueryParams(redirectToParams, actualParams) {
            var res = {};
            forEach(redirectToParams, function (v, k) {
              var copySourceValue = typeof v === 'string' && v.startsWith(':');

              if (copySourceValue) {
                var sourceName = v.substring(1);
                res[k] = actualParams[sourceName];
              } else {
                res[k] = v;
              }
            });
            return res;
          }
        }, {
          key: "createSegmentGroup",
          value: function createSegmentGroup(redirectTo, group, segments, posParams) {
            var _this151 = this;

            var updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);
            var children = {};
            forEach(group.children, function (child, name) {
              children[name] = _this151.createSegmentGroup(redirectTo, child, segments, posParams);
            });
            return new _UrlSegmentGroup(updatedSegments, children);
          }
        }, {
          key: "createSegments",
          value: function createSegments(redirectTo, redirectToSegments, actualSegments, posParams) {
            var _this152 = this;

            return redirectToSegments.map(function (s) {
              return s.path.startsWith(':') ? _this152.findPosParam(redirectTo, s, posParams) : _this152.findOrReturn(s, actualSegments);
            });
          }
        }, {
          key: "findPosParam",
          value: function findPosParam(redirectTo, redirectToUrlSegment, posParams) {
            var pos = posParams[redirectToUrlSegment.path.substring(1)];
            if (!pos) throw new Error("Cannot redirect to '".concat(redirectTo, "'. Cannot find '").concat(redirectToUrlSegment.path, "'."));
            return pos;
          }
        }, {
          key: "findOrReturn",
          value: function findOrReturn(redirectToUrlSegment, actualSegments) {
            var idx = 0;

            var _iterator15 = _createForOfIteratorHelper(actualSegments),
                _step15;

            try {
              for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
                var s = _step15.value;

                if (s.path === redirectToUrlSegment.path) {
                  actualSegments.splice(idx);
                  return s;
                }

                idx++;
              }
            } catch (err) {
              _iterator15.e(err);
            } finally {
              _iterator15.f();
            }

            return redirectToUrlSegment;
          }
        }]);

        return ApplyRedirects;
      }();
      /**
       * When possible, merges the primary outlet child into the parent `UrlSegmentGroup`.
       *
       * When a segment group has only one child which is a primary outlet, merges that child into the
       * parent. That is, the child segment group's segments are merged into the `s` and the child's
       * children become the children of `s`. Think of this like a 'squash', merging the child segment
       * group into the parent.
       */


      function mergeTrivialChildren(s) {
        if (s.numberOfChildren === 1 && s.children[_PRIMARY_OUTLET]) {
          var c = s.children[_PRIMARY_OUTLET];
          return new _UrlSegmentGroup(s.segments.concat(c.segments), c.children);
        }

        return s;
      }
      /**
       * Recursively merges primary segment children into their parents and also drops empty children
       * (those which have no segments and no children themselves). The latter prevents serializing a
       * group into something like `/a(aux:)`, where `aux` is an empty child segment.
       */


      function squashSegmentGroup(segmentGroup) {
        var newChildren = {};

        for (var _i28 = 0, _Object$keys3 = Object.keys(segmentGroup.children); _i28 < _Object$keys3.length; _i28++) {
          var childOutlet = _Object$keys3[_i28];
          var child = segmentGroup.children[childOutlet];
          var childCandidate = squashSegmentGroup(child); // don't add empty children

          if (childCandidate.segments.length > 0 || childCandidate.hasChildren()) {
            newChildren[childOutlet] = childCandidate;
          }
        }

        var s = new _UrlSegmentGroup(segmentGroup.segments, newChildren);
        return mergeTrivialChildren(s);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function applyRedirects$1(moduleInjector, configLoader, urlSerializer, config) {
        return (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.switchMap)(function (t) {
          return applyRedirects(moduleInjector, configLoader, urlSerializer, t.extractedUrl, config).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (urlAfterRedirects) {
            return Object.assign(Object.assign({}, t), {
              urlAfterRedirects: urlAfterRedirects
            });
          }));
        });
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var CanActivate = function CanActivate(path) {
        _classCallCheck2(this, CanActivate);

        this.path = path;
        this.route = this.path[this.path.length - 1];
      };

      var CanDeactivate = function CanDeactivate(component, route) {
        _classCallCheck2(this, CanDeactivate);

        this.component = component;
        this.route = route;
      };

      function getAllRouteGuards(future, curr, parentContexts) {
        var futureRoot = future._root;
        var currRoot = curr ? curr._root : null;
        return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);
      }

      function getCanActivateChild(p) {
        var canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;
        if (!canActivateChild || canActivateChild.length === 0) return null;
        return {
          node: p,
          guards: canActivateChild
        };
      }

      function getToken(token, snapshot, moduleInjector) {
        var config = getClosestLoadedConfig(snapshot);
        var injector = config ? config.module.injector : moduleInjector;
        return injector.get(token);
      }

      function getClosestLoadedConfig(snapshot) {
        if (!snapshot) return null;

        for (var s = snapshot.parent; s; s = s.parent) {
          var route = s.routeConfig;
          if (route && route._loadedConfig) return route._loadedConfig;
        }

        return null;
      }

      function getChildRouteGuards(futureNode, currNode, contexts, futurePath) {
        var checks = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
          canDeactivateChecks: [],
          canActivateChecks: []
        };
        var prevChildren = nodeChildrenAsMap(currNode); // Process the children of the future route

        futureNode.children.forEach(function (c) {
          getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);
          delete prevChildren[c.value.outlet];
        }); // Process any children left from the current route (not active for the future route)

        forEach(prevChildren, function (v, k) {
          return deactivateRouteAndItsChildren(v, contexts.getContext(k), checks);
        });
        return checks;
      }

      function getRouteGuards(futureNode, currNode, parentContexts, futurePath) {
        var checks = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
          canDeactivateChecks: [],
          canActivateChecks: []
        };
        var future = futureNode.value;
        var curr = currNode ? currNode.value : null;
        var context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null; // reusing the node

        if (curr && future.routeConfig === curr.routeConfig) {
          var shouldRun = shouldRunGuardsAndResolvers(curr, future, future.routeConfig.runGuardsAndResolvers);

          if (shouldRun) {
            checks.canActivateChecks.push(new CanActivate(futurePath));
          } else {
            // we need to set the data
            future.data = curr.data;
            future._resolvedData = curr._resolvedData;
          } // If we have a component, we need to go through an outlet.


          if (future.component) {
            getChildRouteGuards(futureNode, currNode, context ? context.children : null, futurePath, checks); // if we have a componentless route, we recurse but keep the same outlet map.
          } else {
            getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);
          }

          if (shouldRun && context && context.outlet && context.outlet.isActivated) {
            checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, curr));
          }
        } else {
          if (curr) {
            deactivateRouteAndItsChildren(currNode, context, checks);
          }

          checks.canActivateChecks.push(new CanActivate(futurePath)); // If we have a component, we need to go through an outlet.

          if (future.component) {
            getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks); // if we have a componentless route, we recurse but keep the same outlet map.
          } else {
            getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);
          }
        }

        return checks;
      }

      function shouldRunGuardsAndResolvers(curr, future, mode) {
        if (typeof mode === 'function') {
          return mode(curr, future);
        }

        switch (mode) {
          case 'pathParamsChange':
            return !equalPath(curr.url, future.url);

          case 'pathParamsOrQueryParamsChange':
            return !equalPath(curr.url, future.url) || !shallowEqual(curr.queryParams, future.queryParams);

          case 'always':
            return true;

          case 'paramsOrQueryParamsChange':
            return !equalParamsAndUrlSegments(curr, future) || !shallowEqual(curr.queryParams, future.queryParams);

          case 'paramsChange':
          default:
            return !equalParamsAndUrlSegments(curr, future);
        }
      }

      function deactivateRouteAndItsChildren(route, context, checks) {
        var children = nodeChildrenAsMap(route);
        var r = route.value;
        forEach(children, function (node, childName) {
          if (!r.component) {
            deactivateRouteAndItsChildren(node, context, checks);
          } else if (context) {
            deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);
          } else {
            deactivateRouteAndItsChildren(node, null, checks);
          }
        });

        if (!r.component) {
          checks.canDeactivateChecks.push(new CanDeactivate(null, r));
        } else if (context && context.outlet && context.outlet.isActivated) {
          checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));
        } else {
          checks.canDeactivateChecks.push(new CanDeactivate(null, r));
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function checkGuards(moduleInjector, forwardEvent) {
        return (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(function (t) {
          var targetSnapshot = t.targetSnapshot,
              currentSnapshot = t.currentSnapshot,
              _t$guards = t.guards,
              canActivateChecks = _t$guards.canActivateChecks,
              canDeactivateChecks = _t$guards.canDeactivateChecks;

          if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {
            return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(Object.assign(Object.assign({}, t), {
              guardsResult: true
            }));
          }

          return runCanDeactivateChecks(canDeactivateChecks, targetSnapshot, currentSnapshot, moduleInjector).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(function (canDeactivate) {
            return canDeactivate && isBoolean(canDeactivate) ? runCanActivateChecks(targetSnapshot, canActivateChecks, moduleInjector, forwardEvent) : (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(canDeactivate);
          }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (guardsResult) {
            return Object.assign(Object.assign({}, t), {
              guardsResult: guardsResult
            });
          }));
        });
      }

      function runCanDeactivateChecks(checks, futureRSS, currRSS, moduleInjector) {
        return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(checks).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(function (check) {
          return runCanDeactivate(check.component, check.route, currRSS, futureRSS, moduleInjector);
        }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.first)(function (result) {
          return result !== true;
        }, true));
      }

      function runCanActivateChecks(futureSnapshot, checks, moduleInjector, forwardEvent) {
        return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(checks).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.concatMap)(function (check) {
          return (0, rxjs__WEBPACK_IMPORTED_MODULE_19__.concat)(fireChildActivationStart(check.route.parent, forwardEvent), fireActivationStart(check.route, forwardEvent), runCanActivateChild(futureSnapshot, check.path, moduleInjector), runCanActivate(futureSnapshot, check.route, moduleInjector));
        }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.first)(function (result) {
          return result !== true;
        }, true));
      }
      /**
       * This should fire off `ActivationStart` events for each route being activated at this
       * level.
       * In other words, if you're activating `a` and `b` below, `path` will contain the
       * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always
       * return
       * `true` so checks continue to run.
       */


      function fireActivationStart(snapshot, forwardEvent) {
        if (snapshot !== null && forwardEvent) {
          forwardEvent(new _ActivationStart(snapshot));
        }

        return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(true);
      }
      /**
       * This should fire off `ChildActivationStart` events for each route being activated at this
       * level.
       * In other words, if you're activating `a` and `b` below, `path` will contain the
       * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always
       * return
       * `true` so checks continue to run.
       */


      function fireChildActivationStart(snapshot, forwardEvent) {
        if (snapshot !== null && forwardEvent) {
          forwardEvent(new _ChildActivationStart(snapshot));
        }

        return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(true);
      }

      function runCanActivate(futureRSS, futureARS, moduleInjector) {
        var canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;
        if (!canActivate || canActivate.length === 0) return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(true);
        var canActivateObservables = canActivate.map(function (c) {
          return (0, rxjs__WEBPACK_IMPORTED_MODULE_20__.defer)(function () {
            var guard = getToken(c, futureARS, moduleInjector);
            var observable;

            if (isCanActivate(guard)) {
              observable = wrapIntoObservable(guard.canActivate(futureARS, futureRSS));
            } else if (isFunction(guard)) {
              observable = wrapIntoObservable(guard(futureARS, futureRSS));
            } else {
              throw new Error('Invalid CanActivate guard');
            }

            return observable.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.first)());
          });
        });
        return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(canActivateObservables).pipe(prioritizedGuardValue());
      }

      function runCanActivateChild(futureRSS, path, moduleInjector) {
        var futureARS = path[path.length - 1];
        var canActivateChildGuards = path.slice(0, path.length - 1).reverse().map(function (p) {
          return getCanActivateChild(p);
        }).filter(function (_) {
          return _ !== null;
        });
        var canActivateChildGuardsMapped = canActivateChildGuards.map(function (d) {
          return (0, rxjs__WEBPACK_IMPORTED_MODULE_20__.defer)(function () {
            var guardsMapped = d.guards.map(function (c) {
              var guard = getToken(c, d.node, moduleInjector);
              var observable;

              if (isCanActivateChild(guard)) {
                observable = wrapIntoObservable(guard.canActivateChild(futureARS, futureRSS));
              } else if (isFunction(guard)) {
                observable = wrapIntoObservable(guard(futureARS, futureRSS));
              } else {
                throw new Error('Invalid CanActivateChild guard');
              }

              return observable.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.first)());
            });
            return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(guardsMapped).pipe(prioritizedGuardValue());
          });
        });
        return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());
      }

      function runCanDeactivate(component, currARS, currRSS, futureRSS, moduleInjector) {
        var canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;
        if (!canDeactivate || canDeactivate.length === 0) return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(true);
        var canDeactivateObservables = canDeactivate.map(function (c) {
          var guard = getToken(c, currARS, moduleInjector);
          var observable;

          if (isCanDeactivate(guard)) {
            observable = wrapIntoObservable(guard.canDeactivate(component, currARS, currRSS, futureRSS));
          } else if (isFunction(guard)) {
            observable = wrapIntoObservable(guard(component, currARS, currRSS, futureRSS));
          } else {
            throw new Error('Invalid CanDeactivate guard');
          }

          return observable.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.first)());
        });
        return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(canDeactivateObservables).pipe(prioritizedGuardValue());
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var NoMatch$1 = function NoMatch$1() {
        _classCallCheck2(this, NoMatch$1);
      };

      function newObservableError(e) {
        // TODO(atscott): This pattern is used throughout the router code and can be `throwError` instead.
        return new rxjs__WEBPACK_IMPORTED_MODULE_11__.Observable(function (obs) {
          return obs.error(e);
        });
      }

      function recognize(rootComponentType, config, urlTree, url) {
        var paramsInheritanceStrategy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'emptyOnly';
        var relativeLinkResolution = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'legacy';

        try {
          var result = new Recognizer(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution).recognize();

          if (result === null) {
            return newObservableError(new NoMatch$1());
          } else {
            return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(result);
          }
        } catch (e) {
          // Catch the potential error from recognize due to duplicate outlet matches and return as an
          // `Observable` error instead.
          return newObservableError(e);
        }
      }

      var Recognizer = /*#__PURE__*/function () {
        function Recognizer(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution) {
          _classCallCheck2(this, Recognizer);

          this.rootComponentType = rootComponentType;
          this.config = config;
          this.urlTree = urlTree;
          this.url = url;
          this.paramsInheritanceStrategy = paramsInheritanceStrategy;
          this.relativeLinkResolution = relativeLinkResolution;
        }

        _createClass2(Recognizer, [{
          key: "recognize",
          value: function recognize() {
            var rootSegmentGroup = split(this.urlTree.root, [], [], this.config.filter(function (c) {
              return c.redirectTo === undefined;
            }), this.relativeLinkResolution).segmentGroup;
            var children = this.processSegmentGroup(this.config, rootSegmentGroup, _PRIMARY_OUTLET);

            if (children === null) {
              return null;
            } // Use Object.freeze to prevent readers of the Router state from modifying it outside of a
            // navigation, resulting in the router being out of sync with the browser.


            var root = new _ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(Object.assign({}, this.urlTree.queryParams)), this.urlTree.fragment, {}, _PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});
            var rootNode = new TreeNode(root, children);
            var routeState = new _RouterStateSnapshot(this.url, rootNode);
            this.inheritParamsAndData(routeState._root);
            return routeState;
          }
        }, {
          key: "inheritParamsAndData",
          value: function inheritParamsAndData(routeNode) {
            var _this153 = this;

            var route = routeNode.value;
            var i = inheritedParamsDataResolve(route, this.paramsInheritanceStrategy);
            route.params = Object.freeze(i.params);
            route.data = Object.freeze(i.data);
            routeNode.children.forEach(function (n) {
              return _this153.inheritParamsAndData(n);
            });
          }
        }, {
          key: "processSegmentGroup",
          value: function processSegmentGroup(config, segmentGroup, outlet) {
            if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
              return this.processChildren(config, segmentGroup);
            }

            return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);
          }
          /**
           * Matches every child outlet in the `segmentGroup` to a `Route` in the config. Returns `null` if
           * we cannot find a match for _any_ of the children.
           *
           * @param config - The `Routes` to match against
           * @param segmentGroup - The `UrlSegmentGroup` whose children need to be matched against the
           *     config.
           */

        }, {
          key: "processChildren",
          value: function processChildren(config, segmentGroup) {
            var children = [];

            for (var _i29 = 0, _Object$keys4 = Object.keys(segmentGroup.children); _i29 < _Object$keys4.length; _i29++) {
              var childOutlet = _Object$keys4[_i29];
              var child = segmentGroup.children[childOutlet]; // Sort the config so that routes with outlets that match the one being activated appear
              // first, followed by routes for other outlets, which might match if they have an empty path.

              var sortedConfig = sortByMatchingOutlets(config, childOutlet);
              var outletChildren = this.processSegmentGroup(sortedConfig, child, childOutlet);

              if (outletChildren === null) {
                // Configs must match all segment children so because we did not find a match for this
                // outlet, return `null`.
                return null;
              }

              children.push.apply(children, _toConsumableArray(outletChildren));
            } // Because we may have matched two outlets to the same empty path segment, we can have multiple
            // activated results for the same outlet. We should merge the children of these results so the
            // final return value is only one `TreeNode` per outlet.


            var mergedChildren = mergeEmptyPathMatches(children);

            if (typeof ngDevMode === 'undefined' || ngDevMode) {
              // This should really never happen - we are only taking the first match for each outlet and
              // merge the empty path matches.
              checkOutletNameUniqueness(mergedChildren);
            }

            sortActivatedRouteSnapshots(mergedChildren);
            return mergedChildren;
          }
        }, {
          key: "processSegment",
          value: function processSegment(config, segmentGroup, segments, outlet) {
            var _iterator16 = _createForOfIteratorHelper(config),
                _step16;

            try {
              for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
                var r = _step16.value;
                var children = this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);

                if (children !== null) {
                  return children;
                }
              }
            } catch (err) {
              _iterator16.e(err);
            } finally {
              _iterator16.f();
            }

            if (noLeftoversInUrl(segmentGroup, segments, outlet)) {
              return [];
            }

            return null;
          }
        }, {
          key: "processSegmentAgainstRoute",
          value: function processSegmentAgainstRoute(route, rawSegment, segments, outlet) {
            if (route.redirectTo || !isImmediateMatch(route, rawSegment, segments, outlet)) return null;
            var snapshot;
            var consumedSegments = [];
            var rawSlicedSegments = [];

            if (route.path === '**') {
              var params = segments.length > 0 ? last(segments).parameters : {};
              snapshot = new _ActivatedRouteSnapshot(segments, params, Object.freeze(Object.assign({}, this.urlTree.queryParams)), this.urlTree.fragment, getData(route), getOutlet(route), route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));
            } else {
              var result = match(rawSegment, route, segments);

              if (!result.matched) {
                return null;
              }

              consumedSegments = result.consumedSegments;
              rawSlicedSegments = segments.slice(result.lastChild);
              snapshot = new _ActivatedRouteSnapshot(consumedSegments, result.parameters, Object.freeze(Object.assign({}, this.urlTree.queryParams)), this.urlTree.fragment, getData(route), getOutlet(route), route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));
            }

            var childConfig = getChildConfig(route);

            var _split2 = split(rawSegment, consumedSegments, rawSlicedSegments, // Filter out routes with redirectTo because we are trying to create activated route
            // snapshots and don't handle redirects here. That should have been done in
            // `applyRedirects`.
            childConfig.filter(function (c) {
              return c.redirectTo === undefined;
            }), this.relativeLinkResolution),
                segmentGroup = _split2.segmentGroup,
                slicedSegments = _split2.slicedSegments;

            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
              var _children3 = this.processChildren(childConfig, segmentGroup);

              if (_children3 === null) {
                return null;
              }

              return [new TreeNode(snapshot, _children3)];
            }

            if (childConfig.length === 0 && slicedSegments.length === 0) {
              return [new TreeNode(snapshot, [])];
            }

            var matchedOnOutlet = getOutlet(route) === outlet; // If we matched a config due to empty path match on a different outlet, we need to continue
            // passing the current outlet for the segment rather than switch to PRIMARY.
            // Note that we switch to primary when we have a match because outlet configs look like this:
            // {path: 'a', outlet: 'a', children: [
            //  {path: 'b', component: B},
            //  {path: 'c', component: C},
            // ]}
            // Notice that the children of the named outlet are configured with the primary outlet

            var children = this.processSegment(childConfig, segmentGroup, slicedSegments, matchedOnOutlet ? _PRIMARY_OUTLET : outlet);

            if (children === null) {
              return null;
            }

            return [new TreeNode(snapshot, children)];
          }
        }]);

        return Recognizer;
      }();

      function sortActivatedRouteSnapshots(nodes) {
        nodes.sort(function (a, b) {
          if (a.value.outlet === _PRIMARY_OUTLET) return -1;
          if (b.value.outlet === _PRIMARY_OUTLET) return 1;
          return a.value.outlet.localeCompare(b.value.outlet);
        });
      }

      function getChildConfig(route) {
        if (route.children) {
          return route.children;
        }

        if (route.loadChildren) {
          return route._loadedConfig.routes;
        }

        return [];
      }

      function hasEmptyPathConfig(node) {
        var config = node.value.routeConfig;
        return config && config.path === '' && config.redirectTo === undefined;
      }
      /**
       * Finds `TreeNode`s with matching empty path route configs and merges them into `TreeNode` with the
       * children from each duplicate. This is necessary because different outlets can match a single
       * empty path route config and the results need to then be merged.
       */


      function mergeEmptyPathMatches(nodes) {
        var result = []; // The set of nodes which contain children that were merged from two duplicate empty path nodes.

        var mergedNodes = new Set();

        var _iterator17 = _createForOfIteratorHelper(nodes),
            _step17;

        try {
          var _loop6 = function _loop6() {
            var node = _step17.value;

            if (!hasEmptyPathConfig(node)) {
              result.push(node);
              return "continue";
            }

            var duplicateEmptyPathNode = result.find(function (resultNode) {
              return node.value.routeConfig === resultNode.value.routeConfig;
            });

            if (duplicateEmptyPathNode !== undefined) {
              var _duplicateEmptyPathNo;

              (_duplicateEmptyPathNo = duplicateEmptyPathNode.children).push.apply(_duplicateEmptyPathNo, _toConsumableArray(node.children));

              mergedNodes.add(duplicateEmptyPathNode);
            } else {
              result.push(node);
            }
          };

          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
            var _ret = _loop6();

            if (_ret === "continue") continue;
          } // For each node which has children from multiple sources, we need to recompute a new `TreeNode`
          // by also merging those children. This is necessary when there are multiple empty path configs in
          // a row. Put another way: whenever we combine children of two nodes, we need to also check if any
          // of those children can be combined into a single node as well.

        } catch (err) {
          _iterator17.e(err);
        } finally {
          _iterator17.f();
        }

        var _iterator18 = _createForOfIteratorHelper(mergedNodes),
            _step18;

        try {
          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
            var mergedNode = _step18.value;
            var mergedChildren = mergeEmptyPathMatches(mergedNode.children);
            result.push(new TreeNode(mergedNode.value, mergedChildren));
          }
        } catch (err) {
          _iterator18.e(err);
        } finally {
          _iterator18.f();
        }

        return result.filter(function (n) {
          return !mergedNodes.has(n);
        });
      }

      function checkOutletNameUniqueness(nodes) {
        var names = {};
        nodes.forEach(function (n) {
          var routeWithSameOutletName = names[n.value.outlet];

          if (routeWithSameOutletName) {
            var p = routeWithSameOutletName.url.map(function (s) {
              return s.toString();
            }).join('/');
            var c = n.value.url.map(function (s) {
              return s.toString();
            }).join('/');
            throw new Error("Two segments cannot have the same outlet name: '".concat(p, "' and '").concat(c, "'."));
          }

          names[n.value.outlet] = n.value;
        });
      }

      function getSourceSegmentGroup(segmentGroup) {
        var s = segmentGroup;

        while (s._sourceSegment) {
          s = s._sourceSegment;
        }

        return s;
      }

      function getPathIndexShift(segmentGroup) {
        var s = segmentGroup;
        var res = s._segmentIndexShift ? s._segmentIndexShift : 0;

        while (s._sourceSegment) {
          s = s._sourceSegment;
          res += s._segmentIndexShift ? s._segmentIndexShift : 0;
        }

        return res - 1;
      }

      function getData(route) {
        return route.data || {};
      }

      function getResolve(route) {
        return route.resolve || {};
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function recognize$1(rootComponentType, config, serializer, paramsInheritanceStrategy, relativeLinkResolution) {
        return (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(function (t) {
          return recognize(rootComponentType, config, t.urlAfterRedirects, serializer(t.urlAfterRedirects), paramsInheritanceStrategy, relativeLinkResolution).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (targetSnapshot) {
            return Object.assign(Object.assign({}, t), {
              targetSnapshot: targetSnapshot
            });
          }));
        });
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function resolveData(paramsInheritanceStrategy, moduleInjector) {
        return (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(function (t) {
          var targetSnapshot = t.targetSnapshot,
              canActivateChecks = t.guards.canActivateChecks;

          if (!canActivateChecks.length) {
            return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(t);
          }

          var canActivateChecksResolved = 0;
          return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(canActivateChecks).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.concatMap)(function (check) {
            return runResolve(check.route, targetSnapshot, paramsInheritanceStrategy, moduleInjector);
          }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(function () {
            return canActivateChecksResolved++;
          }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.takeLast)(1), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(function (_) {
            return canActivateChecksResolved === canActivateChecks.length ? (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(t) : rxjs__WEBPACK_IMPORTED_MODULE_22__.EMPTY;
          }));
        });
      }

      function runResolve(futureARS, futureRSS, paramsInheritanceStrategy, moduleInjector) {
        var resolve = futureARS._resolve;
        return resolveNode(resolve, futureARS, futureRSS, moduleInjector).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (resolvedData) {
          futureARS._resolvedData = resolvedData;
          futureARS.data = Object.assign(Object.assign({}, futureARS.data), inheritedParamsDataResolve(futureARS, paramsInheritanceStrategy).resolve);
          return null;
        }));
      }

      function resolveNode(resolve, futureARS, futureRSS, moduleInjector) {
        var keys = Object.keys(resolve);

        if (keys.length === 0) {
          return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)({});
        }

        var data = {};
        return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(keys).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(function (key) {
          return getResolver(resolve[key], futureARS, futureRSS, moduleInjector).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(function (value) {
            data[key] = value;
          }));
        }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.takeLast)(1), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(function () {
          // Ensure all resolvers returned values, otherwise don't emit any "next" and just complete
          // the chain which will cancel navigation
          if (Object.keys(data).length === keys.length) {
            return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(data);
          }

          return rxjs__WEBPACK_IMPORTED_MODULE_22__.EMPTY;
        }));
      }

      function getResolver(injectionToken, futureARS, futureRSS, moduleInjector) {
        var resolver = getToken(injectionToken, futureARS, moduleInjector);
        return resolver.resolve ? wrapIntoObservable(resolver.resolve(futureARS, futureRSS)) : wrapIntoObservable(resolver(futureARS, futureRSS));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Perform a side effect through a switchMap for every emission on the source Observable,
       * but return an Observable that is identical to the source. It's essentially the same as
       * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,
       * it will wait before continuing with the original value.
       */


      function switchTap(next) {
        return (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.switchMap)(function (v) {
          var nextResult = next(v);

          if (nextResult) {
            return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(nextResult).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function () {
              return v;
            }));
          }

          return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(v);
        });
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description
       *
       * Provides a way to customize when activated routes get reused.
       *
       * @publicApi
       */


      var _RouteReuseStrategy = function _RouteReuseStrategy() {
        _classCallCheck2(this, _RouteReuseStrategy);
      };
      /**
       * @description
       *
       * This base route reuse strategy only reuses routes when the matched router configs are
       * identical. This prevents components from being destroyed and recreated
       * when just the fragment or query parameters change
       * (that is, the existing component is _reused_).
       *
       * This strategy does not store any routes for later reuse.
       *
       * Angular uses this strategy by default.
       *
       *
       * It can be used as a base class for custom route reuse strategies, i.e. you can create your own
       * class that extends the `BaseRouteReuseStrategy` one.
       * @publicApi
       */


      var _BaseRouteReuseStrategy = /*#__PURE__*/function () {
        function _BaseRouteReuseStrategy() {
          _classCallCheck2(this, _BaseRouteReuseStrategy);
        }

        _createClass2(_BaseRouteReuseStrategy, [{
          key: "shouldDetach",
          value:
          /**
           * Whether the given route should detach for later reuse.
           * Always returns false for `BaseRouteReuseStrategy`.
           * */
          function shouldDetach(route) {
            return false;
          }
          /**
           * A no-op; the route is never stored since this strategy never detaches routes for later re-use.
           */

        }, {
          key: "store",
          value: function store(route, detachedTree) {}
          /** Returns `false`, meaning the route (and its subtree) is never reattached */

        }, {
          key: "shouldAttach",
          value: function shouldAttach(route) {
            return false;
          }
          /** Returns `null` because this strategy does not store routes for later re-use. */

        }, {
          key: "retrieve",
          value: function retrieve(route) {
            return null;
          }
          /**
           * Determines if a route should be reused.
           * This strategy returns `true` when the future route config and current route config are
           * identical.
           */

        }, {
          key: "shouldReuseRoute",
          value: function shouldReuseRoute(future, curr) {
            return future.routeConfig === curr.routeConfig;
          }
        }]);

        return _BaseRouteReuseStrategy;
      }();

      var DefaultRouteReuseStrategy = /*#__PURE__*/function (_BaseRouteReuseStrate) {
        _inherits(DefaultRouteReuseStrategy, _BaseRouteReuseStrate);

        var _super56 = _createSuper(DefaultRouteReuseStrategy);

        function DefaultRouteReuseStrategy() {
          _classCallCheck2(this, DefaultRouteReuseStrategy);

          return _super56.apply(this, arguments);
        }

        return DefaultRouteReuseStrategy;
      }(_BaseRouteReuseStrategy);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The [DI token](guide/glossary/#di-token) for a router configuration.
       *
       * `ROUTES` is a low level API for router configuration via dependency injection.
       *
       * We recommend that in almost all cases to use higher level APIs such as `RouterModule.forRoot()`,
       * `RouterModule.forChild()`, `provideRoutes`, or `Router.resetConfig()`.
       *
       * @publicApi
       */


      var _ROUTES = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('ROUTES');

      var RouterConfigLoader = /*#__PURE__*/function () {
        function RouterConfigLoader(loader, compiler, onLoadStartListener, onLoadEndListener) {
          _classCallCheck2(this, RouterConfigLoader);

          this.loader = loader;
          this.compiler = compiler;
          this.onLoadStartListener = onLoadStartListener;
          this.onLoadEndListener = onLoadEndListener;
        }

        _createClass2(RouterConfigLoader, [{
          key: "load",
          value: function load(parentInjector, route) {
            var _this154 = this;

            if (route._loader$) {
              return route._loader$;
            }

            if (this.onLoadStartListener) {
              this.onLoadStartListener(route);
            }

            var moduleFactory$ = this.loadModuleFactory(route.loadChildren);
            var loadRunner = moduleFactory$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (factory) {
              if (_this154.onLoadEndListener) {
                _this154.onLoadEndListener(route);
              }

              var module = factory.create(parentInjector); // When loading a module that doesn't provide `RouterModule.forChild()` preloader
              // will get stuck in an infinite loop. The child module's Injector will look to
              // its parent `Injector` when it doesn't find any ROUTES so it will return routes
              // for it's parent module instead.

              return new LoadedRouterConfig(flatten(module.injector.get(_ROUTES, undefined, _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectFlags.Self | _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectFlags.Optional)).map(standardizeConfig), module);
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.catchError)(function (err) {
              route._loader$ = undefined;
              throw err;
            })); // Use custom ConnectableObservable as share in runners pipe increasing the bundle size too much

            route._loader$ = new rxjs__WEBPACK_IMPORTED_MODULE_23__.ConnectableObservable(loadRunner, function () {
              return new rxjs__WEBPACK_IMPORTED_MODULE_24__.Subject();
            }).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_25__.refCount)());
            return route._loader$;
          }
        }, {
          key: "loadModuleFactory",
          value: function loadModuleFactory(loadChildren) {
            var _this155 = this;

            if (typeof loadChildren === 'string') {
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(this.loader.load(loadChildren));
            } else {
              return wrapIntoObservable(loadChildren()).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(function (t) {
                if (t instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModuleFactory) {
                  return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(t);
                } else {
                  return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(_this155.compiler.compileModuleAsync(t));
                }
              }));
            }
          }
        }]);

        return RouterConfigLoader;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Store contextual information about a `RouterOutlet`
       *
       * @publicApi
       */


      var _OutletContext = function _OutletContext() {
        _classCallCheck2(this, _OutletContext);

        this.outlet = null;
        this.route = null;
        this.resolver = null;
        this.children = new _ChildrenOutletContexts();
        this.attachRef = null;
      };
      /**
       * Store contextual information about the children (= nested) `RouterOutlet`
       *
       * @publicApi
       */


      var _ChildrenOutletContexts = /*#__PURE__*/function () {
        function _ChildrenOutletContexts() {
          _classCallCheck2(this, _ChildrenOutletContexts);

          // contexts for child outlets, by name.
          this.contexts = new Map();
        }
        /** Called when a `RouterOutlet` directive is instantiated */


        _createClass2(_ChildrenOutletContexts, [{
          key: "onChildOutletCreated",
          value: function onChildOutletCreated(childName, outlet) {
            var context = this.getOrCreateContext(childName);
            context.outlet = outlet;
            this.contexts.set(childName, context);
          }
          /**
           * Called when a `RouterOutlet` directive is destroyed.
           * We need to keep the context as the outlet could be destroyed inside a NgIf and might be
           * re-created later.
           */

        }, {
          key: "onChildOutletDestroyed",
          value: function onChildOutletDestroyed(childName) {
            var context = this.getContext(childName);

            if (context) {
              context.outlet = null;
            }
          }
          /**
           * Called when the corresponding route is deactivated during navigation.
           * Because the component get destroyed, all children outlet are destroyed.
           */

        }, {
          key: "onOutletDeactivated",
          value: function onOutletDeactivated() {
            var contexts = this.contexts;
            this.contexts = new Map();
            return contexts;
          }
        }, {
          key: "onOutletReAttached",
          value: function onOutletReAttached(contexts) {
            this.contexts = contexts;
          }
        }, {
          key: "getOrCreateContext",
          value: function getOrCreateContext(childName) {
            var context = this.getContext(childName);

            if (!context) {
              context = new _OutletContext();
              this.contexts.set(childName, context);
            }

            return context;
          }
        }, {
          key: "getContext",
          value: function getContext(childName) {
            return this.contexts.get(childName) || null;
          }
        }]);

        return _ChildrenOutletContexts;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description
       *
       * Provides a way to migrate AngularJS applications to Angular.
       *
       * @publicApi
       */


      var _UrlHandlingStrategy = function _UrlHandlingStrategy() {
        _classCallCheck2(this, _UrlHandlingStrategy);
      };
      /**
       * @publicApi
       */


      var DefaultUrlHandlingStrategy = /*#__PURE__*/function () {
        function DefaultUrlHandlingStrategy() {
          _classCallCheck2(this, DefaultUrlHandlingStrategy);
        }

        _createClass2(DefaultUrlHandlingStrategy, [{
          key: "shouldProcessUrl",
          value: function shouldProcessUrl(url) {
            return true;
          }
        }, {
          key: "extract",
          value: function extract(url) {
            return url;
          }
        }, {
          key: "merge",
          value: function merge(newUrlPart, wholeUrl) {
            return newUrlPart;
          }
        }]);

        return DefaultUrlHandlingStrategy;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function defaultErrorHandler(error) {
        throw error;
      }

      function defaultMalformedUriErrorHandler(error, urlSerializer, url) {
        return urlSerializer.parse('/');
      }
      /**
       * @internal
       */


      function defaultRouterHook(snapshot, runExtras) {
        return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(null);
      }
      /**
       * The equivalent `IsActiveUrlTreeOptions` options for `Router.isActive` is called with `true`
       * (exact = true).
       */


      var exactMatchOptions = {
        paths: 'exact',
        fragment: 'ignored',
        matrixParams: 'ignored',
        queryParams: 'exact'
      };
      /**
       * The equivalent `IsActiveUrlTreeOptions` options for `Router.isActive` is called with `false`
       * (exact = false).
       */

      var subsetMatchOptions = {
        paths: 'subset',
        fragment: 'ignored',
        matrixParams: 'ignored',
        queryParams: 'subset'
      };
      /**
       * @description
       *
       * A service that provides navigation among views and URL manipulation capabilities.
       *
       * @see `Route`.
       * @see [Routing and Navigation Guide](guide/router).
       *
       * @ngModule RouterModule
       *
       * @publicApi
       */

      var _Router = /*#__PURE__*/function () {
        /**
         * Creates the router service.
         */
        // TODO: vsavkin make internal after the final is out.
        function _Router(rootComponentType, urlSerializer, rootContexts, location, injector, loader, compiler, config) {
          var _this156 = this;

          _classCallCheck2(this, _Router);

          this.rootComponentType = rootComponentType;
          this.urlSerializer = urlSerializer;
          this.rootContexts = rootContexts;
          this.location = location;
          this.config = config;
          this.lastSuccessfulNavigation = null;
          this.currentNavigation = null;
          this.disposed = false;
          /**
           * Tracks the previously seen location change from the location subscription so we can compare
           * the two latest to see if they are duplicates. See setUpLocationChangeListener.
           */

          this.lastLocationChangeInfo = null;
          this.navigationId = 0;
          this.isNgZoneEnabled = false;
          /**
           * An event stream for routing events in this NgModule.
           */

          this.events = new rxjs__WEBPACK_IMPORTED_MODULE_24__.Subject();
          /**
           * A handler for navigation errors in this NgModule.
           */

          this.errorHandler = defaultErrorHandler;
          /**
           * A handler for errors thrown by `Router.parseUrl(url)`
           * when `url` contains an invalid character.
           * The most common case is a `%` sign
           * that's not encoded and is not part of a percent encoded sequence.
           */

          this.malformedUriErrorHandler = defaultMalformedUriErrorHandler;
          /**
           * True if at least one navigation event has occurred,
           * false otherwise.
           */

          this.navigated = false;
          this.lastSuccessfulId = -1;
          /**
           * Hooks that enable you to pause navigation,
           * either before or after the preactivation phase.
           * Used by `RouterModule`.
           *
           * @internal
           */

          this.hooks = {
            beforePreactivation: defaultRouterHook,
            afterPreactivation: defaultRouterHook
          };
          /**
           * A strategy for extracting and merging URLs.
           * Used for AngularJS to Angular migrations.
           */

          this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();
          /**
           * A strategy for re-using routes.
           */

          this.routeReuseStrategy = new DefaultRouteReuseStrategy();
          /**
           * How to handle a navigation request to the current URL. One of:
           * - `'ignore'` :  The router ignores the request.
           * - `'reload'` : The router reloads the URL. Use to implement a "refresh" feature.
           */

          this.onSameUrlNavigation = 'ignore';
          /**
           * How to merge parameters, data, and resolved data from parent to child
           * routes. One of:
           *
           * - `'emptyOnly'` : Inherit parent parameters, data, and resolved data
           * for path-less or component-less routes.
           * - `'always'` : Inherit parent parameters, data, and resolved data
           * for all child routes.
           */

          this.paramsInheritanceStrategy = 'emptyOnly';
          /**
           * Determines when the router updates the browser URL.
           * By default (`"deferred"`), updates the browser URL after navigation has finished.
           * Set to `'eager'` to update the browser URL at the beginning of navigation.
           * You can choose to update early so that, if navigation fails,
           * you can show an error message with the URL that failed.
           */

          this.urlUpdateStrategy = 'deferred';
          /**
           * Enables a bug fix that corrects relative link resolution in components with empty paths.
           * @see `RouterModule`
           */

          this.relativeLinkResolution = 'corrected';

          var onLoadStart = function onLoadStart(r) {
            return _this156.triggerEvent(new _RouteConfigLoadStart(r));
          };

          var onLoadEnd = function onLoadEnd(r) {
            return _this156.triggerEvent(new _RouteConfigLoadEnd(r));
          };

          this.ngModule = injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModuleRef);
          this.console = injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵConsole"]);
          var ngZone = injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone);
          this.isNgZoneEnabled = ngZone instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone && _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone.isInAngularZone();
          this.resetConfig(config);
          this.currentUrlTree = createEmptyUrlTree();
          this.rawUrlTree = this.currentUrlTree;
          this.browserUrlTree = this.currentUrlTree;
          this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);
          this.routerState = createEmptyState(this.currentUrlTree, this.rootComponentType);
          this.transitions = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject({
            id: 0,
            currentUrlTree: this.currentUrlTree,
            currentRawUrl: this.currentUrlTree,
            extractedUrl: this.urlHandlingStrategy.extract(this.currentUrlTree),
            urlAfterRedirects: this.urlHandlingStrategy.extract(this.currentUrlTree),
            rawUrl: this.currentUrlTree,
            extras: {},
            resolve: null,
            reject: null,
            promise: Promise.resolve(true),
            source: 'imperative',
            restoredState: null,
            currentSnapshot: this.routerState.snapshot,
            targetSnapshot: null,
            currentRouterState: this.routerState,
            targetRouterState: null,
            guards: {
              canActivateChecks: [],
              canDeactivateChecks: []
            },
            guardsResult: null
          });
          this.navigations = this.setupNavigations(this.transitions);
          this.processNavigations();
        }

        _createClass2(_Router, [{
          key: "setupNavigations",
          value: function setupNavigations(transitions) {
            var _this157 = this;

            var eventsSubject = this.events;
            return transitions.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.filter)(function (t) {
              return t.id !== 0;
            }), // Extract URL
            (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (t) {
              return Object.assign(Object.assign({}, t), {
                extractedUrl: _this157.urlHandlingStrategy.extract(t.rawUrl)
              });
            }), // Using switchMap so we cancel executing navigations when a new one comes in
            (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.switchMap)(function (t) {
              var completed = false;
              var errored = false;
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(t).pipe( // Store the Navigation object
              (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(function (t) {
                _this157.currentNavigation = {
                  id: t.id,
                  initialUrl: t.currentRawUrl,
                  extractedUrl: t.extractedUrl,
                  trigger: t.source,
                  extras: t.extras,
                  previousNavigation: _this157.lastSuccessfulNavigation ? Object.assign(Object.assign({}, _this157.lastSuccessfulNavigation), {
                    previousNavigation: null
                  }) : null
                };
              }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.switchMap)(function (t) {
                var urlTransition = !_this157.navigated || t.extractedUrl.toString() !== _this157.browserUrlTree.toString();

                var processCurrentUrl = (_this157.onSameUrlNavigation === 'reload' ? true : urlTransition) && _this157.urlHandlingStrategy.shouldProcessUrl(t.rawUrl);

                if (processCurrentUrl) {
                  return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(t).pipe( // Fire NavigationStart event
                  (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.switchMap)(function (t) {
                    var transition = _this157.transitions.getValue();

                    eventsSubject.next(new _NavigationStart(t.id, _this157.serializeUrl(t.extractedUrl), t.source, t.restoredState));

                    if (transition !== _this157.transitions.getValue()) {
                      return rxjs__WEBPACK_IMPORTED_MODULE_22__.EMPTY;
                    } // This delay is required to match old behavior that forced
                    // navigation to always be async


                    return Promise.resolve(t);
                  }), // ApplyRedirects
                  applyRedirects$1(_this157.ngModule.injector, _this157.configLoader, _this157.urlSerializer, _this157.config), // Update the currentNavigation
                  (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(function (t) {
                    _this157.currentNavigation = Object.assign(Object.assign({}, _this157.currentNavigation), {
                      finalUrl: t.urlAfterRedirects
                    });
                  }), // Recognize
                  recognize$1(_this157.rootComponentType, _this157.config, function (url) {
                    return _this157.serializeUrl(url);
                  }, _this157.paramsInheritanceStrategy, _this157.relativeLinkResolution), // Update URL if in `eager` update mode
                  (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(function (t) {
                    if (_this157.urlUpdateStrategy === 'eager') {
                      if (!t.extras.skipLocationChange) {
                        _this157.setBrowserUrl(t.urlAfterRedirects, !!t.extras.replaceUrl, t.id, t.extras.state);
                      }

                      _this157.browserUrlTree = t.urlAfterRedirects;
                    } // Fire RoutesRecognized


                    var routesRecognized = new _RoutesRecognized(t.id, _this157.serializeUrl(t.extractedUrl), _this157.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);
                    eventsSubject.next(routesRecognized);
                  }));
                } else {
                  var processPreviousUrl = urlTransition && _this157.rawUrlTree && _this157.urlHandlingStrategy.shouldProcessUrl(_this157.rawUrlTree);
                  /* When the current URL shouldn't be processed, but the previous one was,
                   * we handle this "error condition" by navigating to the previously
                   * successful URL, but leaving the URL intact.*/


                  if (processPreviousUrl) {
                    var id = t.id,
                        extractedUrl = t.extractedUrl,
                        source = t.source,
                        restoredState = t.restoredState,
                        extras = t.extras;
                    var navStart = new _NavigationStart(id, _this157.serializeUrl(extractedUrl), source, restoredState);
                    eventsSubject.next(navStart);
                    var targetSnapshot = createEmptyState(extractedUrl, _this157.rootComponentType).snapshot;
                    return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(Object.assign(Object.assign({}, t), {
                      targetSnapshot: targetSnapshot,
                      urlAfterRedirects: extractedUrl,
                      extras: Object.assign(Object.assign({}, extras), {
                        skipLocationChange: false,
                        replaceUrl: false
                      })
                    }));
                  } else {
                    /* When neither the current or previous URL can be processed, do nothing
                     * other than update router's internal reference to the current "settled"
                     * URL. This way the next navigation will be coming from the current URL
                     * in the browser.
                     */
                    _this157.rawUrlTree = t.rawUrl;
                    _this157.browserUrlTree = t.urlAfterRedirects;
                    t.resolve(null);
                    return rxjs__WEBPACK_IMPORTED_MODULE_22__.EMPTY;
                  }
                }
              }), // Before Preactivation
              switchTap(function (t) {
                var targetSnapshot = t.targetSnapshot,
                    navigationId = t.id,
                    appliedUrlTree = t.extractedUrl,
                    rawUrlTree = t.rawUrl,
                    _t$extras = t.extras,
                    skipLocationChange = _t$extras.skipLocationChange,
                    replaceUrl = _t$extras.replaceUrl;
                return _this157.hooks.beforePreactivation(targetSnapshot, {
                  navigationId: navigationId,
                  appliedUrlTree: appliedUrlTree,
                  rawUrlTree: rawUrlTree,
                  skipLocationChange: !!skipLocationChange,
                  replaceUrl: !!replaceUrl
                });
              }), // --- GUARDS ---
              (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(function (t) {
                var guardsStart = new _GuardsCheckStart(t.id, _this157.serializeUrl(t.extractedUrl), _this157.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);

                _this157.triggerEvent(guardsStart);
              }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (t) {
                return Object.assign(Object.assign({}, t), {
                  guards: getAllRouteGuards(t.targetSnapshot, t.currentSnapshot, _this157.rootContexts)
                });
              }), checkGuards(_this157.ngModule.injector, function (evt) {
                return _this157.triggerEvent(evt);
              }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(function (t) {
                if (isUrlTree(t.guardsResult)) {
                  var error = navigationCancelingError("Redirecting to \"".concat(_this157.serializeUrl(t.guardsResult), "\""));
                  error.url = t.guardsResult;
                  throw error;
                }

                var guardsEnd = new _GuardsCheckEnd(t.id, _this157.serializeUrl(t.extractedUrl), _this157.serializeUrl(t.urlAfterRedirects), t.targetSnapshot, !!t.guardsResult);

                _this157.triggerEvent(guardsEnd);
              }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.filter)(function (t) {
                if (!t.guardsResult) {
                  _this157.resetUrlToCurrentUrlTree();

                  var navCancel = new _NavigationCancel(t.id, _this157.serializeUrl(t.extractedUrl), '');
                  eventsSubject.next(navCancel);
                  t.resolve(false);
                  return false;
                }

                return true;
              }), // --- RESOLVE ---
              switchTap(function (t) {
                if (t.guards.canActivateChecks.length) {
                  return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(t).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(function (t) {
                    var resolveStart = new _ResolveStart(t.id, _this157.serializeUrl(t.extractedUrl), _this157.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);

                    _this157.triggerEvent(resolveStart);
                  }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.switchMap)(function (t) {
                    var dataResolved = false;
                    return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(t).pipe(resolveData(_this157.paramsInheritanceStrategy, _this157.ngModule.injector), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)({
                      next: function next() {
                        return dataResolved = true;
                      },
                      complete: function complete() {
                        if (!dataResolved) {
                          var navCancel = new _NavigationCancel(t.id, _this157.serializeUrl(t.extractedUrl), "At least one route resolver didn't emit any value.");
                          eventsSubject.next(navCancel);
                          t.resolve(false);
                        }
                      }
                    }));
                  }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(function (t) {
                    var resolveEnd = new _ResolveEnd(t.id, _this157.serializeUrl(t.extractedUrl), _this157.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);

                    _this157.triggerEvent(resolveEnd);
                  }));
                }

                return undefined;
              }), // --- AFTER PREACTIVATION ---
              switchTap(function (t) {
                var targetSnapshot = t.targetSnapshot,
                    navigationId = t.id,
                    appliedUrlTree = t.extractedUrl,
                    rawUrlTree = t.rawUrl,
                    _t$extras2 = t.extras,
                    skipLocationChange = _t$extras2.skipLocationChange,
                    replaceUrl = _t$extras2.replaceUrl;
                return _this157.hooks.afterPreactivation(targetSnapshot, {
                  navigationId: navigationId,
                  appliedUrlTree: appliedUrlTree,
                  rawUrlTree: rawUrlTree,
                  skipLocationChange: !!skipLocationChange,
                  replaceUrl: !!replaceUrl
                });
              }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (t) {
                var targetRouterState = createRouterState(_this157.routeReuseStrategy, t.targetSnapshot, t.currentRouterState);
                return Object.assign(Object.assign({}, t), {
                  targetRouterState: targetRouterState
                });
              }),
              /* Once here, we are about to activate syncronously. The assumption is this
                 will succeed, and user code may read from the Router service. Therefore
                 before activation, we need to update router properties storing the current
                 URL and the RouterState, as well as updated the browser URL. All this should
                 happen *before* activating. */
              (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(function (t) {
                _this157.currentUrlTree = t.urlAfterRedirects;
                _this157.rawUrlTree = _this157.urlHandlingStrategy.merge(_this157.currentUrlTree, t.rawUrl);
                _this157.routerState = t.targetRouterState;

                if (_this157.urlUpdateStrategy === 'deferred') {
                  if (!t.extras.skipLocationChange) {
                    _this157.setBrowserUrl(_this157.rawUrlTree, !!t.extras.replaceUrl, t.id, t.extras.state);
                  }

                  _this157.browserUrlTree = t.urlAfterRedirects;
                }
              }), activateRoutes(_this157.rootContexts, _this157.routeReuseStrategy, function (evt) {
                return _this157.triggerEvent(evt);
              }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)({
                next: function next() {
                  completed = true;
                },
                complete: function complete() {
                  completed = true;
                }
              }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.finalize)(function () {
                /* When the navigation stream finishes either through error or success, we
                 * set the `completed` or `errored` flag. However, there are some situations
                 * where we could get here without either of those being set. For instance, a
                 * redirect during NavigationStart. Therefore, this is a catch-all to make
                 * sure the NavigationCancel
                 * event is fired when a navigation gets cancelled but not caught by other
                 * means. */
                if (!completed && !errored) {
                  // Must reset to current URL tree here to ensure history.state is set. On a
                  // fresh page load, if a new navigation comes in before a successful
                  // navigation completes, there will be nothing in
                  // history.state.navigationId. This can cause sync problems with AngularJS
                  // sync code which looks for a value here in order to determine whether or
                  // not to handle a given popstate event or to leave it to the Angular
                  // router.
                  _this157.resetUrlToCurrentUrlTree();

                  var navCancel = new _NavigationCancel(t.id, _this157.serializeUrl(t.extractedUrl), "Navigation ID ".concat(t.id, " is not equal to the current navigation id ").concat(_this157.navigationId));
                  eventsSubject.next(navCancel);
                  t.resolve(false);
                } // currentNavigation should always be reset to null here. If navigation was
                // successful, lastSuccessfulTransition will have already been set. Therefore
                // we can safely set currentNavigation to null here.


                _this157.currentNavigation = null;
              }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.catchError)(function (e) {
                errored = true;
                /* This error type is issued during Redirect, and is handled as a
                 * cancellation rather than an error. */

                if (isNavigationCancelingError(e)) {
                  var redirecting = isUrlTree(e.url);

                  if (!redirecting) {
                    // Set property only if we're not redirecting. If we landed on a page and
                    // redirect to `/` route, the new navigation is going to see the `/`
                    // isn't a change from the default currentUrlTree and won't navigate.
                    // This is only applicable with initial navigation, so setting
                    // `navigated` only when not redirecting resolves this scenario.
                    _this157.navigated = true;

                    _this157.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);
                  }

                  var navCancel = new _NavigationCancel(t.id, _this157.serializeUrl(t.extractedUrl), e.message);
                  eventsSubject.next(navCancel); // When redirecting, we need to delay resolving the navigation
                  // promise and push it to the redirect navigation

                  if (!redirecting) {
                    t.resolve(false);
                  } else {
                    // setTimeout is required so this navigation finishes with
                    // the return EMPTY below. If it isn't allowed to finish
                    // processing, there can be multiple navigations to the same
                    // URL.
                    setTimeout(function () {
                      var mergedTree = _this157.urlHandlingStrategy.merge(e.url, _this157.rawUrlTree);

                      var extras = {
                        skipLocationChange: t.extras.skipLocationChange,
                        replaceUrl: _this157.urlUpdateStrategy === 'eager'
                      };

                      _this157.scheduleNavigation(mergedTree, 'imperative', null, extras, {
                        resolve: t.resolve,
                        reject: t.reject,
                        promise: t.promise
                      });
                    }, 0);
                  }
                  /* All other errors should reset to the router's internal URL reference to
                   * the pre-error state. */

                } else {
                  _this157.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);

                  var navError = new _NavigationError(t.id, _this157.serializeUrl(t.extractedUrl), e);
                  eventsSubject.next(navError);

                  try {
                    t.resolve(_this157.errorHandler(e));
                  } catch (ee) {
                    t.reject(ee);
                  }
                }

                return rxjs__WEBPACK_IMPORTED_MODULE_22__.EMPTY;
              })); // TODO(jasonaden): remove cast once g3 is on updated TypeScript
            }));
          }
          /**
           * @internal
           * TODO: this should be removed once the constructor of the router made internal
           */

        }, {
          key: "resetRootComponentType",
          value: function resetRootComponentType(rootComponentType) {
            this.rootComponentType = rootComponentType; // TODO: vsavkin router 4.0 should make the root component set to null
            // this will simplify the lifecycle of the router.

            this.routerState.root.component = this.rootComponentType;
          }
        }, {
          key: "getTransition",
          value: function getTransition() {
            var transition = this.transitions.value; // This value needs to be set. Other values such as extractedUrl are set on initial navigation
            // but the urlAfterRedirects may not get set if we aren't processing the new URL *and* not
            // processing the previous URL.

            transition.urlAfterRedirects = this.browserUrlTree;
            return transition;
          }
        }, {
          key: "setTransition",
          value: function setTransition(t) {
            this.transitions.next(Object.assign(Object.assign({}, this.getTransition()), t));
          }
          /**
           * Sets up the location change listener and performs the initial navigation.
           */

        }, {
          key: "initialNavigation",
          value: function initialNavigation() {
            this.setUpLocationChangeListener();

            if (this.navigationId === 0) {
              this.navigateByUrl(this.location.path(true), {
                replaceUrl: true
              });
            }
          }
          /**
           * Sets up the location change listener. This listener detects navigations triggered from outside
           * the Router (the browser back/forward buttons, for example) and schedules a corresponding Router
           * navigation so that the correct events, guards, etc. are triggered.
           */

        }, {
          key: "setUpLocationChangeListener",
          value: function setUpLocationChangeListener() {
            var _this158 = this;

            // Don't need to use Zone.wrap any more, because zone.js
            // already patch onPopState, so location change callback will
            // run into ngZone
            if (!this.locationSubscription) {
              this.locationSubscription = this.location.subscribe(function (event) {
                var currentChange = _this158.extractLocationChangeInfoFromEvent(event);

                if (_this158.shouldScheduleNavigation(_this158.lastLocationChangeInfo, currentChange)) {
                  // The `setTimeout` was added in #12160 and is likely to support Angular/AngularJS
                  // hybrid apps.
                  setTimeout(function () {
                    var source = currentChange.source,
                        state = currentChange.state,
                        urlTree = currentChange.urlTree;
                    var extras = {
                      replaceUrl: true
                    };

                    if (state) {
                      var stateCopy = Object.assign({}, state);
                      delete stateCopy.navigationId;

                      if (Object.keys(stateCopy).length !== 0) {
                        extras.state = stateCopy;
                      }
                    }

                    _this158.scheduleNavigation(urlTree, source, state, extras);
                  }, 0);
                }

                _this158.lastLocationChangeInfo = currentChange;
              });
            }
          }
          /** Extracts router-related information from a `PopStateEvent`. */

        }, {
          key: "extractLocationChangeInfoFromEvent",
          value: function extractLocationChangeInfoFromEvent(change) {
            var _a;

            return {
              source: change['type'] === 'popstate' ? 'popstate' : 'hashchange',
              urlTree: this.parseUrl(change['url']),
              // Navigations coming from Angular router have a navigationId state
              // property. When this exists, restore the state.
              state: ((_a = change.state) === null || _a === void 0 ? void 0 : _a.navigationId) ? change.state : null,
              transitionId: this.getTransition().id
            };
          }
          /**
           * Determines whether two events triggered by the Location subscription are due to the same
           * navigation. The location subscription can fire two events (popstate and hashchange) for a
           * single navigation. The second one should be ignored, that is, we should not schedule another
           * navigation in the Router.
           */

        }, {
          key: "shouldScheduleNavigation",
          value: function shouldScheduleNavigation(previous, current) {
            if (!previous) return true;
            var sameDestination = current.urlTree.toString() === previous.urlTree.toString();
            var eventsOccurredAtSameTime = current.transitionId === previous.transitionId;

            if (!eventsOccurredAtSameTime || !sameDestination) {
              return true;
            }

            if (current.source === 'hashchange' && previous.source === 'popstate' || current.source === 'popstate' && previous.source === 'hashchange') {
              return false;
            }

            return true;
          }
          /** The current URL. */

        }, {
          key: "url",
          get: function get() {
            return this.serializeUrl(this.currentUrlTree);
          }
          /**
           * Returns the current `Navigation` object when the router is navigating,
           * and `null` when idle.
           */

        }, {
          key: "getCurrentNavigation",
          value: function getCurrentNavigation() {
            return this.currentNavigation;
          }
          /** @internal */

        }, {
          key: "triggerEvent",
          value: function triggerEvent(event) {
            this.events.next(event);
          }
          /**
           * Resets the route configuration used for navigation and generating links.
           *
           * @param config The route array for the new configuration.
           *
           * @usageNotes
           *
           * ```
           * router.resetConfig([
           *  { path: 'team/:id', component: TeamCmp, children: [
           *    { path: 'simple', component: SimpleCmp },
           *    { path: 'user/:name', component: UserCmp }
           *  ]}
           * ]);
           * ```
           */

        }, {
          key: "resetConfig",
          value: function resetConfig(config) {
            validateConfig(config);
            this.config = config.map(standardizeConfig);
            this.navigated = false;
            this.lastSuccessfulId = -1;
          }
          /** @nodoc */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.dispose();
          }
          /** Disposes of the router. */

        }, {
          key: "dispose",
          value: function dispose() {
            this.transitions.complete();

            if (this.locationSubscription) {
              this.locationSubscription.unsubscribe();
              this.locationSubscription = undefined;
            }

            this.disposed = true;
          }
          /**
           * Appends URL segments to the current URL tree to create a new URL tree.
           *
           * @param commands An array of URL fragments with which to construct the new URL tree.
           * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path
           * segments, followed by the parameters for each segment.
           * The fragments are applied to the current URL tree or the one provided  in the `relativeTo`
           * property of the options object, if supplied.
           * @param navigationExtras Options that control the navigation strategy.
           * @returns The new URL tree.
           *
           * @usageNotes
           *
           * ```
           * // create /team/33/user/11
           * router.createUrlTree(['/team', 33, 'user', 11]);
           *
           * // create /team/33;expand=true/user/11
           * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);
           *
           * // you can collapse static segments like this (this works only with the first passed-in value):
           * router.createUrlTree(['/team/33/user', userId]);
           *
           * // If the first segment can contain slashes, and you do not want the router to split it,
           * // you can do the following:
           * router.createUrlTree([{segmentPath: '/one/two'}]);
           *
           * // create /team/33/(user/11//right:chat)
           * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);
           *
           * // remove the right secondary node
           * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);
           *
           * // assuming the current url is `/team/33/user/11` and the route points to `user/11`
           *
           * // navigate to /team/33/user/11/details
           * router.createUrlTree(['details'], {relativeTo: route});
           *
           * // navigate to /team/33/user/22
           * router.createUrlTree(['../22'], {relativeTo: route});
           *
           * // navigate to /team/44/user/22
           * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});
           *
           * Note that a value of `null` or `undefined` for `relativeTo` indicates that the
           * tree should be created relative to the root.
           * ```
           */

        }, {
          key: "createUrlTree",
          value: function createUrlTree(commands) {
            var navigationExtras = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var relativeTo = navigationExtras.relativeTo,
                queryParams = navigationExtras.queryParams,
                fragment = navigationExtras.fragment,
                queryParamsHandling = navigationExtras.queryParamsHandling,
                preserveFragment = navigationExtras.preserveFragment;
            var a = relativeTo || this.routerState.root;
            var f = preserveFragment ? this.currentUrlTree.fragment : fragment;
            var q = null;

            switch (queryParamsHandling) {
              case 'merge':
                q = Object.assign(Object.assign({}, this.currentUrlTree.queryParams), queryParams);
                break;

              case 'preserve':
                q = this.currentUrlTree.queryParams;
                break;

              default:
                q = queryParams || null;
            }

            if (q !== null) {
              q = this.removeEmptyProps(q);
            }

            return _createUrlTree(a, this.currentUrlTree, commands, q, f !== null && f !== void 0 ? f : null);
          }
          /**
           * Navigates to a view using an absolute route path.
           *
           * @param url An absolute path for a defined route. The function does not apply any delta to the
           *     current URL.
           * @param extras An object containing properties that modify the navigation strategy.
           *
           * @returns A Promise that resolves to 'true' when navigation succeeds,
           * to 'false' when navigation fails, or is rejected on error.
           *
           * @usageNotes
           *
           * The following calls request navigation to an absolute path.
           *
           * ```
           * router.navigateByUrl("/team/33/user/11");
           *
           * // Navigate without updating the URL
           * router.navigateByUrl("/team/33/user/11", { skipLocationChange: true });
           * ```
           *
           * @see [Routing and Navigation guide](guide/router)
           *
           */

        }, {
          key: "navigateByUrl",
          value: function navigateByUrl(url) {
            var extras = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
              skipLocationChange: false
            };

            if (typeof ngDevMode === 'undefined' || ngDevMode && this.isNgZoneEnabled && !_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone.isInAngularZone()) {
              this.console.warn("Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?");
            }

            var urlTree = isUrlTree(url) ? url : this.parseUrl(url);
            var mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);
            return this.scheduleNavigation(mergedTree, 'imperative', null, extras);
          }
          /**
           * Navigate based on the provided array of commands and a starting point.
           * If no starting route is provided, the navigation is absolute.
           *
           * @param commands An array of URL fragments with which to construct the target URL.
           * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path
           * segments, followed by the parameters for each segment.
           * The fragments are applied to the current URL or the one provided  in the `relativeTo` property
           * of the options object, if supplied.
           * @param extras An options object that determines how the URL should be constructed or
           *     interpreted.
           *
           * @returns A Promise that resolves to `true` when navigation succeeds, to `false` when navigation
           *     fails,
           * or is rejected on error.
           *
           * @usageNotes
           *
           * The following calls request navigation to a dynamic route path relative to the current URL.
           *
           * ```
           * router.navigate(['team', 33, 'user', 11], {relativeTo: route});
           *
           * // Navigate without updating the URL, overriding the default behavior
           * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});
           * ```
           *
           * @see [Routing and Navigation guide](guide/router)
           *
           */

        }, {
          key: "navigate",
          value: function navigate(commands) {
            var extras = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
              skipLocationChange: false
            };
            validateCommands(commands);
            return this.navigateByUrl(this.createUrlTree(commands, extras), extras);
          }
          /** Serializes a `UrlTree` into a string */

        }, {
          key: "serializeUrl",
          value: function serializeUrl(url) {
            return this.urlSerializer.serialize(url);
          }
          /** Parses a string into a `UrlTree` */

        }, {
          key: "parseUrl",
          value: function parseUrl(url) {
            var urlTree;

            try {
              urlTree = this.urlSerializer.parse(url);
            } catch (e) {
              urlTree = this.malformedUriErrorHandler(e, this.urlSerializer, url);
            }

            return urlTree;
          }
        }, {
          key: "isActive",
          value: function isActive(url, matchOptions) {
            var options;

            if (matchOptions === true) {
              options = Object.assign({}, exactMatchOptions);
            } else if (matchOptions === false) {
              options = Object.assign({}, subsetMatchOptions);
            } else {
              options = matchOptions;
            }

            if (isUrlTree(url)) {
              return containsTree(this.currentUrlTree, url, options);
            }

            var urlTree = this.parseUrl(url);
            return containsTree(this.currentUrlTree, urlTree, options);
          }
        }, {
          key: "removeEmptyProps",
          value: function removeEmptyProps(params) {
            return Object.keys(params).reduce(function (result, key) {
              var value = params[key];

              if (value !== null && value !== undefined) {
                result[key] = value;
              }

              return result;
            }, {});
          }
        }, {
          key: "processNavigations",
          value: function processNavigations() {
            var _this159 = this;

            this.navigations.subscribe(function (t) {
              _this159.navigated = true;
              _this159.lastSuccessfulId = t.id;

              _this159.events.next(new _NavigationEnd(t.id, _this159.serializeUrl(t.extractedUrl), _this159.serializeUrl(_this159.currentUrlTree)));

              _this159.lastSuccessfulNavigation = _this159.currentNavigation;
              t.resolve(true);
            }, function (e) {
              _this159.console.warn("Unhandled Navigation Error: ");
            });
          }
        }, {
          key: "scheduleNavigation",
          value: function scheduleNavigation(rawUrl, source, restoredState, extras, priorPromise) {
            if (this.disposed) {
              return Promise.resolve(false);
            } // * Imperative navigations (router.navigate) might trigger additional navigations to the same
            //   URL via a popstate event and the locationChangeListener. We should skip these duplicate
            //   navs. Duplicates may also be triggered by attempts to sync AngularJS and Angular router
            //   states.
            // * Imperative navigations can be cancelled by router guards, meaning the URL won't change. If
            //   the user follows that with a navigation using the back/forward button or manual URL change,
            //   the destination may be the same as the previous imperative attempt. We should not skip
            //   these navigations because it's a separate case from the one above -- it's not a duplicate
            //   navigation.


            var lastNavigation = this.getTransition(); // We don't want to skip duplicate successful navs if they're imperative because
            // onSameUrlNavigation could be 'reload' (so the duplicate is intended).

            var browserNavPrecededByRouterNav = source !== 'imperative' && (lastNavigation === null || lastNavigation === void 0 ? void 0 : lastNavigation.source) === 'imperative';
            var lastNavigationSucceeded = this.lastSuccessfulId === lastNavigation.id; // If the last navigation succeeded or is in flight, we can use the rawUrl as the comparison.
            // However, if it failed, we should compare to the final result (urlAfterRedirects).

            var lastNavigationUrl = lastNavigationSucceeded || this.currentNavigation ? lastNavigation.rawUrl : lastNavigation.urlAfterRedirects;
            var duplicateNav = lastNavigationUrl.toString() === rawUrl.toString();

            if (browserNavPrecededByRouterNav && duplicateNav) {
              return Promise.resolve(true); // return value is not used
            }

            var resolve;
            var reject;
            var promise;

            if (priorPromise) {
              resolve = priorPromise.resolve;
              reject = priorPromise.reject;
              promise = priorPromise.promise;
            } else {
              promise = new Promise(function (res, rej) {
                resolve = res;
                reject = rej;
              });
            }

            var id = ++this.navigationId;
            this.setTransition({
              id: id,
              source: source,
              restoredState: restoredState,
              currentUrlTree: this.currentUrlTree,
              currentRawUrl: this.rawUrlTree,
              rawUrl: rawUrl,
              extras: extras,
              resolve: resolve,
              reject: reject,
              promise: promise,
              currentSnapshot: this.routerState.snapshot,
              currentRouterState: this.routerState
            }); // Make sure that the error is propagated even though `processNavigations` catch
            // handler does not rethrow

            return promise["catch"](function (e) {
              return Promise.reject(e);
            });
          }
        }, {
          key: "setBrowserUrl",
          value: function setBrowserUrl(url, replaceUrl, id, state) {
            var path = this.urlSerializer.serialize(url);
            state = state || {};

            if (this.location.isCurrentPathEqualTo(path) || replaceUrl) {
              // TODO(jasonaden): Remove first `navigationId` and rely on `ng` namespace.
              this.location.replaceState(path, '', Object.assign(Object.assign({}, state), {
                navigationId: id
              }));
            } else {
              this.location.go(path, '', Object.assign(Object.assign({}, state), {
                navigationId: id
              }));
            }
          }
        }, {
          key: "resetStateAndUrl",
          value: function resetStateAndUrl(storedState, storedUrl, rawUrl) {
            this.routerState = storedState;
            this.currentUrlTree = storedUrl;
            this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);
            this.resetUrlToCurrentUrlTree();
          }
        }, {
          key: "resetUrlToCurrentUrlTree",
          value: function resetUrlToCurrentUrlTree() {
            this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree), '', {
              navigationId: this.lastSuccessfulId
            });
          }
        }]);

        return _Router;
      }();

      _Router.ɵfac = function Router_Factory(t) {
        return new (t || _Router)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Type), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_UrlSerializer), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_ChildrenOutletContexts), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_27__.Location), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModuleFactoryLoader), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Compiler), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](undefined));
      };

      _Router.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: _Router,
        factory: _Router.ɵfac
      });

      _Router.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Type
        }, {
          type: _UrlSerializer
        }, {
          type: _ChildrenOutletContexts
        }, {
          type: _angular_common__WEBPACK_IMPORTED_MODULE_27__.Location
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModuleFactoryLoader
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Compiler
        }, {
          type: undefined
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_Router, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Type
          }, {
            type: _UrlSerializer
          }, {
            type: _ChildrenOutletContexts
          }, {
            type: _angular_common__WEBPACK_IMPORTED_MODULE_27__.Location
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModuleFactoryLoader
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Compiler
          }, {
            type: undefined
          }];
        }, null);
      })();

      function validateCommands(commands) {
        for (var i = 0; i < commands.length; i++) {
          var cmd = commands[i];

          if (cmd == null) {
            throw new Error("The requested path contains ".concat(cmd, " segment at index ").concat(i));
          }
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description
       *
       * When applied to an element in a template, makes that element a link
       * that initiates navigation to a route. Navigation opens one or more routed components
       * in one or more `<router-outlet>` locations on the page.
       *
       * Given a route configuration `[{ path: 'user/:name', component: UserCmp }]`,
       * the following creates a static link to the route:
       * `<a routerLink="/user/bob">link to user component</a>`
       *
       * You can use dynamic values to generate the link.
       * For a dynamic link, pass an array of path segments,
       * followed by the params for each segment.
       * For example, `['/team', teamId, 'user', userName, {details: true}]`
       * generates a link to `/team/11/user/bob;details=true`.
       *
       * Multiple static segments can be merged into one term and combined with dynamic segements.
       * For example, `['/team/11/user', userName, {details: true}]`
       *
       * The input that you provide to the link is treated as a delta to the current URL.
       * For instance, suppose the current URL is `/user/(box//aux:team)`.
       * The link `<a [routerLink]="['/user/jim']">Jim</a>` creates the URL
       * `/user/(jim//aux:team)`.
       * See {@link Router#createUrlTree createUrlTree} for more information.
       *
       * @usageNotes
       *
       * You can use absolute or relative paths in a link, set query parameters,
       * control how parameters are handled, and keep a history of navigation states.
       *
       * ### Relative link paths
       *
       * The first segment name can be prepended with `/`, `./`, or `../`.
       * * If the first segment begins with `/`, the router looks up the route from the root of the
       *   app.
       * * If the first segment begins with `./`, or doesn't begin with a slash, the router
       *   looks in the children of the current activated route.
       * * If the first segment begins with `../`, the router goes up one level in the route tree.
       *
       * ### Setting and handling query params and fragments
       *
       * The following link adds a query parameter and a fragment to the generated URL:
       *
       * ```
       * <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" fragment="education">
       *   link to user component
       * </a>
       * ```
       * By default, the directive constructs the new URL using the given query parameters.
       * The example generates the link: `/user/bob?debug=true#education`.
       *
       * You can instruct the directive to handle query parameters differently
       * by specifying the `queryParamsHandling` option in the link.
       * Allowed values are:
       *
       *  - `'merge'`: Merge the given `queryParams` into the current query params.
       *  - `'preserve'`: Preserve the current query params.
       *
       * For example:
       *
       * ```
       * <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" queryParamsHandling="merge">
       *   link to user component
       * </a>
       * ```
       *
       * See {@link UrlCreationOptions.queryParamsHandling UrlCreationOptions#queryParamsHandling}.
       *
       * ### Preserving navigation history
       *
       * You can provide a `state` value to be persisted to the browser's
       * [`History.state` property](https://developer.mozilla.org/en-US/docs/Web/API/History#Properties).
       * For example:
       *
       * ```
       * <a [routerLink]="['/user/bob']" [state]="{tracingId: 123}">
       *   link to user component
       * </a>
       * ```
       *
       * Use {@link Router.getCurrentNavigation() Router#getCurrentNavigation} to retrieve a saved
       * navigation-state value. For example, to capture the `tracingId` during the `NavigationStart`
       * event:
       *
       * ```
       * // Get NavigationStart events
       * router.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {
       *   const navigation = router.getCurrentNavigation();
       *   tracingService.trace({id: navigation.extras.state.tracingId});
       * });
       * ```
       *
       * @ngModule RouterModule
       *
       * @publicApi
       */


      var _RouterLink = /*#__PURE__*/function () {
        function _RouterLink(router, route, tabIndex, renderer, el) {
          _classCallCheck2(this, _RouterLink);

          this.router = router;
          this.route = route;
          this.commands = [];
          /** @internal */

          this.onChanges = new rxjs__WEBPACK_IMPORTED_MODULE_24__.Subject();

          if (tabIndex == null) {
            renderer.setAttribute(el.nativeElement, 'tabindex', '0');
          }
        }
        /** @nodoc */


        _createClass2(_RouterLink, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            // This is subscribed to by `RouterLinkActive` so that it knows to update when there are changes
            // to the RouterLinks it's tracking.
            this.onChanges.next(this);
          }
          /**
           * Commands to pass to {@link Router#createUrlTree Router#createUrlTree}.
           *   - **array**: commands to pass to {@link Router#createUrlTree Router#createUrlTree}.
           *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`
           *   - **null|undefined**: shorthand for an empty array of commands, i.e. `[]`
           * @see {@link Router#createUrlTree Router#createUrlTree}
           */

        }, {
          key: "routerLink",
          set: function set(commands) {
            if (commands != null) {
              this.commands = Array.isArray(commands) ? commands : [commands];
            } else {
              this.commands = [];
            }
          }
          /** @nodoc */

        }, {
          key: "onClick",
          value: function onClick() {
            var extras = {
              skipLocationChange: attrBoolValue(this.skipLocationChange),
              replaceUrl: attrBoolValue(this.replaceUrl),
              state: this.state
            };
            this.router.navigateByUrl(this.urlTree, extras);
            return true;
          }
        }, {
          key: "urlTree",
          get: function get() {
            return this.router.createUrlTree(this.commands, {
              // If the `relativeTo` input is not defined, we want to use `this.route` by default.
              // Otherwise, we should use the value provided by the user in the input.
              relativeTo: this.relativeTo !== undefined ? this.relativeTo : this.route,
              queryParams: this.queryParams,
              fragment: this.fragment,
              queryParamsHandling: this.queryParamsHandling,
              preserveFragment: attrBoolValue(this.preserveFragment)
            });
          }
        }]);

        return _RouterLink;
      }();

      _RouterLink.ɵfac = function RouterLink_Factory(t) {
        return new (t || _RouterLink)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_Router), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_ActivatedRoute), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinjectAttribute"]('tabindex'), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef));
      };

      _RouterLink.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _RouterLink,
        selectors: [["", "routerLink", "", 5, "a", 5, "area"]],
        hostBindings: function RouterLink_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function RouterLink_click_HostBindingHandler() {
              return ctx.onClick();
            });
          }
        },
        inputs: {
          routerLink: "routerLink",
          queryParams: "queryParams",
          fragment: "fragment",
          queryParamsHandling: "queryParamsHandling",
          preserveFragment: "preserveFragment",
          skipLocationChange: "skipLocationChange",
          replaceUrl: "replaceUrl",
          state: "state",
          relativeTo: "relativeTo"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });

      _RouterLink.ctorParameters = function () {
        return [{
          type: _Router
        }, {
          type: _ActivatedRoute
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Attribute,
            args: ['tabindex']
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
        }];
      };

      _RouterLink.propDecorators = {
        queryParams: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        fragment: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        queryParamsHandling: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        preserveFragment: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        skipLocationChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        replaceUrl: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        state: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        relativeTo: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        routerLink: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        onClick: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
          args: ['click']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_RouterLink, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: ':not(a):not(area)[routerLink]'
          }]
        }], function () {
          return [{
            type: _Router
          }, {
            type: _ActivatedRoute
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Attribute,
              args: ['tabindex']
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }];
        }, {
          routerLink: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],

          /** @nodoc */
          onClick: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ['click']
          }],
          queryParams: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          fragment: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          queryParamsHandling: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          preserveFragment: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          skipLocationChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          replaceUrl: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          state: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          relativeTo: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();
      /**
       * @description
       *
       * Lets you link to specific routes in your app.
       *
       * See `RouterLink` for more information.
       *
       * @ngModule RouterModule
       *
       * @publicApi
       */


      var _RouterLinkWithHref = /*#__PURE__*/function () {
        function _RouterLinkWithHref(router, route, locationStrategy) {
          var _this160 = this;

          _classCallCheck2(this, _RouterLinkWithHref);

          this.router = router;
          this.route = route;
          this.locationStrategy = locationStrategy;
          this.commands = [];
          /** @internal */

          this.onChanges = new rxjs__WEBPACK_IMPORTED_MODULE_24__.Subject();
          this.subscription = router.events.subscribe(function (s) {
            if (s instanceof _NavigationEnd) {
              _this160.updateTargetUrlAndHref();
            }
          });
        }
        /**
         * Commands to pass to {@link Router#createUrlTree Router#createUrlTree}.
         *   - **array**: commands to pass to {@link Router#createUrlTree Router#createUrlTree}.
         *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`
         *   - **null|undefined**: shorthand for an empty array of commands, i.e. `[]`
         * @see {@link Router#createUrlTree Router#createUrlTree}
         */


        _createClass2(_RouterLinkWithHref, [{
          key: "routerLink",
          set: function set(commands) {
            if (commands != null) {
              this.commands = Array.isArray(commands) ? commands : [commands];
            } else {
              this.commands = [];
            }
          }
          /** @nodoc */

        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            this.updateTargetUrlAndHref();
            this.onChanges.next(this);
          }
          /** @nodoc */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.subscription.unsubscribe();
          }
          /** @nodoc */

        }, {
          key: "onClick",
          value: function onClick(button, ctrlKey, shiftKey, altKey, metaKey) {
            if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {
              return true;
            }

            if (typeof this.target === 'string' && this.target != '_self') {
              return true;
            }

            var extras = {
              skipLocationChange: attrBoolValue(this.skipLocationChange),
              replaceUrl: attrBoolValue(this.replaceUrl),
              state: this.state
            };
            this.router.navigateByUrl(this.urlTree, extras);
            return false;
          }
        }, {
          key: "updateTargetUrlAndHref",
          value: function updateTargetUrlAndHref() {
            this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
          }
        }, {
          key: "urlTree",
          get: function get() {
            return this.router.createUrlTree(this.commands, {
              // If the `relativeTo` input is not defined, we want to use `this.route` by default.
              // Otherwise, we should use the value provided by the user in the input.
              relativeTo: this.relativeTo !== undefined ? this.relativeTo : this.route,
              queryParams: this.queryParams,
              fragment: this.fragment,
              queryParamsHandling: this.queryParamsHandling,
              preserveFragment: attrBoolValue(this.preserveFragment)
            });
          }
        }]);

        return _RouterLinkWithHref;
      }();

      _RouterLinkWithHref.ɵfac = function RouterLinkWithHref_Factory(t) {
        return new (t || _RouterLinkWithHref)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_Router), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_ActivatedRoute), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_27__.LocationStrategy));
      };

      _RouterLinkWithHref.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _RouterLinkWithHref,
        selectors: [["a", "routerLink", ""], ["area", "routerLink", ""]],
        hostVars: 2,
        hostBindings: function RouterLinkWithHref_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function RouterLinkWithHref_click_HostBindingHandler($event) {
              return ctx.onClick($event.button, $event.ctrlKey, $event.shiftKey, $event.altKey, $event.metaKey);
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵhostProperty"]("href", ctx.href, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrl"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("target", ctx.target);
          }
        },
        inputs: {
          routerLink: "routerLink",
          target: "target",
          queryParams: "queryParams",
          fragment: "fragment",
          queryParamsHandling: "queryParamsHandling",
          preserveFragment: "preserveFragment",
          skipLocationChange: "skipLocationChange",
          replaceUrl: "replaceUrl",
          state: "state",
          relativeTo: "relativeTo"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });

      _RouterLinkWithHref.ctorParameters = function () {
        return [{
          type: _Router
        }, {
          type: _ActivatedRoute
        }, {
          type: _angular_common__WEBPACK_IMPORTED_MODULE_27__.LocationStrategy
        }];
      };

      _RouterLinkWithHref.propDecorators = {
        target: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
          args: ['attr.target']
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        queryParams: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        fragment: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        queryParamsHandling: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        preserveFragment: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        skipLocationChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        replaceUrl: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        state: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        relativeTo: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        href: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding
        }],
        routerLink: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        onClick: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
          args: ['click', ['$event.button', '$event.ctrlKey', '$event.shiftKey', '$event.altKey', '$event.metaKey']]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_RouterLinkWithHref, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: 'a[routerLink],area[routerLink]'
          }]
        }], function () {
          return [{
            type: _Router
          }, {
            type: _ActivatedRoute
          }, {
            type: _angular_common__WEBPACK_IMPORTED_MODULE_27__.LocationStrategy
          }];
        }, {
          routerLink: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],

          /** @nodoc */
          onClick: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ['click', ['$event.button', '$event.ctrlKey', '$event.shiftKey', '$event.altKey', '$event.metaKey']]
          }],
          href: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding
          }],
          target: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
            args: ['attr.target']
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          queryParams: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          fragment: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          queryParamsHandling: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          preserveFragment: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          skipLocationChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          replaceUrl: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          state: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          relativeTo: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();

      function attrBoolValue(s) {
        return s === '' || !!s;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       *
       * @description
       *
       * Tracks whether the linked route of an element is currently active, and allows you
       * to specify one or more CSS classes to add to the element when the linked route
       * is active.
       *
       * Use this directive to create a visual distinction for elements associated with an active route.
       * For example, the following code highlights the word "Bob" when the router
       * activates the associated route:
       *
       * ```
       * <a routerLink="/user/bob" routerLinkActive="active-link">Bob</a>
       * ```
       *
       * Whenever the URL is either '/user' or '/user/bob', the "active-link" class is
       * added to the anchor tag. If the URL changes, the class is removed.
       *
       * You can set more than one class using a space-separated string or an array.
       * For example:
       *
       * ```
       * <a routerLink="/user/bob" routerLinkActive="class1 class2">Bob</a>
       * <a routerLink="/user/bob" [routerLinkActive]="['class1', 'class2']">Bob</a>
       * ```
       *
       * To add the classes only when the URL matches the link exactly, add the option `exact: true`:
       *
       * ```
       * <a routerLink="/user/bob" routerLinkActive="active-link" [routerLinkActiveOptions]="{exact:
       * true}">Bob</a>
       * ```
       *
       * To directly check the `isActive` status of the link, assign the `RouterLinkActive`
       * instance to a template variable.
       * For example, the following checks the status without assigning any CSS classes:
       *
       * ```
       * <a routerLink="/user/bob" routerLinkActive #rla="routerLinkActive">
       *   Bob {{ rla.isActive ? '(already open)' : ''}}
       * </a>
       * ```
       *
       * You can apply the `RouterLinkActive` directive to an ancestor of linked elements.
       * For example, the following sets the active-link class on the `<div>`  parent tag
       * when the URL is either '/user/jim' or '/user/bob'.
       *
       * ```
       * <div routerLinkActive="active-link" [routerLinkActiveOptions]="{exact: true}">
       *   <a routerLink="/user/jim">Jim</a>
       *   <a routerLink="/user/bob">Bob</a>
       * </div>
       * ```
       *
       * @ngModule RouterModule
       *
       * @publicApi
       */


      var _RouterLinkActive = /*#__PURE__*/function () {
        function _RouterLinkActive(router, element, renderer, cdr, link, linkWithHref) {
          var _this161 = this;

          _classCallCheck2(this, _RouterLinkActive);

          this.router = router;
          this.element = element;
          this.renderer = renderer;
          this.cdr = cdr;
          this.link = link;
          this.linkWithHref = linkWithHref;
          this.classes = [];
          this.isActive = false;
          /**
           * Options to configure how to determine if the router link is active.
           *
           * These options are passed to the `Router.isActive()` function.
           *
           * @see Router.isActive
           */

          this.routerLinkActiveOptions = {
            exact: false
          };
          this.routerEventsSubscription = router.events.subscribe(function (s) {
            if (s instanceof _NavigationEnd) {
              _this161.update();
            }
          });
        }
        /** @nodoc */


        _createClass2(_RouterLinkActive, [{
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            var _this162 = this;

            // `of(null)` is used to force subscribe body to execute once immediately (like `startWith`).
            (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(this.links.changes, this.linksWithHrefs.changes, (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(null)).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_28__.mergeAll)()).subscribe(function (_) {
              _this162.update();

              _this162.subscribeToEachLinkOnChanges();
            });
          }
        }, {
          key: "subscribeToEachLinkOnChanges",
          value: function subscribeToEachLinkOnChanges() {
            var _this163 = this;

            var _a;

            (_a = this.linkInputChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
            var allLinkChanges = [].concat(_toConsumableArray(this.links.toArray()), _toConsumableArray(this.linksWithHrefs.toArray()), [this.link, this.linkWithHref]).filter(function (link) {
              return !!link;
            }).map(function (link) {
              return link.onChanges;
            });
            this.linkInputChangesSubscription = (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(allLinkChanges).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_28__.mergeAll)()).subscribe(function (link) {
              if (_this163.isActive !== _this163.isLinkActive(_this163.router)(link)) {
                _this163.update();
              }
            });
          }
        }, {
          key: "routerLinkActive",
          set: function set(data) {
            var classes = Array.isArray(data) ? data : data.split(' ');
            this.classes = classes.filter(function (c) {
              return !!c;
            });
          }
          /** @nodoc */

        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            this.update();
          }
          /** @nodoc */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            var _a;

            this.routerEventsSubscription.unsubscribe();
            (_a = this.linkInputChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
          }
        }, {
          key: "update",
          value: function update() {
            var _this164 = this;

            if (!this.links || !this.linksWithHrefs || !this.router.navigated) return;
            Promise.resolve().then(function () {
              var hasActiveLinks = _this164.hasActiveLinks();

              if (_this164.isActive !== hasActiveLinks) {
                _this164.isActive = hasActiveLinks;

                _this164.cdr.markForCheck();

                _this164.classes.forEach(function (c) {
                  if (hasActiveLinks) {
                    _this164.renderer.addClass(_this164.element.nativeElement, c);
                  } else {
                    _this164.renderer.removeClass(_this164.element.nativeElement, c);
                  }
                });
              }
            });
          }
        }, {
          key: "isLinkActive",
          value: function isLinkActive(router) {
            var options = 'paths' in this.routerLinkActiveOptions ? this.routerLinkActiveOptions : // While the types should disallow `undefined` here, it's possible without strict inputs
            this.routerLinkActiveOptions.exact || false;
            return function (link) {
              return router.isActive(link.urlTree, options);
            };
          }
        }, {
          key: "hasActiveLinks",
          value: function hasActiveLinks() {
            var isActiveCheckFn = this.isLinkActive(this.router);
            return this.link && isActiveCheckFn(this.link) || this.linkWithHref && isActiveCheckFn(this.linkWithHref) || this.links.some(isActiveCheckFn) || this.linksWithHrefs.some(isActiveCheckFn);
          }
        }]);

        return _RouterLinkActive;
      }();

      _RouterLinkActive.ɵfac = function RouterLinkActive_Factory(t) {
        return new (t || _RouterLinkActive)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_Router), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_RouterLink, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_RouterLinkWithHref, 8));
      };

      _RouterLinkActive.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _RouterLinkActive,
        selectors: [["", "routerLinkActive", ""]],
        contentQueries: function RouterLinkActive_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, _RouterLink, 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, _RouterLinkWithHref, 5);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.links = _t);
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.linksWithHrefs = _t);
          }
        },
        inputs: {
          routerLinkActiveOptions: "routerLinkActiveOptions",
          routerLinkActive: "routerLinkActive"
        },
        exportAs: ["routerLinkActive"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });

      _RouterLinkActive.ctorParameters = function () {
        return [{
          type: _Router
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
        }, {
          type: _RouterLink,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }]
        }, {
          type: _RouterLinkWithHref,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }]
        }];
      };

      _RouterLinkActive.propDecorators = {
        links: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ContentChildren,
          args: [_RouterLink, {
            descendants: true
          }]
        }],
        linksWithHrefs: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ContentChildren,
          args: [_RouterLinkWithHref, {
            descendants: true
          }]
        }],
        routerLinkActiveOptions: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        routerLinkActive: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_RouterLinkActive, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[routerLinkActive]',
            exportAs: 'routerLinkActive'
          }]
        }], function () {
          return [{
            type: _Router
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
          }, {
            type: _RouterLink,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }]
          }, {
            type: _RouterLinkWithHref,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }]
          }];
        }, {
          routerLinkActiveOptions: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          routerLinkActive: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          links: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ContentChildren,
            args: [_RouterLink, {
              descendants: true
            }]
          }],
          linksWithHrefs: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ContentChildren,
            args: [_RouterLinkWithHref, {
              descendants: true
            }]
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description
       *
       * Acts as a placeholder that Angular dynamically fills based on the current router state.
       *
       * Each outlet can have a unique name, determined by the optional `name` attribute.
       * The name cannot be set or changed dynamically. If not set, default value is "primary".
       *
       * ```
       * <router-outlet></router-outlet>
       * <router-outlet name='left'></router-outlet>
       * <router-outlet name='right'></router-outlet>
       * ```
       *
       * Named outlets can be the targets of secondary routes.
       * The `Route` object for a secondary route has an `outlet` property to identify the target outlet:
       *
       * `{path: <base-path>, component: <component>, outlet: <target_outlet_name>}`
       *
       * Using named outlets and secondary routes, you can target multiple outlets in
       * the same `RouterLink` directive.
       *
       * The router keeps track of separate branches in a navigation tree for each named outlet and
       * generates a representation of that tree in the URL.
       * The URL for a secondary route uses the following syntax to specify both the primary and secondary
       * routes at the same time:
       *
       * `http://base-path/primary-route-path(outlet-name:route-path)`
       *
       * A router outlet emits an activate event when a new component is instantiated,
       * and a deactivate event when a component is destroyed.
       *
       * ```
       * <router-outlet
       *   (activate)='onActivate($event)'
       *   (deactivate)='onDeactivate($event)'></router-outlet>
       * ```
       *
       * @see [Routing tutorial](guide/router-tutorial-toh#named-outlets "Example of a named
       * outlet and secondary route configuration").
       * @see `RouterLink`
       * @see `Route`
       * @ngModule RouterModule
       *
       * @publicApi
       */


      var _RouterOutlet = /*#__PURE__*/function () {
        function _RouterOutlet(parentContexts, location, resolver, name, changeDetector) {
          _classCallCheck2(this, _RouterOutlet);

          this.parentContexts = parentContexts;
          this.location = location;
          this.resolver = resolver;
          this.changeDetector = changeDetector;
          this.activated = null;
          this._activatedRoute = null;
          this.activateEvents = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
          this.deactivateEvents = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
          this.name = name || _PRIMARY_OUTLET;
          parentContexts.onChildOutletCreated(this.name, this);
        }
        /** @nodoc */


        _createClass2(_RouterOutlet, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.parentContexts.onChildOutletDestroyed(this.name);
          }
          /** @nodoc */

        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            if (!this.activated) {
              // If the outlet was not instantiated at the time the route got activated we need to populate
              // the outlet when it is initialized (ie inside a NgIf)
              var context = this.parentContexts.getContext(this.name);

              if (context && context.route) {
                if (context.attachRef) {
                  // `attachRef` is populated when there is an existing component to mount
                  this.attach(context.attachRef, context.route);
                } else {
                  // otherwise the component defined in the configuration is created
                  this.activateWith(context.route, context.resolver || null);
                }
              }
            }
          }
        }, {
          key: "isActivated",
          get: function get() {
            return !!this.activated;
          }
          /**
           * @returns The currently activated component instance.
           * @throws An error if the outlet is not activated.
           */

        }, {
          key: "component",
          get: function get() {
            if (!this.activated) throw new Error('Outlet is not activated');
            return this.activated.instance;
          }
        }, {
          key: "activatedRoute",
          get: function get() {
            if (!this.activated) throw new Error('Outlet is not activated');
            return this._activatedRoute;
          }
        }, {
          key: "activatedRouteData",
          get: function get() {
            if (this._activatedRoute) {
              return this._activatedRoute.snapshot.data;
            }

            return {};
          }
          /**
           * Called when the `RouteReuseStrategy` instructs to detach the subtree
           */

        }, {
          key: "detach",
          value: function detach() {
            if (!this.activated) throw new Error('Outlet is not activated');
            this.location.detach();
            var cmp = this.activated;
            this.activated = null;
            this._activatedRoute = null;
            return cmp;
          }
          /**
           * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
           */

        }, {
          key: "attach",
          value: function attach(ref, activatedRoute) {
            this.activated = ref;
            this._activatedRoute = activatedRoute;
            this.location.insert(ref.hostView);
          }
        }, {
          key: "deactivate",
          value: function deactivate() {
            if (this.activated) {
              var c = this.component;
              this.activated.destroy();
              this.activated = null;
              this._activatedRoute = null;
              this.deactivateEvents.emit(c);
            }
          }
        }, {
          key: "activateWith",
          value: function activateWith(activatedRoute, resolver) {
            if (this.isActivated) {
              throw new Error('Cannot activate an already activated outlet');
            }

            this._activatedRoute = activatedRoute;
            var snapshot = activatedRoute._futureSnapshot;
            var component = snapshot.routeConfig.component;
            resolver = resolver || this.resolver;
            var factory = resolver.resolveComponentFactory(component);
            var childContexts = this.parentContexts.getOrCreateContext(this.name).children;
            var injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);
            this.activated = this.location.createComponent(factory, this.location.length, injector); // Calling `markForCheck` to make sure we will run the change detection when the
            // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.

            this.changeDetector.markForCheck();
            this.activateEvents.emit(this.activated.instance);
          }
        }]);

        return _RouterOutlet;
      }();

      _RouterOutlet.ɵfac = function RouterOutlet_Factory(t) {
        return new (t || _RouterOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_ChildrenOutletContexts), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ComponentFactoryResolver), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinjectAttribute"]('name'), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
      };

      _RouterOutlet.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _RouterOutlet,
        selectors: [["router-outlet"]],
        outputs: {
          activateEvents: "activate",
          deactivateEvents: "deactivate"
        },
        exportAs: ["outlet"]
      });

      _RouterOutlet.ctorParameters = function () {
        return [{
          type: _ChildrenOutletContexts
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ComponentFactoryResolver
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Attribute,
            args: ['name']
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
        }];
      };

      _RouterOutlet.propDecorators = {
        activateEvents: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output,
          args: ['activate']
        }],
        deactivateEvents: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output,
          args: ['deactivate']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_RouterOutlet, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: 'router-outlet',
            exportAs: 'outlet'
          }]
        }], function () {
          return [{
            type: _ChildrenOutletContexts
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ComponentFactoryResolver
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Attribute,
              args: ['name']
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
          }];
        }, {
          activateEvents: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output,
            args: ['activate']
          }],
          deactivateEvents: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output,
            args: ['deactivate']
          }]
        });
      })();

      var OutletInjector = /*#__PURE__*/function () {
        function OutletInjector(route, childContexts, parent) {
          _classCallCheck2(this, OutletInjector);

          this.route = route;
          this.childContexts = childContexts;
          this.parent = parent;
        }

        _createClass2(OutletInjector, [{
          key: "get",
          value: function get(token, notFoundValue) {
            if (token === _ActivatedRoute) {
              return this.route;
            }

            if (token === _ChildrenOutletContexts) {
              return this.childContexts;
            }

            return this.parent.get(token, notFoundValue);
          }
        }]);

        return OutletInjector;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @description
       *
       * Provides a preloading strategy.
       *
       * @publicApi
       */


      var _PreloadingStrategy = function _PreloadingStrategy() {
        _classCallCheck2(this, _PreloadingStrategy);
      };
      /**
       * @description
       *
       * Provides a preloading strategy that preloads all modules as quickly as possible.
       *
       * ```
       * RouterModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})
       * ```
       *
       * @publicApi
       */


      var _PreloadAllModules = /*#__PURE__*/function () {
        function _PreloadAllModules() {
          _classCallCheck2(this, _PreloadAllModules);
        }

        _createClass2(_PreloadAllModules, [{
          key: "preload",
          value: function preload(route, fn) {
            return fn().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.catchError)(function () {
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(null);
            }));
          }
        }]);

        return _PreloadAllModules;
      }();
      /**
       * @description
       *
       * Provides a preloading strategy that does not preload any modules.
       *
       * This strategy is enabled by default.
       *
       * @publicApi
       */


      var _NoPreloading = /*#__PURE__*/function () {
        function _NoPreloading() {
          _classCallCheck2(this, _NoPreloading);
        }

        _createClass2(_NoPreloading, [{
          key: "preload",
          value: function preload(route, fn) {
            return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(null);
          }
        }]);

        return _NoPreloading;
      }();
      /**
       * The preloader optimistically loads all router configurations to
       * make navigations into lazily-loaded sections of the application faster.
       *
       * The preloader runs in the background. When the router bootstraps, the preloader
       * starts listening to all navigation events. After every such event, the preloader
       * will check if any configurations can be loaded lazily.
       *
       * If a route is protected by `canLoad` guards, the preloaded will not load it.
       *
       * @publicApi
       */


      var _RouterPreloader = /*#__PURE__*/function () {
        function _RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {
          _classCallCheck2(this, _RouterPreloader);

          this.router = router;
          this.injector = injector;
          this.preloadingStrategy = preloadingStrategy;

          var onStartLoad = function onStartLoad(r) {
            return router.triggerEvent(new _RouteConfigLoadStart(r));
          };

          var onEndLoad = function onEndLoad(r) {
            return router.triggerEvent(new _RouteConfigLoadEnd(r));
          };

          this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);
        }

        _createClass2(_RouterPreloader, [{
          key: "setUpPreloading",
          value: function setUpPreloading() {
            var _this165 = this;

            this.subscription = this.router.events.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.filter)(function (e) {
              return e instanceof _NavigationEnd;
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.concatMap)(function () {
              return _this165.preload();
            })).subscribe(function () {});
          }
        }, {
          key: "preload",
          value: function preload() {
            var ngModule = this.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModuleRef);
            return this.processRoutes(ngModule, this.router.config);
          }
          /** @nodoc */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this.subscription) {
              this.subscription.unsubscribe();
            }
          }
        }, {
          key: "processRoutes",
          value: function processRoutes(ngModule, routes) {
            var res = [];

            var _iterator19 = _createForOfIteratorHelper(routes),
                _step19;

            try {
              for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
                var route = _step19.value;

                // we already have the config loaded, just recurse
                if (route.loadChildren && !route.canLoad && route._loadedConfig) {
                  var childConfig = route._loadedConfig;
                  res.push(this.processRoutes(childConfig.module, childConfig.routes)); // no config loaded, fetch the config
                } else if (route.loadChildren && !route.canLoad) {
                  res.push(this.preloadConfig(ngModule, route)); // recurse into children
                } else if (route.children) {
                  res.push(this.processRoutes(ngModule, route.children));
                }
              }
            } catch (err) {
              _iterator19.e(err);
            } finally {
              _iterator19.f();
            }

            return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(res).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_28__.mergeAll)(), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(function (_) {
              return void 0;
            }));
          }
        }, {
          key: "preloadConfig",
          value: function preloadConfig(ngModule, route) {
            var _this166 = this;

            return this.preloadingStrategy.preload(route, function () {
              var loaded$ = route._loadedConfig ? (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(route._loadedConfig) : _this166.loader.load(ngModule.injector, route);
              return loaded$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(function (config) {
                route._loadedConfig = config;
                return _this166.processRoutes(config.module, config.routes);
              }));
            });
          }
        }]);

        return _RouterPreloader;
      }();

      _RouterPreloader.ɵfac = function RouterPreloader_Factory(t) {
        return new (t || _RouterPreloader)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_Router), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModuleFactoryLoader), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Compiler), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_PreloadingStrategy));
      };

      _RouterPreloader.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: _RouterPreloader,
        factory: _RouterPreloader.ɵfac
      });

      _RouterPreloader.ctorParameters = function () {
        return [{
          type: _Router
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModuleFactoryLoader
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Compiler
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector
        }, {
          type: _PreloadingStrategy
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_RouterPreloader, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: _Router
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModuleFactoryLoader
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Compiler
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector
          }, {
            type: _PreloadingStrategy
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var RouterScroller = /*#__PURE__*/function () {
        function RouterScroller(router,
        /** @docsNotRequired */
        viewportScroller) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

          _classCallCheck2(this, RouterScroller);

          this.router = router;
          this.viewportScroller = viewportScroller;
          this.options = options;
          this.lastId = 0;
          this.lastSource = 'imperative';
          this.restoredId = 0;
          this.store = {}; // Default both options to 'disabled'

          options.scrollPositionRestoration = options.scrollPositionRestoration || 'disabled';
          options.anchorScrolling = options.anchorScrolling || 'disabled';
        }

        _createClass2(RouterScroller, [{
          key: "init",
          value: function init() {
            // we want to disable the automatic scrolling because having two places
            // responsible for scrolling results race conditions, especially given
            // that browser don't implement this behavior consistently
            if (this.options.scrollPositionRestoration !== 'disabled') {
              this.viewportScroller.setHistoryScrollRestoration('manual');
            }

            this.routerEventsSubscription = this.createScrollEvents();
            this.scrollEventsSubscription = this.consumeScrollEvents();
          }
        }, {
          key: "createScrollEvents",
          value: function createScrollEvents() {
            var _this167 = this;

            return this.router.events.subscribe(function (e) {
              if (e instanceof _NavigationStart) {
                // store the scroll position of the current stable navigations.
                _this167.store[_this167.lastId] = _this167.viewportScroller.getScrollPosition();
                _this167.lastSource = e.navigationTrigger;
                _this167.restoredId = e.restoredState ? e.restoredState.navigationId : 0;
              } else if (e instanceof _NavigationEnd) {
                _this167.lastId = e.id;

                _this167.scheduleScrollEvent(e, _this167.router.parseUrl(e.urlAfterRedirects).fragment);
              }
            });
          }
        }, {
          key: "consumeScrollEvents",
          value: function consumeScrollEvents() {
            var _this168 = this;

            return this.router.events.subscribe(function (e) {
              if (!(e instanceof _Scroll)) return; // a popstate event. The pop state event will always ignore anchor scrolling.

              if (e.position) {
                if (_this168.options.scrollPositionRestoration === 'top') {
                  _this168.viewportScroller.scrollToPosition([0, 0]);
                } else if (_this168.options.scrollPositionRestoration === 'enabled') {
                  _this168.viewportScroller.scrollToPosition(e.position);
                } // imperative navigation "forward"

              } else {
                if (e.anchor && _this168.options.anchorScrolling === 'enabled') {
                  _this168.viewportScroller.scrollToAnchor(e.anchor);
                } else if (_this168.options.scrollPositionRestoration !== 'disabled') {
                  _this168.viewportScroller.scrollToPosition([0, 0]);
                }
              }
            });
          }
        }, {
          key: "scheduleScrollEvent",
          value: function scheduleScrollEvent(routerEvent, anchor) {
            this.router.triggerEvent(new _Scroll(routerEvent, this.lastSource === 'popstate' ? this.store[this.restoredId] : null, anchor));
          }
          /** @nodoc */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this.routerEventsSubscription) {
              this.routerEventsSubscription.unsubscribe();
            }

            if (this.scrollEventsSubscription) {
              this.scrollEventsSubscription.unsubscribe();
            }
          }
        }]);

        return RouterScroller;
      }();

      RouterScroller.ɵfac = function RouterScroller_Factory(t) {
        return new (t || RouterScroller)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_Router), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_27__.ViewportScroller), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](undefined));
      };

      RouterScroller.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: RouterScroller,
        factory: RouterScroller.ɵfac
      });

      RouterScroller.ctorParameters = function () {
        return [{
          type: _Router
        }, {
          type: _angular_common__WEBPACK_IMPORTED_MODULE_27__.ViewportScroller
        }, {
          type: undefined
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](RouterScroller, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: _Router
          }, {
            type: _angular_common__WEBPACK_IMPORTED_MODULE_27__.ViewportScroller
          }, {
            type: undefined
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The directives defined in the `RouterModule`.
       */


      var ROUTER_DIRECTIVES = [_RouterOutlet, _RouterLink, _RouterLinkWithHref, _RouterLinkActive, _ɵEmptyOutletComponent];
      /**
       * A [DI token](guide/glossary/#di-token) for the router service.
       *
       * @publicApi
       */

      var _ROUTER_CONFIGURATION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('ROUTER_CONFIGURATION');
      /**
       * @docsNotRequired
       */


      var ROUTER_FORROOT_GUARD = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('ROUTER_FORROOT_GUARD');
      var ɵ0 = {
        enableTracing: false
      };
      var ROUTER_PROVIDERS = [_angular_common__WEBPACK_IMPORTED_MODULE_27__.Location, {
        provide: _UrlSerializer,
        useClass: _DefaultUrlSerializer
      }, {
        provide: _Router,
        useFactory: setupRouter,
        deps: [_UrlSerializer, _ChildrenOutletContexts, _angular_common__WEBPACK_IMPORTED_MODULE_27__.Location, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector, _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModuleFactoryLoader, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Compiler, _ROUTES, _ROUTER_CONFIGURATION, [_UrlHandlingStrategy, new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional()], [_RouteReuseStrategy, new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional()]]
      }, _ChildrenOutletContexts, {
        provide: _ActivatedRoute,
        useFactory: rootRoute,
        deps: [_Router]
      }, {
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModuleFactoryLoader,
        useClass: _angular_core__WEBPACK_IMPORTED_MODULE_0__.SystemJsNgModuleLoader
      }, _RouterPreloader, _NoPreloading, _PreloadAllModules, {
        provide: _ROUTER_CONFIGURATION,
        useValue: ɵ0
      }];

      function routerNgProbeToken() {
        return new _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgProbeToken('Router', _Router);
      }
      /**
       * @description
       *
       * Adds directives and providers for in-app navigation among views defined in an application.
       * Use the Angular `Router` service to declaratively specify application states and manage state
       * transitions.
       *
       * You can import this NgModule multiple times, once for each lazy-loaded bundle.
       * However, only one `Router` service can be active.
       * To ensure this, there are two ways to register routes when importing this module:
       *
       * * The `forRoot()` method creates an `NgModule` that contains all the directives, the given
       * routes, and the `Router` service itself.
       * * The `forChild()` method creates an `NgModule` that contains all the directives and the given
       * routes, but does not include the `Router` service.
       *
       * @see [Routing and Navigation guide](guide/router) for an
       * overview of how the `Router` service should be used.
       *
       * @publicApi
       */


      var _RouterModule = /*#__PURE__*/function () {
        // Note: We are injecting the Router so it gets created eagerly...
        function _RouterModule(guard, router) {
          _classCallCheck2(this, _RouterModule);
        }
        /**
         * Creates and configures a module with all the router providers and directives.
         * Optionally sets up an application listener to perform an initial navigation.
         *
         * When registering the NgModule at the root, import as follows:
         *
         * ```
         * @NgModule({
         *   imports: [RouterModule.forRoot(ROUTES)]
         * })
         * class MyNgModule {}
         * ```
         *
         * @param routes An array of `Route` objects that define the navigation paths for the application.
         * @param config An `ExtraOptions` configuration object that controls how navigation is performed.
         * @return The new `NgModule`.
         *
         */


        _createClass2(_RouterModule, null, [{
          key: "forRoot",
          value: function forRoot(routes, config) {
            return {
              ngModule: _RouterModule,
              providers: [ROUTER_PROVIDERS, _provideRoutes(routes), {
                provide: ROUTER_FORROOT_GUARD,
                useFactory: provideForRootGuard,
                deps: [[_Router, new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional(), new _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf()]]
              }, {
                provide: _ROUTER_CONFIGURATION,
                useValue: config ? config : {}
              }, {
                provide: _angular_common__WEBPACK_IMPORTED_MODULE_27__.LocationStrategy,
                useFactory: provideLocationStrategy,
                deps: [_angular_common__WEBPACK_IMPORTED_MODULE_27__.PlatformLocation, [new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject(_angular_common__WEBPACK_IMPORTED_MODULE_27__.APP_BASE_HREF), new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional()], _ROUTER_CONFIGURATION]
              }, {
                provide: RouterScroller,
                useFactory: createRouterScroller,
                deps: [_Router, _angular_common__WEBPACK_IMPORTED_MODULE_27__.ViewportScroller, _ROUTER_CONFIGURATION]
              }, {
                provide: _PreloadingStrategy,
                useExisting: config && config.preloadingStrategy ? config.preloadingStrategy : _NoPreloading
              }, {
                provide: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgProbeToken,
                multi: true,
                useFactory: routerNgProbeToken
              }, provideRouterInitializer()]
            };
          }
          /**
           * Creates a module with all the router directives and a provider registering routes,
           * without creating a new Router service.
           * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:
           *
           * ```
           * @NgModule({
           *   imports: [RouterModule.forChild(ROUTES)]
           * })
           * class MyNgModule {}
           * ```
           *
           * @param routes An array of `Route` objects that define the navigation paths for the submodule.
           * @return The new NgModule.
           *
           */

        }, {
          key: "forChild",
          value: function forChild(routes) {
            return {
              ngModule: _RouterModule,
              providers: [_provideRoutes(routes)]
            };
          }
        }]);

        return _RouterModule;
      }();

      _RouterModule.ɵfac = function RouterModule_Factory(t) {
        return new (t || _RouterModule)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](ROUTER_FORROOT_GUARD, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_Router, 8));
      };

      _RouterModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _RouterModule
      });
      _RouterModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});

      _RouterModule.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [ROUTER_FORROOT_GUARD]
          }]
        }, {
          type: _Router,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_RouterModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            declarations: ROUTER_DIRECTIVES,
            exports: ROUTER_DIRECTIVES,
            entryComponents: [_ɵEmptyOutletComponent]
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [ROUTER_FORROOT_GUARD]
            }]
          }, {
            type: _Router,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }]
          }];
        }, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_RouterModule, {
          declarations: [_RouterOutlet, _RouterLink, _RouterLinkWithHref, _RouterLinkActive, _ɵEmptyOutletComponent],
          exports: [_RouterOutlet, _RouterLink, _RouterLinkWithHref, _RouterLinkActive, _ɵEmptyOutletComponent]
        });
      })();

      function createRouterScroller(router, viewportScroller, config) {
        if (config.scrollOffset) {
          viewportScroller.setOffset(config.scrollOffset);
        }

        return new RouterScroller(router, viewportScroller, config);
      }

      function provideLocationStrategy(platformLocationStrategy, baseHref) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return options.useHash ? new _angular_common__WEBPACK_IMPORTED_MODULE_27__.HashLocationStrategy(platformLocationStrategy, baseHref) : new _angular_common__WEBPACK_IMPORTED_MODULE_27__.PathLocationStrategy(platformLocationStrategy, baseHref);
      }

      function provideForRootGuard(router) {
        if ((typeof ngDevMode === 'undefined' || ngDevMode) && router) {
          throw new Error("RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.");
        }

        return 'guarded';
      }
      /**
       * Registers a [DI provider](guide/glossary#provider) for a set of routes.
       * @param routes The route configuration to provide.
       *
       * @usageNotes
       *
       * ```
       * @NgModule({
       *   imports: [RouterModule.forChild(ROUTES)],
       *   providers: [provideRoutes(EXTRA_ROUTES)]
       * })
       * class MyNgModule {}
       * ```
       *
       * @publicApi
       */


      function _provideRoutes(routes) {
        return [{
          provide: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ANALYZE_FOR_ENTRY_COMPONENTS,
          multi: true,
          useValue: routes
        }, {
          provide: _ROUTES,
          multi: true,
          useValue: routes
        }];
      }

      function setupRouter(urlSerializer, contexts, location, injector, loader, compiler, config) {
        var opts = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};
        var urlHandlingStrategy = arguments.length > 8 ? arguments[8] : undefined;
        var routeReuseStrategy = arguments.length > 9 ? arguments[9] : undefined;
        var router = new _Router(null, urlSerializer, contexts, location, injector, loader, compiler, flatten(config));

        if (urlHandlingStrategy) {
          router.urlHandlingStrategy = urlHandlingStrategy;
        }

        if (routeReuseStrategy) {
          router.routeReuseStrategy = routeReuseStrategy;
        }

        assignExtraOptionsToRouter(opts, router);

        if (opts.enableTracing) {
          router.events.subscribe(function (e) {
            var _a, _b; // tslint:disable:no-console


            (_a = console.group) === null || _a === void 0 ? void 0 : _a.call(console, "Router Event: ".concat(e.constructor.name));
            console.log(e.toString());
            console.log(e);
            (_b = console.groupEnd) === null || _b === void 0 ? void 0 : _b.call(console); // tslint:enable:no-console
          });
        }

        return router;
      }

      function assignExtraOptionsToRouter(opts, router) {
        if (opts.errorHandler) {
          router.errorHandler = opts.errorHandler;
        }

        if (opts.malformedUriErrorHandler) {
          router.malformedUriErrorHandler = opts.malformedUriErrorHandler;
        }

        if (opts.onSameUrlNavigation) {
          router.onSameUrlNavigation = opts.onSameUrlNavigation;
        }

        if (opts.paramsInheritanceStrategy) {
          router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;
        }

        if (opts.relativeLinkResolution) {
          router.relativeLinkResolution = opts.relativeLinkResolution;
        }

        if (opts.urlUpdateStrategy) {
          router.urlUpdateStrategy = opts.urlUpdateStrategy;
        }
      }

      function rootRoute(router) {
        return router.routerState.root;
      }
      /**
       * Router initialization requires two steps:
       *
       * First, we start the navigation in a `APP_INITIALIZER` to block the bootstrap if
       * a resolver or a guard executes asynchronously.
       *
       * Next, we actually run activation in a `BOOTSTRAP_LISTENER`, using the
       * `afterPreactivation` hook provided by the router.
       * The router navigation starts, reaches the point when preactivation is done, and then
       * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.
       */


      var RouterInitializer = /*#__PURE__*/function () {
        function RouterInitializer(injector) {
          _classCallCheck2(this, RouterInitializer);

          this.injector = injector;
          this.initNavigation = false;
          this.resultOfPreactivationDone = new rxjs__WEBPACK_IMPORTED_MODULE_24__.Subject();
        }

        _createClass2(RouterInitializer, [{
          key: "appInitializer",
          value: function appInitializer() {
            var _this169 = this;

            var p = this.injector.get(_angular_common__WEBPACK_IMPORTED_MODULE_27__.LOCATION_INITIALIZED, Promise.resolve(null));
            return p.then(function () {
              var resolve = null;
              var res = new Promise(function (r) {
                return resolve = r;
              });

              var router = _this169.injector.get(_Router);

              var opts = _this169.injector.get(_ROUTER_CONFIGURATION);

              if (opts.initialNavigation === 'disabled') {
                router.setUpLocationChangeListener();
                resolve(true);
              } else if ( // TODO: enabled is deprecated as of v11, can be removed in v13
              opts.initialNavigation === 'enabled' || opts.initialNavigation === 'enabledBlocking') {
                router.hooks.afterPreactivation = function () {
                  // only the initial navigation should be delayed
                  if (!_this169.initNavigation) {
                    _this169.initNavigation = true;
                    resolve(true);
                    return _this169.resultOfPreactivationDone; // subsequent navigations should not be delayed
                  } else {
                    return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(null);
                  }
                };

                router.initialNavigation();
              } else {
                resolve(true);
              }

              return res;
            });
          }
        }, {
          key: "bootstrapListener",
          value: function bootstrapListener(bootstrappedComponentRef) {
            var opts = this.injector.get(_ROUTER_CONFIGURATION);
            var preloader = this.injector.get(_RouterPreloader);
            var routerScroller = this.injector.get(RouterScroller);
            var router = this.injector.get(_Router);
            var ref = this.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.ApplicationRef);

            if (bootstrappedComponentRef !== ref.components[0]) {
              return;
            } // Default case


            if (opts.initialNavigation === 'enabledNonBlocking' || opts.initialNavigation === undefined) {
              router.initialNavigation();
            }

            preloader.setUpPreloading();
            routerScroller.init();
            router.resetRootComponentType(ref.componentTypes[0]);
            this.resultOfPreactivationDone.next(null);
            this.resultOfPreactivationDone.complete();
          }
        }]);

        return RouterInitializer;
      }();

      RouterInitializer.ɵfac = function RouterInitializer_Factory(t) {
        return new (t || RouterInitializer)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector));
      };

      RouterInitializer.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: RouterInitializer,
        factory: RouterInitializer.ɵfac
      });

      RouterInitializer.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](RouterInitializer, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector
          }];
        }, null);
      })();

      function getAppInitializer(r) {
        return r.appInitializer.bind(r);
      }

      function getBootstrapListener(r) {
        return r.bootstrapListener.bind(r);
      }
      /**
       * A [DI token](guide/glossary/#di-token) for the router initializer that
       * is called after the app is bootstrapped.
       *
       * @publicApi
       */


      var _ROUTER_INITIALIZER = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('Router Initializer');

      function provideRouterInitializer() {
        return [RouterInitializer, {
          provide: _angular_core__WEBPACK_IMPORTED_MODULE_0__.APP_INITIALIZER,
          multi: true,
          useFactory: getAppInitializer,
          deps: [RouterInitializer]
        }, {
          provide: _ROUTER_INITIALIZER,
          useFactory: getBootstrapListener,
          deps: [RouterInitializer]
        }, {
          provide: _angular_core__WEBPACK_IMPORTED_MODULE_0__.APP_BOOTSTRAP_LISTENER,
          multi: true,
          useExisting: _ROUTER_INITIALIZER
        }];
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @publicApi
       */


      var _VERSION4 = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Version('12.0.3');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // This file only reexports content of the `src` folder. Keep it that way.

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=router.js.map

      /***/

    },

    /***/
    48994:
    /*!********************************************************************************************************!*\
      !*** ./node_modules/@nicky-lenaers/ngx-scroll-to/__ivy_ngcc__/fesm2015/nicky-lenaers-ngx-scroll-to.js ***!
      \********************************************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ScrollToDirective": function ScrollToDirective() {
          return (
            /* binding */
            _ScrollToDirective
          );
        },

        /* harmony export */
        "ScrollToModule": function ScrollToModule() {
          return (
            /* binding */
            _ScrollToModule
          );
        },

        /* harmony export */
        "ScrollToService": function ScrollToService() {
          return (
            /* binding */
            _ScrollToService
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! tslib */
      64762);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      37716);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      38583);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs */
      88229);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs */
      40205);
      /** Default values for Component Input */


      var DEFAULTS = {
        target: null,
        action: 'click',
        duration: 650,
        easing: 'easeInOutQuad',
        offset: 0,
        offsetMap: new Map()
      };

      var ɵ0 = function ɵ0(time) {
        return time * time;
      },
          ɵ1 = function ɵ1(time) {
        return time * (2 - time);
      },
          ɵ2 = function ɵ2(time) {
        return time < 0.5 ? 2 * time * time : -1 + (4 - 2 * time) * time;
      },
          ɵ3 = function ɵ3(time) {
        return time * time * time;
      },
          ɵ4 = function ɵ4(time) {
        return --time * time * time + 1;
      },
          ɵ5 = function ɵ5(time) {
        return time < 0.5 ? 4 * time * time * time : (time - 1) * (2 * time - 2) * (2 * time - 2) + 1;
      },
          ɵ6 = function ɵ6(time) {
        return time * time * time * time;
      },
          ɵ7 = function ɵ7(time) {
        return 1 - --time * time * time * time;
      },
          ɵ8 = function ɵ8(time) {
        return time < 0.5 ? 8 * time * time * time * time : 1 - 8 * --time * time * time * time;
      },
          ɵ9 = function ɵ9(time) {
        return time * time * time * time * time;
      },
          ɵ10 = function ɵ10(time) {
        return 1 + --time * time * time * time * time;
      },
          ɵ11 = function ɵ11(time) {
        return time < 0.5 ? 16 * time * time * time * time * time : 1 + 16 * --time * time * time * time * time;
      },
          ɵ12 = function ɵ12(time) {
        return Math.pow(2, -10 * time) * Math.sin((time - 1 / 4) * (2 * Math.PI) / 1) + 1;
      };
      /** Easing Colleciton */


      var EASING = {
        easeInQuad: ɵ0,
        easeOutQuad: ɵ1,
        easeInOutQuad: ɵ2,
        easeInCubic: ɵ3,
        easeOutCubic: ɵ4,
        easeInOutCubic: ɵ5,
        easeInQuart: ɵ6,
        easeOutQuart: ɵ7,
        easeInOutQuart: ɵ8,
        easeInQuint: ɵ9,
        easeOutQuint: ɵ10,
        easeInOutQuint: ɵ11,
        easeOutElastic: ɵ12
      };
      /**
       * Set of allowed events as triggers
       * for the Animation to start.
       */

      var EVENTS = ['click', 'mouseenter', 'mouseover', 'mousedown', 'mouseup', 'dblclick', 'contextmenu', 'wheel', 'mouseleave', 'mouseout'];
      /**
       * Strip hash (#) from value.
       *
       * @param value 				The given string value
       * @returns 					The stripped string value
       */

      function stripHash(value) {
        return value.substring(0, 1) === '#' ? value.substring(1) : value;
      }
      /**
       * Test if a given value is a string.
       *
       * @param value 					The given value
       * @returns 						Whether the given value is a string
       */


      function isString(value) {
        return typeof value === 'string' || value instanceof String;
      }
      /**
       * Test if a given Element is the Window.
       *
       * @param container 				The given Element
       * @returns 						Whether the given Element is Window
       */


      function isWindow(container) {
        return container === window;
      }
      /**
       * Test if a given value is of type ElementRef.
       *
       * @param value 					The given value
       * @returns               Whether the given value is a number
       */


      function isElementRef(value) {
        return value instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef;
      }
      /**
       * Whether or not the given value is a Native Element.
       *
       * @param value           The given value
       * @returns               Whether or not the value is a Native Element
       */


      function isNativeElement(value) {
        return value instanceof HTMLElement;
      }
      /**
       * Test if a given value is type number.
       *
       * @param value 					The given value
       * @returns 						Whether the given value is a number
       */


      function isNumber(value) {
        return !isNaN(parseFloat(value)) && isFinite(value);
      }
      /** Scroll To Animation */


      var ScrollToAnimation = /*#__PURE__*/function () {
        /**
         * Class Constructor.
         *
         * @param container            The Container
         * @param listenerTarget       The Element that listens for DOM Events
         * @param isWindow             Whether or not the listener is the Window
         * @param to                   Position to scroll to
         * @param options              Additional options for scrolling
         * @param isBrowser            Whether or not execution runs in the browser
         *                              (as opposed to the server)
         */
        function ScrollToAnimation(container, listenerTarget, isWindow, to, options, isBrowser) {
          var _this170 = this;

          _classCallCheck2(this, ScrollToAnimation);

          this.container = container;
          this.listenerTarget = listenerTarget;
          this.isWindow = isWindow;
          this.to = to;
          this.options = options;
          this.isBrowser = isBrowser;
          /** Recursively loop over the Scroll Animation */

          this.loop = function () {
            _this170.timeLapsed += _this170.tick;
            _this170.percentage = _this170.timeLapsed / _this170.options.duration;
            _this170.percentage = _this170.percentage > 1 ? 1 : _this170.percentage; // Position Update

            _this170.position = _this170.startPosition + (_this170.startPosition - _this170.to <= 0 ? 1 : -1) * _this170.distance * EASING[_this170.options.easing](_this170.percentage);

            if (_this170.lastPosition !== null && _this170.position === _this170.lastPosition) {
              _this170.stop();
            } else {
              _this170.source$.next(_this170.position);

              _this170.isWindow ? _this170.listenerTarget.scrollTo(0, Math.floor(_this170.position)) : _this170.container.scrollTop = Math.floor(_this170.position);
              _this170.lastPosition = _this170.position;
            }
          };

          this.tick = 16;
          this.interval = null;
          this.lastPosition = null;
          this.timeLapsed = 0;
          this.windowScrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

          if (!this.container) {
            this.startPosition = this.windowScrollTop;
          } else {
            this.startPosition = this.isWindow ? this.windowScrollTop : this.container.scrollTop;
          } // Correction for Starting Position of nested HTML Elements


          if (this.container && !this.isWindow) {
            this.to = this.to - this.container.getBoundingClientRect().top + this.startPosition;
          } // Set Distance


          var directionalDistance = this.startPosition - this.to;
          this.distance = this.container ? Math.abs(this.startPosition - this.to) : this.to;
          this.mappedOffset = this.options.offset; // Set offset from Offset Map

          if (this.isBrowser) {
            this.options.offsetMap.forEach(function (value, key) {
              return _this170.mappedOffset = window.innerWidth > key ? value : _this170.mappedOffset;
            });
          }

          this.distance += this.mappedOffset * (directionalDistance <= 0 ? 1 : -1);
          this.source$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__.ReplaySubject();
        }
        /**
         * Start the new Scroll Animation.
         *
         * @returns         Observable containing a number
         */


        _createClass2(ScrollToAnimation, [{
          key: "start",
          value: function start() {
            clearInterval(this.interval);
            this.interval = setInterval(this.loop, this.tick);
            return this.source$.asObservable();
          }
          /**
           * Stop the current Scroll Animation Loop.
           *
           * @param force          Force to stop the Animation Loop
           * @returns               Void
           */

        }, {
          key: "stop",
          value: function stop() {
            clearInterval(this.interval);
            this.interval = null;
            this.source$.complete();
          }
        }]);

        return ScrollToAnimation;
      }();
      /**
       * The Scroll To Service handles starting, interrupting
       * and ending the actual Scroll Animation. It provides
       * some utilities to find the proper HTML Element on a
       * given page to setup Event Listeners and calculate
       * distances for the Animation.
       */


      var _ScrollToService = /*#__PURE__*/function () {
        /**
         * Construct and setup required paratemeters.
         *
         * @param document         A Reference to the Document
         * @param platformId       Angular Platform ID
         */
        function ScrollToService(document, platformId) {
          _classCallCheck2(this, ScrollToService);

          this.document = document;
          this.platformId = platformId;
          this.interruptiveEvents = ['mousewheel', 'DOMMouseScroll', 'touchstart'];
        }
        /**
         * Target an Element to scroll to. Notice that the `TimeOut` decorator
         * ensures the executing to take place in the next Angular lifecycle.
         * This allows for scrolling to elements that are e.g. initially hidden
         * by means of `*ngIf`, but ought to be scrolled to eventually.
         *
         * @todo type 'any' in Observable should become custom type like 'ScrollToEvent' (base class), see issue comment:
         *  - https://github.com/nicky-lenaers/ngx-scroll-to/issues/10#issuecomment-317198481
         *
         * @param options         Configuration Object
         * @returns               Observable
         */


        _createClass2(ScrollToService, [{
          key: "scrollTo",
          value: function scrollTo(options) {
            if (!(0, _angular_common__WEBPACK_IMPORTED_MODULE_2__.isPlatformBrowser)(this.platformId)) {
              return new rxjs__WEBPACK_IMPORTED_MODULE_1__.ReplaySubject().asObservable();
            }

            return this.start(options);
          }
          /**
           * Start a new Animation.
           *
           * @todo Emit proper events from subscription
           *
           * @param options         Configuration Object
           * @returns               Observable
           */

        }, {
          key: "start",
          value: function start(options) {
            var _this171 = this;

            // Merge config with default values
            var mergedConfigOptions = Object.assign(Object.assign({}, DEFAULTS), options);

            if (this.animation) {
              this.animation.stop();
            }

            var targetNode = this.getNode(mergedConfigOptions.target);

            if (mergedConfigOptions.target && !targetNode) {
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_3__.throwError)('Unable to find Target Element');
            }

            var container = this.getContainer(mergedConfigOptions, targetNode);

            if (mergedConfigOptions.container && !container) {
              return (0, rxjs__WEBPACK_IMPORTED_MODULE_3__.throwError)('Unable to find Container Element');
            }

            var listenerTarget = this.getListenerTarget(container) || window;
            var to = container ? container.getBoundingClientRect().top : 0;

            if (targetNode) {
              to = isWindow(listenerTarget) ? window.scrollY + targetNode.getBoundingClientRect().top : targetNode.getBoundingClientRect().top;
            } // Create Animation


            this.animation = new ScrollToAnimation(container, listenerTarget, isWindow(listenerTarget), to, mergedConfigOptions, (0, _angular_common__WEBPACK_IMPORTED_MODULE_2__.isPlatformBrowser)(this.platformId));

            var onInterrupt = function onInterrupt() {
              return _this171.animation.stop();
            };

            this.addInterruptiveEventListeners(listenerTarget, onInterrupt); // Start Animation

            var animation$ = this.animation.start();
            this.subscribeToAnimation(animation$, listenerTarget, onInterrupt);
            return animation$;
          }
          /**
           * Subscribe to the events emitted from the Scrolling
           * Animation. Events might be used for e.g. unsubscribing
           * once finished.
           *
           * @param animation$              The Animation Observable
           * @param listenerTarget          The Listener Target for events
           * @param onInterrupt             The handler for Interruptive Events
           * @returns                       Void
           */

        }, {
          key: "subscribeToAnimation",
          value: function subscribeToAnimation(animation$, listenerTarget, onInterrupt) {
            var _this172 = this;

            var subscription = animation$.subscribe(function () {}, function () {}, function () {
              _this172.removeInterruptiveEventListeners(_this172.interruptiveEvents, listenerTarget, onInterrupt);

              subscription.unsubscribe();
            });
          }
          /**
           * Get the container HTML Element in which
           * the scrolling should happen.
           *
           * @param options         The Merged Configuration Object
           * @param targetNode    the targeted HTMLElement
           */

        }, {
          key: "getContainer",
          value: function getContainer(options, targetNode) {
            var container = null;

            if (options.container) {
              container = this.getNode(options.container, true);
            } else if (targetNode) {
              container = this.getFirstScrollableParent(targetNode);
            }

            return container;
          }
          /**
           * Add listeners for the Animation Interruptive Events
           * to the Listener Target.
           *
           * @param events            List of events to listen to
           * @param listenerTarget    Target to attach the listener on
           * @param handler           Handler for when the listener fires
           * @returns                 Void
           */

        }, {
          key: "addInterruptiveEventListeners",
          value: function addInterruptiveEventListeners(listenerTarget, handler) {
            var _this173 = this;

            if (!listenerTarget) {
              listenerTarget = window;
            }

            this.interruptiveEvents.forEach(function (event) {
              return listenerTarget.addEventListener(event, handler, _this173.supportPassive() ? {
                passive: true
              } : false);
            });
          }
          /**
           * Feature-detect support for passive event listeners.
           *
           * @returns       Whether or not passive event listeners are supported
           */

        }, {
          key: "supportPassive",
          value: function supportPassive() {
            var supportsPassive = false;

            try {
              var opts = Object.defineProperty({}, 'passive', {
                get: function get() {
                  supportsPassive = true;
                }
              });
              window.addEventListener('testPassive', null, opts);
              window.removeEventListener('testPassive', null, opts);
            } catch (e) {}

            return supportsPassive;
          }
          /**
           * Remove listeners for the Animation Interrupt Event from
           * the Listener Target. Specifying the correct handler prevents
           * memory leaks and makes the allocated memory available for
           * Garbage Collection.
           *
           * @param events            List of Interruptive Events to remove
           * @param listenerTarget    Target to attach the listener on
           * @param handler           Handler for when the listener fires
           * @returns                 Void
           */

        }, {
          key: "removeInterruptiveEventListeners",
          value: function removeInterruptiveEventListeners(events, listenerTarget, handler) {
            if (!listenerTarget) {
              listenerTarget = window;
            }

            events.forEach(function (event) {
              return listenerTarget.removeEventListener(event, handler);
            });
          }
          /**
           * Find the first scrollable parent Node of a given
           * Element. The DOM Tree gets searched upwards
           * to find this first scrollable parent. Parents might
           * be ignored by CSS styles applied to the HTML Element.
           *
           * @param nativeElement     The Element to search the DOM Tree upwards from
           * @returns                 The first scrollable parent HTML Element
           */

        }, {
          key: "getFirstScrollableParent",
          value: function getFirstScrollableParent(nativeElement) {
            var style = window.getComputedStyle(nativeElement);
            var overflowRegex = /(auto|scroll|overlay)/;

            if (style.position === 'fixed') {
              return null;
            }

            var parent = nativeElement;

            while (parent.parentElement) {
              parent = parent.parentElement;
              style = window.getComputedStyle(parent);

              if (style.position === 'absolute' || style.overflow === 'hidden' || style.overflowY === 'hidden') {
                continue;
              }

              if (overflowRegex.test(style.overflow + style.overflowY) || parent.tagName === 'BODY') {
                return parent;
              }
            }

            return null;
          }
          /**
           * Get the Target Node to scroll to.
           *
           * @param id              The given ID of the node, either a string or
           *                        an element reference
           * @param allowBodyTag    Indicate whether or not the Document Body is
           *                        considered a valid Target Node
           * @returns               The Target Node to scroll to
           */

        }, {
          key: "getNode",
          value: function getNode(id) {
            var allowBodyTag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var targetNode;

            if (isString(id)) {
              if (allowBodyTag && (id === 'body' || id === 'BODY')) {
                targetNode = this.document.body;
              } else {
                targetNode = this.document.getElementById(stripHash(id));
              }
            } else if (isNumber(id)) {
              targetNode = this.document.getElementById(String(id));
            } else if (isElementRef(id)) {
              targetNode = id.nativeElement;
            } else if (isNativeElement(id)) {
              targetNode = id;
            }

            return targetNode;
          }
          /**
           * Retrieve the Listener target. This Listener Target is used
           * to attach Event Listeners on. In case of the target being
           * the Document Body, we need the actual `window` to listen
           * for events.
           *
           * @param container           The HTML Container element
           * @returns                   The Listener Target to attach events on
           */

        }, {
          key: "getListenerTarget",
          value: function getListenerTarget(container) {
            if (!container) {
              return null;
            }

            return this.isDocumentBody(container) ? window : container;
          }
          /**
           * Test if a given HTML Element is the Document Body.
           *
           * @param element             The given HTML Element
           * @returns                   Whether or not the Element is the
           *                            Document Body Element
           */

        }, {
          key: "isDocumentBody",
          value: function isDocumentBody(element) {
            return element.tagName.toUpperCase() === 'BODY';
          }
        }]);

        return ScrollToService;
      }();

      _ScrollToService.ɵfac = function ScrollToService_Factory(t) {
        return new (t || _ScrollToService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_2__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID));
      };

      _ScrollToService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: _ScrollToService,
        factory: function factory(t) {
          return _ScrollToService.ɵfac(t);
        }
      });

      _ScrollToService.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__.DOCUMENT]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
          }]
        }];
      };

      _ScrollToService = (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, tslib__WEBPACK_IMPORTED_MODULE_4__.__param)(0, (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject)(_angular_common__WEBPACK_IMPORTED_MODULE_2__.DOCUMENT)), (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__param)(1, (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID))], _ScrollToService);

      var _ScrollToDirective = /*#__PURE__*/function () {
        function ScrollToDirective(elementRef, scrollToService, renderer2) {
          _classCallCheck2(this, ScrollToDirective);

          this.elementRef = elementRef;
          this.scrollToService = scrollToService;
          this.renderer2 = renderer2;
          this.ngxScrollTo = DEFAULTS.target;
          this.ngxScrollToEvent = DEFAULTS.action;
          this.ngxScrollToDuration = DEFAULTS.duration;
          this.ngxScrollToEasing = DEFAULTS.easing;
          this.ngxScrollToOffset = DEFAULTS.offset;
          this.ngxScrollToOffsetMap = DEFAULTS.offsetMap;
        }
        /**
         * Angular Lifecycle Hook - After View Init
         *
         * @todo Implement Subscription for Events
         *
         * @returns void
         */


        _createClass2(ScrollToDirective, [{
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            var _this174 = this;

            // Test Event Support
            if (EVENTS.indexOf(this.ngxScrollToEvent) === -1) {
              throw new Error("Unsupported Event '".concat(this.ngxScrollToEvent, "'"));
            } // Listen for the trigger...


            this.renderer2.listen(this.elementRef.nativeElement, this.ngxScrollToEvent, function (event) {
              _this174.options = {
                target: _this174.ngxScrollTo,
                duration: _this174.ngxScrollToDuration,
                easing: _this174.ngxScrollToEasing,
                offset: _this174.ngxScrollToOffset,
                offsetMap: _this174.ngxScrollToOffsetMap
              };

              _this174.scrollToService.scrollTo(_this174.options);
            });
          }
        }]);

        return ScrollToDirective;
      }();

      _ScrollToDirective.ɵfac = function ScrollToDirective_Factory(t) {
        return new (t || _ScrollToDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_ScrollToService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2));
      };

      _ScrollToDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _ScrollToDirective,
        selectors: [["", "ngxScrollTo", ""]],
        inputs: {
          ngxScrollTo: "ngxScrollTo",
          ngxScrollToEvent: "ngxScrollToEvent",
          ngxScrollToDuration: "ngxScrollToDuration",
          ngxScrollToEasing: "ngxScrollToEasing",
          ngxScrollToOffset: "ngxScrollToOffset",
          ngxScrollToOffsetMap: "ngxScrollToOffsetMap"
        }
      });

      _ScrollToDirective.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
        }, {
          type: _ScrollToService
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
        }];
      };

      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input)()], _ScrollToDirective.prototype, "ngxScrollTo", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input)()], _ScrollToDirective.prototype, "ngxScrollToEvent", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input)()], _ScrollToDirective.prototype, "ngxScrollToDuration", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input)()], _ScrollToDirective.prototype, "ngxScrollToEasing", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input)()], _ScrollToDirective.prototype, "ngxScrollToOffset", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input)()], _ScrollToDirective.prototype, "ngxScrollToOffsetMap", void 0);
      var ScrollToModule_1;
      /** Scroll To Module */

      var _ScrollToModule = ScrollToModule_1 = /*#__PURE__*/function () {
        function ScrollToModule() {
          _classCallCheck2(this, ScrollToModule);
        }

        _createClass2(ScrollToModule, null, [{
          key: "forRoot",
          value:
          /**
           * Guaranteed singletons for provided Services across App.
           *
           * @return          An Angular Module with Providers
           */
          function forRoot() {
            return {
              ngModule: ScrollToModule_1,
              providers: [_ScrollToService]
            };
          }
        }]);

        return ScrollToModule;
      }();

      _ScrollToModule.ɵfac = function ScrollToModule_Factory(t) {
        return new (t || _ScrollToModule)();
      };

      _ScrollToModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _ScrollToModule
      });
      _ScrollToModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_ScrollToService, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__.DOCUMENT]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
            }]
          }];
        }, null);
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_ScrollToDirective, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: '[ngxScrollTo]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }, {
            type: _ScrollToService
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
          }];
        }, {
          ngxScrollTo: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          ngxScrollToEvent: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          ngxScrollToDuration: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          ngxScrollToEasing: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          ngxScrollToOffset: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          ngxScrollToOffsetMap: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_ScrollToModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            declarations: [_ScrollToDirective],
            exports: [_ScrollToDirective]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_ScrollToModule, {
          declarations: [_ScrollToDirective],
          exports: [_ScrollToDirective]
        });
      })();
      /*
       * Public API Surface of ngx-scroll-to
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=nicky-lenaers-ngx-scroll-to.js.map

      /***/

    },

    /***/
    78439:
    /*!*************************************************************************!*\
      !*** ./node_modules/ng-particles/__ivy_ngcc__/fesm2015/ng-particles.js ***!
      \*************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "NgParticlesComponent": function NgParticlesComponent() {
          return (
            /* binding */
            _NgParticlesComponent
          );
        },

        /* harmony export */
        "NgParticlesModule": function NgParticlesModule() {
          return (
            /* binding */
            _NgParticlesModule
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      37716);
      /* harmony import */


      var tsparticles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tsparticles */
      41019);
      /* harmony import */


      var tsparticles__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tsparticles__WEBPACK_IMPORTED_MODULE_0__);
      /* harmony reexport (unknown) */


      var __WEBPACK_REEXPORT_OBJECT__ = {};
      /* harmony reexport (unknown) */

      for (var __WEBPACK_IMPORT_KEY__ in tsparticles__WEBPACK_IMPORTED_MODULE_0__) {
        if (["default", "NgParticlesComponent", "NgParticlesModule"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function (key) {
          return tsparticles__WEBPACK_IMPORTED_MODULE_0__[key];
        }.bind(0, __WEBPACK_IMPORT_KEY__);
      }
      /* harmony reexport (unknown) */


      __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);

      var _NgParticlesComponent = /*#__PURE__*/function () {
        function _NgParticlesComponent() {
          _classCallCheck2(this, _NgParticlesComponent);

          this.particlesLoaded = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
        }

        _createClass2(_NgParticlesComponent, [{
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            var _this175 = this;

            tsparticles__WEBPACK_IMPORTED_MODULE_0__.tsParticles.load(this.id, this.options).then(function (container) {
              _this175.particlesLoaded.emit(container);
            });
          }
        }]);

        return _NgParticlesComponent;
      }();

      _NgParticlesComponent.ɵfac = function NgParticlesComponent_Factory(t) {
        return new (t || _NgParticlesComponent)();
      };

      _NgParticlesComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: _NgParticlesComponent,
        selectors: [["Particles"]],
        inputs: {
          options: "options",
          id: "id"
        },
        outputs: {
          particlesLoaded: "particlesLoaded"
        },
        decls: 1,
        vars: 1,
        consts: [[3, "id"]],
        template: function NgParticlesComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "div", 0);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("id", ctx.id);
          }
        },
        encapsulation: 2
      });
      _NgParticlesComponent.propDecorators = {
        options: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
        }],
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
        }],
        particlesLoaded: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_NgParticlesComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Component,
          args: [{
            selector: 'Particles',
            template: "\n      <div [id]=\"id\"></div> "
          }]
        }], function () {
          return [];
        }, {
          particlesLoaded: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
          }],
          options: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          id: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }]
        });
      })();

      var _NgParticlesModule = function _NgParticlesModule() {
        _classCallCheck2(this, _NgParticlesModule);
      };

      _NgParticlesModule.ɵfac = function NgParticlesModule_Factory(t) {
        return new (t || _NgParticlesModule)();
      };

      _NgParticlesModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: _NgParticlesModule
      });
      _NgParticlesModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        imports: [[]]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_NgParticlesModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
          args: [{
            declarations: [_NgParticlesComponent],
            imports: [],
            exports: [_NgParticlesComponent]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](_NgParticlesModule, {
          declarations: [_NgParticlesComponent],
          exports: [_NgParticlesComponent]
        });
      })();
      /*
       * Public API Surface of ng-particles
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=ng-particles.js.map

      /***/

    },

    /***/
    5668:
    /*!*************************************************************************************!*\
      !*** ./node_modules/ngx-owl-carousel-o/__ivy_ngcc__/fesm2015/ngx-owl-carousel-o.js ***!
      \*************************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "CarouselComponent": function CarouselComponent() {
          return (
            /* binding */
            _CarouselComponent
          );
        },

        /* harmony export */
        "CarouselModule": function CarouselModule() {
          return (
            /* binding */
            _CarouselModule
          );
        },

        /* harmony export */
        "CarouselSlideDirective": function CarouselSlideDirective() {
          return (
            /* binding */
            _CarouselSlideDirective
          );
        },

        /* harmony export */
        "OwlRouterLinkDirective": function OwlRouterLinkDirective() {
          return (
            /* binding */
            _OwlRouterLinkDirective
          );
        },

        /* harmony export */
        "OwlRouterLinkWithHrefDirective": function OwlRouterLinkWithHrefDirective() {
          return (
            /* binding */
            _OwlRouterLinkWithHrefDirective
          );
        },

        /* harmony export */
        "SlidesOutputData": function SlidesOutputData() {
          return (
            /* binding */
            _SlidesOutputData
          );
        },

        /* harmony export */
        "ɵa": function ɵa() {
          return (
            /* binding */
            NavigationService
          );
        },

        /* harmony export */
        "ɵb": function ɵb() {
          return (
            /* binding */
            CarouselService
          );
        },

        /* harmony export */
        "ɵc": function ɵc() {
          return (
            /* binding */
            OwlLogger
          );
        },

        /* harmony export */
        "ɵd": function ɵd() {
          return (
            /* binding */
            AutoplayService
          );
        },

        /* harmony export */
        "ɵe": function ɵe() {
          return (
            /* binding */
            WINDOW
          );
        },

        /* harmony export */
        "ɵf": function ɵf() {
          return (
            /* binding */
            WindowRef
          );
        },

        /* harmony export */
        "ɵg": function ɵg() {
          return (
            /* binding */
            BrowserWindowRef
          );
        },

        /* harmony export */
        "ɵh": function ɵh() {
          return (
            /* binding */
            windowFactory
          );
        },

        /* harmony export */
        "ɵi": function ɵi() {
          return (
            /* binding */
            browserWindowProvider
          );
        },

        /* harmony export */
        "ɵj": function ɵj() {
          return (
            /* binding */
            windowProvider
          );
        },

        /* harmony export */
        "ɵk": function ɵk() {
          return (
            /* binding */
            WINDOW_PROVIDERS
          );
        },

        /* harmony export */
        "ɵl": function ɵl() {
          return (
            /* binding */
            DOCUMENT
          );
        },

        /* harmony export */
        "ɵm": function ɵm() {
          return (
            /* binding */
            DocumentRef
          );
        },

        /* harmony export */
        "ɵn": function ɵn() {
          return (
            /* binding */
            BrowserDocumentRef
          );
        },

        /* harmony export */
        "ɵo": function ɵo() {
          return (
            /* binding */
            documentFactory
          );
        },

        /* harmony export */
        "ɵp": function ɵp() {
          return (
            /* binding */
            browserDocumentProvider
          );
        },

        /* harmony export */
        "ɵq": function ɵq() {
          return (
            /* binding */
            documentProvider
          );
        },

        /* harmony export */
        "ɵr": function ɵr() {
          return (
            /* binding */
            DOCUMENT_PROVIDERS
          );
        },

        /* harmony export */
        "ɵs": function ɵs() {
          return (
            /* binding */
            LazyLoadService
          );
        },

        /* harmony export */
        "ɵt": function ɵt() {
          return (
            /* binding */
            AnimateService
          );
        },

        /* harmony export */
        "ɵu": function ɵu() {
          return (
            /* binding */
            AutoHeightService
          );
        },

        /* harmony export */
        "ɵv": function ɵv() {
          return (
            /* binding */
            HashService
          );
        },

        /* harmony export */
        "ɵw": function ɵw() {
          return (
            /* binding */
            ResizeService
          );
        },

        /* harmony export */
        "ɵx": function ɵx() {
          return (
            /* binding */
            StageComponent
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      37716);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/common */
      38583);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs */
      79765);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs */
      66682);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! rxjs */
      25917);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! rxjs */
      69412);
      /* harmony import */


      var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/platform-browser */
      39075);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs/operators */
      68307);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! rxjs/operators */
      45435);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! rxjs/operators */
      43190);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! rxjs/operators */
      28049);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! rxjs/operators */
      15257);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! rxjs/operators */
      13653);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! rxjs/operators */
      88002);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
      /*! rxjs/operators */
      2590);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
      /*! rxjs/operators */
      65792);
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @angular/router */
      39895);
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
      /*! @angular/animations */
      17238);

      var _c0 = function _c0(a0, a1) {
        return {
          "isMouseDragable": a0,
          "isTouchDragable": a1
        };
      };

      function CarouselComponent_div_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "owl-stage", 5);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("owlDraggable", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction2"](3, _c0, ctx_r1.owlDOMData == null ? null : ctx_r1.owlDOMData.isMouseDragable, ctx_r1.owlDOMData == null ? null : ctx_r1.owlDOMData.isTouchDragable))("stageData", ctx_r1.stageData)("slidesData", ctx_r1.slidesData);
        }
      }

      var _c1 = function _c1(a0, a1) {
        return {
          "active": a0,
          "owl-dot-text": a1
        };
      };

      function CarouselComponent_ng_container_3_div_5_Template(rf, ctx) {
        if (rf & 1) {
          var _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 11);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function CarouselComponent_ng_container_3_div_5_Template_div_click_0_listener() {
            var restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r6);

            var dot_r4 = restoredCtx.$implicit;

            var ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

            return ctx_r5.moveByDot(dot_r4.id);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "span", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var dot_r4 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction2"](2, _c1, dot_r4.active, dot_r4.showInnerContent));

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", dot_r4.innerContent, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
        }
      }

      var _c2 = function _c2(a0) {
        return {
          "disabled": a0
        };
      };

      function CarouselComponent_ng_container_3_Template(rf, ctx) {
        if (rf & 1) {
          var _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 6);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 7);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function CarouselComponent_ng_container_3_Template_div_click_2_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r8);

            var ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            return ctx_r7.prev();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 8);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function CarouselComponent_ng_container_3_Template_div_click_3_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r8);

            var ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            return ctx_r9.next();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 9);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, CarouselComponent_ng_container_3_div_5_Template, 2, 5, "div", 10);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
        }

        if (rf & 2) {
          var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](7, _c2, ctx_r2.navData == null ? null : ctx_r2.navData.disabled));

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](9, _c2, ctx_r2.navData == null ? null : ctx_r2.navData.prev == null ? null : ctx_r2.navData.prev.disabled))("innerHTML", ctx_r2.navData == null ? null : ctx_r2.navData.prev == null ? null : ctx_r2.navData.prev.htmlText, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](11, _c2, ctx_r2.navData == null ? null : ctx_r2.navData.next == null ? null : ctx_r2.navData.next.disabled))("innerHTML", ctx_r2.navData == null ? null : ctx_r2.navData.next == null ? null : ctx_r2.navData.next.htmlText, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](13, _c2, ctx_r2.dotsData == null ? null : ctx_r2.dotsData.disabled));

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r2.dotsData == null ? null : ctx_r2.dotsData.dots);
        }
      }

      var _c3 = function _c3(a0, a1, a2, a3, a4) {
        return {
          "owl-rtl": a0,
          "owl-loaded": a1,
          "owl-responsive": a2,
          "owl-drag": a3,
          "owl-grab": a4
        };
      };

      function StageComponent_ng_container_2_2_ng_template_0_Template(rf, ctx) {}

      function StageComponent_ng_container_2_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, StageComponent_ng_container_2_2_ng_template_0_Template, 0, 0, "ng-template", 4);
        }

        if (rf & 2) {
          var slide_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", slide_r1.tplRef);
        }
      }

      var _c4 = function _c4(a0, a1, a2, a3) {
        return {
          "width": a0,
          "margin-left": a1,
          "margin-right": a2,
          "left": a3
        };
      };

      function StageComponent_ng_container_2_Template(rf, ctx) {
        if (rf & 1) {
          var _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("animationend", function StageComponent_ng_container_2_Template_div_animationend_1_listener() {
            var restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r7);

            var slide_r1 = restoredCtx.$implicit;

            var ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            return ctx_r6.clear(slide_r1.id);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, StageComponent_ng_container_2_2_Template, 1, 1, undefined, 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
        }

        if (rf & 2) {
          var slide_r1 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", slide_r1.classes)("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction4"](4, _c4, slide_r1.width + "px", slide_r1.marginL ? slide_r1.marginL + "px" : "", slide_r1.marginR ? slide_r1.marginR + "px" : "", slide_r1.left))("@autoHeight", slide_r1.heightState);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", slide_r1.load);
        }
      }

      var _c5 = function _c5(a0, a1, a2, a3, a4) {
        return {
          "width": a0,
          "transform": a1,
          "transition": a2,
          "padding-left": a3,
          "padding-right": a4
        };
      };

      var ResizeService = /*#__PURE__*/function () {
        function ResizeService(eventManager) {
          _classCallCheck2(this, ResizeService);

          this.eventManager = eventManager;
          this.resizeSubject = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          this.eventManager.addGlobalEventListener('window', 'resize', this.onResize.bind(this));
          this.eventManager.addGlobalEventListener('window', 'onload', this.onLoaded.bind(this));
        }
        /**
         * Makes resizeSubject become Observable
         * @returns Observable of resizeSubject
         */


        _createClass2(ResizeService, [{
          key: "onResize$",
          get: function get() {
            return this.resizeSubject.asObservable();
          }
          /**
           * Handler of 'resize' event. Passes data throw resizeSubject
           * @param event Event Object of 'resize' event
           */

        }, {
          key: "onResize",
          value: function onResize(event) {
            this.resizeSubject.next(event.target);
          }
          /**
           * Handler of 'onload' event. Defines the width of window
           * @param event Event Object of 'onload' event
           */

        }, {
          key: "onLoaded",
          value: function onLoaded(event) {
            this.windowWidth = event.target;
          }
        }]);

        return ResizeService;
      }();

      ResizeService.ɵfac = function ResizeService_Factory(t) {
        return new (t || ResizeService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__.EventManager));
      };

      ResizeService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: ResizeService,
        factory: ResizeService.ɵfac
      });

      ResizeService.ctorParameters = function () {
        return [{
          type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__.EventManager
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ResizeService, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__.EventManager
          }];
        }, null);
      })();
      /**
       * Defaults value of options
       */


      var OwlCarouselOConfig = function OwlCarouselOConfig() {
        _classCallCheck2(this, OwlCarouselOConfig);

        this.items = 3;
        this.skip_validateItems = false;
        this.loop = false;
        this.center = false;
        this.rewind = false;
        this.mouseDrag = true;
        this.touchDrag = true;
        this.pullDrag = true;
        this.freeDrag = false;
        this.margin = 0;
        this.stagePadding = 0;
        this.merge = false;
        this.mergeFit = true;
        this.autoWidth = false;
        this.startPosition = 0;
        this.rtl = false;
        this.smartSpeed = 250;
        this.fluidSpeed = false;
        this.dragEndSpeed = false;
        this.responsive = {};
        this.responsiveRefreshRate = 200; // defaults to Navigation

        this.nav = false;
        this.navText = ['prev', 'next'];
        this.navSpeed = false;
        this.slideBy = 1; // stage moves on 1 width of slide; if slideBy = 2, stage moves on 2 widths of slide

        this.dots = true;
        this.dotsEach = false;
        this.dotsData = false;
        this.dotsSpeed = false; // defaults to Autoplay

        this.autoplay = false;
        this.autoplayTimeout = 5000;
        this.autoplayHoverPause = false;
        this.autoplaySpeed = false;
        this.autoplayMouseleaveTimeout = 1; // defaults to LazyLoading

        this.lazyLoad = false;
        this.lazyLoadEager = 0; // defaults to Animate

        this.slideTransition = '';
        this.animateOut = false;
        this.animateIn = false; // defaults to AutoHeight

        this.autoHeight = false; // defaults to Hash

        this.URLhashListener = false;
      };
      /**
       * we can't read types from OwlOptions in javascript because of props have undefined value and types of those props are used for validating inputs
       * class below is copy of OwlOptions but its all props have string value showing certain type;
       * this is class is being used just in method _validateOptions() of CarouselService;
       */


      var OwlOptionsMockedTypes = function OwlOptionsMockedTypes() {
        _classCallCheck2(this, OwlOptionsMockedTypes);

        this.items = 'number';
        this.skip_validateItems = 'boolean';
        this.loop = 'boolean';
        this.center = 'boolean';
        this.rewind = 'boolean';
        this.mouseDrag = 'boolean';
        this.touchDrag = 'boolean';
        this.pullDrag = 'boolean';
        this.freeDrag = 'boolean';
        this.margin = 'number';
        this.stagePadding = 'number';
        this.merge = 'boolean';
        this.mergeFit = 'boolean';
        this.autoWidth = 'boolean';
        this.startPosition = 'number|string';
        this.rtl = 'boolean';
        this.smartSpeed = 'number';
        this.fluidSpeed = 'boolean';
        this.dragEndSpeed = 'number|boolean';
        this.responsive = {};
        this.responsiveRefreshRate = 'number'; // defaults to Navigation

        this.nav = 'boolean';
        this.navText = 'string[]';
        this.navSpeed = 'number|boolean';
        this.slideBy = 'number|string'; // stage moves on 1 width of slide; if slideBy = 2, stage moves on 2 widths of slide

        this.dots = 'boolean';
        this.dotsEach = 'number|boolean';
        this.dotsData = 'boolean';
        this.dotsSpeed = 'number|boolean'; // defaults to Autoplay

        this.autoplay = 'boolean';
        this.autoplayTimeout = 'number';
        this.autoplayHoverPause = 'boolean';
        this.autoplaySpeed = 'number|boolean';
        this.autoplayMouseleaveTimeout = 'number'; // defaults to LazyLoading

        this.lazyLoad = 'boolean';
        this.lazyLoadEager = 'number'; // defaults to Animate

        this.slideTransition = 'string';
        this.animateOut = 'string|boolean';
        this.animateIn = 'string|boolean'; // defaults to AutoHeight

        this.autoHeight = 'boolean'; // defaults to Hash

        this.URLhashListener = "boolean";
      };

      var OwlLogger = /*#__PURE__*/function () {
        function OwlLogger(errorHandler) {
          _classCallCheck2(this, OwlLogger);

          this.errorHandler = errorHandler;
        }

        _createClass2(OwlLogger, [{
          key: "log",
          value: function log(value) {
            if ((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.isDevMode)()) {
              var _console2;

              for (var _len18 = arguments.length, rest = new Array(_len18 > 1 ? _len18 - 1 : 0), _key19 = 1; _key19 < _len18; _key19++) {
                rest[_key19 - 1] = arguments[_key19];
              }

              (_console2 = console).log.apply(_console2, [value].concat(rest));
            }
          }
        }, {
          key: "error",
          value: function error(_error) {
            this.errorHandler.handleError(_error);
          }
        }, {
          key: "warn",
          value: function warn(value) {
            var _console3;

            for (var _len19 = arguments.length, rest = new Array(_len19 > 1 ? _len19 - 1 : 0), _key20 = 1; _key20 < _len19; _key20++) {
              rest[_key20 - 1] = arguments[_key20];
            }

            (_console3 = console).warn.apply(_console3, [value].concat(rest));
          }
        }]);

        return OwlLogger;
      }();

      OwlLogger.ɵfac = function OwlLogger_Factory(t) {
        return new (t || OwlLogger)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ErrorHandler));
      };

      OwlLogger.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: OwlLogger,
        factory: OwlLogger.ɵfac
      });

      OwlLogger.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ErrorHandler
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](OwlLogger, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ErrorHandler
          }];
        }, null);
      })();
      /**
       * Current state information and their tags.
       */


      var States = function States() {
        _classCallCheck2(this, States);
      };
      /**
       * Enumeration for types.
       * @enum {String}
       */


      var Type;

      (function (Type) {
        Type["Event"] = "event";
        Type["State"] = "state";
      })(Type || (Type = {}));

      ;
      /**
       * Enumeration for width.
       * @enum {String}
       */

      var Width;

      (function (Width) {
        Width["Default"] = "default";
        Width["Inner"] = "inner";
        Width["Outer"] = "outer";
      })(Width || (Width = {}));

      ;
      /**
       * Model for coords of .owl-stage
       */

      var Coords = function Coords() {
        _classCallCheck2(this, Coords);
      };
      /**
       * Model for all current data of carousel
       */


      var CarouselCurrentData = function CarouselCurrentData() {
        _classCallCheck2(this, CarouselCurrentData);
      };

      var CarouselService = /*#__PURE__*/function () {
        function CarouselService(logger) {
          var _this176 = this;

          _classCallCheck2(this, CarouselService);

          this.logger = logger;
          /**
          * Subject for passing data needed for managing View
          */

          this._viewSettingsShipper$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
          * Subject for notification when the carousel got initializes
          */

          this._initializedCarousel$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
          * Subject for notification when the carousel's settings start changinf
          */

          this._changeSettingsCarousel$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
          * Subject for notification when the carousel's settings have changed
          */

          this._changedSettingsCarousel$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
          * Subject for notification when the carousel starts translating or moving
          */

          this._translateCarousel$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
          * Subject for notification when the carousel stopped translating or moving
          */

          this._translatedCarousel$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
          * Subject for notification when the carousel's rebuilding caused by 'resize' event starts
          */

          this._resizeCarousel$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
          * Subject for notification  when the carousel's rebuilding caused by 'resize' event is ended
          */

          this._resizedCarousel$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
          * Subject for notification when the refresh of carousel starts
          */

          this._refreshCarousel$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
          * Subject for notification when the refresh of carousel is ended
          */

          this._refreshedCarousel$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
          * Subject for notification when the dragging of carousel starts
          */

          this._dragCarousel$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
          * Subject for notification when the dragging of carousel is ended
          */

          this._draggedCarousel$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
           * Current settings for the carousel.
           */

          this.settings = {
            items: 0
          };
          /**
          * Initial data for setting classes to element .owl-carousel
          */

          this.owlDOMData = {
            rtl: false,
            isResponsive: false,
            isRefreshed: false,
            isLoaded: false,
            isLoading: false,
            isMouseDragable: false,
            isGrab: false,
            isTouchDragable: false
          };
          /**
          * Initial data of .owl-stage
          */

          this.stageData = {
            transform: 'translate3d(0px,0px,0px)',
            transition: '0s',
            width: 0,
            paddingL: 0,
            paddingR: 0
          };
          /**
           * All real items.
           */

          this._items = []; // is equal to this.slides

          /**
          * Array with width of every slide.
          */

          this._widths = [];
          /**
          * Currently suppressed events to prevent them from beeing retriggered.
          */

          this._supress = {};
          /**
           * References to the running plugins of this carousel.
           */

          this._plugins = {};
          /**
          * Absolute current position.
          */

          this._current = null;
          /**
          * All cloned items.
          */

          this._clones = [];
          /**
           * Merge values of all items.
           * @todo Maybe this could be part of a plugin.
           */

          this._mergers = [];
          /**
          * Animation speed in milliseconds.
          */

          this._speed = null;
          /**
          * Coordinates of all items in pixel.
          * @todo The name of this member is missleading.
          */

          this._coordinates = [];
          /**
          * Current breakpoint.
          * @todo Real media queries would be nice.
          */

          this._breakpoint = null;
          /**
           * Prefix for id of cloned slides
           */

          this.clonedIdPrefix = 'cloned-';
          /**
           * Current options set by the caller including defaults.
           */

          this._options = {};
          /**
           * Invalidated parts within the update process.
           */

          this._invalidated = {};
          /**
           * Current state information and their tags.
           */

          this._states = {
            current: {},
            tags: {
              initializing: ['busy'],
              animating: ['busy'],
              dragging: ['interacting']
            }
          };
          /**
           * Ordered list of workers for the update process.
          */

          this._pipe = [// {
          //   filter: ['width', 'settings'],
          //   run: () => {
          //     this._width = this.carouselWindowWidth;
          //   }
          // },
          {
            filter: ['width', 'items', 'settings'],
            run: function run(cache) {
              cache.current = _this176._items && _this176._items[_this176.relative(_this176._current)].id;
            }
          }, // {
          //   filter: ['items', 'settings'],
          //   run: function() {
          //     // this.$stage.children('.cloned').remove();
          //   }
          // },
          {
            filter: ['width', 'items', 'settings'],
            run: function run(cache) {
              var margin = _this176.settings.margin || '',
                  grid = !_this176.settings.autoWidth,
                  rtl = _this176.settings.rtl,
                  css = {
                'margin-left': rtl ? margin : '',
                'margin-right': rtl ? '' : margin
              };

              if (!grid) {
                _this176.slidesData.forEach(function (slide) {
                  slide.marginL = css['margin-left'];
                  slide.marginR = css['margin-right'];
                });
              }

              cache.css = css;
            }
          }, {
            filter: ['width', 'items', 'settings'],
            run: function run(cache) {
              var width = +(_this176.width() / _this176.settings.items).toFixed(3) - _this176.settings.margin,
                  grid = !_this176.settings.autoWidth,
                  widths = [];
              var merge = null,
                  iterator = _this176._items.length;
              cache.items = {
                merge: false,
                width: width
              };

              while (iterator--) {
                merge = _this176._mergers[iterator];
                merge = _this176.settings.mergeFit && Math.min(merge, _this176.settings.items) || merge;
                cache.items.merge = merge > 1 || cache.items.merge;
                widths[iterator] = !grid ? _this176._items[iterator].width ? _this176._items[iterator].width : width : width * merge;
              }

              _this176._widths = widths;

              _this176.slidesData.forEach(function (slide, i) {
                slide.width = _this176._widths[i];
                slide.marginR = cache.css['margin-right'];
                slide.marginL = cache.css['margin-left'];
              });
            }
          }, {
            filter: ['items', 'settings'],
            run: function run() {
              var clones = [],
                  items = _this176._items,
                  settings = _this176.settings,
                  // TODO: Should be computed from number of min width items in stage
              view = Math.max(settings.items * 2, 4),
                  size = Math.ceil(items.length / 2) * 2;
              var append = [],
                  prepend = [],
                  repeat = settings.loop && items.length ? settings.rewind ? view : Math.max(view, size) : 0;
              repeat /= 2;

              while (repeat--) {
                // Switch to only using appended clones
                clones.push(_this176.normalize(clones.length / 2, true));
                append.push(Object.assign({}, _this176.slidesData[clones[clones.length - 1]]));
                clones.push(_this176.normalize(items.length - 1 - (clones.length - 1) / 2, true));
                prepend.unshift(Object.assign({}, _this176.slidesData[clones[clones.length - 1]]));
              }

              _this176._clones = clones;
              append = append.map(function (slide) {
                slide.id = "".concat(_this176.clonedIdPrefix).concat(slide.id);
                slide.isActive = false;
                slide.isCloned = true;
                return slide;
              });
              prepend = prepend.map(function (slide) {
                slide.id = "".concat(_this176.clonedIdPrefix).concat(slide.id);
                slide.isActive = false;
                slide.isCloned = true;
                return slide;
              });
              _this176.slidesData = prepend.concat(_this176.slidesData).concat(append);
            }
          }, {
            filter: ['width', 'items', 'settings'],
            run: function run() {
              var rtl = _this176.settings.rtl ? 1 : -1,
                  size = _this176._clones.length + _this176._items.length,
                  coordinates = [];
              var iterator = -1,
                  previous = 0,
                  current = 0;

              while (++iterator < size) {
                previous = coordinates[iterator - 1] || 0;
                current = _this176._widths[_this176.relative(iterator)] + _this176.settings.margin;
                coordinates.push(previous + current * rtl);
              }

              _this176._coordinates = coordinates;
            }
          }, {
            filter: ['width', 'items', 'settings'],
            run: function run() {
              var padding = _this176.settings.stagePadding,
                  coordinates = _this176._coordinates,
                  css = {
                'width': Math.ceil(Math.abs(coordinates[coordinates.length - 1])) + padding * 2,
                'padding-left': padding || '',
                'padding-right': padding || ''
              };
              _this176.stageData.width = css.width; // use this property in *ngIf directive for .owl-stage element

              _this176.stageData.paddingL = css['padding-left'];
              _this176.stageData.paddingR = css['padding-right'];
            }
          }, {
            //   filter: [ 'width', 'items', 'settings' ],
            //   run: cache => {
            // 		// this method sets the width for every slide, but I set it in different way earlier
            // 		const grid = !this.settings.autoWidth,
            // 		items = this.$stage.children(); // use this.slidesData
            //     let iterator = this._coordinates.length;
            //     if (grid && cache.items.merge) {
            //       while (iterator--) {
            //         cache.css.width = this._widths[this.relative(iterator)];
            //         items.eq(iterator).css(cache.css);
            //       }
            //     } else if (grid) {
            //       cache.css.width = cache.items.width;
            //       items.css(cache.css);
            //     }
            //   }
            // }, {
            //   filter: [ 'items' ],
            //   run: function() {
            //     this._coordinates.length < 1 && this.$stage.removeAttr('style');
            //   }
            // }, {
            filter: ['width', 'items', 'settings'],
            run: function run(cache) {
              var current = cache.current ? _this176.slidesData.findIndex(function (slide) {
                return slide.id === cache.current;
              }) : 0;
              current = Math.max(_this176.minimum(), Math.min(_this176.maximum(), current));

              _this176.reset(current);
            }
          }, {
            filter: ['position'],
            run: function run() {
              _this176.animate(_this176.coordinates(_this176._current));
            }
          }, {
            filter: ['width', 'position', 'items', 'settings'],
            run: function run() {
              var rtl = _this176.settings.rtl ? 1 : -1,
                  padding = _this176.settings.stagePadding * 2,
                  matches = [];
              var begin, end, inner, outer, i, n;
              begin = _this176.coordinates(_this176.current());

              if (typeof begin === 'number') {
                begin += padding;
              } else {
                begin = 0;
              }

              end = begin + _this176.width() * rtl;

              if (rtl === -1 && _this176.settings.center) {
                var result = _this176._coordinates.filter(function (element) {
                  return _this176.settings.items % 2 === 1 ? element >= begin : element > begin;
                });

                begin = result.length ? result[result.length - 1] : begin;
              }

              for (i = 0, n = _this176._coordinates.length; i < n; i++) {
                inner = Math.ceil(_this176._coordinates[i - 1] || 0);
                outer = Math.ceil(Math.abs(_this176._coordinates[i]) + padding * rtl);

                if (_this176._op(inner, '<=', begin) && _this176._op(inner, '>', end) || _this176._op(outer, '<', begin) && _this176._op(outer, '>', end)) {
                  matches.push(i);
                }
              }

              _this176.slidesData.forEach(function (slide) {
                slide.isActive = false;
                return slide;
              });

              matches.forEach(function (item) {
                _this176.slidesData[item].isActive = true;
              });

              if (_this176.settings.center) {
                _this176.slidesData.forEach(function (slide) {
                  slide.isCentered = false;
                  return slide;
                });

                _this176.slidesData[_this176.current()].isCentered = true;
              }
            }
          }];
        } // Is needed for tests


        _createClass2(CarouselService, [{
          key: "invalidated",
          get: function get() {
            return this._invalidated;
          } // is needed for tests

        }, {
          key: "states",
          get: function get() {
            return this._states;
          }
          /**
           * Makes _viewSettingsShipper$ Subject become Observable
           * @returns Observable of _viewSettingsShipper$ Subject
           */

        }, {
          key: "getViewCurSettings",
          value: function getViewCurSettings() {
            return this._viewSettingsShipper$.asObservable();
          }
          /**
           * Makes _initializedCarousel$ Subject become Observable
           * @returns Observable of _initializedCarousel$ Subject
           */

        }, {
          key: "getInitializedState",
          value: function getInitializedState() {
            return this._initializedCarousel$.asObservable();
          }
          /**
           * Makes _changeSettingsCarousel$ Subject become Observable
           * @returns Observable of _changeSettingsCarousel$ Subject
           */

        }, {
          key: "getChangeState",
          value: function getChangeState() {
            return this._changeSettingsCarousel$.asObservable();
          }
          /**
           * Makes _changedSettingsCarousel$ Subject become Observable
           * @returns Observable of _changedSettingsCarousel$ Subject
           */

        }, {
          key: "getChangedState",
          value: function getChangedState() {
            return this._changedSettingsCarousel$.asObservable();
          }
          /**
           * Makes _translateCarousel$ Subject become Observable
           * @returns Observable of _translateCarousel$ Subject
           */

        }, {
          key: "getTranslateState",
          value: function getTranslateState() {
            return this._translateCarousel$.asObservable();
          }
          /**
           * Makes _translatedCarousel$ Subject become Observable
           * @returns Observable of _translatedCarousel$ Subject
           */

        }, {
          key: "getTranslatedState",
          value: function getTranslatedState() {
            return this._translatedCarousel$.asObservable();
          }
          /**
           * Makes _resizeCarousel$ Subject become Observable
           * @returns Observable of _resizeCarousel$ Subject
           */

        }, {
          key: "getResizeState",
          value: function getResizeState() {
            return this._resizeCarousel$.asObservable();
          }
          /**
           * Makes _resizedCarousel$ Subject become Observable
           * @returns Observable of _resizedCarousel$ Subject
           */

        }, {
          key: "getResizedState",
          value: function getResizedState() {
            return this._resizedCarousel$.asObservable();
          }
          /**
           * Makes _refreshCarousel$ Subject become Observable
           * @returns Observable of _refreshCarousel$ Subject
           */

        }, {
          key: "getRefreshState",
          value: function getRefreshState() {
            return this._refreshCarousel$.asObservable();
          }
          /**
           * Makes _refreshedCarousel$ Subject become Observable
           * @returns Observable of _refreshedCarousel$ Subject
           */

        }, {
          key: "getRefreshedState",
          value: function getRefreshedState() {
            return this._refreshedCarousel$.asObservable();
          }
          /**
           * Makes _dragCarousel$ Subject become Observable
           * @returns Observable of _dragCarousel$ Subject
           */

        }, {
          key: "getDragState",
          value: function getDragState() {
            return this._dragCarousel$.asObservable();
          }
          /**
           * Makes _draggedCarousel$ Subject become Observable
           * @returns Observable of _draggedCarousel$ Subject
           */

        }, {
          key: "getDraggedState",
          value: function getDraggedState() {
            return this._draggedCarousel$.asObservable();
          }
          /**
           * Setups custom options expanding default options
           * @param options custom options
           */

        }, {
          key: "setOptions",
          value: function setOptions(options) {
            var configOptions = new OwlCarouselOConfig();

            var checkedOptions = this._validateOptions(options, configOptions);

            this._options = Object.assign(Object.assign({}, configOptions), checkedOptions);
          }
          /**
           * Checks whether user's option are set properly. Cheking is based on typings;
           * @param options options set by user
           * @param configOptions default options
           * @returns checked and modified (if it's needed) user's options
           *
           * Notes:
           * 	- if user set option with wrong type, it'll be written in console
           */

        }, {
          key: "_validateOptions",
          value: function _validateOptions(options, configOptions) {
            var _this177 = this;

            var checkedOptions = Object.assign({}, options);
            var mockedTypes = new OwlOptionsMockedTypes();

            var setRightOption = function setRightOption(type, key) {
              _this177.logger.log("options.".concat(key, " must be type of ").concat(type, "; ").concat(key, "=").concat(options[key], " skipped to defaults: ").concat(key, "=").concat(configOptions[key]));

              return configOptions[key];
            };

            for (var key in checkedOptions) {
              if (checkedOptions.hasOwnProperty(key)) {
                // condition could be shortened but it gets harder for understanding
                if (mockedTypes[key] === 'number') {
                  if (this._isNumeric(checkedOptions[key])) {
                    checkedOptions[key] = +checkedOptions[key];
                    checkedOptions[key] = key === 'items' ? this._validateItems(checkedOptions[key], checkedOptions.skip_validateItems) : checkedOptions[key];
                  } else {
                    checkedOptions[key] = setRightOption(mockedTypes[key], key);
                  }
                } else if (mockedTypes[key] === 'boolean' && typeof checkedOptions[key] !== 'boolean') {
                  checkedOptions[key] = setRightOption(mockedTypes[key], key);
                } else if (mockedTypes[key] === 'number|boolean' && !this._isNumberOrBoolean(checkedOptions[key])) {
                  checkedOptions[key] = setRightOption(mockedTypes[key], key);
                } else if (mockedTypes[key] === 'number|string' && !this._isNumberOrString(checkedOptions[key])) {
                  checkedOptions[key] = setRightOption(mockedTypes[key], key);
                } else if (mockedTypes[key] === 'string|boolean' && !this._isStringOrBoolean(checkedOptions[key])) {
                  checkedOptions[key] = setRightOption(mockedTypes[key], key);
                } else if (mockedTypes[key] === 'string[]') {
                  if (Array.isArray(checkedOptions[key])) {
                    var isString = false;
                    checkedOptions[key].forEach(function (element) {
                      isString = typeof element === 'string' ? true : false;
                    });

                    if (!isString) {
                      checkedOptions[key] = setRightOption(mockedTypes[key], key);
                    }

                    ;
                  } else {
                    checkedOptions[key] = setRightOption(mockedTypes[key], key);
                  }
                }
              }
            }

            return checkedOptions;
          }
          /**
           * Checks the option `items` set by user and if it bigger than number of slides, the function returns number of slides
           * @param items option items set by user
           * @param skip_validateItems option `skip_validateItems` set by user
           * @returns right number of items
           */

        }, {
          key: "_validateItems",
          value: function _validateItems(items, skip_validateItems) {
            var result = items;

            if (items > this._items.length) {
              if (skip_validateItems) {
                this.logger.log('The option \'items\' in your options is bigger than the number of slides. The navigation got disabled');
              } else {
                result = this._items.length;
                this.logger.log('The option \'items\' in your options is bigger than the number of slides. This option is updated to the current number of slides and the navigation got disabled');
              }
            } else {
              if (items === this._items.length && (this.settings.dots || this.settings.nav)) {
                this.logger.log('Option \'items\' in your options is equal to the number of slides. So the navigation got disabled');
              }
            }

            return result;
          }
          /**
           * Set current width of carousel
           * @param width width of carousel Window
           */

        }, {
          key: "setCarouselWidth",
          value: function setCarouselWidth(width) {
            this._width = width;
          }
          /**
             * Setups the current settings.
             * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?
             * @todo Support for media queries by using `matchMedia` would be nice.
             * @param carouselWidth width of carousel
             * @param slides array of slides
             * @param options options set by user
             */

        }, {
          key: "setup",
          value: function setup(carouselWidth, slides, options) {
            this.setCarouselWidth(carouselWidth);
            this.setItems(slides);

            this._defineSlidesData();

            this.setOptions(options);
            this.settings = Object.assign({}, this._options);
            this.setOptionsForViewport();

            this._trigger('change', {
              property: {
                name: 'settings',
                value: this.settings
              }
            });

            this.invalidate('settings'); // must be call of this function;

            this._trigger('changed', {
              property: {
                name: 'settings',
                value: this.settings
              }
            });
          }
          /**
           * Set options for current viewport
           */

        }, {
          key: "setOptionsForViewport",
          value: function setOptionsForViewport() {
            var _this178 = this;

            var viewport = this._width,
                overwrites = this._options.responsive;
            var match = -1;

            if (!Object.keys(overwrites).length) {
              return;
            }

            if (!viewport) {
              this.settings.items = 1;
              return;
            }

            for (var key in overwrites) {
              if (overwrites.hasOwnProperty(key)) {
                if (+key <= viewport && +key > match) {
                  match = Number(key);
                }
              }
            }

            this.settings = Object.assign(Object.assign(Object.assign({}, this._options), overwrites[match]), {
              items: overwrites[match] && overwrites[match].items ? this._validateItems(overwrites[match].items, this._options.skip_validateItems) : this._options.items
            }); // if (typeof this.settings.stagePadding === 'function') {
            // 	this.settings.stagePadding = this.settings.stagePadding();
            // }

            delete this.settings.responsive;
            this.owlDOMData.isResponsive = true;
            this.owlDOMData.isMouseDragable = this.settings.mouseDrag;
            this.owlDOMData.isTouchDragable = this.settings.touchDrag;
            var mergers = [];

            this._items.forEach(function (item) {
              var mergeN = _this178.settings.merge ? item.dataMerge : 1;
              mergers.push(mergeN);
            });

            this._mergers = mergers;
            this._breakpoint = match;
            this.invalidate('settings');
          }
          /**
           * Initializes the carousel.
           * @param slides array of CarouselSlideDirective
           */

        }, {
          key: "initialize",
          value: function initialize(slides) {
            var _this179 = this;

            this.enter('initializing'); // this.trigger('initialize');

            this.owlDOMData.rtl = this.settings.rtl;

            if (this._mergers.length) {
              this._mergers = [];
            }

            slides.forEach(function (item) {
              var mergeN = _this179.settings.merge ? item.dataMerge : 1;

              _this179._mergers.push(mergeN);
            });
            this._clones = [];
            this.reset(this._isNumeric(this.settings.startPosition) ? +this.settings.startPosition : 0);
            this.invalidate('items');
            this.refresh();
            this.owlDOMData.isLoaded = true;
            this.owlDOMData.isMouseDragable = this.settings.mouseDrag;
            this.owlDOMData.isTouchDragable = this.settings.touchDrag;
            this.sendChanges();
            this.leave('initializing');

            this._trigger('initialized');
          }
        }, {
          key: "sendChanges",
          value:
          /**
           * Sends all data needed for View
           */
          function sendChanges() {
            this._viewSettingsShipper$.next({
              owlDOMData: this.owlDOMData,
              stageData: this.stageData,
              slidesData: this.slidesData,
              navData: this.navData,
              dotsData: this.dotsData
            });
          }
          /**
             * Updates option logic if necessery
             */

        }, {
          key: "_optionsLogic",
          value: function _optionsLogic() {
            if (this.settings.autoWidth) {
              this.settings.stagePadding = 0;
              this.settings.merge = false;
            }
          }
          /**
           * Updates the view
           */

        }, {
          key: "update",
          value: function update() {
            var _this180 = this;

            var i = 0;

            var n = this._pipe.length,
                filter = function filter(item) {
              return _this180._invalidated[item];
            },
                cache = {};

            while (i < n) {
              var filteredPipe = this._pipe[i].filter.filter(filter);

              if (this._invalidated.all || filteredPipe.length > 0) {
                this._pipe[i].run(cache);
              }

              i++;
            }

            this.slidesData.forEach(function (slide) {
              return slide.classes = _this180.setCurSlideClasses(slide);
            });
            this.sendChanges();
            this._invalidated = {};

            if (!this.is('valid')) {
              this.enter('valid');
            }
          }
          /**
             * Gets the width of the view.
             * @param [dimension=Width.Default] The dimension to return
             * @returns The width of the view in pixel.
             */

        }, {
          key: "width",
          value: function width(dimension) {
            dimension = dimension || Width.Default;

            switch (dimension) {
              case Width.Inner:
              case Width.Outer:
                return this._width;

              default:
                return this._width - this.settings.stagePadding * 2 + this.settings.margin;
            }
          }
          /**
             * Refreshes the carousel primarily for adaptive purposes.
             */

        }, {
          key: "refresh",
          value: function refresh() {
            this.enter('refreshing');

            this._trigger('refresh');

            this._defineSlidesData();

            this.setOptionsForViewport();

            this._optionsLogic(); // this.$element.addClass(this.options.refreshClass);


            this.update(); // this.$element.removeClass(this.options.refreshClass);

            this.leave('refreshing');

            this._trigger('refreshed');
          }
          /**
             * Checks window `resize` event.
             * @param curWidth width of .owl-carousel
             */

        }, {
          key: "onResize",
          value: function onResize(curWidth) {
            if (!this._items.length) {
              return false;
            }

            this.setCarouselWidth(curWidth);
            this.enter('resizing'); // if (this.trigger('resize').isDefaultPrevented()) {
            // 	this.leave('resizing');
            // 	return false;
            // }

            this._trigger('resize');

            this.invalidate('width');
            this.refresh();
            this.leave('resizing');

            this._trigger('resized');
          }
          /**
             * Prepares data for dragging carousel. It starts after firing `touchstart` and `mousedown` events.
             * @todo Horizontal swipe threshold as option
             * @todo #261
             * @param event - The event arguments.
             * @returns stage - object with 'x' and 'y' coordinates of .owl-stage
             */

        }, {
          key: "prepareDragging",
          value: function prepareDragging(event) {
            var stage = null,
                transformArr; // could be 5 commented lines below; However there's stage transform in stageData and in updates after each move of stage
            // stage = getComputedStyle(this.el.nativeElement).transform.replace(/.*\(|\)| /g, '').split(',');
            // stage = {
            //   x: stage[stage.length === 16 ? 12 : 4],
            //   y: stage[stage.length === 16 ? 13 : 5]
            // };

            transformArr = this.stageData.transform.replace(/.*\(|\)| |[^,-\d]\w|\)/g, '').split(',');
            stage = {
              x: +transformArr[0],
              y: +transformArr[1]
            };

            if (this.is('animating')) {
              this.invalidate('position');
            }

            if (event.type === 'mousedown') {
              this.owlDOMData.isGrab = true;
            }

            this.speed(0);
            return stage;
          }
          /**
           * Enters into a 'dragging' state
           */

        }, {
          key: "enterDragging",
          value: function enterDragging() {
            this.enter('dragging');

            this._trigger('drag');
          }
          /**
             * Defines new coords for .owl-stage while dragging it
             * @todo #261
             * @param event the event arguments.
             * @param dragData initial data got after starting dragging
             * @returns coords or false
             */

        }, {
          key: "defineNewCoordsDrag",
          value: function defineNewCoordsDrag(event, dragData) {
            var minimum = null,
                maximum = null,
                pull = null;
            var delta = this.difference(dragData.pointer, this.pointer(event)),
                stage = this.difference(dragData.stage.start, delta);

            if (!this.is('dragging')) {
              return false;
            }

            if (this.settings.loop) {
              minimum = this.coordinates(this.minimum());
              maximum = +this.coordinates(this.maximum() + 1) - minimum;
              stage.x = ((stage.x - minimum) % maximum + maximum) % maximum + minimum;
            } else {
              minimum = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum());
              maximum = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum());
              pull = this.settings.pullDrag ? -1 * delta.x / 5 : 0;
              stage.x = Math.max(Math.min(stage.x, minimum + pull), maximum + pull);
            }

            return stage;
          }
          /**
             * Finishes dragging of carousel when `touchend` and `mouseup` events fire.
             * @todo #261
             * @todo Threshold for click event
             * @param event the event arguments.
             * @param dragObj the object with dragging settings and states
             * @param clickAttacher function which attaches click handler to slide or its children elements in order to prevent event bubling
             */

        }, {
          key: "finishDragging",
          value: function finishDragging(event, dragObj, clickAttacher) {
            var directions = ['right', 'left'],
                delta = this.difference(dragObj.pointer, this.pointer(event)),
                stage = dragObj.stage.current,
                direction = directions[+(this.settings.rtl ? delta.x < +this.settings.rtl : delta.x > +this.settings.rtl)];
            var currentSlideI, current, newCurrent;

            if (delta.x !== 0 && this.is('dragging') || !this.is('valid')) {
              this.speed(+this.settings.dragEndSpeed || this.settings.smartSpeed);
              currentSlideI = this.closest(stage.x, delta.x !== 0 ? direction : dragObj.direction);
              current = this.current();
              newCurrent = this.current(currentSlideI === -1 ? undefined : currentSlideI);

              if (current !== newCurrent) {
                this.invalidate('position');
                this.update();
              }

              dragObj.direction = direction;

              if (Math.abs(delta.x) > 3 || new Date().getTime() - dragObj.time > 300) {
                clickAttacher();
              }
            }

            if (!this.is('dragging')) {
              return;
            }

            this.leave('dragging');

            this._trigger('dragged');
          }
          /**
             * Gets absolute position of the closest item for a coordinate.
             * @todo Setting `freeDrag` makes `closest` not reusable. See #165.
             * @param coordinate The coordinate in pixel.
             * @param direction The direction to check for the closest item. Ether `left` or `right`.
             * @returns The absolute position of the closest item.
             */

        }, {
          key: "closest",
          value: function closest(coordinate, direction) {
            var pull = 30,
                width = this.width();
            var coordinates = this.coordinates(),
                position = -1;

            if (this.settings.center) {
              coordinates = coordinates.map(function (item) {
                if (item === 0) {
                  item += 0.000001;
                }

                return item;
              });
            } // option 'freeDrag' doesn't have realization and using it here creates problem:
            // variable 'position' stays unchanged (it equals -1 at the begging) and thus method returns -1
            // Returning value is consumed by method current(), which taking -1 as argument calculates the index of new current slide
            // In case of having 5 slides ans 'loop=false; calling 'current(-1)' sets props '_current' as 4. Just last slide remains visible instead of 3 last slides.
            // if (!this.settings.freeDrag) {
            // check closest item


            for (var i = 0; i < coordinates.length; i++) {
              if (direction === 'left' && coordinate > coordinates[i] - pull && coordinate < coordinates[i] + pull) {
                position = i; // on a right pull, check on previous index
                // to do so, subtract width from value and set position = index + 1
              } else if (direction === 'right' && coordinate > coordinates[i] - width - pull && coordinate < coordinates[i] - width + pull) {
                position = i + 1;
              } else if (this._op(coordinate, '<', coordinates[i]) && this._op(coordinate, '>', coordinates[i + 1] || coordinates[i] - width)) {
                position = direction === 'left' ? i + 1 : i;
              } else if (direction === null && coordinate > coordinates[i] - pull && coordinate < coordinates[i] + pull) {
                position = i;
              }

              if (position !== -1) {
                break;
              }

              ;
            } // }


            if (!this.settings.loop) {
              // non loop boundries
              if (this._op(coordinate, '>', coordinates[this.minimum()])) {
                position = coordinate = this.minimum();
              } else if (this._op(coordinate, '<', coordinates[this.maximum()])) {
                position = coordinate = this.maximum();
              }
            }

            return position;
          }
          /**
             * Animates the stage.
             * @todo #270
             * @param coordinate The coordinate in pixels.
             */

        }, {
          key: "animate",
          value: function animate(coordinate) {
            var animate = this.speed() > 0;

            if (this.is('animating')) {
              this.onTransitionEnd();
            }

            if (animate) {
              this.enter('animating');

              this._trigger('translate');
            }

            this.stageData.transform = 'translate3d(' + coordinate + 'px,0px,0px)';
            this.stageData.transition = this.speed() / 1000 + 's' + (this.settings.slideTransition ? ' ' + this.settings.slideTransition : ''); // also there was transition by means of JQuery.animate or css-changing property left
          }
          /**
             * Checks whether the carousel is in a specific state or not.
             * @param state The state to check.
             * @returns The flag which indicates if the carousel is busy.
             */

        }, {
          key: "is",
          value: function is(state) {
            return this._states.current[state] && this._states.current[state] > 0;
          }
        }, {
          key: "current",
          value:
          /**
             * Sets the absolute position of the current item.
             * @param position The new absolute position or nothing to leave it unchanged.
             * @returns The absolute position of the current item.
             */
          function current(position) {
            if (position === undefined) {
              return this._current;
            }

            if (this._items.length === 0) {
              return undefined;
            }

            position = this.normalize(position);

            if (this._current !== position) {
              var event = this._trigger('change', {
                property: {
                  name: 'position',
                  value: position
                }
              }); // if (event.data !== undefined) {
              // 	position = this.normalize(event.data);
              // }


              this._current = position;
              this.invalidate('position');

              this._trigger('changed', {
                property: {
                  name: 'position',
                  value: this._current
                }
              });
            }

            return this._current;
          }
          /**
             * Invalidates the given part of the update routine.
             * @param part The part to invalidate.
             * @returns The invalidated parts.
             */

        }, {
          key: "invalidate",
          value: function invalidate(part) {
            if (typeof part === 'string') {
              this._invalidated[part] = true;

              if (this.is('valid')) {
                this.leave('valid');
              }
            }

            return Object.keys(this._invalidated);
          }
        }, {
          key: "reset",
          value:
          /**
           * Resets the absolute position of the current item.
           * @param position the absolute position of the new item.
           */
          function reset(position) {
            position = this.normalize(position);

            if (position === undefined) {
              return;
            }

            this._speed = 0;
            this._current = position;

            this._suppress(['translate', 'translated']);

            this.animate(this.coordinates(position));

            this._release(['translate', 'translated']);
          }
          /**
             * Normalizes an absolute or a relative position of an item.
             * @param position The absolute or relative position to normalize.
             * @param relative Whether the given position is relative or not.
             * @returns The normalized position.
             */

        }, {
          key: "normalize",
          value: function normalize(position, relative) {
            var n = this._items.length,
                m = relative ? 0 : this._clones.length;

            if (!this._isNumeric(position) || n < 1) {
              position = undefined;
            } else if (position < 0 || position >= n + m) {
              position = ((position - m / 2) % n + n) % n + m / 2;
            }

            return position;
          }
          /**
             * Converts an absolute position of an item into a relative one.
             * @param position The absolute position to convert.
             * @returns The converted position.
             */

        }, {
          key: "relative",
          value: function relative(position) {
            position -= this._clones.length / 2;
            return this.normalize(position, true);
          }
          /**
             * Gets the maximum position for the current item.
             * @param relative Whether to return an absolute position or a relative position.
             * @returns number of maximum position
             */

        }, {
          key: "maximum",
          value: function maximum() {
            var relative = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            var settings = this.settings;
            var maximum = this._coordinates.length,
                iterator,
                reciprocalItemsWidth,
                elementWidth;

            if (settings.loop) {
              maximum = this._clones.length / 2 + this._items.length - 1;
            } else if (settings.autoWidth || settings.merge) {
              iterator = this._items.length;
              reciprocalItemsWidth = this.slidesData[--iterator].width;
              elementWidth = this._width;

              while (iterator--) {
                // it could be use this._items instead of this.slidesData;
                reciprocalItemsWidth += +this.slidesData[iterator].width + this.settings.margin;

                if (reciprocalItemsWidth > elementWidth) {
                  break;
                }
              }

              maximum = iterator + 1;
            } else if (settings.center) {
              maximum = this._items.length - 1;
            } else {
              maximum = this._items.length - settings.items;
            }

            if (relative) {
              maximum -= this._clones.length / 2;
            }

            return Math.max(maximum, 0);
          }
          /**
             * Gets the minimum position for the current item.
             * @param relative Whether to return an absolute position or a relative position.
             * @returns number of minimum position
             */

        }, {
          key: "minimum",
          value: function minimum() {
            var relative = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            return relative ? 0 : this._clones.length / 2;
          }
          /**
             * Gets an item at the specified relative position.
             * @param position The relative position of the item.
             * @returns The item at the given position or all items if no position was given.
             */

        }, {
          key: "items",
          value: function items(position) {
            if (position === undefined) {
              return this._items.slice();
            }

            position = this.normalize(position, true);
            return [this._items[position]];
          }
          /**
             * Gets an item at the specified relative position.
             * @param position The relative position of the item.
             * @returns The item at the given position or all items if no position was given.
             */

        }, {
          key: "mergers",
          value: function mergers(position) {
            if (position === undefined) {
              return this._mergers.slice();
            }

            position = this.normalize(position, true);
            return this._mergers[position];
          }
          /**
             * Gets the absolute positions of clones for an item.
             * @param position The relative position of the item.
             * @returns The absolute positions of clones for the item or all if no position was given.
             */

        }, {
          key: "clones",
          value: function clones(position) {
            var odd = this._clones.length / 2,
                even = odd + this._items.length,
                map = function map(index) {
              return index % 2 === 0 ? even + index / 2 : odd - (index + 1) / 2;
            };

            if (position === undefined) {
              return this._clones.map(function (v, i) {
                return map(i);
              });
            }

            return this._clones.map(function (v, i) {
              return v === position ? map(i) : null;
            }).filter(function (item) {
              return item;
            });
          }
          /**
             * Sets the current animation speed.
             * @param speed The animation speed in milliseconds or nothing to leave it unchanged.
             * @returns The current animation speed in milliseconds.
             */

        }, {
          key: "speed",
          value: function speed(_speed) {
            if (_speed !== undefined) {
              this._speed = _speed;
            }

            return this._speed;
          }
          /**
             * Gets the coordinate of an item.
             * @todo The name of this method is missleanding.
             * @param position The absolute position of the item within `minimum()` and `maximum()`.
             * @returns The coordinate of the item in pixel or all coordinates.
             */

        }, {
          key: "coordinates",
          value: function coordinates(position) {
            var _this181 = this;

            var multiplier = 1,
                newPosition = position - 1,
                coordinate,
                result;

            if (position === undefined) {
              result = this._coordinates.map(function (item, index) {
                return _this181.coordinates(index);
              });
              return result;
            }

            if (this.settings.center) {
              if (this.settings.rtl) {
                multiplier = -1;
                newPosition = position + 1;
              }

              coordinate = this._coordinates[position];
              coordinate += (this.width() - coordinate + (this._coordinates[newPosition] || 0)) / 2 * multiplier;
            } else {
              coordinate = this._coordinates[newPosition] || 0;
            }

            coordinate = Math.ceil(coordinate);
            return coordinate;
          }
          /**
             * Calculates the speed for a translation.
             * @param from The absolute position of the start item.
             * @param to The absolute position of the target item.
             * @param factor [factor=undefined] - The time factor in milliseconds.
             * @returns The time in milliseconds for the translation.
             */

        }, {
          key: "_duration",
          value: function _duration(from, to, factor) {
            if (factor === 0) {
              return 0;
            }

            return Math.min(Math.max(Math.abs(to - from), 1), 6) * Math.abs(+factor || this.settings.smartSpeed);
          }
          /**
             * Slides to the specified item.
             * @param position The position of the item.
             * @param speed The time in milliseconds for the transition.
             */

        }, {
          key: "to",
          value: function to(position, speed) {
            var _this182 = this;

            var current = this.current(),
                revert = null,
                distance = position - this.relative(current),
                maximum = this.maximum(),
                delayForLoop = 0;
            var direction = +(distance > 0) - +(distance < 0),
                items = this._items.length,
                minimum = this.minimum();

            if (this.settings.loop) {
              if (!this.settings.rewind && Math.abs(distance) > items / 2) {
                distance += direction * -1 * items;
              }

              position = current + distance;
              revert = ((position - minimum) % items + items) % items + minimum;

              if (revert !== position && revert - distance <= maximum && revert - distance > 0) {
                current = revert - distance;
                position = revert;
                delayForLoop = 30;
                this.reset(current);
                this.sendChanges();
              }
            } else if (this.settings.rewind) {
              maximum += 1;
              position = (position % maximum + maximum) % maximum;
            } else {
              position = Math.max(minimum, Math.min(maximum, position));
            }

            setTimeout(function () {
              _this182.speed(_this182._duration(current, position, speed));

              _this182.current(position);

              _this182.update();
            }, delayForLoop);
          }
          /**
             * Slides to the next item.
             * @param speed The time in milliseconds for the transition.
             */

        }, {
          key: "next",
          value: function next(speed) {
            speed = speed || false;
            this.to(this.relative(this.current()) + 1, speed);
          }
          /**
             * Slides to the previous item.
             * @param speed The time in milliseconds for the transition.
             */

        }, {
          key: "prev",
          value: function prev(speed) {
            speed = speed || false;
            this.to(this.relative(this.current()) - 1, speed);
          }
          /**
             * Handles the end of an animation.
             * @param event - The event arguments.
             */

        }, {
          key: "onTransitionEnd",
          value: function onTransitionEnd(event) {
            // if css2 animation then event object is undefined
            if (event !== undefined) {
              // event.stopPropagation();
              // // Catch only owl-stage transitionEnd event
              // if ((event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0)	) {
              // 	return false;
              // }
              return false;
            }

            this.leave('animating');

            this._trigger('translated');
          }
          /**
             * Gets viewport width.
             * @returns - The width in pixel.
             */

        }, {
          key: "_viewport",
          value: function _viewport() {
            var width;

            if (this._width) {
              width = this._width;
            } else {
              this.logger.log('Can not detect viewport width.');
            }

            return width;
          }
          /**
             * Sets _items
             * @param content The list of slides put into CarouselSlideDirectives.
             */

        }, {
          key: "setItems",
          value: function setItems(content) {
            this._items = content;
          }
          /**
           * Sets slidesData using this._items
           */

        }, {
          key: "_defineSlidesData",
          value: function _defineSlidesData() {
            // Maybe creating and using loadMap would be better in LazyLoadService.
            // Hovewer in that case when 'resize' event fires, prop 'load' of all slides will get 'false' and such state of prop will be seen by View during its updating. Accordingly the code will remove slides's content from DOM even if it was loaded before.
            // Thus it would be needed to add that content into DOM again.
            // In order to avoid additional removing/adding loaded slides's content we use loadMap here and set restore state of prop 'load' before the View will get it.
            var loadMap;

            if (this.slidesData && this.slidesData.length) {
              loadMap = new Map();
              this.slidesData.forEach(function (item) {
                if (item.load) {
                  loadMap.set(item.id, item.load);
                }
              });
            }

            this.slidesData = this._items.map(function (slide) {
              return {
                id: "".concat(slide.id),
                isActive: false,
                tplRef: slide.tplRef,
                dataMerge: slide.dataMerge,
                width: 0,
                isCloned: false,
                load: loadMap ? loadMap.get(slide.id) : false,
                hashFragment: slide.dataHash
              };
            });
          }
          /**
           * Sets current classes for slide
           * @param slide Slide of carousel
           * @returns object with names of css-classes which are keys and true/false values
           */

        }, {
          key: "setCurSlideClasses",
          value: function setCurSlideClasses(slide) {
            // CSS classes: added/removed per current state of component properties
            var currentClasses = {
              'active': slide.isActive,
              'center': slide.isCentered,
              'cloned': slide.isCloned,
              'animated': slide.isAnimated,
              'owl-animated-in': slide.isDefAnimatedIn,
              'owl-animated-out': slide.isDefAnimatedOut
            };

            if (this.settings.animateIn) {
              currentClasses[this.settings.animateIn] = slide.isCustomAnimatedIn;
            }

            if (this.settings.animateOut) {
              currentClasses[this.settings.animateOut] = slide.isCustomAnimatedOut;
            }

            return currentClasses;
          }
          /**
             * Operators to calculate right-to-left and left-to-right.
             * @param a - The left side operand.
             * @param o - The operator.
             * @param b - The right side operand.
             * @returns true/false meaning right-to-left or left-to-right
             */

        }, {
          key: "_op",
          value: function _op(a, o, b) {
            var rtl = this.settings.rtl;

            switch (o) {
              case '<':
                return rtl ? a > b : a < b;

              case '>':
                return rtl ? a < b : a > b;

              case '>=':
                return rtl ? a <= b : a >= b;

              case '<=':
                return rtl ? a >= b : a <= b;

              default:
                break;
            }
          }
          /**
             * Triggers a public event.
             * @todo Remove `status`, `relatedTarget` should be used instead.
             * @param name The event name.
             * @param data The event data.
             * @param namespace The event namespace.
             * @param state The state which is associated with the event.
             * @param enter Indicates if the call enters the specified state or not.
             */

        }, {
          key: "_trigger",
          value: function _trigger(name, data, namespace, state, enter) {
            switch (name) {
              case 'initialized':
                this._initializedCarousel$.next(name);

                break;

              case 'change':
                this._changeSettingsCarousel$.next(data);

                break;

              case 'changed':
                this._changedSettingsCarousel$.next(data);

                break;

              case 'drag':
                this._dragCarousel$.next(name);

                break;

              case 'dragged':
                this._draggedCarousel$.next(name);

                break;

              case 'resize':
                this._resizeCarousel$.next(name);

                break;

              case 'resized':
                this._resizedCarousel$.next(name);

                break;

              case 'refresh':
                this._refreshCarousel$.next(name);

                break;

              case 'refreshed':
                this._refreshedCarousel$.next(name);

                break;

              case 'translate':
                this._translateCarousel$.next(name);

                break;

              case 'translated':
                this._translatedCarousel$.next(name);

                break;

              default:
                break;
            }
          }
          /**
           * Enters a state.
           * @param name - The state name.
           */

        }, {
          key: "enter",
          value: function enter(name) {
            var _this183 = this;

            [name].concat(this._states.tags[name] || []).forEach(function (stateName) {
              if (_this183._states.current[stateName] === undefined) {
                _this183._states.current[stateName] = 0;
              }

              _this183._states.current[stateName]++;
            });
          }
        }, {
          key: "leave",
          value:
          /**
             * Leaves a state.
             * @param name - The state name.
             */
          function leave(name) {
            var _this184 = this;

            [name].concat(this._states.tags[name] || []).forEach(function (stateName) {
              if (_this184._states.current[stateName] === 0 || !!_this184._states.current[stateName]) {
                _this184._states.current[stateName]--;
              }
            });
          }
        }, {
          key: "register",
          value:
          /**
             * Registers an event or state.
             * @param object - The event or state to register.
             */
          function register(object) {
            var _this185 = this;

            if (object.type === Type.State) {
              if (!this._states.tags[object.name]) {
                this._states.tags[object.name] = object.tags;
              } else {
                this._states.tags[object.name] = this._states.tags[object.name].concat(object.tags);
              }

              this._states.tags[object.name] = this._states.tags[object.name].filter(function (tag, i) {
                return _this185._states.tags[object.name].indexOf(tag) === i;
              });
            }
          }
          /**
             * Suppresses events.
             * @param events The events to suppress.
             */

        }, {
          key: "_suppress",
          value: function _suppress(events) {
            var _this186 = this;

            events.forEach(function (event) {
              _this186._supress[event] = true;
            });
          }
          /**
             * Releases suppressed events.
             * @param events The events to release.
             */

        }, {
          key: "_release",
          value: function _release(events) {
            var _this187 = this;

            events.forEach(function (event) {
              delete _this187._supress[event];
            });
          }
          /**
             * Gets unified pointer coordinates from event.
             * @todo #261
             * @param event The `mousedown` or `touchstart` event.
             * @returns Object Coords which contains `x` and `y` coordinates of current pointer position.
             */

        }, {
          key: "pointer",
          value: function pointer(event) {
            var result = {
              x: null,
              y: null
            };
            event = event.originalEvent || event || window.event;
            event = event.touches && event.touches.length ? event.touches[0] : event.changedTouches && event.changedTouches.length ? event.changedTouches[0] : event;

            if (event.pageX) {
              result.x = event.pageX;
              result.y = event.pageY;
            } else {
              result.x = event.clientX;
              result.y = event.clientY;
            }

            return result;
          }
          /**
             * Determines if the input is a Number or something that can be coerced to a Number
             * @param number The input to be tested
             * @returns An indication if the input is a Number or can be coerced to a Number
             */

        }, {
          key: "_isNumeric",
          value: function _isNumeric(number) {
            return !isNaN(parseFloat(number));
          }
          /**
           * Determines whether value is number or boolean type
           * @param value The input to be tested
           * @returns An indication if the input is a Number or can be coerced to a Number, or Boolean
           */

        }, {
          key: "_isNumberOrBoolean",
          value: function _isNumberOrBoolean(value) {
            return this._isNumeric(value) || typeof value === 'boolean';
          }
          /**
           * Determines whether value is number or string type
           * @param value The input to be tested
           * @returns An indication if the input is a Number or can be coerced to a Number, or String
           */

        }, {
          key: "_isNumberOrString",
          value: function _isNumberOrString(value) {
            return this._isNumeric(value) || typeof value === 'string';
          }
          /**
           * Determines whether value is number or string type
           * @param value The input to be tested
           * @returns An indication if the input is a Number or can be coerced to a Number, or String
           */

        }, {
          key: "_isStringOrBoolean",
          value: function _isStringOrBoolean(value) {
            return typeof value === 'string' || typeof value === 'boolean';
          }
          /**
             * Gets the difference of two vectors.
             * @todo #261
             * @param first The first vector.
             * @param second- The second vector.
             * @returns The difference.
             */

        }, {
          key: "difference",
          value: function difference(first, second) {
            return {
              x: first.x - second.x,
              y: first.y - second.y
            };
          }
        }]);

        return CarouselService;
      }();

      CarouselService.ɵfac = function CarouselService_Factory(t) {
        return new (t || CarouselService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](OwlLogger));
      };

      CarouselService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: CarouselService,
        factory: CarouselService.ɵfac
      });

      CarouselService.ctorParameters = function () {
        return [{
          type: OwlLogger
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CarouselService, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: OwlLogger
          }];
        }, null);
      })();

      var NavigationService = /*#__PURE__*/function () {
        function NavigationService(carouselService) {
          _classCallCheck2(this, NavigationService);

          this.carouselService = carouselService;
          /**
           * Indicates whether the plugin is initialized or not.
           */

          this._initialized = false;
          /**
           * The current paging indexes.
           */

          this._pages = [];
          /**
           * Data for navigation elements of the user interface.
           */

          this._navData = {
            disabled: false,
            prev: {
              disabled: false,
              htmlText: ''
            },
            next: {
              disabled: false,
              htmlText: ''
            }
          };
          /**
           * Data for dot elements of the user interface.
           */

          this._dotsData = {
            disabled: false,
            dots: []
          };
          this.spyDataStreams();
        }

        _createClass2(NavigationService, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.navSubscription.unsubscribe();
          }
          /**
           * Defines Observables which service must observe
           */

        }, {
          key: "spyDataStreams",
          value: function spyDataStreams() {
            var _this188 = this;

            var initializedCarousel$ = this.carouselService.getInitializedState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function (state) {
              _this188.initialize();

              _this188._updateNavPages();

              _this188.draw();

              _this188.update();

              _this188.carouselService.sendChanges();
            })); // mostly changes in carouselService and carousel at all causes carouselService.to(). It moves stage right-left by its code and calling needed functions
            // Thus this method by calling carouselService.current(position) notifies about changes

            var changedSettings$ = this.carouselService.getChangedState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.filter)(function (data) {
              return data.property.name === 'position';
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function (data) {
              _this188.update(); // should be the call of the function written at the end of comment
              // but the method carouselServive.to() has setTimeout(f, 0) which contains carouselServive.update() which calls sendChanges() method.
              // carouselService.navData and carouselService.dotsData update earlier than carouselServive.update() gets called
              // updates of carouselService.navData and carouselService.dotsData are being happening withing carouselService.current(position) method which calls next() of _changedSettingsCarousel$
              // carouselService.current(position) is being calling earlier than carouselServive.update();
              // this.carouselService.sendChanges();

            }));
            var refreshedCarousel$ = this.carouselService.getRefreshedState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function () {
              _this188._updateNavPages();

              _this188.draw();

              _this188.update();

              _this188.carouselService.sendChanges();
            }));
            var navMerge$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.merge)(initializedCarousel$, changedSettings$, refreshedCarousel$);
            this.navSubscription = navMerge$.subscribe(function () {});
          }
          /**
             * Initializes the layout of the plugin and extends the carousel.
             */

        }, {
          key: "initialize",
          value: function initialize() {
            this._navData.disabled = true;
            this._navData.prev.htmlText = this.carouselService.settings.navText[0];
            this._navData.next.htmlText = this.carouselService.settings.navText[1];
            this._dotsData.disabled = true;
            this.carouselService.navData = this._navData;
            this.carouselService.dotsData = this._dotsData;
          }
          /**
           * Calculates internal states and updates prop _pages
           */

        }, {
          key: "_updateNavPages",
          value: function _updateNavPages() {
            var i, j, k;
            var lower = this.carouselService.clones().length / 2,
                upper = lower + this.carouselService.items().length,
                maximum = this.carouselService.maximum(true),
                pages = [],
                settings = this.carouselService.settings;
            var size = settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items;
            size = +size;

            if (settings.slideBy !== 'page') {
              settings.slideBy = Math.min(+settings.slideBy, settings.items);
            }

            if (settings.dots || settings.slideBy === 'page') {
              for (i = lower, j = 0, k = 0; i < upper; i++) {
                if (j >= size || j === 0) {
                  pages.push({
                    start: Math.min(maximum, i - lower),
                    end: i - lower + size - 1
                  });

                  if (Math.min(maximum, i - lower) === maximum) {
                    break;
                  }

                  j = 0, ++k;
                }

                j += this.carouselService.mergers(this.carouselService.relative(i));
              }
            }

            this._pages = pages;
          }
          /**
             * Draws the user interface.
             * @todo The option `dotsData` wont work.
             */

        }, {
          key: "draw",
          value: function draw() {
            var _this189 = this;

            var difference;
            var settings = this.carouselService.settings,
                items = this.carouselService.items(),
                disabled = items.length <= settings.items;
            this._navData.disabled = !settings.nav || disabled;
            this._dotsData.disabled = !settings.dots || disabled;

            if (settings.dots) {
              difference = this._pages.length - this._dotsData.dots.length;

              if (settings.dotsData && difference !== 0) {
                this._dotsData.dots = [];
                items.forEach(function (item) {
                  _this189._dotsData.dots.push({
                    active: false,
                    id: "dot-".concat(item.id),
                    innerContent: item.dotContent,
                    showInnerContent: true
                  });
                });
              } else if (difference > 0) {
                var startI = this._dotsData.dots.length > 0 ? this._dotsData.dots.length : 0;

                for (var i = 0; i < difference; i++) {
                  this._dotsData.dots.push({
                    active: false,
                    id: "dot-".concat(i + startI),
                    innerContent: '',
                    showInnerContent: false
                  });
                }
              } else if (difference < 0) {
                this._dotsData.dots.splice(difference, Math.abs(difference));
              }
            }

            this.carouselService.navData = this._navData;
            this.carouselService.dotsData = this._dotsData;
          }
        }, {
          key: "update",
          value:
          /**
           * Updates navigation buttons's and dots's states
           */
          function update() {
            this._updateNavButtons();

            this._updateDots();
          }
          /**
           * Changes state of nav buttons (disabled, enabled)
           */

        }, {
          key: "_updateNavButtons",
          value: function _updateNavButtons() {
            var settings = this.carouselService.settings,
                loop = settings.loop || settings.rewind,
                index = this.carouselService.relative(this.carouselService.current());

            if (settings.nav) {
              this._navData.prev.disabled = !loop && index <= this.carouselService.minimum(true);
              this._navData.next.disabled = !loop && index >= this.carouselService.maximum(true);
            }

            this.carouselService.navData = this._navData;
          }
          /**
           * Changes active dot if page becomes changed
           */

        }, {
          key: "_updateDots",
          value: function _updateDots() {
            var curActiveDotI;

            if (!this.carouselService.settings.dots) {
              return;
            }

            this._dotsData.dots.forEach(function (item) {
              if (item.active === true) {
                item.active = false;
              }
            });

            curActiveDotI = this._current();

            if (this._dotsData.dots.length) {
              this._dotsData.dots[curActiveDotI].active = true;
            }

            this.carouselService.dotsData = this._dotsData;
          }
          /**
             * Gets the current page position of the carousel.
             * @returns the current page position of the carousel
             */

        }, {
          key: "_current",
          value: function _current() {
            var current = this.carouselService.relative(this.carouselService.current());
            var finalCurrent;

            var pages = this._pages.filter(function (page, index) {
              return page.start <= current && page.end >= current;
            }).pop();

            finalCurrent = this._pages.findIndex(function (page) {
              return page.start === pages.start && page.end === pages.end;
            });
            return finalCurrent;
          }
        }, {
          key: "_getPosition",
          value:
          /**
             * Gets the current succesor/predecessor position.
           * @param sussessor position of slide
             * @returns the current succesor/predecessor position
             */
          function _getPosition(successor) {
            var position, length;
            var settings = this.carouselService.settings;

            if (settings.slideBy === 'page') {
              position = this._current();
              length = this._pages.length;
              successor ? ++position : --position;
              position = this._pages[(position % length + length) % length].start;
            } else {
              position = this.carouselService.relative(this.carouselService.current());
              length = this.carouselService.items().length;
              successor ? position += +settings.slideBy : position -= +settings.slideBy;
            }

            return position;
          }
        }, {
          key: "next",
          value:
          /**
             * Slides to the next item or page.
             * @param speed The time in milliseconds for the transition.
             */
          function next(speed) {
            this.carouselService.to(this._getPosition(true), speed);
          }
        }, {
          key: "prev",
          value:
          /**
           * Slides to the previous item or page.
           * @param speed The time in milliseconds for the transition.
           */
          function prev(speed) {
            this.carouselService.to(this._getPosition(false), speed);
          }
        }, {
          key: "to",
          value:
          /**
           * Slides to the specified item or page.
           * @param position - The position of the item or page.
           * @param speed - The time in milliseconds for the transition.
           * @param standard - Whether to use the standard behaviour or not. Default meaning false
           */
          function to(position, speed, standard) {
            var length;

            if (!standard && this._pages.length) {
              length = this._pages.length;
              this.carouselService.to(this._pages[(position % length + length) % length].start, speed);
            } else {
              this.carouselService.to(position, speed);
            }
          }
        }, {
          key: "moveByDot",
          value:
          /**
           * Moves carousel after user's clicking on any dots
           */
          function moveByDot(dotId) {
            var index = this._dotsData.dots.findIndex(function (dot) {
              return dotId === dot.id;
            });

            this.to(index, this.carouselService.settings.dotsSpeed);
          }
          /**
           * rewinds carousel to slide with needed id
           * @param id id of slide
           */

        }, {
          key: "toSlideById",
          value: function toSlideById(id) {
            var position = this.carouselService.slidesData.findIndex(function (slide) {
              return slide.id === id && slide.isCloned === false;
            });

            if (position === -1 || position === this.carouselService.current()) {
              return;
            }

            this.carouselService.to(this.carouselService.relative(position), false);
          }
        }]);

        return NavigationService;
      }();

      NavigationService.ɵfac = function NavigationService_Factory(t) {
        return new (t || NavigationService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](CarouselService));
      };

      NavigationService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: NavigationService,
        factory: NavigationService.ɵfac
      });

      NavigationService.ctorParameters = function () {
        return [{
          type: CarouselService
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NavigationService, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: CarouselService
          }];
        }, null);
      })(); // import { Injectable } from '@angular/core';

      /**
       * Create a new injection token for injecting the window into a component.
       */


      var WINDOW = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('WindowToken');
      /**
       * Define abstract class for obtaining reference to the global window object.
       */

      var WindowRef = /*#__PURE__*/function () {
        function WindowRef() {
          _classCallCheck2(this, WindowRef);
        }

        _createClass2(WindowRef, [{
          key: "nativeWindow",
          get: function get() {
            throw new Error('Not implemented.');
          }
        }]);

        return WindowRef;
      }();
      /**
       * Define class that implements the abstract class and returns the native window object.
       */


      var BrowserWindowRef = /*#__PURE__*/function (_WindowRef) {
        _inherits(BrowserWindowRef, _WindowRef);

        var _super57 = _createSuper(BrowserWindowRef);

        function BrowserWindowRef() {
          _classCallCheck2(this, BrowserWindowRef);

          return _super57.call(this);
        }
        /**
         * @returns window object
         */


        _createClass2(BrowserWindowRef, [{
          key: "nativeWindow",
          get: function get() {
            return window;
          }
        }]);

        return BrowserWindowRef;
      }(WindowRef);

      BrowserWindowRef.ɵfac = function BrowserWindowRef_Factory(t) {
        return new (t || BrowserWindowRef)();
      };

      BrowserWindowRef.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: BrowserWindowRef,
        factory: BrowserWindowRef.ɵfac
      });

      BrowserWindowRef.ctorParameters = function () {
        return [];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](BrowserWindowRef, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [];
        }, null);
      })();
      /**
       * Create an factory function that returns the native window object.
       * @param browserWindowRef Native window object
       * @param platformId id of platform
       * @returns type of platform of empty object
       */


      function windowFactory(browserWindowRef, platformId) {
        if ((0, _angular_common__WEBPACK_IMPORTED_MODULE_6__.isPlatformBrowser)(platformId)) {
          return browserWindowRef.nativeWindow;
        }

        var obj = {
          setTimeout: function setTimeout(func, time) {},
          clearTimeout: function clearTimeout(a) {}
        };
        return obj;
      }
      /**
       * Create a injectable provider for the WindowRef token that uses the BrowserWindowRef class.
       */


      var browserWindowProvider = {
        provide: WindowRef,
        useClass: BrowserWindowRef
      };
      /**
       * Create an injectable provider that uses the windowFactory function for returning the native window object.
       */

      var windowProvider = {
        provide: WINDOW,
        useFactory: windowFactory,
        deps: [WindowRef, _angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
      };
      /**
       * Create an array of providers.
       */

      var WINDOW_PROVIDERS = [browserWindowProvider, windowProvider];
      /**
       * Create a new injection token for injecting the Document into a component.
       */

      var DOCUMENT = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('DocumentToken');
      /**
       * Define abstract class for obtaining reference to the global Document object.
       */

      var DocumentRef = /*#__PURE__*/function () {
        function DocumentRef() {
          _classCallCheck2(this, DocumentRef);
        }

        _createClass2(DocumentRef, [{
          key: "nativeDocument",
          get: function get() {
            throw new Error('Not implemented.');
          }
        }]);

        return DocumentRef;
      }();
      /**
       * Define class that implements the abstract class and returns the native Document object.
       */


      var BrowserDocumentRef = /*#__PURE__*/function (_DocumentRef) {
        _inherits(BrowserDocumentRef, _DocumentRef);

        var _super58 = _createSuper(BrowserDocumentRef);

        function BrowserDocumentRef() {
          _classCallCheck2(this, BrowserDocumentRef);

          return _super58.call(this);
        }
        /**
         * @returns Document object
         */


        _createClass2(BrowserDocumentRef, [{
          key: "nativeDocument",
          get: function get() {
            return document;
          }
        }]);

        return BrowserDocumentRef;
      }(DocumentRef);

      BrowserDocumentRef.ɵfac = function BrowserDocumentRef_Factory(t) {
        return new (t || BrowserDocumentRef)();
      };

      BrowserDocumentRef.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: BrowserDocumentRef,
        factory: BrowserDocumentRef.ɵfac
      });

      BrowserDocumentRef.ctorParameters = function () {
        return [];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](BrowserDocumentRef, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [];
        }, null);
      })();
      /**
       * Create an factory function that returns the native Document object.
       * @param browserDocumentRef Native Document object
       * @param platformId id of platform
       * @returns type of platform of empty object
       */


      function documentFactory(browserDocumentRef, platformId) {
        if ((0, _angular_common__WEBPACK_IMPORTED_MODULE_6__.isPlatformBrowser)(platformId)) {
          return browserDocumentRef.nativeDocument;
        }

        var doc = {
          hidden: false,
          visibilityState: 'visible'
        };
        return doc;
      }
      /**
       * Create a injectable provider for the DocumentRef token that uses the BrowserDocumentRef class.
       */


      var browserDocumentProvider = {
        provide: DocumentRef,
        useClass: BrowserDocumentRef
      };
      /**
       * Create an injectable provider that uses the DocumentFactory function for returning the native Document object.
       */

      var documentProvider = {
        provide: DOCUMENT,
        useFactory: documentFactory,
        deps: [DocumentRef, _angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
      };
      /**
       * Create an array of providers.
       */

      var DOCUMENT_PROVIDERS = [browserDocumentProvider, documentProvider];

      var AutoplayService = /*#__PURE__*/function () {
        function AutoplayService(carouselService, winRef, docRef) {
          _classCallCheck2(this, AutoplayService);

          this.carouselService = carouselService;
          /**
           * The autoplay timeout.
           */

          this._timeout = null;
          /**
           * Indicates whenever the autoplay is paused.
           */

          this._paused = false;
          this.winRef = winRef;
          this.docRef = docRef;
          this.spyDataStreams();
        }

        _createClass2(AutoplayService, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.autoplaySubscription.unsubscribe();
          }
          /**
           * Defines Observables which service must observe
           */

        }, {
          key: "spyDataStreams",
          value: function spyDataStreams() {
            var _this190 = this;

            var initializedCarousel$ = this.carouselService.getInitializedState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function () {
              if (_this190.carouselService.settings.autoplay) {
                _this190.play();
              }
            }));
            var changedSettings$ = this.carouselService.getChangedState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function (data) {
              _this190._handleChangeObservable(data);
            }));
            var resized$ = this.carouselService.getResizedState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function () {
              if (_this190.carouselService.settings.autoplay) {
                _this190.play();
              } else {
                _this190.stop();
              }
            })); // original Autoplay Plugin has listeners on play.owl.core and stop.owl.core events.
            // They are triggered by Video Plugin

            var autoplayMerge$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.merge)(initializedCarousel$, changedSettings$, resized$);
            this.autoplaySubscription = autoplayMerge$.subscribe(function () {});
          }
          /**
             * Starts the autoplay.
             * @param timeout The interval before the next animation starts.
             * @param speed The animation speed for the animations.
             */

        }, {
          key: "play",
          value: function play(timeout, speed) {
            if (this._paused) {
              this._paused = false;

              this._setAutoPlayInterval(this.carouselService.settings.autoplayMouseleaveTimeout);
            }

            if (this.carouselService.is('rotating')) {
              return;
            }

            this.carouselService.enter('rotating');

            this._setAutoPlayInterval();
          }
        }, {
          key: "_getNextTimeout",
          value:
          /**
             * Gets a new timeout
             * @param timeout - The interval before the next animation starts.
             * @param speed - The animation speed for the animations.
             * @return
             */
          function _getNextTimeout(timeout, speed) {
            var _this191 = this;

            if (this._timeout) {
              this.winRef.clearTimeout(this._timeout);
            }

            this._isArtificialAutoplayTimeout = timeout ? true : false;
            return this.winRef.setTimeout(function () {
              if (_this191._paused || _this191.carouselService.is('busy') || _this191.carouselService.is('interacting') || _this191.docRef.hidden) {
                return;
              }

              _this191.carouselService.next(speed || _this191.carouselService.settings.autoplaySpeed);
            }, timeout || this.carouselService.settings.autoplayTimeout);
          }
        }, {
          key: "_setAutoPlayInterval",
          value:
          /**
             * Sets autoplay in motion.
             */
          function _setAutoPlayInterval(timeout) {
            this._timeout = this._getNextTimeout(timeout);
          }
        }, {
          key: "stop",
          value:
          /**
           * Stops the autoplay.
           */
          function stop() {
            if (!this.carouselService.is('rotating')) {
              return;
            }

            this._paused = true;
            this.winRef.clearTimeout(this._timeout);
            this.carouselService.leave('rotating');
          }
        }, {
          key: "pause",
          value:
          /**
             * Stops the autoplay.
             */
          function pause() {
            if (!this.carouselService.is('rotating')) {
              return;
            }

            this._paused = true;
          }
        }, {
          key: "_handleChangeObservable",
          value:
          /**
           * Manages by autoplaying according to data passed by _changedSettingsCarousel$ Obsarvable
           * @param data object with current position of carousel and type of change
           */
          function _handleChangeObservable(data) {
            if (data.property.name === 'settings') {
              if (this.carouselService.settings.autoplay) {
                this.play();
              } else {
                this.stop();
              }
            } else if (data.property.name === 'position') {
              //console.log('play?', e);
              if (this.carouselService.settings.autoplay) {
                this._setAutoPlayInterval();
              }
            }
          }
          /**
           * Starts autoplaying of the carousel in the case when user leaves the carousel before it starts translateing (moving)
           */

        }, {
          key: "_playAfterTranslated",
          value: function _playAfterTranslated() {
            var _this192 = this;

            (0, rxjs__WEBPACK_IMPORTED_MODULE_7__.of)('translated').pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.switchMap)(function (data) {
              return _this192.carouselService.getTranslatedState();
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.first)(), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.filter)(function () {
              return _this192._isArtificialAutoplayTimeout;
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function () {
              return _this192._setAutoPlayInterval();
            })).subscribe(function () {});
          }
          /**
           * Starts pausing
           */

        }, {
          key: "startPausing",
          value: function startPausing() {
            if (this.carouselService.settings.autoplayHoverPause && this.carouselService.is('rotating')) {
              this.pause();
            }
          }
          /**
           * Starts playing after mouse leaves carousel
           */

        }, {
          key: "startPlayingMouseLeave",
          value: function startPlayingMouseLeave() {
            if (this.carouselService.settings.autoplayHoverPause && this.carouselService.is('rotating')) {
              this.play();

              this._playAfterTranslated();
            }
          }
          /**
           * Starts playing after touch ends
           */

        }, {
          key: "startPlayingTouchEnd",
          value: function startPlayingTouchEnd() {
            if (this.carouselService.settings.autoplayHoverPause && this.carouselService.is('rotating')) {
              this.play();

              this._playAfterTranslated();
            }
          }
        }]);

        return AutoplayService;
      }();

      AutoplayService.ɵfac = function AutoplayService_Factory(t) {
        return new (t || AutoplayService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](CarouselService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](WINDOW), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](DOCUMENT));
      };

      AutoplayService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: AutoplayService,
        factory: AutoplayService.ɵfac
      });

      AutoplayService.ctorParameters = function () {
        return [{
          type: CarouselService
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [WINDOW]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [DOCUMENT]
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](AutoplayService, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: CarouselService
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [WINDOW]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [DOCUMENT]
            }]
          }];
        }, null);
      })();

      var LazyLoadService = /*#__PURE__*/function () {
        function LazyLoadService(carouselService) {
          _classCallCheck2(this, LazyLoadService);

          this.carouselService = carouselService;
          this.spyDataStreams();
        }

        _createClass2(LazyLoadService, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.lazyLoadSubscription.unsubscribe();
          }
          /**
           * Defines Observables which service must observe
           */

        }, {
          key: "spyDataStreams",
          value: function spyDataStreams() {
            var _this193 = this;

            var initializedCarousel$ = this.carouselService.getInitializedState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function () {
              var isLazyLoad = _this193.carouselService.settings && !_this193.carouselService.settings.lazyLoad;

              _this193.carouselService.slidesData.forEach(function (item) {
                return item.load = isLazyLoad ? true : false;
              });
            }));
            var changeSettings$ = this.carouselService.getChangeState();
            var resizedCarousel$ = this.carouselService.getResizedState();
            var lazyLoadMerge$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.merge)(initializedCarousel$, changeSettings$, resizedCarousel$).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function (data) {
              return _this193._defineLazyLoadSlides(data);
            }));
            this.lazyLoadSubscription = lazyLoadMerge$.subscribe(function () {});
          }
        }, {
          key: "_defineLazyLoadSlides",
          value: function _defineLazyLoadSlides(data) {
            var _this194 = this;

            if (!this.carouselService.settings || !this.carouselService.settings.lazyLoad) {
              return;
            }

            if (data.property && data.property.name === 'position' || data === 'initialized' || data === "resized") {
              var settings = this.carouselService.settings,
                  clones = this.carouselService.clones().length;
              var n = settings.center && Math.ceil(settings.items / 2) || settings.items,
                  i = settings.center && n * -1 || 0,
                  position = (data.property && data.property.value !== undefined ? data.property.value : this.carouselService.current()) + i; // load = $.proxy(function(i, v) { this.load(v) }, this);
              //TODO: Need documentation for this new option

              if (settings.lazyLoadEager > 0) {
                n += settings.lazyLoadEager; // If the carousel is looping also preload images that are to the "left"

                if (settings.loop) {
                  position -= settings.lazyLoadEager;
                  n++;
                }
              }

              while (i++ < n) {
                this._load(clones / 2 + this.carouselService.relative(position));

                if (clones) {
                  this.carouselService.clones(this.carouselService.relative(position)).forEach(function (value) {
                    return _this194._load(value);
                  });
                }

                position++;
              }
            }
          }
          /**
             * Loads all resources of an item at the specified position.
             * @param position - The absolute position of the item.
             */

        }, {
          key: "_load",
          value: function _load(position) {
            if (this.carouselService.slidesData[position].load) {
              return;
            }

            this.carouselService.slidesData[position].load = true;
          }
        }]);

        return LazyLoadService;
      }();

      LazyLoadService.ɵfac = function LazyLoadService_Factory(t) {
        return new (t || LazyLoadService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](CarouselService));
      };

      LazyLoadService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: LazyLoadService,
        factory: LazyLoadService.ɵfac
      });

      LazyLoadService.ctorParameters = function () {
        return [{
          type: CarouselService
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](LazyLoadService, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: CarouselService
          }];
        }, null);
      })();

      var AnimateService = /*#__PURE__*/function () {
        function AnimateService(carouselService) {
          _classCallCheck2(this, AnimateService);

          this.carouselService = carouselService;
          /**
           * s
           */

          this.swapping = true;
          /**
           * active slide before translating
           */

          this.previous = undefined;
          /**
           * new active slide after translating
           */

          this.next = undefined;
          this.spyDataStreams();
        }

        _createClass2(AnimateService, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.animateSubscription.unsubscribe();
          }
          /**
           * Defines Observables which service must observe
           */

        }, {
          key: "spyDataStreams",
          value: function spyDataStreams() {
            var _this195 = this;

            var changeSettings$ = this.carouselService.getChangeState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function (data) {
              if (data.property.name === 'position') {
                _this195.previous = _this195.carouselService.current();
                _this195.next = data.property.value;
              }
            }));
            var dragCarousel$ = this.carouselService.getDragState();
            var draggedCarousel$ = this.carouselService.getDraggedState();
            var translatedCarousel$ = this.carouselService.getTranslatedState();
            var dragTranslatedMerge$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.merge)(dragCarousel$, draggedCarousel$, translatedCarousel$).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function (data) {
              return _this195.swapping = data === 'translated';
            }));
            var translateCarousel$ = this.carouselService.getTranslateState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function (data) {
              if (_this195.swapping && (_this195.carouselService._options.animateOut || _this195.carouselService._options.animateIn)) {
                _this195._swap();
              }
            }));
            var animateMerge$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.merge)(changeSettings$, translateCarousel$, dragTranslatedMerge$).pipe();
            this.animateSubscription = animateMerge$.subscribe(function () {});
          }
          /**
             * Toggles the animation classes whenever an translations starts.
             * @returns
             */

        }, {
          key: "_swap",
          value: function _swap() {
            if (this.carouselService.settings.items !== 1) {
              return;
            } // if (!$.support.animation || !$.support.transition) {
            // 	return;
            // }


            this.carouselService.speed(0);
            var left;
            var previous = this.carouselService.slidesData[this.previous],
                next = this.carouselService.slidesData[this.next],
                incoming = this.carouselService.settings.animateIn,
                outgoing = this.carouselService.settings.animateOut;

            if (this.carouselService.current() === this.previous) {
              return;
            }

            if (outgoing) {
              left = +this.carouselService.coordinates(this.previous) - +this.carouselService.coordinates(this.next);
              this.carouselService.slidesData.forEach(function (slide) {
                if (slide.id === previous.id) {
                  slide.left = "".concat(left, "px");
                  slide.isAnimated = true;
                  slide.isDefAnimatedOut = true;
                  slide.isCustomAnimatedOut = true;
                }
              });
            }

            if (incoming) {
              this.carouselService.slidesData.forEach(function (slide) {
                if (slide.id === next.id) {
                  slide.isAnimated = true;
                  slide.isDefAnimatedIn = true;
                  slide.isCustomAnimatedIn = true;
                }
              });
            }
          }
        }, {
          key: "clear",
          value:
          /**
           * Handles the end of 'animationend' event
           * @param id Id of slides
           */
          function clear(id) {
            var _this196 = this;

            this.carouselService.slidesData.forEach(function (slide) {
              if (slide.id === id) {
                slide.left = '';
                slide.isAnimated = false;
                slide.isDefAnimatedOut = false;
                slide.isCustomAnimatedOut = false;
                slide.isDefAnimatedIn = false;
                slide.isCustomAnimatedIn = false;
                slide.classes = _this196.carouselService.setCurSlideClasses(slide);
              }
            });
            this.carouselService.onTransitionEnd();
          }
        }]);

        return AnimateService;
      }();

      AnimateService.ɵfac = function AnimateService_Factory(t) {
        return new (t || AnimateService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](CarouselService));
      };

      AnimateService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: AnimateService,
        factory: AnimateService.ɵfac
      });

      AnimateService.ctorParameters = function () {
        return [{
          type: CarouselService
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](AnimateService, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: CarouselService
          }];
        }, null);
      })();

      var AutoHeightService = /*#__PURE__*/function () {
        function AutoHeightService(carouselService) {
          _classCallCheck2(this, AutoHeightService);

          this.carouselService = carouselService;
          this.spyDataStreams();
        }

        _createClass2(AutoHeightService, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.autoHeightSubscription.unsubscribe();
          }
          /**
           * Defines Observables which service must observe
           */

        }, {
          key: "spyDataStreams",
          value: function spyDataStreams() {
            var _this197 = this;

            var initializedCarousel$ = this.carouselService.getInitializedState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function (data) {
              if (_this197.carouselService.settings.autoHeight) {
                _this197.update();
              } else {
                _this197.carouselService.slidesData.forEach(function (slide) {
                  return slide.heightState = 'full';
                });
              }
            }));
            var changedSettings$ = this.carouselService.getChangedState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function (data) {
              if (_this197.carouselService.settings.autoHeight && data.property.name === 'position') {
                _this197.update();
              }
            }));
            var refreshedCarousel$ = this.carouselService.getRefreshedState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function (data) {
              if (_this197.carouselService.settings.autoHeight) {
                _this197.update();
              }
            }));
            var autoHeight$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.merge)(initializedCarousel$, changedSettings$, refreshedCarousel$);
            this.autoHeightSubscription = autoHeight$.subscribe(function () {});
          }
          /**
           * Updates the prop 'heightState' of slides
           */

        }, {
          key: "update",
          value: function update() {
            var items = this.carouselService.settings.items;
            var start = this.carouselService.current(),
                end = start + items;

            if (this.carouselService.settings.center) {
              start = items % 2 === 1 ? start - (items - 1) / 2 : start - items / 2;
              end = items % 2 === 1 ? start + items : start + items + 1;
            }

            this.carouselService.slidesData.forEach(function (slide, i) {
              slide.heightState = i >= start && i < end ? 'full' : 'nulled';
            });
          }
        }]);

        return AutoHeightService;
      }();

      AutoHeightService.ɵfac = function AutoHeightService_Factory(t) {
        return new (t || AutoHeightService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](CarouselService));
      };

      AutoHeightService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: AutoHeightService,
        factory: AutoHeightService.ɵfac
      });

      AutoHeightService.ctorParameters = function () {
        return [{
          type: CarouselService
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](AutoHeightService, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: CarouselService
          }];
        }, null);
      })();

      var HashService = /*#__PURE__*/function () {
        function HashService(carouselService, route, router) {
          _classCallCheck2(this, HashService);

          this.carouselService = carouselService;
          this.route = route;
          this.router = router;
          this.spyDataStreams();

          if (!this.route) {
            this.route = {
              fragment: (0, rxjs__WEBPACK_IMPORTED_MODULE_7__.of)('no route').pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.take)(1))
            };
          }

          ;

          if (!this.router) {
            this.router = {
              navigate: function navigate(commands, extras) {
                return;
              }
            };
          }
        }

        _createClass2(HashService, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.hashSubscription.unsubscribe();
          }
          /**
           * Defines Observables which service must observe
           */

        }, {
          key: "spyDataStreams",
          value: function spyDataStreams() {
            var _this198 = this;

            var initializedCarousel$ = this.carouselService.getInitializedState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function () {
              return _this198.listenToRoute();
            }));
            var changedSettings$ = this.carouselService.getChangedState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function (data) {
              if (_this198.carouselService.settings.URLhashListener && data.property.name === 'position') {
                var newCurSlide = _this198.carouselService.current();

                var newCurFragment = _this198.carouselService.slidesData[newCurSlide].hashFragment;

                if (!newCurFragment || newCurFragment === _this198.currentHashFragment) {
                  return;
                }

                _this198.router.navigate(['./'], {
                  fragment: newCurFragment,
                  relativeTo: _this198.route
                });
              }
            }));
            var hashFragment$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.merge)(initializedCarousel$, changedSettings$);
            this.hashSubscription = hashFragment$.subscribe(function () {});
          }
          /**
           * rewinds carousel to slide which has the same hashFragment as fragment of current url
           * @param fragment fragment of url
           */

        }, {
          key: "rewind",
          value: function rewind(fragment) {
            var position = this.carouselService.slidesData.findIndex(function (slide) {
              return slide.hashFragment === fragment && slide.isCloned === false;
            });

            if (position === -1 || position === this.carouselService.current()) {
              return;
            }

            this.carouselService.to(this.carouselService.relative(position), false);
          }
          /**
           * Initiate listening to ActivatedRoute.fragment
           */

        }, {
          key: "listenToRoute",
          value: function listenToRoute() {
            var _this199 = this;

            var count = this.carouselService.settings.startPosition === 'URLHash' ? 0 : 2;
            this.route.fragment.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.skip)(count)).subscribe(function (fragment) {
              _this199.currentHashFragment = fragment;

              _this199.rewind(fragment);
            });
          }
        }]);

        return HashService;
      }();

      HashService.ɵfac = function HashService_Factory(t) {
        return new (t || HashService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](CarouselService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_router__WEBPACK_IMPORTED_MODULE_12__.ActivatedRoute, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_router__WEBPACK_IMPORTED_MODULE_12__.Router, 8));
      };

      HashService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: HashService,
        factory: HashService.ɵfac
      });

      HashService.ctorParameters = function () {
        return [{
          type: CarouselService
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_12__.ActivatedRoute,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_12__.Router,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
          }]
        }];
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HashService, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
        }], function () {
          return [{
            type: CarouselService
          }, {
            type: _angular_router__WEBPACK_IMPORTED_MODULE_12__.ActivatedRoute,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }]
          }, {
            type: _angular_router__WEBPACK_IMPORTED_MODULE_12__.Router,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }]
          }];
        }, null);
      })();

      var nextId = 0;

      var _CarouselSlideDirective = /*#__PURE__*/function () {
        function _CarouselSlideDirective(tplRef) {
          _classCallCheck2(this, _CarouselSlideDirective);

          this.tplRef = tplRef;
          /**
           * Unique slide identifier. Must be unique for the entire document for proper accessibility support.
           * Will be auto-generated if not provided.
           */

          this.id = "owl-slide-".concat(nextId++);
          /**
           * Defines how much widths of common slide will current slide have
           * e.g. if _mergeData=2, the slide will twice wider then slides with _mergeData=1
           */

          this._dataMerge = 1;
          /**
           * Width of slide
           */

          this.width = 0;
          /**
           * Inner content of dot for certain slide; can be html-markup
           */

          this.dotContent = '';
          /**
           * Hash (fragment) of url which corresponds to certain slide
           */

          this.dataHash = '';
        }

        _createClass2(_CarouselSlideDirective, [{
          key: "dataMerge",
          get: function get() {
            return this._dataMerge;
          }
          /**
             * Determines if the input is a Number or something that can be coerced to a Number
             * @param - The input to be tested
             * @returns - An indication if the input is a Number or can be coerced to a Number
             */
          ,
          set: function set(data) {
            this._dataMerge = this.isNumeric(data) ? data : 1;
          }
        }, {
          key: "isNumeric",
          value: function isNumeric(number) {
            return !isNaN(parseFloat(number));
          }
        }]);

        return _CarouselSlideDirective;
      }();

      _CarouselSlideDirective.ɵfac = function CarouselSlideDirective_Factory(t) {
        return new (t || _CarouselSlideDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef));
      };

      _CarouselSlideDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _CarouselSlideDirective,
        selectors: [["ng-template", "carouselSlide", ""]],
        inputs: {
          id: "id",
          width: "width",
          dotContent: "dotContent",
          dataHash: "dataHash",
          dataMerge: "dataMerge"
        }
      });

      _CarouselSlideDirective.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
        }];
      };

      _CarouselSlideDirective.propDecorators = {
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        dataMerge: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        width: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        dotContent: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        dataHash: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_CarouselSlideDirective, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: 'ng-template[carouselSlide]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
          }];
        }, {
          id: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          width: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          dotContent: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          dataHash: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          dataMerge: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();
      /**
       * Data which will be passed out after ending of transition of carousel
       */


      var _SlidesOutputData = function _SlidesOutputData() {
        _classCallCheck2(this, _SlidesOutputData);
      };

      ;

      var _CarouselComponent = /*#__PURE__*/function () {
        function _CarouselComponent(el, resizeService, carouselService, navigationService, autoplayService, lazyLoadService, animateService, autoHeightService, hashService, logger, changeDetectorRef, docRef) {
          _classCallCheck2(this, _CarouselComponent);

          this.el = el;
          this.resizeService = resizeService;
          this.carouselService = carouselService;
          this.navigationService = navigationService;
          this.autoplayService = autoplayService;
          this.lazyLoadService = lazyLoadService;
          this.animateService = animateService;
          this.autoHeightService = autoHeightService;
          this.hashService = hashService;
          this.logger = logger;
          this.changeDetectorRef = changeDetectorRef;
          this.translated = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
          this.dragging = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
          this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
          this.changed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
          this.initialized = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
          /**
             *  Data of every slide
             */

          this.slidesData = [];
          /**
           * Shows whether carousel is loaded of not.
           */

          this.carouselLoaded = false;
          this.docRef = docRef;
        }

        _createClass2(_CarouselComponent, [{
          key: "onVisibilityChange",
          value: function onVisibilityChange(ev) {
            if (!this.carouselService.settings.autoplay) return;

            switch (this.docRef.visibilityState) {
              case 'visible':
                this.autoplayService.play();
                break;

              case 'hidden':
                this.autoplayService.stop();
                break;

              default:
                break;
            }
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this.spyDataStreams();
            this.carouselWindowWidth = this.el.nativeElement.querySelector('.owl-carousel').clientWidth;
          }
        }, {
          key: "ngAfterContentChecked",
          value: function ngAfterContentChecked() {} // ngAfterContentChecked() END

        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            var _this200 = this;

            if (this.slides.toArray().length) {
              this.carouselService.setup(this.carouselWindowWidth, this.slides.toArray(), this.options);
              this.carouselService.initialize(this.slides.toArray());

              this._winResizeWatcher();
            } else {
              this.logger.log("There are no slides to show. So the carousel won't be rendered");
            }

            this._slidesChangesSubscription = this.slides.changes.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function (slides) {
              if (slides.toArray().length) {
                // this.carouselService.setItems(slides.toArray());
                _this200.carouselService.setup(_this200.carouselWindowWidth, slides.toArray(), _this200.options);

                _this200.carouselService.initialize(slides.toArray());
              } else {
                _this200.carouselLoaded = false;

                _this200.logger.log("There are no slides to show. So the carousel won't be re-rendered");
              }
            })).subscribe(function () {});
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this.resizeSubscription) {
              this.resizeSubscription.unsubscribe();
            }

            if (this._slidesChangesSubscription) {
              this._slidesChangesSubscription.unsubscribe();
            }

            if (this._allObservSubscription) {
              this._allObservSubscription.unsubscribe();
            }
          }
          /**
           * Joins the observable login in one place: sets values to some observables, merges this observables and
           * subcribes to merge func
           */

        }, {
          key: "spyDataStreams",
          value: function spyDataStreams() {
            var _this201 = this;

            this._viewCurSettings$ = this.carouselService.getViewCurSettings().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function (data) {
              _this201.owlDOMData = data.owlDOMData;
              _this201.stageData = data.stageData;
              _this201.slidesData = data.slidesData;

              if (!_this201.carouselLoaded) {
                _this201.carouselLoaded = true;
              }

              _this201.navData = data.navData;
              _this201.dotsData = data.dotsData;

              _this201.changeDetectorRef.markForCheck();
            }));
            this._initializedCarousel$ = this.carouselService.getInitializedState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function () {
              _this201.gatherTranslatedData();

              _this201.initialized.emit(_this201.slidesOutputData); // this.slidesOutputData = {};

            }));
            this._translatedCarousel$ = this.carouselService.getTranslatedState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function () {
              _this201.gatherTranslatedData();

              _this201.translated.emit(_this201.slidesOutputData); // this.slidesOutputData = {};

            }));
            this._changeCarousel$ = this.carouselService.getChangeState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function () {
              _this201.gatherTranslatedData();

              _this201.change.emit(_this201.slidesOutputData); // this.slidesOutputData = {};

            }));
            this._changedCarousel$ = this.carouselService.getChangeState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.switchMap)(function (value) {
              var changedPosition = (0, rxjs__WEBPACK_IMPORTED_MODULE_7__.of)(value).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.filter)(function () {
                return value.property.name === 'position';
              }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.switchMap)(function () {
                return (0, rxjs__WEBPACK_IMPORTED_MODULE_13__.from)(_this201.slidesData);
              }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.skip)(value.property.value), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.take)(_this201.carouselService.settings.items), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_14__.map)(function (slide) {
                var clonedIdPrefix = _this201.carouselService.clonedIdPrefix;
                var id = slide.id.indexOf(clonedIdPrefix) >= 0 ? slide.id.slice(clonedIdPrefix.length) : slide.id;
                return Object.assign(Object.assign({}, slide), {
                  id: id,
                  isActive: true
                });
              }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.toArray)(), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_14__.map)(function (slides) {
                return {
                  slides: slides,
                  startPosition: _this201.carouselService.relative(value.property.value)
                };
              })); // const changedSetting: Observable<SlidesOutputData> = of(value).pipe(
              //   filter(() => value.property.name === 'settings'),
              //   map(() => {
              //     return {
              //       slides: [],
              //       startPosition: this.carouselService.relative(value.property.value)
              //     }
              //   })
              // )

              return (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.merge)(changedPosition);
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function (slidesData) {
              _this201.gatherTranslatedData();

              _this201.changed.emit(slidesData.slides.length ? slidesData : _this201.slidesOutputData); // console.log(this.slidesOutputData);
              // this.slidesOutputData = {};

            }));
            this._draggingCarousel$ = this.carouselService.getDragState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function () {
              _this201.gatherTranslatedData();

              _this201.dragging.emit({
                dragging: true,
                data: _this201.slidesOutputData
              });
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.switchMap)(function () {
              return _this201.carouselService.getDraggedState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_14__.map)(function () {
                return !!_this201.carouselService.is('animating');
              }));
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.switchMap)(function (anim) {
              if (anim) {
                return _this201.carouselService.getTranslatedState().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.first)());
              } else {
                return (0, rxjs__WEBPACK_IMPORTED_MODULE_7__.of)('not animating');
              }
            }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function () {
              _this201.dragging.emit({
                dragging: false,
                data: _this201.slidesOutputData
              });
            }));
            this._carouselMerge$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.merge)(this._viewCurSettings$, this._translatedCarousel$, this._draggingCarousel$, this._changeCarousel$, this._changedCarousel$, this._initializedCarousel$);
            this._allObservSubscription = this._carouselMerge$.subscribe(function () {});
          }
          /**
           * Init subscription to resize event and attaches handler for this event
           */

        }, {
          key: "_winResizeWatcher",
          value: function _winResizeWatcher() {
            var _this202 = this;

            if (Object.keys(this.carouselService._options.responsive).length) {
              this.resizeSubscription = this.resizeService.onResize$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.filter)(function () {
                return _this202.carouselWindowWidth !== _this202.el.nativeElement.querySelector('.owl-carousel').clientWidth;
              }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_16__.delay)(this.carouselService.settings.responsiveRefreshRate)).subscribe(function () {
                _this202.carouselService.onResize(_this202.el.nativeElement.querySelector('.owl-carousel').clientWidth);

                _this202.carouselWindowWidth = _this202.el.nativeElement.querySelector('.owl-carousel').clientWidth;
              });
            }
          }
          /**
           * Handler for transitioend event
           */

        }, {
          key: "onTransitionEnd",
          value: function onTransitionEnd() {
            this.carouselService.onTransitionEnd();
          }
          /**
           * Handler for click event, attached to next button
           */

        }, {
          key: "next",
          value: function next() {
            if (!this.carouselLoaded) return;
            this.navigationService.next(this.carouselService.settings.navSpeed);
          }
          /**
           * Handler for click event, attached to prev button
           */

        }, {
          key: "prev",
          value: function prev() {
            if (!this.carouselLoaded) return;
            this.navigationService.prev(this.carouselService.settings.navSpeed);
          }
          /**
           * Handler for click event, attached to dots
           */

        }, {
          key: "moveByDot",
          value: function moveByDot(dotId) {
            if (!this.carouselLoaded) return;
            this.navigationService.moveByDot(dotId);
          }
          /**
           * rewinds carousel to slide with needed id
           * @param id fragment of url
           */

        }, {
          key: "to",
          value: function to(id) {
            // if (!this.carouselLoaded || ((this.navData && this.navData.disabled) && (this.dotsData && this.dotsData.disabled))) return;
            if (!this.carouselLoaded) return;
            this.navigationService.toSlideById(id);
          }
          /**
           * Gathers and prepares data intended for passing to the user by means of firing event translatedCarousel
           */

        }, {
          key: "gatherTranslatedData",
          value: function gatherTranslatedData() {
            var startPosition;
            var clonedIdPrefix = this.carouselService.clonedIdPrefix;
            var activeSlides = this.slidesData.filter(function (slide) {
              return slide.isActive === true;
            }).map(function (slide) {
              var id = slide.id.indexOf(clonedIdPrefix) >= 0 ? slide.id.slice(clonedIdPrefix.length) : slide.id;
              return {
                id: id,
                width: slide.width,
                marginL: slide.marginL,
                marginR: slide.marginR,
                center: slide.isCentered
              };
            });
            startPosition = this.carouselService.relative(this.carouselService.current());
            this.slidesOutputData = {
              startPosition: startPosition,
              slides: activeSlides
            };
          }
          /**
           * Starts pausing
           */

        }, {
          key: "startPausing",
          value: function startPausing() {
            this.autoplayService.startPausing();
          }
          /**
           * Starts playing after mouse leaves carousel
           */

        }, {
          key: "startPlayML",
          value: function startPlayML() {
            this.autoplayService.startPlayingMouseLeave();
          }
          /**
           * Starts playing after touch ends
           */

        }, {
          key: "startPlayTE",
          value: function startPlayTE() {
            this.autoplayService.startPlayingTouchEnd();
          }
        }]);

        return _CarouselComponent;
      }();

      _CarouselComponent.ɵfac = function CarouselComponent_Factory(t) {
        return new (t || _CarouselComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ResizeService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](CarouselService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NavigationService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](AutoplayService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](LazyLoadService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](AnimateService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](AutoHeightService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](HashService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](OwlLogger), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](DOCUMENT));
      };

      _CarouselComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: _CarouselComponent,
        selectors: [["owl-carousel-o"]],
        contentQueries: function CarouselComponent_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, _CarouselSlideDirective, 4);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.slides = _t);
          }
        },
        hostBindings: function CarouselComponent_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("visibilitychange", function CarouselComponent_visibilitychange_HostBindingHandler($event) {
              return ctx.onVisibilityChange($event);
            }, false, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresolveDocument"]);
          }
        },
        inputs: {
          options: "options"
        },
        outputs: {
          translated: "translated",
          dragging: "dragging",
          change: "change",
          changed: "changed",
          initialized: "initialized"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([NavigationService, AutoplayService, CarouselService, LazyLoadService, AnimateService, AutoHeightService, HashService])],
        decls: 4,
        vars: 9,
        consts: [[1, "owl-carousel", "owl-theme", 3, "ngClass", "mouseover", "mouseleave", "touchstart", "touchend"], ["owlCarousel", ""], ["class", "owl-stage-outer", 4, "ngIf"], [4, "ngIf"], [1, "owl-stage-outer"], [3, "owlDraggable", "stageData", "slidesData"], [1, "owl-nav", 3, "ngClass"], [1, "owl-prev", 3, "ngClass", "innerHTML", "click"], [1, "owl-next", 3, "ngClass", "innerHTML", "click"], [1, "owl-dots", 3, "ngClass"], ["class", "owl-dot", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "owl-dot", 3, "ngClass", "click"], [3, "innerHTML"]],
        template: function CarouselComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0, 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("mouseover", function CarouselComponent_Template_div_mouseover_0_listener() {
              return ctx.startPausing();
            })("mouseleave", function CarouselComponent_Template_div_mouseleave_0_listener() {
              return ctx.startPlayML();
            })("touchstart", function CarouselComponent_Template_div_touchstart_0_listener() {
              return ctx.startPausing();
            })("touchend", function CarouselComponent_Template_div_touchend_0_listener() {
              return ctx.startPlayTE();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, CarouselComponent_div_2_Template, 2, 6, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, CarouselComponent_ng_container_3_Template, 6, 15, "ng-container", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction5"](3, _c3, ctx.owlDOMData == null ? null : ctx.owlDOMData.rtl, ctx.owlDOMData == null ? null : ctx.owlDOMData.isLoaded, ctx.owlDOMData == null ? null : ctx.owlDOMData.isResponsive, ctx.owlDOMData == null ? null : ctx.owlDOMData.isMouseDragable, ctx.owlDOMData == null ? null : ctx.owlDOMData.isGrab));

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.carouselLoaded);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.slides.toArray().length);
          }
        },
        directives: function directives() {
          return [_angular_common__WEBPACK_IMPORTED_MODULE_6__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_6__.NgIf, StageComponent, _angular_common__WEBPACK_IMPORTED_MODULE_6__.NgForOf];
        },
        styles: [".owl-theme[_ngcontent-%COMP%] { display: block; }"]
      });

      _CarouselComponent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
        }, {
          type: ResizeService
        }, {
          type: CarouselService
        }, {
          type: NavigationService
        }, {
          type: AutoplayService
        }, {
          type: LazyLoadService
        }, {
          type: AnimateService
        }, {
          type: AutoHeightService
        }, {
          type: HashService
        }, {
          type: OwlLogger
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
            args: [DOCUMENT]
          }]
        }];
      };

      _CarouselComponent.propDecorators = {
        slides: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ContentChildren,
          args: [_CarouselSlideDirective]
        }],
        translated: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
        }],
        dragging: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
        }],
        change: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
        }],
        changed: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
        }],
        initialized: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
        }],
        options: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        onVisibilityChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
          args: ['document:visibilitychange', ['$event']]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_CarouselComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
          args: [{
            selector: 'owl-carousel-o',
            template: "\n    <div class=\"owl-carousel owl-theme\" #owlCarousel\n      [ngClass]=\"{'owl-rtl': owlDOMData?.rtl,\n                  'owl-loaded': owlDOMData?.isLoaded,\n                  'owl-responsive': owlDOMData?.isResponsive,\n                  'owl-drag': owlDOMData?.isMouseDragable,\n                  'owl-grab': owlDOMData?.isGrab}\"\n      (mouseover)=\"startPausing()\"\n      (mouseleave)=\"startPlayML()\"\n      (touchstart)=\"startPausing()\"\n      (touchend)=\"startPlayTE()\">\n\n      <div *ngIf=\"carouselLoaded\" class=\"owl-stage-outer\">\n        <owl-stage [owlDraggable]=\"{'isMouseDragable': owlDOMData?.isMouseDragable, 'isTouchDragable': owlDOMData?.isTouchDragable}\"\n                    [stageData]=\"stageData\"\n                    [slidesData]=\"slidesData\"></owl-stage>\n      </div> <!-- /.owl-stage-outer -->\n      <ng-container *ngIf=\"slides.toArray().length\">\n        <div class=\"owl-nav\" [ngClass]=\"{'disabled': navData?.disabled}\">\n          <div class=\"owl-prev\" [ngClass]=\"{'disabled': navData?.prev?.disabled}\" (click)=\"prev()\" [innerHTML]=\"navData?.prev?.htmlText\"></div>\n          <div class=\"owl-next\" [ngClass]=\"{'disabled': navData?.next?.disabled}\" (click)=\"next()\" [innerHTML]=\"navData?.next?.htmlText\"></div>\n        </div> <!-- /.owl-nav -->\n        <div class=\"owl-dots\" [ngClass]=\"{'disabled': dotsData?.disabled}\">\n          <div *ngFor=\"let dot of dotsData?.dots\" class=\"owl-dot\" [ngClass]=\"{'active': dot.active, 'owl-dot-text': dot.showInnerContent}\" (click)=\"moveByDot(dot.id)\">\n            <span [innerHTML]=\"dot.innerContent\"></span>\n          </div>\n        </div> <!-- /.owl-dots -->\n      </ng-container>\n    </div> <!-- /.owl-carousel owl-loaded -->\n  ",
            providers: [NavigationService, AutoplayService, CarouselService, LazyLoadService, AnimateService, AutoHeightService, HashService],
            styles: [".owl-theme { display: block; }"]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }, {
            type: ResizeService
          }, {
            type: CarouselService
          }, {
            type: NavigationService
          }, {
            type: AutoplayService
          }, {
            type: LazyLoadService
          }, {
            type: AnimateService
          }, {
            type: AutoHeightService
          }, {
            type: HashService
          }, {
            type: OwlLogger
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
              args: [DOCUMENT]
            }]
          }];
        }, {
          translated: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
          }],
          dragging: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
          }],
          change: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
          }],
          changed: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
          }],
          initialized: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
          }],
          onVisibilityChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ['document:visibilitychange', ['$event']]
          }],
          slides: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ContentChildren,
            args: [_CarouselSlideDirective]
          }],
          options: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();

      var StageComponent = /*#__PURE__*/function () {
        function StageComponent(zone, el, renderer, carouselService, animateService) {
          var _this203 = this;

          _classCallCheck2(this, StageComponent);

          this.zone = zone;
          this.el = el;
          this.renderer = renderer;
          this.carouselService = carouselService;
          this.animateService = animateService;
          /**
           * Object with data needed for dragging
           */

          this._drag = {
            time: null,
            target: null,
            pointer: null,
            stage: {
              start: null,
              current: null
            },
            direction: null,
            active: false,
            moving: false
          };
          /**
           * Subject for notification when the carousel's rebuilding caused by resize event starts
           */

          this._oneDragMove$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
          /**
           * Passes this to _oneMouseTouchMove();
           */

          this.bindOneMouseTouchMove = function (ev) {
            _this203._oneMouseTouchMove(ev);
          };
          /**
           * Passes this to _onDragMove();
           */


          this.bindOnDragMove = function (ev) {
            _this203._onDragMove(ev);
          };
          /**
           * Passes this to _onDragMove();
           */


          this.bindOnDragEnd = function (ev) {
            // this.zone.run(() => {
            _this203._onDragEnd(ev); // });

          };
          /**
           * Attaches handler for 'click' event on any element in .owl-stage in order to prevent dragging when moving of cursor is less than 3px
           */


          this._oneClickHandler = function () {
            _this203.listenerOneClick = _this203.renderer.listen(_this203._drag.target, 'click', function () {
              return false;
            });

            _this203.listenerOneClick();
          };
        }

        _createClass2(StageComponent, [{
          key: "onMouseDown",
          value: function onMouseDown(event) {
            if (this.owlDraggable.isMouseDragable) {
              this._onDragStart(event);
            }
          }
        }, {
          key: "onTouchStart",
          value: function onTouchStart(event) {
            if (this.owlDraggable.isTouchDragable) {
              this._onDragStart(event);
            }
          }
        }, {
          key: "onTouchCancel",
          value: function onTouchCancel(event) {
            this._onDragEnd(event);
          }
        }, {
          key: "onDragStart",
          value: function onDragStart() {
            if (this.owlDraggable.isMouseDragable) {
              return false;
            }
          }
        }, {
          key: "onSelectStart",
          value: function onSelectStart() {
            if (this.owlDraggable.isMouseDragable) {
              return false;
            }
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this204 = this;

            this._oneMoveSubsription = this._oneDragMove$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.first)()).subscribe(function () {
              _this204._sendChanges();
            });
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._oneMoveSubsription.unsubscribe();
          }
          /**
             * Handles `touchstart` and `mousedown` events.
             * @todo Horizontal swipe threshold as option
             * @todo #261
             * @param event - The event arguments.
             */

        }, {
          key: "_onDragStart",
          value: function _onDragStart(event) {
            var _this205 = this;

            var stage = null;

            if (event.which === 3) {
              return;
            }

            stage = this._prepareDragging(event);
            this._drag.time = new Date().getTime();
            this._drag.target = event.target;
            this._drag.stage.start = stage;
            this._drag.stage.current = stage;
            this._drag.pointer = this._pointer(event);
            this.listenerMouseUp = this.renderer.listen(document, 'mouseup', this.bindOnDragEnd);
            this.listenerTouchEnd = this.renderer.listen(document, 'touchend', this.bindOnDragEnd);
            this.zone.runOutsideAngular(function () {
              _this205.listenerOneMouseMove = _this205.renderer.listen(document, 'mousemove', _this205.bindOneMouseTouchMove);
              _this205.listenerOneTouchMove = _this205.renderer.listen(document, 'touchmove', _this205.bindOneMouseTouchMove);
            });
          }
          /**
           * Attaches listeners to `touchmove` and `mousemove` events; initiates updating carousel after starting dragging
           * @param event event objech of mouse or touch event
           */

        }, {
          key: "_oneMouseTouchMove",
          value: function _oneMouseTouchMove(event) {
            var delta = this._difference(this._drag.pointer, this._pointer(event));

            if (this.listenerATag) {
              this.listenerATag();
            }

            if (Math.abs(delta.x) < 3 && Math.abs(delta.y) < 3 && this._is('valid')) {
              return;
            }

            if (Math.abs(delta.x) < 3 && Math.abs(delta.x) < Math.abs(delta.y) && this._is('valid')) {
              return;
            }

            this.listenerOneMouseMove();
            this.listenerOneTouchMove();
            this._drag.moving = true;
            this.blockClickAnchorInDragging(event);
            this.listenerMouseMove = this.renderer.listen(document, 'mousemove', this.bindOnDragMove);
            this.listenerTouchMove = this.renderer.listen(document, 'touchmove', this.bindOnDragMove);
            event.preventDefault();

            this._enterDragging();

            this._oneDragMove$.next(event); // this._sendChanges();

          }
          /**
           * Attaches handler to HTMLAnchorElement for preventing click while carousel is being dragged
           * @param event event object
           */

        }, {
          key: "blockClickAnchorInDragging",
          value: function blockClickAnchorInDragging(event) {
            var target = event.target;

            while (target && !(target instanceof HTMLAnchorElement)) {
              target = target.parentElement;
            }

            if (target instanceof HTMLAnchorElement) {
              this.listenerATag = this.renderer.listen(target, 'click', function () {
                return false;
              });
            }
          }
          /**
           * Handles the `touchmove` and `mousemove` events.
           * @todo #261
           * @param event - The event arguments.
           */

        }, {
          key: "_onDragMove",
          value: function _onDragMove(event) {
            var stage;
            var stageOrExit = this.carouselService.defineNewCoordsDrag(event, this._drag);

            if (stageOrExit === false) {
              return;
            }

            stage = stageOrExit;
            event.preventDefault();
            this._drag.stage.current = stage;

            this._animate(stage.x - this._drag.stage.start.x);
          }
        }, {
          key: "_animate",
          value:
          /**
           * Moves .owl-stage left-right
           * @param coordinate coordinate to be set to .owl-stage
           */
          function _animate(coordinate) {
            this.renderer.setStyle(this.el.nativeElement.children[0], 'transform', "translate3d(".concat(coordinate, "px,0px,0px"));
            this.renderer.setStyle(this.el.nativeElement.children[0], 'transition', '0s');
          }
          /**
             * Handles the `touchend` and `mouseup` events.
             * @todo #261
             * @todo Threshold for click event
             * @param event - The event arguments.
             */

        }, {
          key: "_onDragEnd",
          value: function _onDragEnd(event) {
            this.carouselService.owlDOMData.isGrab = false;
            this.listenerOneMouseMove();
            this.listenerOneTouchMove();

            if (this._drag.moving) {
              this.renderer.setStyle(this.el.nativeElement.children[0], 'transform', "");
              this.renderer.setStyle(this.el.nativeElement.children[0], 'transition', this.carouselService.speed(+this.carouselService.settings.dragEndSpeed || this.carouselService.settings.smartSpeed) / 1000 + 's');

              this._finishDragging(event);

              this.listenerMouseMove();
              this.listenerTouchMove();
            }

            this._drag = {
              time: null,
              target: null,
              pointer: null,
              stage: {
                start: null,
                current: null
              },
              direction: null,
              active: false,
              moving: false
            }; // this.carouselService.trigger('dragged');

            this.listenerMouseUp();
            this.listenerTouchEnd();
          }
        }, {
          key: "_prepareDragging",
          value:
          /**
             * Prepares data for dragging carousel. It starts after firing `touchstart` and `mousedown` events.
             * @param event - The event arguments.
             * @returns stage - object with 'x' and 'y' coordinates of .owl-stage
             */
          function _prepareDragging(event) {
            return this.carouselService.prepareDragging(event);
          }
          /**
           * Finishes dragging
           * @param event object event of 'mouseUp' of 'touchend' events
           */

        }, {
          key: "_finishDragging",
          value: function _finishDragging(event) {
            this.carouselService.finishDragging(event, this._drag, this._oneClickHandler);
          }
          /**
             * Gets unified pointer coordinates from event.
             * @param event The `mousedown` or `touchstart` event.
             * @returns Contains `x` and `y` coordinates of current pointer position.
             */

        }, {
          key: "_pointer",
          value: function _pointer(event) {
            return this.carouselService.pointer(event);
          }
          /**
             * Gets the difference of two vectors.
             * @param first The first vector.
             * @param second- The second vector.
             * @returns The difference.
             */

        }, {
          key: "_difference",
          value: function _difference(firstC, second) {
            return this.carouselService.difference(firstC, second);
          }
          /**
             * Checks whether the carousel is in a specific state or not.
             * @param specificState The state to check.
             * @returns The flag which indicates if the carousel is busy.
             */

        }, {
          key: "_is",
          value: function _is(specificState) {
            return this.carouselService.is(specificState);
          }
          /**
          * Enters a state.
          * @param name The state name.
          */

        }, {
          key: "_enter",
          value: function _enter(name) {
            this.carouselService.enter(name);
          }
          /**
             * Sends all data needed for View.
             */

        }, {
          key: "_sendChanges",
          value: function _sendChanges() {
            this.carouselService.sendChanges();
          }
          /**
           * Handler for transitioend event
           */

        }, {
          key: "onTransitionEnd",
          value: function onTransitionEnd() {
            this.carouselService.onTransitionEnd();
          }
          /**
             * Enters into a 'dragging' state
             */

        }, {
          key: "_enterDragging",
          value: function _enterDragging() {
            this.carouselService.enterDragging();
          }
          /**
           * Handles the end of 'animationend' event
           * @param id Id of slides
           */

        }, {
          key: "clear",
          value: function clear(id) {
            this.animateService.clear(id);
          }
        }]);

        return StageComponent;
      }();

      StageComponent.ɵfac = function StageComponent_Factory(t) {
        return new (t || StageComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](CarouselService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](AnimateService));
      };

      StageComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: StageComponent,
        selectors: [["owl-stage"]],
        hostBindings: function StageComponent_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("mousedown", function StageComponent_mousedown_HostBindingHandler($event) {
              return ctx.onMouseDown($event);
            })("touchstart", function StageComponent_touchstart_HostBindingHandler($event) {
              return ctx.onTouchStart($event);
            })("touchcancel", function StageComponent_touchcancel_HostBindingHandler($event) {
              return ctx.onTouchCancel($event);
            })("dragstart", function StageComponent_dragstart_HostBindingHandler() {
              return ctx.onDragStart();
            })("selectstart", function StageComponent_selectstart_HostBindingHandler() {
              return ctx.onSelectStart();
            });
          }
        },
        inputs: {
          owlDraggable: "owlDraggable",
          stageData: "stageData",
          slidesData: "slidesData"
        },
        decls: 3,
        vars: 8,
        consts: [[1, "owl-stage", 3, "ngStyle", "transitionend"], [4, "ngFor", "ngForOf"], [1, "owl-item", 3, "ngClass", "ngStyle", "animationend"], [4, "ngIf"], [3, "ngTemplateOutlet"]],
        template: function StageComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("transitionend", function StageComponent_Template_div_transitionend_1_listener() {
              return ctx.onTransitionEnd();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, StageComponent_ng_container_2_Template, 3, 9, "ng-container", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction5"](2, _c5, ctx.stageData.width + "px", ctx.stageData.transform, ctx.stageData.transition, ctx.stageData.paddingL ? ctx.stageData.paddingL + "px" : "", ctx.stageData.paddingR ? ctx.stageData.paddingR + "px" : ""));

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.slidesData);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.NgStyle, _angular_common__WEBPACK_IMPORTED_MODULE_6__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_6__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_6__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_6__.NgTemplateOutlet],
        encapsulation: 2,
        data: {
          animation: [(0, _angular_animations__WEBPACK_IMPORTED_MODULE_17__.trigger)('autoHeight', [(0, _angular_animations__WEBPACK_IMPORTED_MODULE_17__.state)('nulled', (0, _angular_animations__WEBPACK_IMPORTED_MODULE_17__.style)({
            height: 0
          })), (0, _angular_animations__WEBPACK_IMPORTED_MODULE_17__.state)('full', (0, _angular_animations__WEBPACK_IMPORTED_MODULE_17__.style)({
            height: '*'
          })), (0, _angular_animations__WEBPACK_IMPORTED_MODULE_17__.transition)('full => nulled', [// style({height: '*'}),
          (0, _angular_animations__WEBPACK_IMPORTED_MODULE_17__.animate)('700ms 350ms')]), (0, _angular_animations__WEBPACK_IMPORTED_MODULE_17__.transition)('nulled => full', [// style({height: 0}),
          (0, _angular_animations__WEBPACK_IMPORTED_MODULE_17__.animate)(350)])])]
        }
      });

      StageComponent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
        }, {
          type: CarouselService
        }, {
          type: AnimateService
        }];
      };

      StageComponent.propDecorators = {
        owlDraggable: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        stageData: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        slidesData: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        onMouseDown: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
          args: ['mousedown', ['$event']]
        }],
        onTouchStart: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
          args: ['touchstart', ['$event']]
        }],
        onTouchCancel: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
          args: ['touchcancel', ['$event']]
        }],
        onDragStart: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
          args: ['dragstart']
        }],
        onSelectStart: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
          args: ['selectstart']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](StageComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
          args: [{
            selector: 'owl-stage',
            template: "\n    <div>\n      <div class=\"owl-stage\" [ngStyle]=\"{'width': stageData.width + 'px',\n                                        'transform': stageData.transform,\n                                        'transition': stageData.transition,\n                                        'padding-left': stageData.paddingL ? stageData.paddingL + 'px' : '',\n                                        'padding-right': stageData.paddingR ? stageData.paddingR + 'px' : '' }\"\n          (transitionend)=\"onTransitionEnd()\">\n        <ng-container *ngFor=\"let slide of slidesData; let i = index\">\n          <div class=\"owl-item\" [ngClass]=\"slide.classes\"\n                                [ngStyle]=\"{'width': slide.width + 'px',\n                                            'margin-left': slide.marginL ? slide.marginL + 'px' : '',\n                                            'margin-right': slide.marginR ? slide.marginR + 'px' : '',\n                                            'left': slide.left}\"\n                                (animationend)=\"clear(slide.id)\"\n                                [@autoHeight]=\"slide.heightState\">\n            <ng-template *ngIf=\"slide.load\" [ngTemplateOutlet]=\"slide.tplRef\"></ng-template>\n          </div><!-- /.owl-item -->\n        </ng-container>\n      </div><!-- /.owl-stage -->\n    </div>\n  ",
            animations: [(0, _angular_animations__WEBPACK_IMPORTED_MODULE_17__.trigger)('autoHeight', [(0, _angular_animations__WEBPACK_IMPORTED_MODULE_17__.state)('nulled', (0, _angular_animations__WEBPACK_IMPORTED_MODULE_17__.style)({
              height: 0
            })), (0, _angular_animations__WEBPACK_IMPORTED_MODULE_17__.state)('full', (0, _angular_animations__WEBPACK_IMPORTED_MODULE_17__.style)({
              height: '*'
            })), (0, _angular_animations__WEBPACK_IMPORTED_MODULE_17__.transition)('full => nulled', [// style({height: '*'}),
            (0, _angular_animations__WEBPACK_IMPORTED_MODULE_17__.animate)('700ms 350ms')]), (0, _angular_animations__WEBPACK_IMPORTED_MODULE_17__.transition)('nulled => full', [// style({height: 0}),
            (0, _angular_animations__WEBPACK_IMPORTED_MODULE_17__.animate)(350)])])]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
          }, {
            type: CarouselService
          }, {
            type: AnimateService
          }];
        }, {
          onMouseDown: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ['mousedown', ['$event']]
          }],
          onTouchStart: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ['touchstart', ['$event']]
          }],
          onTouchCancel: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ['touchcancel', ['$event']]
          }],
          onDragStart: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ['dragstart']
          }],
          onSelectStart: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ['selectstart']
          }],
          owlDraggable: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          stageData: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          slidesData: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();

      var _OwlRouterLinkDirective = /*#__PURE__*/function () {
        function _OwlRouterLinkDirective(router, route, tabIndex, renderer, el) {
          _classCallCheck2(this, _OwlRouterLinkDirective);

          this.router = router;
          this.route = route;
          this.stopLink = false;
          this.commands = [];

          if (tabIndex == null) {
            renderer.setAttribute(el.nativeElement, 'tabindex', '0');
          }
        }

        _createClass2(_OwlRouterLinkDirective, [{
          key: "owlRouterLink",
          set: function set(commands) {
            if (commands != null) {
              this.commands = Array.isArray(commands) ? commands : [commands];
            } else {
              this.commands = [];
            }
          }
          /**
           * @deprecated 4.0.0 use `queryParamsHandling` instead.
           */

        }, {
          key: "preserveQueryParams",
          set: function set(value) {
            if ((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.isDevMode)() && console && console.warn) {
              console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');
            }

            this.preserve = value;
          }
        }, {
          key: "onClick",
          value: function onClick() {
            var extras = {
              skipLocationChange: attrBoolValue(this.skipLocationChange),
              replaceUrl: attrBoolValue(this.replaceUrl)
            };

            if (this.stopLink) {
              return false;
            }

            this.router.navigateByUrl(this.urlTree, extras);
            return true;
          }
        }, {
          key: "urlTree",
          get: function get() {
            return this.router.createUrlTree(this.commands, {
              relativeTo: this.route,
              queryParams: this.queryParams,
              fragment: this.fragment,
              queryParamsHandling: this.queryParamsHandling,
              preserveFragment: attrBoolValue(this.preserveFragment)
            });
          }
        }]);

        return _OwlRouterLinkDirective;
      }();

      _OwlRouterLinkDirective.ɵfac = function OwlRouterLinkDirective_Factory(t) {
        return new (t || _OwlRouterLinkDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_12__.Router), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_12__.ActivatedRoute), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinjectAttribute"]('tabindex'), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef));
      };

      _OwlRouterLinkDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _OwlRouterLinkDirective,
        selectors: [["", "owlRouterLink", "", 5, "a"]],
        hostBindings: function OwlRouterLinkDirective_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function OwlRouterLinkDirective_click_HostBindingHandler() {
              return ctx.onClick();
            });
          }
        },
        inputs: {
          stopLink: "stopLink",
          owlRouterLink: "owlRouterLink",
          preserveQueryParams: "preserveQueryParams",
          queryParams: "queryParams",
          fragment: "fragment",
          queryParamsHandling: "queryParamsHandling",
          preserveFragment: "preserveFragment",
          skipLocationChange: "skipLocationChange",
          replaceUrl: "replaceUrl"
        }
      });

      _OwlRouterLinkDirective.ctorParameters = function () {
        return [{
          type: _angular_router__WEBPACK_IMPORTED_MODULE_12__.Router
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_12__.ActivatedRoute
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Attribute,
            args: ['tabindex']
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
        }];
      };

      _OwlRouterLinkDirective.propDecorators = {
        queryParams: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        fragment: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        queryParamsHandling: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        preserveFragment: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        skipLocationChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        replaceUrl: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        stopLink: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        owlRouterLink: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        preserveQueryParams: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        onClick: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
          args: ['click']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_OwlRouterLinkDirective, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: ':not(a)[owlRouterLink]'
          }]
        }], function () {
          return [{
            type: _angular_router__WEBPACK_IMPORTED_MODULE_12__.Router
          }, {
            type: _angular_router__WEBPACK_IMPORTED_MODULE_12__.ActivatedRoute
          }, {
            type: String,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Attribute,
              args: ['tabindex']
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
          }];
        }, {
          stopLink: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          owlRouterLink: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          preserveQueryParams: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          onClick: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ['click']
          }],
          queryParams: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          fragment: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          queryParamsHandling: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          preserveFragment: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          skipLocationChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          replaceUrl: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();
      /**
       * @description
       *
       * Lets you link to specific routes in your app.
       *
       * See `RouterLink` for more information.
       *
       * @ngModule RouterModule
       *
       * @publicApi
       */


      var _OwlRouterLinkWithHrefDirective = /*#__PURE__*/function () {
        function _OwlRouterLinkWithHrefDirective(router, route, locationStrategy) {
          var _this206 = this;

          _classCallCheck2(this, _OwlRouterLinkWithHrefDirective);

          this.router = router;
          this.route = route;
          this.locationStrategy = locationStrategy;
          this.stopLink = false;
          this.commands = [];
          this.subscription = router.events.subscribe(function (s) {
            if (s instanceof _angular_router__WEBPACK_IMPORTED_MODULE_12__.NavigationEnd) {
              _this206.updateTargetUrlAndHref();
            }
          });
        }

        _createClass2(_OwlRouterLinkWithHrefDirective, [{
          key: "owlRouterLink",
          set: function set(commands) {
            if (commands != null) {
              this.commands = Array.isArray(commands) ? commands : [commands];
            } else {
              this.commands = [];
            }
          }
        }, {
          key: "preserveQueryParams",
          set: function set(value) {
            if ((0, _angular_core__WEBPACK_IMPORTED_MODULE_0__.isDevMode)() && console && console.warn) {
              console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');
            }

            this.preserve = value;
          }
        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            this.updateTargetUrlAndHref();
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.subscription.unsubscribe();
          }
        }, {
          key: "onClick",
          value: function onClick(button, ctrlKey, metaKey, shiftKey) {
            if (button !== 0 || ctrlKey || metaKey || shiftKey) {
              return true;
            }

            if (typeof this.target === 'string' && this.target !== '_self') {
              return true;
            }

            if (this.stopLink) {
              return false;
            }

            var extras = {
              skipLocationChange: attrBoolValue(this.skipLocationChange),
              replaceUrl: attrBoolValue(this.replaceUrl)
            };
            this.router.navigateByUrl(this.urlTree, extras);
            return false;
          }
        }, {
          key: "updateTargetUrlAndHref",
          value: function updateTargetUrlAndHref() {
            this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
          }
        }, {
          key: "urlTree",
          get: function get() {
            return this.router.createUrlTree(this.commands, {
              relativeTo: this.route,
              queryParams: this.queryParams,
              fragment: this.fragment,
              queryParamsHandling: this.queryParamsHandling,
              preserveFragment: attrBoolValue(this.preserveFragment)
            });
          }
        }]);

        return _OwlRouterLinkWithHrefDirective;
      }();

      _OwlRouterLinkWithHrefDirective.ɵfac = function OwlRouterLinkWithHrefDirective_Factory(t) {
        return new (t || _OwlRouterLinkWithHrefDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_12__.Router), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_12__.ActivatedRoute), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_6__.LocationStrategy));
      };

      _OwlRouterLinkWithHrefDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: _OwlRouterLinkWithHrefDirective,
        selectors: [["a", "owlRouterLink", ""]],
        hostVars: 2,
        hostBindings: function OwlRouterLinkWithHrefDirective_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function OwlRouterLinkWithHrefDirective_click_HostBindingHandler($event) {
              return ctx.onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey);
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵhostProperty"]("href", ctx.href, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrl"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("target", ctx.target);
          }
        },
        inputs: {
          stopLink: "stopLink",
          owlRouterLink: "owlRouterLink",
          preserveQueryParams: "preserveQueryParams",
          target: "target",
          queryParams: "queryParams",
          fragment: "fragment",
          queryParamsHandling: "queryParamsHandling",
          preserveFragment: "preserveFragment",
          skipLocationChange: "skipLocationChange",
          replaceUrl: "replaceUrl"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });

      _OwlRouterLinkWithHrefDirective.ctorParameters = function () {
        return [{
          type: _angular_router__WEBPACK_IMPORTED_MODULE_12__.Router
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_12__.ActivatedRoute
        }, {
          type: _angular_common__WEBPACK_IMPORTED_MODULE_6__.LocationStrategy
        }];
      };

      _OwlRouterLinkWithHrefDirective.propDecorators = {
        target: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
          args: ['attr.target']
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        queryParams: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        fragment: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        queryParamsHandling: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        preserveFragment: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        skipLocationChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        replaceUrl: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        stopLink: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        href: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding
        }],
        owlRouterLink: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        preserveQueryParams: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }],
        onClick: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
          args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey']]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_OwlRouterLinkWithHrefDirective, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
          args: [{
            selector: 'a[owlRouterLink]'
          }]
        }], function () {
          return [{
            type: _angular_router__WEBPACK_IMPORTED_MODULE_12__.Router
          }, {
            type: _angular_router__WEBPACK_IMPORTED_MODULE_12__.ActivatedRoute
          }, {
            type: _angular_common__WEBPACK_IMPORTED_MODULE_6__.LocationStrategy
          }];
        }, {
          stopLink: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          owlRouterLink: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          preserveQueryParams: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          onClick: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey']]
          }],
          href: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding
          }],
          target: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
            args: ['attr.target']
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          queryParams: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          fragment: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          queryParamsHandling: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          preserveFragment: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          skipLocationChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }],
          replaceUrl: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
          }]
        });
      })();

      function attrBoolValue(s) {
        return s === '' || !!s;
      }

      var routes = [];

      var _CarouselModule = function _CarouselModule() {
        _classCallCheck2(this, _CarouselModule);
      };

      _CarouselModule.ɵfac = function CarouselModule_Factory(t) {
        return new (t || _CarouselModule)();
      };

      _CarouselModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: _CarouselModule
      });
      _CarouselModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        providers: [WINDOW_PROVIDERS, ResizeService, DOCUMENT_PROVIDERS, OwlLogger],
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_6__.CommonModule]]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](_CarouselModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
          args: [{
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.CommonModule],
            declarations: [_CarouselComponent, _CarouselSlideDirective, StageComponent, _OwlRouterLinkDirective, _OwlRouterLinkWithHrefDirective],
            exports: [_CarouselComponent, _CarouselSlideDirective, _OwlRouterLinkDirective, _OwlRouterLinkWithHrefDirective],
            providers: [WINDOW_PROVIDERS, ResizeService, DOCUMENT_PROVIDERS, OwlLogger]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_CarouselModule, {
          declarations: function declarations() {
            return [_CarouselComponent, _CarouselSlideDirective, StageComponent, _OwlRouterLinkDirective, _OwlRouterLinkWithHrefDirective];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_6__.CommonModule];
          },
          exports: function exports() {
            return [_CarouselComponent, _CarouselSlideDirective, _OwlRouterLinkDirective, _OwlRouterLinkWithHrefDirective];
          }
        });
      })();
      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=ngx-owl-carousel-o.js.map

      /***/

    },

    /***/
    23192:
    /*!*************************************************************************!*\
      !*** ./node_modules/ngx-typed-js/__ivy_ngcc__/fesm2015/ngx-typed-js.js ***!
      \*************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "NgxTypedJsComponent": function NgxTypedJsComponent() {
          return (
            /* binding */
            _NgxTypedJsComponent
          );
        },

        /* harmony export */
        "NgxTypedJsModule": function NgxTypedJsModule() {
          return (
            /* binding */
            _NgxTypedJsModule
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! tslib */
      64762);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      37716);
      /* harmony import */


      var typed_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! typed.js */
      9028);
      /* harmony import */


      var typed_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(typed_js__WEBPACK_IMPORTED_MODULE_0__);

      var _c0 = ["wrapper"];
      var _c1 = ["*"];

      var _NgxTypedJsComponent = /*#__PURE__*/function () {
        function NgxTypedJsComponent() {
          _classCallCheck2(this, NgxTypedJsComponent);

          this.completed = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
          this.preStringTyped = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
          this.stringTyped = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
          this.lastStringBackspaced = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
          this.typingPaused = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
          this.typingResumed = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
          this.reset = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
          this.stopped = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
          this.started = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
          this.destroyed = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
        }

        _createClass2(NgxTypedJsComponent, [{
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            this.typed = new (typed_js__WEBPACK_IMPORTED_MODULE_0___default())(this.content.nativeElement.querySelector('.typing'), this.options);

            if (this.showCursor !== false) {
              this.updateCursorStyle();
            }
          }
        }, {
          key: "toggle",
          value: function toggle() {
            this.typed.toggle();
          }
        }, {
          key: "stop",
          value: function stop() {
            this.typed.stop();
          }
        }, {
          key: "start",
          value: function start() {
            this.typed.start();
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.typed.destroy();
          }
        }, {
          key: "doReset",
          value: function doReset(restart) {
            this.typed.reset(restart);
          }
        }, {
          key: "options",
          get: function get() {
            var emit = function emit(emitter) {
              return function () {
                return emitter.emit();
              };
            };

            var emitIndex = function emitIndex(emitter) {
              return function (index) {
                return emitter.emit(index);
              };
            };

            var opts = {
              strings: this.strings,
              stringsElement: this.stringsElement,
              typeSpeed: this.typeSpeed,
              startDelay: this.startDelay,
              backSpeed: this.backSpeed,
              smartBackspace: this.smartBackspace,
              shuffle: this.shuffle,
              backDelay: this.backDelay,
              fadeOut: this.fadeOut,
              fadeOutClass: this.fadeOutClass,
              fadeOutDelay: this.fadeOutDelay,
              loop: this.loop,
              loopCount: this.loopCount,
              showCursor: this.showCursor,
              autoInsertCss: this.autoInsertCss,
              attr: this.attr,
              bindInputFocusEvents: this.bindInputFocusEvents,
              contentType: this.contentType,
              onComplete: emit(this.completed),
              preStringTyped: emitIndex(this.preStringTyped),
              onStringTyped: emitIndex(this.stringTyped),
              onLastStringBackspaced: emit(this.lastStringBackspaced),
              onTypingPaused: emitIndex(this.typingPaused),
              onTypingResumed: emitIndex(this.typingResumed),
              onReset: emit(this.reset),
              onStop: emitIndex(this.stopped),
              onStart: emitIndex(this.started),
              onDestroy: emit(this.destroyed)
            };
            Object.keys(opts).forEach(function (key) {
              if (opts[key] === undefined) {
                delete opts[key];
              }
            });
            return opts;
          }
        }, {
          key: "updateCursorStyle",
          value: function updateCursorStyle() {
            var textElementStyle = getComputedStyle(this.content.nativeElement.querySelector('.typing'));
            var cursorElementStyle = this.content.nativeElement.querySelector('.typed-cursor').style;
            cursorElementStyle.fontSize = textElementStyle.fontSize;
            cursorElementStyle.color = this.cursorColor || textElementStyle.color;
          }
        }]);

        return NgxTypedJsComponent;
      }();

      _NgxTypedJsComponent.ɵfac = function NgxTypedJsComponent_Factory(t) {
        return new (t || _NgxTypedJsComponent)();
      };

      _NgxTypedJsComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: _NgxTypedJsComponent,
        selectors: [["ngx-typed-js"]],
        viewQuery: function NgxTypedJsComponent_Query(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵviewQuery"](_c0, 7);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.content = _t.first);
          }
        },
        inputs: {
          cursorColor: "cursorColor",
          strings: "strings",
          stringsElement: "stringsElement",
          typeSpeed: "typeSpeed",
          startDelay: "startDelay",
          backSpeed: "backSpeed",
          smartBackspace: "smartBackspace",
          shuffle: "shuffle",
          backDelay: "backDelay",
          fadeOut: "fadeOut",
          fadeOutClass: "fadeOutClass",
          fadeOutDelay: "fadeOutDelay",
          loop: "loop",
          loopCount: "loopCount",
          showCursor: "showCursor",
          cursorChar: "cursorChar",
          autoInsertCss: "autoInsertCss",
          attr: "attr",
          bindInputFocusEvents: "bindInputFocusEvents",
          contentType: "contentType"
        },
        outputs: {
          completed: "completed",
          preStringTyped: "preStringTyped",
          stringTyped: "stringTyped",
          lastStringBackspaced: "lastStringBackspaced",
          typingPaused: "typingPaused",
          typingResumed: "typingResumed",
          reset: "reset",
          stopped: "stopped",
          started: "started",
          destroyed: "destroyed"
        },
        ngContentSelectors: _c1,
        decls: 3,
        vars: 0,
        consts: [["wrapper", ""]],
        template: function NgxTypedJsComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojectionDef"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", null, 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojection"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
          }
        },
        styles: ["[_nghost-%COMP%] .typing{display:inline}"]
      });
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", String)], _NgxTypedJsComponent.prototype, "cursorColor", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", Array)], _NgxTypedJsComponent.prototype, "strings", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", String)], _NgxTypedJsComponent.prototype, "stringsElement", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", Number)], _NgxTypedJsComponent.prototype, "typeSpeed", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", Number)], _NgxTypedJsComponent.prototype, "startDelay", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", Number)], _NgxTypedJsComponent.prototype, "backSpeed", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", Boolean)], _NgxTypedJsComponent.prototype, "smartBackspace", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", Boolean)], _NgxTypedJsComponent.prototype, "shuffle", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", Number)], _NgxTypedJsComponent.prototype, "backDelay", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", Boolean)], _NgxTypedJsComponent.prototype, "fadeOut", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", String)], _NgxTypedJsComponent.prototype, "fadeOutClass", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", Boolean)], _NgxTypedJsComponent.prototype, "fadeOutDelay", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", Boolean)], _NgxTypedJsComponent.prototype, "loop", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", Number)], _NgxTypedJsComponent.prototype, "loopCount", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", Boolean)], _NgxTypedJsComponent.prototype, "showCursor", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", String)], _NgxTypedJsComponent.prototype, "cursorChar", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", Boolean)], _NgxTypedJsComponent.prototype, "autoInsertCss", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", String)], _NgxTypedJsComponent.prototype, "attr", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", Boolean)], _NgxTypedJsComponent.prototype, "bindInputFocusEvents", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", String)], _NgxTypedJsComponent.prototype, "contentType", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter)], _NgxTypedJsComponent.prototype, "completed", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter)], _NgxTypedJsComponent.prototype, "preStringTyped", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter)], _NgxTypedJsComponent.prototype, "stringTyped", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter)], _NgxTypedJsComponent.prototype, "lastStringBackspaced", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter)], _NgxTypedJsComponent.prototype, "typingPaused", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter)], _NgxTypedJsComponent.prototype, "typingResumed", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter)], _NgxTypedJsComponent.prototype, "reset", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter)], _NgxTypedJsComponent.prototype, "stopped", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter)], _NgxTypedJsComponent.prototype, "started", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output)(), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter)], _NgxTypedJsComponent.prototype, "destroyed", void 0);
      (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.ViewChild)('wrapper', {
        "static": true
      }), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__metadata)("design:type", Object)], _NgxTypedJsComponent.prototype, "content", void 0);

      var _NgxTypedJsModule = function NgxTypedJsModule() {
        _classCallCheck2(this, NgxTypedJsModule);
      };

      _NgxTypedJsModule.ɵfac = function NgxTypedJsModule_Factory(t) {
        return new (t || _NgxTypedJsModule)();
      };

      _NgxTypedJsModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: _NgxTypedJsModule
      });
      _NgxTypedJsModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        imports: [[]]
      });

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_NgxTypedJsComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Component,
          args: [{
            selector: 'ngx-typed-js',
            template: "<div #wrapper>\n  <ng-content></ng-content>\n</div>\n",
            styles: [":host>>>.typing{display:inline}"]
          }]
        }], function () {
          return [];
        }, {
          completed: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
          }],
          preStringTyped: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
          }],
          stringTyped: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
          }],
          lastStringBackspaced: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
          }],
          typingPaused: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
          }],
          typingResumed: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
          }],
          reset: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
          }],
          stopped: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
          }],
          started: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
          }],
          destroyed: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
          }],
          cursorColor: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          strings: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          stringsElement: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          typeSpeed: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          startDelay: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          backSpeed: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          smartBackspace: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          shuffle: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          backDelay: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          fadeOut: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          fadeOutClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          fadeOutDelay: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          loop: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          loopCount: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          showCursor: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          cursorChar: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          autoInsertCss: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          attr: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          bindInputFocusEvents: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          contentType: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
          }],
          content: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ViewChild,
            args: ['wrapper', {
              "static": true
            }]
          }]
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](_NgxTypedJsModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
          args: [{
            declarations: [_NgxTypedJsComponent],
            imports: [],
            exports: [_NgxTypedJsComponent]
          }]
        }], null, null);
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](_NgxTypedJsModule, {
          declarations: [_NgxTypedJsComponent],
          exports: [_NgxTypedJsComponent]
        });
      })();
      /*
       * Public API Surface of ngx-typed-js
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=ngx-typed-js.js.map

      /***/

    },

    /***/
    26215:
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/BehaviorSubject.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "BehaviorSubject": function BehaviorSubject() {
          return (
            /* binding */
            _BehaviorSubject
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./Subject */
      79765);
      /* harmony import */


      var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./util/ObjectUnsubscribedError */
      77971);

      var _BehaviorSubject = /*#__PURE__*/function (_Subject__WEBPACK_IMP) {
        _inherits(_BehaviorSubject, _Subject__WEBPACK_IMP);

        var _super59 = _createSuper(_BehaviorSubject);

        function _BehaviorSubject(_value) {
          var _this207;

          _classCallCheck2(this, _BehaviorSubject);

          _this207 = _super59.call(this);
          _this207._value = _value;
          return _this207;
        }

        _createClass2(_BehaviorSubject, [{
          key: "value",
          get: function get() {
            return this.getValue();
          }
        }, {
          key: "_subscribe",
          value: function _subscribe(subscriber) {
            var subscription = _get(_getPrototypeOf(_BehaviorSubject.prototype), "_subscribe", this).call(this, subscriber);

            if (subscription && !subscription.closed) {
              subscriber.next(this._value);
            }

            return subscription;
          }
        }, {
          key: "getValue",
          value: function getValue() {
            if (this.hasError) {
              throw this.thrownError;
            } else if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__.ObjectUnsubscribedError();
            } else {
              return this._value;
            }
          }
        }, {
          key: "next",
          value: function next(value) {
            _get(_getPrototypeOf(_BehaviorSubject.prototype), "next", this).call(this, this._value = value);
          }
        }]);

        return _BehaviorSubject;
      }(_Subject__WEBPACK_IMPORTED_MODULE_0__.Subject); //# sourceMappingURL=BehaviorSubject.js.map

      /***/

    },

    /***/
    80268:
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "InnerSubscriber": function InnerSubscriber() {
          return (
            /* binding */
            _InnerSubscriber
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./Subscriber */
      77393);

      var _InnerSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_) {
        _inherits(_InnerSubscriber, _Subscriber__WEBPACK_);

        var _super60 = _createSuper(_InnerSubscriber);

        function _InnerSubscriber(parent, outerValue, outerIndex) {
          var _this208;

          _classCallCheck2(this, _InnerSubscriber);

          _this208 = _super60.call(this);
          _this208.parent = parent;
          _this208.outerValue = outerValue;
          _this208.outerIndex = outerIndex;
          _this208.index = 0;
          return _this208;
        }

        _createClass2(_InnerSubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
          }
        }, {
          key: "_error",
          value: function _error(error) {
            this.parent.notifyError(error, this);
            this.unsubscribe();
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.parent.notifyComplete(this);
            this.unsubscribe();
          }
        }]);

        return _InnerSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber); //# sourceMappingURL=InnerSubscriber.js.map

      /***/

    },

    /***/
    23098:
    /*!*************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/Notification.js ***!
      \*************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "NotificationKind": function NotificationKind() {
          return (
            /* binding */
            _NotificationKind
          );
        },

        /* harmony export */
        "Notification": function Notification() {
          return (
            /* binding */
            _Notification
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _observable_empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./observable/empty */
      59193);
      /* harmony import */


      var _observable_of__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./observable/of */
      25917);
      /* harmony import */


      var _observable_throwError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./observable/throwError */
      40205);

      var _NotificationKind;

      (function (NotificationKind) {
        NotificationKind["NEXT"] = "N";
        NotificationKind["ERROR"] = "E";
        NotificationKind["COMPLETE"] = "C";
      })(_NotificationKind || (_NotificationKind = {}));

      var _Notification = /*#__PURE__*/function () {
        function _Notification(kind, value, error) {
          _classCallCheck2(this, _Notification);

          this.kind = kind;
          this.value = value;
          this.error = error;
          this.hasValue = kind === 'N';
        }

        _createClass2(_Notification, [{
          key: "observe",
          value: function observe(observer) {
            switch (this.kind) {
              case 'N':
                return observer.next && observer.next(this.value);

              case 'E':
                return observer.error && observer.error(this.error);

              case 'C':
                return observer.complete && observer.complete();
            }
          }
        }, {
          key: "do",
          value: function _do(next, error, complete) {
            var kind = this.kind;

            switch (kind) {
              case 'N':
                return next && next(this.value);

              case 'E':
                return error && error(this.error);

              case 'C':
                return complete && complete();
            }
          }
        }, {
          key: "accept",
          value: function accept(nextOrObserver, error, complete) {
            if (nextOrObserver && typeof nextOrObserver.next === 'function') {
              return this.observe(nextOrObserver);
            } else {
              return this["do"](nextOrObserver, error, complete);
            }
          }
        }, {
          key: "toObservable",
          value: function toObservable() {
            var kind = this.kind;

            switch (kind) {
              case 'N':
                return (0, _observable_of__WEBPACK_IMPORTED_MODULE_0__.of)(this.value);

              case 'E':
                return (0, _observable_throwError__WEBPACK_IMPORTED_MODULE_1__.throwError)(this.error);

              case 'C':
                return (0, _observable_empty__WEBPACK_IMPORTED_MODULE_2__.empty)();
            }

            throw new Error('unexpected notification kind value');
          }
        }], [{
          key: "createNext",
          value: function createNext(value) {
            if (typeof value !== 'undefined') {
              return new _Notification('N', value);
            }

            return _Notification.undefinedValueNotification;
          }
        }, {
          key: "createError",
          value: function createError(err) {
            return new _Notification('E', undefined, err);
          }
        }, {
          key: "createComplete",
          value: function createComplete() {
            return _Notification.completeNotification;
          }
        }]);

        return _Notification;
      }();

      _Notification.completeNotification = new _Notification('C');
      _Notification.undefinedValueNotification = new _Notification('N', undefined); //# sourceMappingURL=Notification.js.map

      /***/
    },

    /***/
    69165:
    /*!***********************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/Observable.js ***!
      \***********************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "Observable": function Observable() {
          return (
            /* binding */
            _Observable
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _util_canReportError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./util/canReportError */
      13179);
      /* harmony import */


      var _util_toSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./util/toSubscriber */
      31821);
      /* harmony import */


      var _symbol_observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./symbol/observable */
      16554);
      /* harmony import */


      var _util_pipe__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./util/pipe */
      34022);
      /* harmony import */


      var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./config */
      82494);

      var _Observable = /*#__PURE__*/function () {
        function _Observable(subscribe) {
          _classCallCheck2(this, _Observable);

          this._isScalar = false;

          if (subscribe) {
            this._subscribe = subscribe;
          }
        }

        _createClass2(_Observable, [{
          key: "lift",
          value: function lift(operator) {
            var observable = new _Observable();
            observable.source = this;
            observable.operator = operator;
            return observable;
          }
        }, {
          key: "subscribe",
          value: function subscribe(observerOrNext, error, complete) {
            var operator = this.operator;
            var sink = (0, _util_toSubscriber__WEBPACK_IMPORTED_MODULE_0__.toSubscriber)(observerOrNext, error, complete);

            if (operator) {
              sink.add(operator.call(sink, this.source));
            } else {
              sink.add(this.source || _config__WEBPACK_IMPORTED_MODULE_1__.config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));
            }

            if (_config__WEBPACK_IMPORTED_MODULE_1__.config.useDeprecatedSynchronousErrorHandling) {
              if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;

                if (sink.syncErrorThrown) {
                  throw sink.syncErrorValue;
                }
              }
            }

            return sink;
          }
        }, {
          key: "_trySubscribe",
          value: function _trySubscribe(sink) {
            try {
              return this._subscribe(sink);
            } catch (err) {
              if (_config__WEBPACK_IMPORTED_MODULE_1__.config.useDeprecatedSynchronousErrorHandling) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
              }

              if ((0, _util_canReportError__WEBPACK_IMPORTED_MODULE_2__.canReportError)(sink)) {
                sink.error(err);
              } else {
                console.warn(err);
              }
            }
          }
        }, {
          key: "forEach",
          value: function forEach(next, promiseCtor) {
            var _this209 = this;

            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
              var subscription;
              subscription = _this209.subscribe(function (value) {
                try {
                  next(value);
                } catch (err) {
                  reject(err);

                  if (subscription) {
                    subscription.unsubscribe();
                  }
                }
              }, reject, resolve);
            });
          }
        }, {
          key: "_subscribe",
          value: function _subscribe(subscriber) {
            var source = this.source;
            return source && source.subscribe(subscriber);
          }
        }, {
          key: _symbol_observable__WEBPACK_IMPORTED_MODULE_3__.observable,
          value: function value() {
            return this;
          }
        }, {
          key: "pipe",
          value: function pipe() {
            for (var _len20 = arguments.length, operations = new Array(_len20), _key21 = 0; _key21 < _len20; _key21++) {
              operations[_key21] = arguments[_key21];
            }

            if (operations.length === 0) {
              return this;
            }

            return (0, _util_pipe__WEBPACK_IMPORTED_MODULE_4__.pipeFromArray)(operations)(this);
          }
        }, {
          key: "toPromise",
          value: function toPromise(promiseCtor) {
            var _this210 = this;

            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
              var value;

              _this210.subscribe(function (x) {
                return value = x;
              }, function (err) {
                return reject(err);
              }, function () {
                return resolve(value);
              });
            });
          }
        }]);

        return _Observable;
      }();

      _Observable.create = function (subscribe) {
        return new _Observable(subscribe);
      };

      function getPromiseCtor(promiseCtor) {
        if (!promiseCtor) {
          promiseCtor = _config__WEBPACK_IMPORTED_MODULE_1__.config.Promise || Promise;
        }

        if (!promiseCtor) {
          throw new Error('no Promise impl found');
        }

        return promiseCtor;
      } //# sourceMappingURL=Observable.js.map

      /***/

    },

    /***/
    46490:
    /*!*********************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/Observer.js ***!
      \*********************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "empty": function empty() {
          return (
            /* binding */
            _empty
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./config */
      82494);
      /* harmony import */


      var _util_hostReportError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./util/hostReportError */
      54449);

      var _empty = {
        closed: true,
        next: function next(value) {},
        error: function error(err) {
          if (_config__WEBPACK_IMPORTED_MODULE_0__.config.useDeprecatedSynchronousErrorHandling) {
            throw err;
          } else {
            (0, _util_hostReportError__WEBPACK_IMPORTED_MODULE_1__.hostReportError)(err);
          }
        },
        complete: function complete() {}
      }; //# sourceMappingURL=Observer.js.map

      /***/
    },

    /***/
    55197:
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "OuterSubscriber": function OuterSubscriber() {
          return (
            /* binding */
            _OuterSubscriber
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./Subscriber */
      77393);

      var _OuterSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_2) {
        _inherits(_OuterSubscriber, _Subscriber__WEBPACK_2);

        var _super61 = _createSuper(_OuterSubscriber);

        function _OuterSubscriber() {
          _classCallCheck2(this, _OuterSubscriber);

          return _super61.apply(this, arguments);
        }

        _createClass2(_OuterSubscriber, [{
          key: "notifyNext",
          value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
          }
        }, {
          key: "notifyError",
          value: function notifyError(error, innerSub) {
            this.destination.error(error);
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete(innerSub) {
            this.destination.complete();
          }
        }]);

        return _OuterSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber); //# sourceMappingURL=OuterSubscriber.js.map

      /***/

    },

    /***/
    88229:
    /*!**************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/ReplaySubject.js ***!
      \**************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ReplaySubject": function ReplaySubject() {
          return (
            /* binding */
            _ReplaySubject
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./Subject */
      79765);
      /* harmony import */


      var _scheduler_queue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./scheduler/queue */
      29661);
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./Subscription */
      10826);
      /* harmony import */


      var _operators_observeOn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./operators/observeOn */
      59746);
      /* harmony import */


      var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./util/ObjectUnsubscribedError */
      77971);
      /* harmony import */


      var _SubjectSubscription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./SubjectSubscription */
      78858);

      var _ReplaySubject = /*#__PURE__*/function (_Subject__WEBPACK_IMP2) {
        _inherits(_ReplaySubject, _Subject__WEBPACK_IMP2);

        var _super62 = _createSuper(_ReplaySubject);

        function _ReplaySubject() {
          var _this211;

          var bufferSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.POSITIVE_INFINITY;
          var windowTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;
          var scheduler = arguments.length > 2 ? arguments[2] : undefined;

          _classCallCheck2(this, _ReplaySubject);

          _this211 = _super62.call(this);
          _this211.scheduler = scheduler;
          _this211._events = [];
          _this211._infiniteTimeWindow = false;
          _this211._bufferSize = bufferSize < 1 ? 1 : bufferSize;
          _this211._windowTime = windowTime < 1 ? 1 : windowTime;

          if (windowTime === Number.POSITIVE_INFINITY) {
            _this211._infiniteTimeWindow = true;
            _this211.next = _this211.nextInfiniteTimeWindow;
          } else {
            _this211.next = _this211.nextTimeWindow;
          }

          return _this211;
        }

        _createClass2(_ReplaySubject, [{
          key: "nextInfiniteTimeWindow",
          value: function nextInfiniteTimeWindow(value) {
            if (!this.isStopped) {
              var _events = this._events;

              _events.push(value);

              if (_events.length > this._bufferSize) {
                _events.shift();
              }
            }

            _get(_getPrototypeOf(_ReplaySubject.prototype), "next", this).call(this, value);
          }
        }, {
          key: "nextTimeWindow",
          value: function nextTimeWindow(value) {
            if (!this.isStopped) {
              this._events.push(new ReplayEvent(this._getNow(), value));

              this._trimBufferThenGetEvents();
            }

            _get(_getPrototypeOf(_ReplaySubject.prototype), "next", this).call(this, value);
          }
        }, {
          key: "_subscribe",
          value: function _subscribe(subscriber) {
            var _infiniteTimeWindow = this._infiniteTimeWindow;

            var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();

            var scheduler = this.scheduler;
            var len = _events.length;
            var subscription;

            if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__.ObjectUnsubscribedError();
            } else if (this.isStopped || this.hasError) {
              subscription = _Subscription__WEBPACK_IMPORTED_MODULE_2__.Subscription.EMPTY;
            } else {
              this.observers.push(subscriber);
              subscription = new _SubjectSubscription__WEBPACK_IMPORTED_MODULE_3__.SubjectSubscription(this, subscriber);
            }

            if (scheduler) {
              subscriber.add(subscriber = new _operators_observeOn__WEBPACK_IMPORTED_MODULE_4__.ObserveOnSubscriber(subscriber, scheduler));
            }

            if (_infiniteTimeWindow) {
              for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i]);
              }
            } else {
              for (var _i30 = 0; _i30 < len && !subscriber.closed; _i30++) {
                subscriber.next(_events[_i30].value);
              }
            }

            if (this.hasError) {
              subscriber.error(this.thrownError);
            } else if (this.isStopped) {
              subscriber.complete();
            }

            return subscription;
          }
        }, {
          key: "_getNow",
          value: function _getNow() {
            return (this.scheduler || _scheduler_queue__WEBPACK_IMPORTED_MODULE_5__.queue).now();
          }
        }, {
          key: "_trimBufferThenGetEvents",
          value: function _trimBufferThenGetEvents() {
            var now = this._getNow();

            var _bufferSize = this._bufferSize;
            var _windowTime = this._windowTime;
            var _events = this._events;
            var eventsCount = _events.length;
            var spliceCount = 0;

            while (spliceCount < eventsCount) {
              if (now - _events[spliceCount].time < _windowTime) {
                break;
              }

              spliceCount++;
            }

            if (eventsCount > _bufferSize) {
              spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
            }

            if (spliceCount > 0) {
              _events.splice(0, spliceCount);
            }

            return _events;
          }
        }]);

        return _ReplaySubject;
      }(_Subject__WEBPACK_IMPORTED_MODULE_0__.Subject);

      var ReplayEvent = function ReplayEvent(time, value) {
        _classCallCheck2(this, ReplayEvent);

        this.time = time;
        this.value = value;
      }; //# sourceMappingURL=ReplaySubject.js.map

      /***/

    },

    /***/
    2217:
    /*!**********************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/Scheduler.js ***!
      \**********************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "Scheduler": function Scheduler() {
          return (
            /* binding */
            _Scheduler
          );
        }
        /* harmony export */

      });

      var _Scheduler = /*#__PURE__*/function () {
        function _Scheduler(SchedulerAction) {
          var now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Scheduler.now;

          _classCallCheck2(this, _Scheduler);

          this.SchedulerAction = SchedulerAction;
          this.now = now;
        }

        _createClass2(_Scheduler, [{
          key: "schedule",
          value: function schedule(work) {
            var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var state = arguments.length > 2 ? arguments[2] : undefined;
            return new this.SchedulerAction(this, work).schedule(state, delay);
          }
        }]);

        return _Scheduler;
      }();

      _Scheduler.now = function () {
        return Date.now();
      }; //# sourceMappingURL=Scheduler.js.map

      /***/

    },

    /***/
    79765:
    /*!********************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/Subject.js ***!
      \********************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "SubjectSubscriber": function SubjectSubscriber() {
          return (
            /* binding */
            _SubjectSubscriber
          );
        },

        /* harmony export */
        "Subject": function Subject() {
          return (
            /* binding */
            _Subject
          );
        },

        /* harmony export */
        "AnonymousSubject": function AnonymousSubject() {
          return (
            /* binding */
            _AnonymousSubject
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./Observable */
      69165);
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./Subscriber */
      77393);
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./Subscription */
      10826);
      /* harmony import */


      var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./util/ObjectUnsubscribedError */
      77971);
      /* harmony import */


      var _SubjectSubscription__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./SubjectSubscription */
      78858);
      /* harmony import */


      var _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../internal/symbol/rxSubscriber */
      29181);

      var _SubjectSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_3) {
        _inherits(_SubjectSubscriber, _Subscriber__WEBPACK_3);

        var _super63 = _createSuper(_SubjectSubscriber);

        function _SubjectSubscriber(destination) {
          var _this212;

          _classCallCheck2(this, _SubjectSubscriber);

          _this212 = _super63.call(this, destination);
          _this212.destination = destination;
          return _this212;
        }

        return _SubjectSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber);

      var _Subject = /*#__PURE__*/function (_Observable__WEBPACK_) {
        _inherits(_Subject, _Observable__WEBPACK_);

        var _super64 = _createSuper(_Subject);

        function _Subject() {
          var _this213;

          _classCallCheck2(this, _Subject);

          _this213 = _super64.call(this);
          _this213.observers = [];
          _this213.closed = false;
          _this213.isStopped = false;
          _this213.hasError = false;
          _this213.thrownError = null;
          return _this213;
        }

        _createClass2(_Subject, [{
          key: _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_2__.rxSubscriber,
          value: function value() {
            return new _SubjectSubscriber(this);
          }
        }, {
          key: "lift",
          value: function lift(operator) {
            var subject = new _AnonymousSubject(this, this);
            subject.operator = operator;
            return subject;
          }
        }, {
          key: "next",
          value: function next(value) {
            if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__.ObjectUnsubscribedError();
            }

            if (!this.isStopped) {
              var observers = this.observers;
              var len = observers.length;
              var copy = observers.slice();

              for (var i = 0; i < len; i++) {
                copy[i].next(value);
              }
            }
          }
        }, {
          key: "error",
          value: function error(err) {
            if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__.ObjectUnsubscribedError();
            }

            this.hasError = true;
            this.thrownError = err;
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();

            for (var i = 0; i < len; i++) {
              copy[i].error(err);
            }

            this.observers.length = 0;
          }
        }, {
          key: "complete",
          value: function complete() {
            if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__.ObjectUnsubscribedError();
            }

            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();

            for (var i = 0; i < len; i++) {
              copy[i].complete();
            }

            this.observers.length = 0;
          }
        }, {
          key: "unsubscribe",
          value: function unsubscribe() {
            this.isStopped = true;
            this.closed = true;
            this.observers = null;
          }
        }, {
          key: "_trySubscribe",
          value: function _trySubscribe(subscriber) {
            if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__.ObjectUnsubscribedError();
            } else {
              return _get(_getPrototypeOf(_Subject.prototype), "_trySubscribe", this).call(this, subscriber);
            }
          }
        }, {
          key: "_subscribe",
          value: function _subscribe(subscriber) {
            if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__.ObjectUnsubscribedError();
            } else if (this.hasError) {
              subscriber.error(this.thrownError);
              return _Subscription__WEBPACK_IMPORTED_MODULE_4__.Subscription.EMPTY;
            } else if (this.isStopped) {
              subscriber.complete();
              return _Subscription__WEBPACK_IMPORTED_MODULE_4__.Subscription.EMPTY;
            } else {
              this.observers.push(subscriber);
              return new _SubjectSubscription__WEBPACK_IMPORTED_MODULE_5__.SubjectSubscription(this, subscriber);
            }
          }
        }, {
          key: "asObservable",
          value: function asObservable() {
            var observable = new _Observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
            observable.source = this;
            return observable;
          }
        }]);

        return _Subject;
      }(_Observable__WEBPACK_IMPORTED_MODULE_1__.Observable);

      _Subject.create = function (destination, source) {
        return new _AnonymousSubject(destination, source);
      };

      var _AnonymousSubject = /*#__PURE__*/function (_Subject2) {
        _inherits(_AnonymousSubject, _Subject2);

        var _super65 = _createSuper(_AnonymousSubject);

        function _AnonymousSubject(destination, source) {
          var _this214;

          _classCallCheck2(this, _AnonymousSubject);

          _this214 = _super65.call(this);
          _this214.destination = destination;
          _this214.source = source;
          return _this214;
        }

        _createClass2(_AnonymousSubject, [{
          key: "next",
          value: function next(value) {
            var destination = this.destination;

            if (destination && destination.next) {
              destination.next(value);
            }
          }
        }, {
          key: "error",
          value: function error(err) {
            var destination = this.destination;

            if (destination && destination.error) {
              this.destination.error(err);
            }
          }
        }, {
          key: "complete",
          value: function complete() {
            var destination = this.destination;

            if (destination && destination.complete) {
              this.destination.complete();
            }
          }
        }, {
          key: "_subscribe",
          value: function _subscribe(subscriber) {
            var source = this.source;

            if (source) {
              return this.source.subscribe(subscriber);
            } else {
              return _Subscription__WEBPACK_IMPORTED_MODULE_4__.Subscription.EMPTY;
            }
          }
        }]);

        return _AnonymousSubject;
      }(_Subject); //# sourceMappingURL=Subject.js.map

      /***/

    },

    /***/
    78858:
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/SubjectSubscription.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "SubjectSubscription": function SubjectSubscription() {
          return (
            /* binding */
            _SubjectSubscription
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./Subscription */
      10826);

      var _SubjectSubscription = /*#__PURE__*/function (_Subscription__WEBPAC) {
        _inherits(_SubjectSubscription, _Subscription__WEBPAC);

        var _super66 = _createSuper(_SubjectSubscription);

        function _SubjectSubscription(subject, subscriber) {
          var _this215;

          _classCallCheck2(this, _SubjectSubscription);

          _this215 = _super66.call(this);
          _this215.subject = subject;
          _this215.subscriber = subscriber;
          _this215.closed = false;
          return _this215;
        }

        _createClass2(_SubjectSubscription, [{
          key: "unsubscribe",
          value: function unsubscribe() {
            if (this.closed) {
              return;
            }

            this.closed = true;
            var subject = this.subject;
            var observers = subject.observers;
            this.subject = null;

            if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
              return;
            }

            var subscriberIndex = observers.indexOf(this.subscriber);

            if (subscriberIndex !== -1) {
              observers.splice(subscriberIndex, 1);
            }
          }
        }]);

        return _SubjectSubscription;
      }(_Subscription__WEBPACK_IMPORTED_MODULE_0__.Subscription); //# sourceMappingURL=SubjectSubscription.js.map

      /***/

    },

    /***/
    77393:
    /*!***********************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/Subscriber.js ***!
      \***********************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "Subscriber": function Subscriber() {
          return (
            /* binding */
            _Subscriber
          );
        },

        /* harmony export */
        "SafeSubscriber": function SafeSubscriber() {
          return (
            /* binding */
            _SafeSubscriber
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _util_isFunction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./util/isFunction */
      69105);
      /* harmony import */


      var _Observer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./Observer */
      46490);
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./Subscription */
      10826);
      /* harmony import */


      var _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../internal/symbol/rxSubscriber */
      29181);
      /* harmony import */


      var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./config */
      82494);
      /* harmony import */


      var _util_hostReportError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./util/hostReportError */
      54449);

      var _Subscriber = /*#__PURE__*/function (_Subscription__WEBPAC2) {
        _inherits(_Subscriber, _Subscription__WEBPAC2);

        var _super67 = _createSuper(_Subscriber);

        function _Subscriber(destinationOrNext, error, complete) {
          var _this216;

          _classCallCheck2(this, _Subscriber);

          _this216 = _super67.call(this);
          _this216.syncErrorValue = null;
          _this216.syncErrorThrown = false;
          _this216.syncErrorThrowable = false;
          _this216.isStopped = false;

          switch (arguments.length) {
            case 0:
              _this216.destination = _Observer__WEBPACK_IMPORTED_MODULE_1__.empty;
              break;

            case 1:
              if (!destinationOrNext) {
                _this216.destination = _Observer__WEBPACK_IMPORTED_MODULE_1__.empty;
                break;
              }

              if (typeof destinationOrNext === 'object') {
                if (destinationOrNext instanceof _Subscriber) {
                  _this216.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                  _this216.destination = destinationOrNext;
                  destinationOrNext.add(_assertThisInitialized(_this216));
                } else {
                  _this216.syncErrorThrowable = true;
                  _this216.destination = new _SafeSubscriber(_assertThisInitialized(_this216), destinationOrNext);
                }

                break;
              }

            default:
              _this216.syncErrorThrowable = true;
              _this216.destination = new _SafeSubscriber(_assertThisInitialized(_this216), destinationOrNext, error, complete);
              break;
          }

          return _this216;
        }

        _createClass2(_Subscriber, [{
          key: _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_2__.rxSubscriber,
          value: function value() {
            return this;
          }
        }, {
          key: "next",
          value: function next(value) {
            if (!this.isStopped) {
              this._next(value);
            }
          }
        }, {
          key: "error",
          value: function error(err) {
            if (!this.isStopped) {
              this.isStopped = true;

              this._error(err);
            }
          }
        }, {
          key: "complete",
          value: function complete() {
            if (!this.isStopped) {
              this.isStopped = true;

              this._complete();
            }
          }
        }, {
          key: "unsubscribe",
          value: function unsubscribe() {
            if (this.closed) {
              return;
            }

            this.isStopped = true;

            _get(_getPrototypeOf(_Subscriber.prototype), "unsubscribe", this).call(this);
          }
        }, {
          key: "_next",
          value: function _next(value) {
            this.destination.next(value);
          }
        }, {
          key: "_error",
          value: function _error(err) {
            this.destination.error(err);
            this.unsubscribe();
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.destination.complete();
            this.unsubscribe();
          }
        }, {
          key: "_unsubscribeAndRecycle",
          value: function _unsubscribeAndRecycle() {
            var _parentOrParents = this._parentOrParents;
            this._parentOrParents = null;
            this.unsubscribe();
            this.closed = false;
            this.isStopped = false;
            this._parentOrParents = _parentOrParents;
            return this;
          }
        }], [{
          key: "create",
          value: function create(next, error, complete) {
            var subscriber = new _Subscriber(next, error, complete);
            subscriber.syncErrorThrowable = false;
            return subscriber;
          }
        }]);

        return _Subscriber;
      }(_Subscription__WEBPACK_IMPORTED_MODULE_0__.Subscription);

      var _SafeSubscriber = /*#__PURE__*/function (_Subscriber2) {
        _inherits(_SafeSubscriber, _Subscriber2);

        var _super68 = _createSuper(_SafeSubscriber);

        function _SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
          var _this217;

          _classCallCheck2(this, _SafeSubscriber);

          _this217 = _super68.call(this);
          _this217._parentSubscriber = _parentSubscriber;
          var next;

          var context = _assertThisInitialized(_this217);

          if ((0, _util_isFunction__WEBPACK_IMPORTED_MODULE_3__.isFunction)(observerOrNext)) {
            next = observerOrNext;
          } else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;

            if (observerOrNext !== _Observer__WEBPACK_IMPORTED_MODULE_1__.empty) {
              context = Object.create(observerOrNext);

              if ((0, _util_isFunction__WEBPACK_IMPORTED_MODULE_3__.isFunction)(context.unsubscribe)) {
                _this217.add(context.unsubscribe.bind(context));
              }

              context.unsubscribe = _this217.unsubscribe.bind(_assertThisInitialized(_this217));
            }
          }

          _this217._context = context;
          _this217._next = next;
          _this217._error = error;
          _this217._complete = complete;
          return _this217;
        }

        _createClass2(_SafeSubscriber, [{
          key: "next",
          value: function next(value) {
            if (!this.isStopped && this._next) {
              var _parentSubscriber = this._parentSubscriber;

              if (!_config__WEBPACK_IMPORTED_MODULE_4__.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
              } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
              }
            }
          }
        }, {
          key: "error",
          value: function error(err) {
            if (!this.isStopped) {
              var _parentSubscriber = this._parentSubscriber;
              var useDeprecatedSynchronousErrorHandling = _config__WEBPACK_IMPORTED_MODULE_4__.config.useDeprecatedSynchronousErrorHandling;

              if (this._error) {
                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                  this.__tryOrUnsub(this._error, err);

                  this.unsubscribe();
                } else {
                  this.__tryOrSetError(_parentSubscriber, this._error, err);

                  this.unsubscribe();
                }
              } else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();

                if (useDeprecatedSynchronousErrorHandling) {
                  throw err;
                }

                (0, _util_hostReportError__WEBPACK_IMPORTED_MODULE_5__.hostReportError)(err);
              } else {
                if (useDeprecatedSynchronousErrorHandling) {
                  _parentSubscriber.syncErrorValue = err;
                  _parentSubscriber.syncErrorThrown = true;
                } else {
                  (0, _util_hostReportError__WEBPACK_IMPORTED_MODULE_5__.hostReportError)(err);
                }

                this.unsubscribe();
              }
            }
          }
        }, {
          key: "complete",
          value: function complete() {
            var _this218 = this;

            if (!this.isStopped) {
              var _parentSubscriber = this._parentSubscriber;

              if (this._complete) {
                var wrappedComplete = function wrappedComplete() {
                  return _this218._complete.call(_this218._context);
                };

                if (!_config__WEBPACK_IMPORTED_MODULE_4__.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                  this.__tryOrUnsub(wrappedComplete);

                  this.unsubscribe();
                } else {
                  this.__tryOrSetError(_parentSubscriber, wrappedComplete);

                  this.unsubscribe();
                }
              } else {
                this.unsubscribe();
              }
            }
          }
        }, {
          key: "__tryOrUnsub",
          value: function __tryOrUnsub(fn, value) {
            try {
              fn.call(this._context, value);
            } catch (err) {
              this.unsubscribe();

              if (_config__WEBPACK_IMPORTED_MODULE_4__.config.useDeprecatedSynchronousErrorHandling) {
                throw err;
              } else {
                (0, _util_hostReportError__WEBPACK_IMPORTED_MODULE_5__.hostReportError)(err);
              }
            }
          }
        }, {
          key: "__tryOrSetError",
          value: function __tryOrSetError(parent, fn, value) {
            if (!_config__WEBPACK_IMPORTED_MODULE_4__.config.useDeprecatedSynchronousErrorHandling) {
              throw new Error('bad call');
            }

            try {
              fn.call(this._context, value);
            } catch (err) {
              if (_config__WEBPACK_IMPORTED_MODULE_4__.config.useDeprecatedSynchronousErrorHandling) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
              } else {
                (0, _util_hostReportError__WEBPACK_IMPORTED_MODULE_5__.hostReportError)(err);
                return true;
              }
            }

            return false;
          }
        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            var _parentSubscriber = this._parentSubscriber;
            this._context = null;
            this._parentSubscriber = null;

            _parentSubscriber.unsubscribe();
          }
        }]);

        return _SafeSubscriber;
      }(_Subscriber); //# sourceMappingURL=Subscriber.js.map

      /***/

    },

    /***/
    10826:
    /*!*************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/Subscription.js ***!
      \*************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "Subscription": function Subscription() {
          return (
            /* binding */
            _Subscription
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _util_isArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./util/isArray */
      59796);
      /* harmony import */


      var _util_isObject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./util/isObject */
      81555);
      /* harmony import */


      var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./util/isFunction */
      69105);
      /* harmony import */


      var _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./util/UnsubscriptionError */
      57744);

      var _Subscription = /*#__PURE__*/function () {
        function _Subscription(unsubscribe) {
          _classCallCheck2(this, _Subscription);

          this.closed = false;
          this._parentOrParents = null;
          this._subscriptions = null;

          if (unsubscribe) {
            this._ctorUnsubscribe = true;
            this._unsubscribe = unsubscribe;
          }
        }

        _createClass2(_Subscription, [{
          key: "unsubscribe",
          value: function unsubscribe() {
            var errors;

            if (this.closed) {
              return;
            }

            var _parentOrParents = this._parentOrParents,
                _ctorUnsubscribe = this._ctorUnsubscribe,
                _unsubscribe = this._unsubscribe,
                _subscriptions = this._subscriptions;
            this.closed = true;
            this._parentOrParents = null;
            this._subscriptions = null;

            if (_parentOrParents instanceof _Subscription) {
              _parentOrParents.remove(this);
            } else if (_parentOrParents !== null) {
              for (var index = 0; index < _parentOrParents.length; ++index) {
                var parent = _parentOrParents[index];
                parent.remove(this);
              }
            }

            if ((0, _util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(_unsubscribe)) {
              if (_ctorUnsubscribe) {
                this._unsubscribe = undefined;
              }

              try {
                _unsubscribe.call(this);
              } catch (e) {
                errors = e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__.UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
              }
            }

            if ((0, _util_isArray__WEBPACK_IMPORTED_MODULE_2__.isArray)(_subscriptions)) {
              var _index6 = -1;

              var len = _subscriptions.length;

              while (++_index6 < len) {
                var sub = _subscriptions[_index6];

                if ((0, _util_isObject__WEBPACK_IMPORTED_MODULE_3__.isObject)(sub)) {
                  try {
                    sub.unsubscribe();
                  } catch (e) {
                    errors = errors || [];

                    if (e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__.UnsubscriptionError) {
                      errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
                    } else {
                      errors.push(e);
                    }
                  }
                }
              }
            }

            if (errors) {
              throw new _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__.UnsubscriptionError(errors);
            }
          }
        }, {
          key: "add",
          value: function add(teardown) {
            var subscription = teardown;

            if (!teardown) {
              return _Subscription.EMPTY;
            }

            switch (typeof teardown) {
              case 'function':
                subscription = new _Subscription(teardown);

              case 'object':
                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
                  return subscription;
                } else if (this.closed) {
                  subscription.unsubscribe();
                  return subscription;
                } else if (!(subscription instanceof _Subscription)) {
                  var tmp = subscription;
                  subscription = new _Subscription();
                  subscription._subscriptions = [tmp];
                }

                break;

              default:
                {
                  throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
                }
            }

            var _subscription = subscription,
                _parentOrParents = _subscription._parentOrParents;

            if (_parentOrParents === null) {
              subscription._parentOrParents = this;
            } else if (_parentOrParents instanceof _Subscription) {
              if (_parentOrParents === this) {
                return subscription;
              }

              subscription._parentOrParents = [_parentOrParents, this];
            } else if (_parentOrParents.indexOf(this) === -1) {
              _parentOrParents.push(this);
            } else {
              return subscription;
            }

            var subscriptions = this._subscriptions;

            if (subscriptions === null) {
              this._subscriptions = [subscription];
            } else {
              subscriptions.push(subscription);
            }

            return subscription;
          }
        }, {
          key: "remove",
          value: function remove(subscription) {
            var subscriptions = this._subscriptions;

            if (subscriptions) {
              var subscriptionIndex = subscriptions.indexOf(subscription);

              if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
              }
            }
          }
        }]);

        return _Subscription;
      }();

      _Subscription.EMPTY = function (empty) {
        empty.closed = true;
        return empty;
      }(new _Subscription());

      function flattenUnsubscriptionErrors(errors) {
        return errors.reduce(function (errs, err) {
          return errs.concat(err instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__.UnsubscriptionError ? err.errors : err);
        }, []);
      } //# sourceMappingURL=Subscription.js.map

      /***/

    },

    /***/
    82494:
    /*!*******************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/config.js ***!
      \*******************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "config": function config() {
          return (
            /* binding */
            _config2
          );
        }
        /* harmony export */

      });

      var _enable_super_gross_mode_that_will_cause_bad_things = false;
      var _config2 = {
        Promise: undefined,

        set useDeprecatedSynchronousErrorHandling(value) {
          if (value) {
            var error = new Error();
            console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
          } else if (_enable_super_gross_mode_that_will_cause_bad_things) {
            console.log('RxJS: Back to a better error behavior. Thank you. <3');
          }

          _enable_super_gross_mode_that_will_cause_bad_things = value;
        },

        get useDeprecatedSynchronousErrorHandling() {
          return _enable_super_gross_mode_that_will_cause_bad_things;
        }

      }; //# sourceMappingURL=config.js.map

      /***/
    },

    /***/
    85345:
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/innerSubscribe.js ***!
      \***************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "SimpleInnerSubscriber": function SimpleInnerSubscriber() {
          return (
            /* binding */
            _SimpleInnerSubscriber
          );
        },

        /* harmony export */
        "ComplexInnerSubscriber": function ComplexInnerSubscriber() {
          return (
            /* binding */
            _ComplexInnerSubscriber
          );
        },

        /* harmony export */
        "SimpleOuterSubscriber": function SimpleOuterSubscriber() {
          return (
            /* binding */
            _SimpleOuterSubscriber
          );
        },

        /* harmony export */
        "ComplexOuterSubscriber": function ComplexOuterSubscriber() {
          return (
            /* binding */
            _ComplexOuterSubscriber
          );
        },

        /* harmony export */
        "innerSubscribe": function innerSubscribe() {
          return (
            /* binding */
            _innerSubscribe
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./Subscriber */
      77393);
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./Observable */
      69165);
      /* harmony import */


      var _util_subscribeTo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./util/subscribeTo */
      86847);

      var _SimpleInnerSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_4) {
        _inherits(_SimpleInnerSubscriber, _Subscriber__WEBPACK_4);

        var _super69 = _createSuper(_SimpleInnerSubscriber);

        function _SimpleInnerSubscriber(parent) {
          var _this219;

          _classCallCheck2(this, _SimpleInnerSubscriber);

          _this219 = _super69.call(this);
          _this219.parent = parent;
          return _this219;
        }

        _createClass2(_SimpleInnerSubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.parent.notifyNext(value);
          }
        }, {
          key: "_error",
          value: function _error(error) {
            this.parent.notifyError(error);
            this.unsubscribe();
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.parent.notifyComplete();
            this.unsubscribe();
          }
        }]);

        return _SimpleInnerSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber);

      var _ComplexInnerSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_5) {
        _inherits(_ComplexInnerSubscriber, _Subscriber__WEBPACK_5);

        var _super70 = _createSuper(_ComplexInnerSubscriber);

        function _ComplexInnerSubscriber(parent, outerValue, outerIndex) {
          var _this220;

          _classCallCheck2(this, _ComplexInnerSubscriber);

          _this220 = _super70.call(this);
          _this220.parent = parent;
          _this220.outerValue = outerValue;
          _this220.outerIndex = outerIndex;
          return _this220;
        }

        _createClass2(_ComplexInnerSubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);
          }
        }, {
          key: "_error",
          value: function _error(error) {
            this.parent.notifyError(error);
            this.unsubscribe();
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.parent.notifyComplete(this);
            this.unsubscribe();
          }
        }]);

        return _ComplexInnerSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber);

      var _SimpleOuterSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_6) {
        _inherits(_SimpleOuterSubscriber, _Subscriber__WEBPACK_6);

        var _super71 = _createSuper(_SimpleOuterSubscriber);

        function _SimpleOuterSubscriber() {
          _classCallCheck2(this, _SimpleOuterSubscriber);

          return _super71.apply(this, arguments);
        }

        _createClass2(_SimpleOuterSubscriber, [{
          key: "notifyNext",
          value: function notifyNext(innerValue) {
            this.destination.next(innerValue);
          }
        }, {
          key: "notifyError",
          value: function notifyError(err) {
            this.destination.error(err);
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            this.destination.complete();
          }
        }]);

        return _SimpleOuterSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber);

      var _ComplexOuterSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_7) {
        _inherits(_ComplexOuterSubscriber, _Subscriber__WEBPACK_7);

        var _super72 = _createSuper(_ComplexOuterSubscriber);

        function _ComplexOuterSubscriber() {
          _classCallCheck2(this, _ComplexOuterSubscriber);

          return _super72.apply(this, arguments);
        }

        _createClass2(_ComplexOuterSubscriber, [{
          key: "notifyNext",
          value: function notifyNext(_outerValue, innerValue, _outerIndex, _innerSub) {
            this.destination.next(innerValue);
          }
        }, {
          key: "notifyError",
          value: function notifyError(error) {
            this.destination.error(error);
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete(_innerSub) {
            this.destination.complete();
          }
        }]);

        return _ComplexOuterSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber);

      function _innerSubscribe(result, innerSubscriber) {
        if (innerSubscriber.closed) {
          return undefined;
        }

        if (result instanceof _Observable__WEBPACK_IMPORTED_MODULE_1__.Observable) {
          return result.subscribe(innerSubscriber);
        }

        return (0, _util_subscribeTo__WEBPACK_IMPORTED_MODULE_2__.subscribeTo)(result)(innerSubscriber);
      } //# sourceMappingURL=innerSubscribe.js.map

      /***/

    },

    /***/
    52441:
    /*!*********************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js ***!
      \*********************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ConnectableObservable": function ConnectableObservable() {
          return (
            /* binding */
            _ConnectableObservable
          );
        },

        /* harmony export */
        "connectableObservableDescriptor": function connectableObservableDescriptor() {
          return (
            /* binding */
            _connectableObservableDescriptor
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../Subject */
      79765);
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      69165);
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../Subscriber */
      77393);
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Subscription */
      10826);
      /* harmony import */


      var _operators_refCount__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../operators/refCount */
      51307);

      var _ConnectableObservable = /*#__PURE__*/function (_Observable__WEBPACK_2) {
        _inherits(_ConnectableObservable, _Observable__WEBPACK_2);

        var _super73 = _createSuper(_ConnectableObservable);

        function _ConnectableObservable(source, subjectFactory) {
          var _this221;

          _classCallCheck2(this, _ConnectableObservable);

          _this221 = _super73.call(this);
          _this221.source = source;
          _this221.subjectFactory = subjectFactory;
          _this221._refCount = 0;
          _this221._isComplete = false;
          return _this221;
        }

        _createClass2(_ConnectableObservable, [{
          key: "_subscribe",
          value: function _subscribe(subscriber) {
            return this.getSubject().subscribe(subscriber);
          }
        }, {
          key: "getSubject",
          value: function getSubject() {
            var subject = this._subject;

            if (!subject || subject.isStopped) {
              this._subject = this.subjectFactory();
            }

            return this._subject;
          }
        }, {
          key: "connect",
          value: function connect() {
            var connection = this._connection;

            if (!connection) {
              this._isComplete = false;
              connection = this._connection = new _Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription();
              connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));

              if (connection.closed) {
                this._connection = null;
                connection = _Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription.EMPTY;
              }
            }

            return connection;
          }
        }, {
          key: "refCount",
          value: function refCount() {
            return (0, _operators_refCount__WEBPACK_IMPORTED_MODULE_2__.refCount)()(this);
          }
        }]);

        return _ConnectableObservable;
      }(_Observable__WEBPACK_IMPORTED_MODULE_0__.Observable);

      var _connectableObservableDescriptor = function () {
        var connectableProto = _ConnectableObservable.prototype;
        return {
          operator: {
            value: null
          },
          _refCount: {
            value: 0,
            writable: true
          },
          _subject: {
            value: null,
            writable: true
          },
          _connection: {
            value: null,
            writable: true
          },
          _subscribe: {
            value: connectableProto._subscribe
          },
          _isComplete: {
            value: connectableProto._isComplete,
            writable: true
          },
          getSubject: {
            value: connectableProto.getSubject
          },
          connect: {
            value: connectableProto.connect
          },
          refCount: {
            value: connectableProto.refCount
          }
        };
      }();

      var ConnectableSubscriber = /*#__PURE__*/function (_Subject__WEBPACK_IMP3) {
        _inherits(ConnectableSubscriber, _Subject__WEBPACK_IMP3);

        var _super74 = _createSuper(ConnectableSubscriber);

        function ConnectableSubscriber(destination, connectable) {
          var _this222;

          _classCallCheck2(this, ConnectableSubscriber);

          _this222 = _super74.call(this, destination);
          _this222.connectable = connectable;
          return _this222;
        }

        _createClass2(ConnectableSubscriber, [{
          key: "_error",
          value: function _error(err) {
            this._unsubscribe();

            _get(_getPrototypeOf(ConnectableSubscriber.prototype), "_error", this).call(this, err);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.connectable._isComplete = true;

            this._unsubscribe();

            _get(_getPrototypeOf(ConnectableSubscriber.prototype), "_complete", this).call(this);
          }
        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            var connectable = this.connectable;

            if (connectable) {
              this.connectable = null;
              var connection = connectable._connection;
              connectable._refCount = 0;
              connectable._subject = null;
              connectable._connection = null;

              if (connection) {
                connection.unsubscribe();
              }
            }
          }
        }]);

        return ConnectableSubscriber;
      }(_Subject__WEBPACK_IMPORTED_MODULE_3__.SubjectSubscriber);

      var RefCountOperator = /*#__PURE__*/function () {
        function RefCountOperator(connectable) {
          _classCallCheck2(this, RefCountOperator);

          this.connectable = connectable;
        }

        _createClass2(RefCountOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            var connectable = this.connectable;
            connectable._refCount++;
            var refCounter = new RefCountSubscriber(subscriber, connectable);
            var subscription = source.subscribe(refCounter);

            if (!refCounter.closed) {
              refCounter.connection = connectable.connect();
            }

            return subscription;
          }
        }]);

        return RefCountOperator;
      }();

      var RefCountSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_8) {
        _inherits(RefCountSubscriber, _Subscriber__WEBPACK_8);

        var _super75 = _createSuper(RefCountSubscriber);

        function RefCountSubscriber(destination, connectable) {
          var _this223;

          _classCallCheck2(this, RefCountSubscriber);

          _this223 = _super75.call(this, destination);
          _this223.connectable = connectable;
          return _this223;
        }

        _createClass2(RefCountSubscriber, [{
          key: "_unsubscribe",
          value: function _unsubscribe() {
            var connectable = this.connectable;

            if (!connectable) {
              this.connection = null;
              return;
            }

            this.connectable = null;
            var refCount = connectable._refCount;

            if (refCount <= 0) {
              this.connection = null;
              return;
            }

            connectable._refCount = refCount - 1;

            if (refCount > 1) {
              this.connection = null;
              return;
            }

            var connection = this.connection;
            var sharedConnection = connectable._connection;
            this.connection = null;

            if (sharedConnection && (!connection || sharedConnection === connection)) {
              sharedConnection.unsubscribe();
            }
          }
        }]);

        return RefCountSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_4__.Subscriber); //# sourceMappingURL=ConnectableObservable.js.map

      /***/

    },

    /***/
    9112:
    /*!*************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/combineLatest.js ***!
      \*************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "combineLatest": function combineLatest() {
          return (
            /* binding */
            _combineLatest
          );
        },

        /* harmony export */
        "CombineLatestOperator": function CombineLatestOperator() {
          return (
            /* binding */
            _CombineLatestOperator
          );
        },

        /* harmony export */
        "CombineLatestSubscriber": function CombineLatestSubscriber() {
          return (
            /* binding */
            _CombineLatestSubscriber
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/isScheduler */
      54869);
      /* harmony import */


      var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/isArray */
      59796);
      /* harmony import */


      var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../OuterSubscriber */
      55197);
      /* harmony import */


      var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../util/subscribeToResult */
      75604);
      /* harmony import */


      var _fromArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./fromArray */
      56693);

      var NONE = {};

      function _combineLatest() {
        for (var _len21 = arguments.length, observables = new Array(_len21), _key22 = 0; _key22 < _len21; _key22++) {
          observables[_key22] = arguments[_key22];
        }

        var resultSelector = undefined;
        var scheduler = undefined;

        if ((0, _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__.isScheduler)(observables[observables.length - 1])) {
          scheduler = observables.pop();
        }

        if (typeof observables[observables.length - 1] === 'function') {
          resultSelector = observables.pop();
        }

        if (observables.length === 1 && (0, _util_isArray__WEBPACK_IMPORTED_MODULE_1__.isArray)(observables[0])) {
          observables = observables[0];
        }

        return (0, _fromArray__WEBPACK_IMPORTED_MODULE_2__.fromArray)(observables, scheduler).lift(new _CombineLatestOperator(resultSelector));
      }

      var _CombineLatestOperator = /*#__PURE__*/function () {
        function _CombineLatestOperator(resultSelector) {
          _classCallCheck2(this, _CombineLatestOperator);

          this.resultSelector = resultSelector;
        }

        _createClass2(_CombineLatestOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new _CombineLatestSubscriber(subscriber, this.resultSelector));
          }
        }]);

        return _CombineLatestOperator;
      }();

      var _CombineLatestSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB) {
        _inherits(_CombineLatestSubscriber, _OuterSubscriber__WEB);

        var _super76 = _createSuper(_CombineLatestSubscriber);

        function _CombineLatestSubscriber(destination, resultSelector) {
          var _this224;

          _classCallCheck2(this, _CombineLatestSubscriber);

          _this224 = _super76.call(this, destination);
          _this224.resultSelector = resultSelector;
          _this224.active = 0;
          _this224.values = [];
          _this224.observables = [];
          return _this224;
        }

        _createClass2(_CombineLatestSubscriber, [{
          key: "_next",
          value: function _next(observable) {
            this.values.push(NONE);
            this.observables.push(observable);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var observables = this.observables;
            var len = observables.length;

            if (len === 0) {
              this.destination.complete();
            } else {
              this.active = len;
              this.toRespond = len;

              for (var i = 0; i < len; i++) {
                var observable = observables[i];
                this.add((0, _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__.subscribeToResult)(this, observable, undefined, i));
              }
            }
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete(unused) {
            if ((this.active -= 1) === 0) {
              this.destination.complete();
            }
          }
        }, {
          key: "notifyNext",
          value: function notifyNext(_outerValue, innerValue, outerIndex) {
            var values = this.values;
            var oldVal = values[outerIndex];
            var toRespond = !this.toRespond ? 0 : oldVal === NONE ? --this.toRespond : this.toRespond;
            values[outerIndex] = innerValue;

            if (toRespond === 0) {
              if (this.resultSelector) {
                this._tryResultSelector(values);
              } else {
                this.destination.next(values.slice());
              }
            }
          }
        }, {
          key: "_tryResultSelector",
          value: function _tryResultSelector(values) {
            var result;

            try {
              result = this.resultSelector.apply(this, values);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            this.destination.next(result);
          }
        }]);

        return _CombineLatestSubscriber;
      }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_3__.OuterSubscriber); //# sourceMappingURL=combineLatest.js.map

      /***/

    },

    /***/
    29923:
    /*!******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/concat.js ***!
      \******************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "concat": function concat() {
          return (
            /* binding */
            _concat
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _of__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./of */
      25917);
      /* harmony import */


      var _operators_concatAll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../operators/concatAll */
      65766);

      function _concat() {
        return (0, _operators_concatAll__WEBPACK_IMPORTED_MODULE_0__.concatAll)()((0, _of__WEBPACK_IMPORTED_MODULE_1__.of).apply(void 0, arguments));
      } //# sourceMappingURL=concat.js.map

      /***/

    },

    /***/
    41439:
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/defer.js ***!
      \*****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "defer": function defer() {
          return (
            /* binding */
            _defer
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      69165);
      /* harmony import */


      var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./from */
      69412);
      /* harmony import */


      var _empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./empty */
      59193);

      function _defer(observableFactory) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {
          var input;

          try {
            input = observableFactory();
          } catch (err) {
            subscriber.error(err);
            return undefined;
          }

          var source = input ? (0, _from__WEBPACK_IMPORTED_MODULE_1__.from)(input) : (0, _empty__WEBPACK_IMPORTED_MODULE_2__.empty)();
          return source.subscribe(subscriber);
        });
      } //# sourceMappingURL=defer.js.map

      /***/

    },

    /***/
    59193:
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/empty.js ***!
      \*****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "EMPTY": function EMPTY() {
          return (
            /* binding */
            _EMPTY
          );
        },

        /* harmony export */
        "empty": function empty() {
          return (
            /* binding */
            _empty2
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      69165);

      var _EMPTY = new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {
        return subscriber.complete();
      });

      function _empty2(scheduler) {
        return scheduler ? emptyScheduled(scheduler) : _EMPTY;
      }

      function emptyScheduled(scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {
          return scheduler.schedule(function () {
            return subscriber.complete();
          });
        });
      } //# sourceMappingURL=empty.js.map

      /***/

    },

    /***/
    69412:
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/from.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "from": function from() {
          return (
            /* binding */
            _from
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      69165);
      /* harmony import */


      var _util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/subscribeTo */
      86847);
      /* harmony import */


      var _scheduled_scheduled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../scheduled/scheduled */
      83501);

      function _from(input, scheduler) {
        if (!scheduler) {
          if (input instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable) {
            return input;
          }

          return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable((0, _util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__.subscribeTo)(input));
        } else {
          return (0, _scheduled_scheduled__WEBPACK_IMPORTED_MODULE_2__.scheduled)(input, scheduler);
        }
      } //# sourceMappingURL=from.js.map

      /***/

    },

    /***/
    56693:
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/fromArray.js ***!
      \*********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "fromArray": function fromArray() {
          return (
            /* binding */
            _fromArray
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      69165);
      /* harmony import */


      var _util_subscribeToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/subscribeToArray */
      55015);
      /* harmony import */


      var _scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../scheduled/scheduleArray */
      94087);

      function _fromArray(input, scheduler) {
        if (!scheduler) {
          return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable((0, _util_subscribeToArray__WEBPACK_IMPORTED_MODULE_1__.subscribeToArray)(input));
        } else {
          return (0, _scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_2__.scheduleArray)(input, scheduler);
        }
      } //# sourceMappingURL=fromArray.js.map

      /***/

    },

    /***/
    66682:
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/merge.js ***!
      \*****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "merge": function merge() {
          return (
            /* binding */
            _merge
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Observable */
      69165);
      /* harmony import */


      var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/isScheduler */
      54869);
      /* harmony import */


      var _operators_mergeAll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../operators/mergeAll */
      63282);
      /* harmony import */


      var _fromArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./fromArray */
      56693);

      function _merge() {
        var concurrent = Number.POSITIVE_INFINITY;
        var scheduler = null;

        for (var _len22 = arguments.length, observables = new Array(_len22), _key23 = 0; _key23 < _len22; _key23++) {
          observables[_key23] = arguments[_key23];
        }

        var last = observables[observables.length - 1];

        if ((0, _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__.isScheduler)(last)) {
          scheduler = observables.pop();

          if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
            concurrent = observables.pop();
          }
        } else if (typeof last === 'number') {
          concurrent = observables.pop();
        }

        if (scheduler === null && observables.length === 1 && observables[0] instanceof _Observable__WEBPACK_IMPORTED_MODULE_1__.Observable) {
          return observables[0];
        }

        return (0, _operators_mergeAll__WEBPACK_IMPORTED_MODULE_2__.mergeAll)(concurrent)((0, _fromArray__WEBPACK_IMPORTED_MODULE_3__.fromArray)(observables, scheduler));
      } //# sourceMappingURL=merge.js.map

      /***/

    },

    /***/
    25917:
    /*!**************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/of.js ***!
      \**************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "of": function of() {
          return (
            /* binding */
            _of
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/isScheduler */
      54869);
      /* harmony import */


      var _fromArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./fromArray */
      56693);
      /* harmony import */


      var _scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../scheduled/scheduleArray */
      94087);

      function _of() {
        for (var _len23 = arguments.length, args = new Array(_len23), _key24 = 0; _key24 < _len23; _key24++) {
          args[_key24] = arguments[_key24];
        }

        var scheduler = args[args.length - 1];

        if ((0, _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__.isScheduler)(scheduler)) {
          args.pop();
          return (0, _scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_1__.scheduleArray)(args, scheduler);
        } else {
          return (0, _fromArray__WEBPACK_IMPORTED_MODULE_2__.fromArray)(args);
        }
      } //# sourceMappingURL=of.js.map

      /***/

    },

    /***/
    40205:
    /*!**********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/observable/throwError.js ***!
      \**********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "throwError": function throwError() {
          return (
            /* binding */
            _throwError2
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      69165);

      function _throwError2(error, scheduler) {
        if (!scheduler) {
          return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {
            return subscriber.error(error);
          });
        } else {
          return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {
            return scheduler.schedule(dispatch, 0, {
              error: error,
              subscriber: subscriber
            });
          });
        }
      }

      function dispatch(_ref10) {
        var error = _ref10.error,
            subscriber = _ref10.subscriber;
        subscriber.error(error);
      } //# sourceMappingURL=throwError.js.map

      /***/

    },

    /***/
    5304:
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/catchError.js ***!
      \*********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "catchError": function catchError() {
          return (
            /* binding */
            _catchError
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../innerSubscribe */
      85345);

      function _catchError(selector) {
        return function catchErrorOperatorFunction(source) {
          var operator = new CatchOperator(selector);
          var caught = source.lift(operator);
          return operator.caught = caught;
        };
      }

      var CatchOperator = /*#__PURE__*/function () {
        function CatchOperator(selector) {
          _classCallCheck2(this, CatchOperator);

          this.selector = selector;
        }

        _createClass2(CatchOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
          }
        }]);

        return CatchOperator;
      }();

      var CatchSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP) {
        _inherits(CatchSubscriber, _innerSubscribe__WEBP);

        var _super77 = _createSuper(CatchSubscriber);

        function CatchSubscriber(destination, selector, caught) {
          var _this225;

          _classCallCheck2(this, CatchSubscriber);

          _this225 = _super77.call(this, destination);
          _this225.selector = selector;
          _this225.caught = caught;
          return _this225;
        }

        _createClass2(CatchSubscriber, [{
          key: "error",
          value: function error(err) {
            if (!this.isStopped) {
              var result;

              try {
                result = this.selector(err, this.caught);
              } catch (err2) {
                _get(_getPrototypeOf(CatchSubscriber.prototype), "error", this).call(this, err2);

                return;
              }

              this._unsubscribeAndRecycle();

              var innerSubscriber = new _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__.SimpleInnerSubscriber(this);
              this.add(innerSubscriber);
              var innerSubscription = (0, _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__.innerSubscribe)(result, innerSubscriber);

              if (innerSubscription !== innerSubscriber) {
                this.add(innerSubscription);
              }
            }
          }
        }]);

        return CatchSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__.SimpleOuterSubscriber); //# sourceMappingURL=catchError.js.map

      /***/

    },

    /***/
    65766:
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/concatAll.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "concatAll": function concatAll() {
          return (
            /* binding */
            _concatAll
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _mergeAll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./mergeAll */
      63282);

      function _concatAll() {
        return (0, _mergeAll__WEBPACK_IMPORTED_MODULE_0__.mergeAll)(1);
      } //# sourceMappingURL=concatAll.js.map

      /***/

    },

    /***/
    94612:
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/concatMap.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "concatMap": function concatMap() {
          return (
            /* binding */
            _concatMap
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./mergeMap */
      19773);

      function _concatMap(project, resultSelector) {
        return (0, _mergeMap__WEBPACK_IMPORTED_MODULE_0__.mergeMap)(project, resultSelector, 1);
      } //# sourceMappingURL=concatMap.js.map

      /***/

    },

    /***/
    95242:
    /*!*************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js ***!
      \*************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "defaultIfEmpty": function defaultIfEmpty() {
          return (
            /* binding */
            _defaultIfEmpty
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      77393);

      function _defaultIfEmpty() {
        var defaultValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        return function (source) {
          return source.lift(new DefaultIfEmptyOperator(defaultValue));
        };
      }

      var DefaultIfEmptyOperator = /*#__PURE__*/function () {
        function DefaultIfEmptyOperator(defaultValue) {
          _classCallCheck2(this, DefaultIfEmptyOperator);

          this.defaultValue = defaultValue;
        }

        _createClass2(DefaultIfEmptyOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
          }
        }]);

        return DefaultIfEmptyOperator;
      }();

      var DefaultIfEmptySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_9) {
        _inherits(DefaultIfEmptySubscriber, _Subscriber__WEBPACK_9);

        var _super78 = _createSuper(DefaultIfEmptySubscriber);

        function DefaultIfEmptySubscriber(destination, defaultValue) {
          var _this226;

          _classCallCheck2(this, DefaultIfEmptySubscriber);

          _this226 = _super78.call(this, destination);
          _this226.defaultValue = defaultValue;
          _this226.isEmpty = true;
          return _this226;
        }

        _createClass2(DefaultIfEmptySubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.isEmpty = false;
            this.destination.next(value);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            if (this.isEmpty) {
              this.destination.next(this.defaultValue);
            }

            this.destination.complete();
          }
        }]);

        return DefaultIfEmptySubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber); //# sourceMappingURL=defaultIfEmpty.js.map

      /***/

    },

    /***/
    65792:
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/delay.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "delay": function delay() {
          return (
            /* binding */
            _delay2
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../scheduler/async */
      33637);
      /* harmony import */


      var _util_isDate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/isDate */
      39989);
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../Subscriber */
      77393);
      /* harmony import */


      var _Notification__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../Notification */
      23098);

      function _delay2(delay) {
        var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _scheduler_async__WEBPACK_IMPORTED_MODULE_0__.async;
        var absoluteDelay = (0, _util_isDate__WEBPACK_IMPORTED_MODULE_1__.isDate)(delay);
        var delayFor = absoluteDelay ? +delay - scheduler.now() : Math.abs(delay);
        return function (source) {
          return source.lift(new DelayOperator(delayFor, scheduler));
        };
      }

      var DelayOperator = /*#__PURE__*/function () {
        function DelayOperator(delay, scheduler) {
          _classCallCheck2(this, DelayOperator);

          this.delay = delay;
          this.scheduler = scheduler;
        }

        _createClass2(DelayOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
          }
        }]);

        return DelayOperator;
      }();

      var DelaySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_10) {
        _inherits(DelaySubscriber, _Subscriber__WEBPACK_10);

        var _super79 = _createSuper(DelaySubscriber);

        function DelaySubscriber(destination, delay, scheduler) {
          var _this227;

          _classCallCheck2(this, DelaySubscriber);

          _this227 = _super79.call(this, destination);
          _this227.delay = delay;
          _this227.scheduler = scheduler;
          _this227.queue = [];
          _this227.active = false;
          _this227.errored = false;
          return _this227;
        }

        _createClass2(DelaySubscriber, [{
          key: "_schedule",
          value: function _schedule(scheduler) {
            this.active = true;
            var destination = this.destination;
            destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
              source: this,
              destination: this.destination,
              scheduler: scheduler
            }));
          }
        }, {
          key: "scheduleNotification",
          value: function scheduleNotification(notification) {
            if (this.errored === true) {
              return;
            }

            var scheduler = this.scheduler;
            var message = new DelayMessage(scheduler.now() + this.delay, notification);
            this.queue.push(message);

            if (this.active === false) {
              this._schedule(scheduler);
            }
          }
        }, {
          key: "_next",
          value: function _next(value) {
            this.scheduleNotification(_Notification__WEBPACK_IMPORTED_MODULE_3__.Notification.createNext(value));
          }
        }, {
          key: "_error",
          value: function _error(err) {
            this.errored = true;
            this.queue = [];
            this.destination.error(err);
            this.unsubscribe();
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.scheduleNotification(_Notification__WEBPACK_IMPORTED_MODULE_3__.Notification.createComplete());
            this.unsubscribe();
          }
        }], [{
          key: "dispatch",
          value: function dispatch(state) {
            var source = state.source;
            var queue = source.queue;
            var scheduler = state.scheduler;
            var destination = state.destination;

            while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {
              queue.shift().notification.observe(destination);
            }

            if (queue.length > 0) {
              var delay = Math.max(0, queue[0].time - scheduler.now());
              this.schedule(state, delay);
            } else {
              this.unsubscribe();
              source.active = false;
            }
          }
        }]);

        return DelaySubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_2__.Subscriber);

      var DelayMessage = function DelayMessage(time, notification) {
        _classCallCheck2(this, DelayMessage);

        this.time = time;
        this.notification = notification;
      }; //# sourceMappingURL=delay.js.map

      /***/

    },

    /***/
    45435:
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/filter.js ***!
      \*****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "filter": function filter() {
          return (
            /* binding */
            _filter
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      77393);

      function _filter(predicate, thisArg) {
        return function filterOperatorFunction(source) {
          return source.lift(new FilterOperator(predicate, thisArg));
        };
      }

      var FilterOperator = /*#__PURE__*/function () {
        function FilterOperator(predicate, thisArg) {
          _classCallCheck2(this, FilterOperator);

          this.predicate = predicate;
          this.thisArg = thisArg;
        }

        _createClass2(FilterOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
          }
        }]);

        return FilterOperator;
      }();

      var FilterSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_11) {
        _inherits(FilterSubscriber, _Subscriber__WEBPACK_11);

        var _super80 = _createSuper(FilterSubscriber);

        function FilterSubscriber(destination, predicate, thisArg) {
          var _this228;

          _classCallCheck2(this, FilterSubscriber);

          _this228 = _super80.call(this, destination);
          _this228.predicate = predicate;
          _this228.thisArg = thisArg;
          _this228.count = 0;
          return _this228;
        }

        _createClass2(FilterSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var result;

            try {
              result = this.predicate.call(this.thisArg, value, this.count++);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            if (result) {
              this.destination.next(value);
            }
          }
        }]);

        return FilterSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber); //# sourceMappingURL=filter.js.map

      /***/

    },

    /***/
    68939:
    /*!*******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/finalize.js ***!
      \*******************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "finalize": function finalize() {
          return (
            /* binding */
            _finalize
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      77393);
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Subscription */
      10826);

      function _finalize(callback) {
        return function (source) {
          return source.lift(new FinallyOperator(callback));
        };
      }

      var FinallyOperator = /*#__PURE__*/function () {
        function FinallyOperator(callback) {
          _classCallCheck2(this, FinallyOperator);

          this.callback = callback;
        }

        _createClass2(FinallyOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new FinallySubscriber(subscriber, this.callback));
          }
        }]);

        return FinallyOperator;
      }();

      var FinallySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_12) {
        _inherits(FinallySubscriber, _Subscriber__WEBPACK_12);

        var _super81 = _createSuper(FinallySubscriber);

        function FinallySubscriber(destination, callback) {
          var _this229;

          _classCallCheck2(this, FinallySubscriber);

          _this229 = _super81.call(this, destination);

          _this229.add(new _Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription(callback));

          return _this229;
        }

        return FinallySubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber); //# sourceMappingURL=finalize.js.map

      /***/

    },

    /***/
    28049:
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/first.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "first": function first() {
          return (
            /* binding */
            _first
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _util_EmptyError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ../util/EmptyError */
      13410);
      /* harmony import */


      var _filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./filter */
      45435);
      /* harmony import */


      var _take__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./take */
      15257);
      /* harmony import */


      var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./defaultIfEmpty */
      95242);
      /* harmony import */


      var _throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./throwIfEmpty */
      44635);
      /* harmony import */


      var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/identity */
      54487);

      function _first(predicate, defaultValue) {
        var hasDefaultValue = arguments.length >= 2;
        return function (source) {
          return source.pipe(predicate ? (0, _filter__WEBPACK_IMPORTED_MODULE_0__.filter)(function (v, i) {
            return predicate(v, i, source);
          }) : _util_identity__WEBPACK_IMPORTED_MODULE_1__.identity, (0, _take__WEBPACK_IMPORTED_MODULE_2__.take)(1), hasDefaultValue ? (0, _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__.defaultIfEmpty)(defaultValue) : (0, _throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__.throwIfEmpty)(function () {
            return new _util_EmptyError__WEBPACK_IMPORTED_MODULE_5__.EmptyError();
          }));
        };
      } //# sourceMappingURL=first.js.map

      /***/

    },

    /***/
    12627:
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/last.js ***!
      \***************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "last": function last() {
          return (
            /* binding */
            _last
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _util_EmptyError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ../util/EmptyError */
      13410);
      /* harmony import */


      var _filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./filter */
      45435);
      /* harmony import */


      var _takeLast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./takeLast */
      548);
      /* harmony import */


      var _throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./throwIfEmpty */
      44635);
      /* harmony import */


      var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./defaultIfEmpty */
      95242);
      /* harmony import */


      var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/identity */
      54487);

      function _last(predicate, defaultValue) {
        var hasDefaultValue = arguments.length >= 2;
        return function (source) {
          return source.pipe(predicate ? (0, _filter__WEBPACK_IMPORTED_MODULE_0__.filter)(function (v, i) {
            return predicate(v, i, source);
          }) : _util_identity__WEBPACK_IMPORTED_MODULE_1__.identity, (0, _takeLast__WEBPACK_IMPORTED_MODULE_2__.takeLast)(1), hasDefaultValue ? (0, _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__.defaultIfEmpty)(defaultValue) : (0, _throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__.throwIfEmpty)(function () {
            return new _util_EmptyError__WEBPACK_IMPORTED_MODULE_5__.EmptyError();
          }));
        };
      } //# sourceMappingURL=last.js.map

      /***/

    },

    /***/
    88002:
    /*!**************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/map.js ***!
      \**************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "map": function map() {
          return (
            /* binding */
            _map
          );
        },

        /* harmony export */
        "MapOperator": function MapOperator() {
          return (
            /* binding */
            _MapOperator
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      77393);

      function _map(project, thisArg) {
        return function mapOperation(source) {
          if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
          }

          return source.lift(new _MapOperator(project, thisArg));
        };
      }

      var _MapOperator = /*#__PURE__*/function () {
        function _MapOperator(project, thisArg) {
          _classCallCheck2(this, _MapOperator);

          this.project = project;
          this.thisArg = thisArg;
        }

        _createClass2(_MapOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
          }
        }]);

        return _MapOperator;
      }();

      var MapSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_13) {
        _inherits(MapSubscriber, _Subscriber__WEBPACK_13);

        var _super82 = _createSuper(MapSubscriber);

        function MapSubscriber(destination, project, thisArg) {
          var _this230;

          _classCallCheck2(this, MapSubscriber);

          _this230 = _super82.call(this, destination);
          _this230.project = project;
          _this230.count = 0;
          _this230.thisArg = thisArg || _assertThisInitialized(_this230);
          return _this230;
        }

        _createClass2(MapSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var result;

            try {
              result = this.project.call(this.thisArg, value, this.count++);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            this.destination.next(result);
          }
        }]);

        return MapSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber); //# sourceMappingURL=map.js.map

      /***/

    },

    /***/
    63282:
    /*!*******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/mergeAll.js ***!
      \*******************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "mergeAll": function mergeAll() {
          return (
            /* binding */
            _mergeAll
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./mergeMap */
      19773);
      /* harmony import */


      var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/identity */
      54487);

      function _mergeAll() {
        var concurrent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.POSITIVE_INFINITY;
        return (0, _mergeMap__WEBPACK_IMPORTED_MODULE_0__.mergeMap)(_util_identity__WEBPACK_IMPORTED_MODULE_1__.identity, concurrent);
      } //# sourceMappingURL=mergeAll.js.map

      /***/

    },

    /***/
    19773:
    /*!*******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js ***!
      \*******************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "mergeMap": function mergeMap() {
          return (
            /* binding */
            _mergeMap
          );
        },

        /* harmony export */
        "MergeMapOperator": function MergeMapOperator() {
          return (
            /* binding */
            _MergeMapOperator
          );
        },

        /* harmony export */
        "MergeMapSubscriber": function MergeMapSubscriber() {
          return (
            /* binding */
            _MergeMapSubscriber
          );
        },

        /* harmony export */
        "flatMap": function flatMap() {
          return (
            /* binding */
            _flatMap
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./map */
      88002);
      /* harmony import */


      var _observable_from__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../observable/from */
      69412);
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../innerSubscribe */
      85345);

      function _mergeMap(project, resultSelector) {
        var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;

        if (typeof resultSelector === 'function') {
          return function (source) {
            return source.pipe(_mergeMap(function (a, i) {
              return (0, _observable_from__WEBPACK_IMPORTED_MODULE_0__.from)(project(a, i)).pipe((0, _map__WEBPACK_IMPORTED_MODULE_1__.map)(function (b, ii) {
                return resultSelector(a, b, i, ii);
              }));
            }, concurrent));
          };
        } else if (typeof resultSelector === 'number') {
          concurrent = resultSelector;
        }

        return function (source) {
          return source.lift(new _MergeMapOperator(project, concurrent));
        };
      }

      var _MergeMapOperator = /*#__PURE__*/function () {
        function _MergeMapOperator(project) {
          var concurrent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;

          _classCallCheck2(this, _MergeMapOperator);

          this.project = project;
          this.concurrent = concurrent;
        }

        _createClass2(_MergeMapOperator, [{
          key: "call",
          value: function call(observer, source) {
            return source.subscribe(new _MergeMapSubscriber(observer, this.project, this.concurrent));
          }
        }]);

        return _MergeMapOperator;
      }();

      var _MergeMapSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP2) {
        _inherits(_MergeMapSubscriber, _innerSubscribe__WEBP2);

        var _super83 = _createSuper(_MergeMapSubscriber);

        function _MergeMapSubscriber(destination, project) {
          var _this231;

          var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;

          _classCallCheck2(this, _MergeMapSubscriber);

          _this231 = _super83.call(this, destination);
          _this231.project = project;
          _this231.concurrent = concurrent;
          _this231.hasCompleted = false;
          _this231.buffer = [];
          _this231.active = 0;
          _this231.index = 0;
          return _this231;
        }

        _createClass2(_MergeMapSubscriber, [{
          key: "_next",
          value: function _next(value) {
            if (this.active < this.concurrent) {
              this._tryNext(value);
            } else {
              this.buffer.push(value);
            }
          }
        }, {
          key: "_tryNext",
          value: function _tryNext(value) {
            var result;
            var index = this.index++;

            try {
              result = this.project(value, index);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            this.active++;

            this._innerSub(result);
          }
        }, {
          key: "_innerSub",
          value: function _innerSub(ish) {
            var innerSubscriber = new _innerSubscribe__WEBPACK_IMPORTED_MODULE_2__.SimpleInnerSubscriber(this);
            var destination = this.destination;
            destination.add(innerSubscriber);
            var innerSubscription = (0, _innerSubscribe__WEBPACK_IMPORTED_MODULE_2__.innerSubscribe)(ish, innerSubscriber);

            if (innerSubscription !== innerSubscriber) {
              destination.add(innerSubscription);
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.hasCompleted = true;

            if (this.active === 0 && this.buffer.length === 0) {
              this.destination.complete();
            }

            this.unsubscribe();
          }
        }, {
          key: "notifyNext",
          value: function notifyNext(innerValue) {
            this.destination.next(innerValue);
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            var buffer = this.buffer;
            this.active--;

            if (buffer.length > 0) {
              this._next(buffer.shift());
            } else if (this.active === 0 && this.hasCompleted) {
              this.destination.complete();
            }
          }
        }]);

        return _MergeMapSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_2__.SimpleOuterSubscriber);

      var _flatMap = _mergeMap; //# sourceMappingURL=mergeMap.js.map

      /***/
    },

    /***/
    94458:
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/multicast.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "multicast": function multicast() {
          return (
            /* binding */
            _multicast
          );
        },

        /* harmony export */
        "MulticastOperator": function MulticastOperator() {
          return (
            /* binding */
            _MulticastOperator
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../observable/ConnectableObservable */
      52441);

      function _multicast(subjectOrSubjectFactory, selector) {
        return function multicastOperatorFunction(source) {
          var subjectFactory;

          if (typeof subjectOrSubjectFactory === 'function') {
            subjectFactory = subjectOrSubjectFactory;
          } else {
            subjectFactory = function subjectFactory() {
              return subjectOrSubjectFactory;
            };
          }

          if (typeof selector === 'function') {
            return source.lift(new _MulticastOperator(subjectFactory, selector));
          }

          var connectable = Object.create(source, _observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_0__.connectableObservableDescriptor);
          connectable.source = source;
          connectable.subjectFactory = subjectFactory;
          return connectable;
        };
      }

      var _MulticastOperator = /*#__PURE__*/function () {
        function _MulticastOperator(subjectFactory, selector) {
          _classCallCheck2(this, _MulticastOperator);

          this.subjectFactory = subjectFactory;
          this.selector = selector;
        }

        _createClass2(_MulticastOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            var selector = this.selector;
            var subject = this.subjectFactory();
            var subscription = selector(subject).subscribe(subscriber);
            subscription.add(source.subscribe(subject));
            return subscription;
          }
        }]);

        return _MulticastOperator;
      }(); //# sourceMappingURL=multicast.js.map

      /***/

    },

    /***/
    59746:
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/observeOn.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "observeOn": function observeOn() {
          return (
            /* binding */
            _observeOn
          );
        },

        /* harmony export */
        "ObserveOnOperator": function ObserveOnOperator() {
          return (
            /* binding */
            _ObserveOnOperator
          );
        },

        /* harmony export */
        "ObserveOnSubscriber": function ObserveOnSubscriber() {
          return (
            /* binding */
            _ObserveOnSubscriber
          );
        },

        /* harmony export */
        "ObserveOnMessage": function ObserveOnMessage() {
          return (
            /* binding */
            _ObserveOnMessage
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      77393);
      /* harmony import */


      var _Notification__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Notification */
      23098);

      function _observeOn(scheduler) {
        var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return function observeOnOperatorFunction(source) {
          return source.lift(new _ObserveOnOperator(scheduler, delay));
        };
      }

      var _ObserveOnOperator = /*#__PURE__*/function () {
        function _ObserveOnOperator(scheduler) {
          var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

          _classCallCheck2(this, _ObserveOnOperator);

          this.scheduler = scheduler;
          this.delay = delay;
        }

        _createClass2(_ObserveOnOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new _ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
          }
        }]);

        return _ObserveOnOperator;
      }();

      var _ObserveOnSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_14) {
        _inherits(_ObserveOnSubscriber, _Subscriber__WEBPACK_14);

        var _super84 = _createSuper(_ObserveOnSubscriber);

        function _ObserveOnSubscriber(destination, scheduler) {
          var _this232;

          var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

          _classCallCheck2(this, _ObserveOnSubscriber);

          _this232 = _super84.call(this, destination);
          _this232.scheduler = scheduler;
          _this232.delay = delay;
          return _this232;
        }

        _createClass2(_ObserveOnSubscriber, [{
          key: "scheduleMessage",
          value: function scheduleMessage(notification) {
            var destination = this.destination;
            destination.add(this.scheduler.schedule(_ObserveOnSubscriber.dispatch, this.delay, new _ObserveOnMessage(notification, this.destination)));
          }
        }, {
          key: "_next",
          value: function _next(value) {
            this.scheduleMessage(_Notification__WEBPACK_IMPORTED_MODULE_1__.Notification.createNext(value));
          }
        }, {
          key: "_error",
          value: function _error(err) {
            this.scheduleMessage(_Notification__WEBPACK_IMPORTED_MODULE_1__.Notification.createError(err));
            this.unsubscribe();
          }
        }, {
          key: "_complete",
          value: function _complete() {
            this.scheduleMessage(_Notification__WEBPACK_IMPORTED_MODULE_1__.Notification.createComplete());
            this.unsubscribe();
          }
        }], [{
          key: "dispatch",
          value: function dispatch(arg) {
            var notification = arg.notification,
                destination = arg.destination;
            notification.observe(destination);
            this.unsubscribe();
          }
        }]);

        return _ObserveOnSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber);

      var _ObserveOnMessage = function _ObserveOnMessage(notification, destination) {
        _classCallCheck2(this, _ObserveOnMessage);

        this.notification = notification;
        this.destination = destination;
      }; //# sourceMappingURL=observeOn.js.map

      /***/

    },

    /***/
    67130:
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/reduce.js ***!
      \*****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "reduce": function reduce() {
          return (
            /* binding */
            _reduce
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _scan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./scan */
      42145);
      /* harmony import */


      var _takeLast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./takeLast */
      548);
      /* harmony import */


      var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./defaultIfEmpty */
      95242);
      /* harmony import */


      var _util_pipe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/pipe */
      34022);

      function _reduce(accumulator, seed) {
        if (arguments.length >= 2) {
          return function reduceOperatorFunctionWithSeed(source) {
            return (0, _util_pipe__WEBPACK_IMPORTED_MODULE_0__.pipe)((0, _scan__WEBPACK_IMPORTED_MODULE_1__.scan)(accumulator, seed), (0, _takeLast__WEBPACK_IMPORTED_MODULE_2__.takeLast)(1), (0, _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__.defaultIfEmpty)(seed))(source);
          };
        }

        return function reduceOperatorFunction(source) {
          return (0, _util_pipe__WEBPACK_IMPORTED_MODULE_0__.pipe)((0, _scan__WEBPACK_IMPORTED_MODULE_1__.scan)(function (acc, value, index) {
            return accumulator(acc, value, index + 1);
          }), (0, _takeLast__WEBPACK_IMPORTED_MODULE_2__.takeLast)(1))(source);
        };
      } //# sourceMappingURL=reduce.js.map

      /***/

    },

    /***/
    51307:
    /*!*******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/refCount.js ***!
      \*******************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "refCount": function refCount() {
          return (
            /* binding */
            _refCount
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      77393);

      function _refCount() {
        return function refCountOperatorFunction(source) {
          return source.lift(new RefCountOperator(source));
        };
      }

      var RefCountOperator = /*#__PURE__*/function () {
        function RefCountOperator(connectable) {
          _classCallCheck2(this, RefCountOperator);

          this.connectable = connectable;
        }

        _createClass2(RefCountOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            var connectable = this.connectable;
            connectable._refCount++;
            var refCounter = new RefCountSubscriber(subscriber, connectable);
            var subscription = source.subscribe(refCounter);

            if (!refCounter.closed) {
              refCounter.connection = connectable.connect();
            }

            return subscription;
          }
        }]);

        return RefCountOperator;
      }();

      var RefCountSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_15) {
        _inherits(RefCountSubscriber, _Subscriber__WEBPACK_15);

        var _super85 = _createSuper(RefCountSubscriber);

        function RefCountSubscriber(destination, connectable) {
          var _this233;

          _classCallCheck2(this, RefCountSubscriber);

          _this233 = _super85.call(this, destination);
          _this233.connectable = connectable;
          return _this233;
        }

        _createClass2(RefCountSubscriber, [{
          key: "_unsubscribe",
          value: function _unsubscribe() {
            var connectable = this.connectable;

            if (!connectable) {
              this.connection = null;
              return;
            }

            this.connectable = null;
            var refCount = connectable._refCount;

            if (refCount <= 0) {
              this.connection = null;
              return;
            }

            connectable._refCount = refCount - 1;

            if (refCount > 1) {
              this.connection = null;
              return;
            }

            var connection = this.connection;
            var sharedConnection = connectable._connection;
            this.connection = null;

            if (sharedConnection && (!connection || sharedConnection === connection)) {
              sharedConnection.unsubscribe();
            }
          }
        }]);

        return RefCountSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber); //# sourceMappingURL=refCount.js.map

      /***/

    },

    /***/
    42145:
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/scan.js ***!
      \***************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "scan": function scan() {
          return (
            /* binding */
            _scan
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      77393);

      function _scan(accumulator, seed) {
        var hasSeed = false;

        if (arguments.length >= 2) {
          hasSeed = true;
        }

        return function scanOperatorFunction(source) {
          return source.lift(new ScanOperator(accumulator, seed, hasSeed));
        };
      }

      var ScanOperator = /*#__PURE__*/function () {
        function ScanOperator(accumulator, seed) {
          var hasSeed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

          _classCallCheck2(this, ScanOperator);

          this.accumulator = accumulator;
          this.seed = seed;
          this.hasSeed = hasSeed;
        }

        _createClass2(ScanOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
          }
        }]);

        return ScanOperator;
      }();

      var ScanSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_16) {
        _inherits(ScanSubscriber, _Subscriber__WEBPACK_16);

        var _super86 = _createSuper(ScanSubscriber);

        function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
          var _this234;

          _classCallCheck2(this, ScanSubscriber);

          _this234 = _super86.call(this, destination);
          _this234.accumulator = accumulator;
          _this234._seed = _seed;
          _this234.hasSeed = hasSeed;
          _this234.index = 0;
          return _this234;
        }

        _createClass2(ScanSubscriber, [{
          key: "seed",
          get: function get() {
            return this._seed;
          },
          set: function set(value) {
            this.hasSeed = true;
            this._seed = value;
          }
        }, {
          key: "_next",
          value: function _next(value) {
            if (!this.hasSeed) {
              this.seed = value;
              this.destination.next(value);
            } else {
              return this._tryNext(value);
            }
          }
        }, {
          key: "_tryNext",
          value: function _tryNext(value) {
            var index = this.index++;
            var result;

            try {
              result = this.accumulator(this.seed, value, index);
            } catch (err) {
              this.destination.error(err);
            }

            this.seed = result;
            this.destination.next(result);
          }
        }]);

        return ScanSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber); //# sourceMappingURL=scan.js.map

      /***/

    },

    /***/
    78345:
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/share.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "share": function share() {
          return (
            /* binding */
            _share
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _multicast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./multicast */
      94458);
      /* harmony import */


      var _refCount__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./refCount */
      51307);
      /* harmony import */


      var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subject */
      79765);

      function shareSubjectFactory() {
        return new _Subject__WEBPACK_IMPORTED_MODULE_0__.Subject();
      }

      function _share() {
        return function (source) {
          return (0, _refCount__WEBPACK_IMPORTED_MODULE_1__.refCount)()((0, _multicast__WEBPACK_IMPORTED_MODULE_2__.multicast)(shareSubjectFactory)(source));
        };
      } //# sourceMappingURL=share.js.map

      /***/

    },

    /***/
    13653:
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/skip.js ***!
      \***************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "skip": function skip() {
          return (
            /* binding */
            _skip
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      77393);

      function _skip(count) {
        return function (source) {
          return source.lift(new SkipOperator(count));
        };
      }

      var SkipOperator = /*#__PURE__*/function () {
        function SkipOperator(total) {
          _classCallCheck2(this, SkipOperator);

          this.total = total;
        }

        _createClass2(SkipOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new SkipSubscriber(subscriber, this.total));
          }
        }]);

        return SkipOperator;
      }();

      var SkipSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_17) {
        _inherits(SkipSubscriber, _Subscriber__WEBPACK_17);

        var _super87 = _createSuper(SkipSubscriber);

        function SkipSubscriber(destination, total) {
          var _this235;

          _classCallCheck2(this, SkipSubscriber);

          _this235 = _super87.call(this, destination);
          _this235.total = total;
          _this235.count = 0;
          return _this235;
        }

        _createClass2(SkipSubscriber, [{
          key: "_next",
          value: function _next(x) {
            if (++this.count > this.total) {
              this.destination.next(x);
            }
          }
        }]);

        return SkipSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber); //# sourceMappingURL=skip.js.map

      /***/

    },

    /***/
    39761:
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/startWith.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "startWith": function startWith() {
          return (
            /* binding */
            _startWith
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _observable_concat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../observable/concat */
      29923);
      /* harmony import */


      var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/isScheduler */
      54869);

      function _startWith() {
        for (var _len24 = arguments.length, array = new Array(_len24), _key25 = 0; _key25 < _len24; _key25++) {
          array[_key25] = arguments[_key25];
        }

        var scheduler = array[array.length - 1];

        if ((0, _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__.isScheduler)(scheduler)) {
          array.pop();
          return function (source) {
            return (0, _observable_concat__WEBPACK_IMPORTED_MODULE_1__.concat)(array, source, scheduler);
          };
        } else {
          return function (source) {
            return (0, _observable_concat__WEBPACK_IMPORTED_MODULE_1__.concat)(array, source);
          };
        }
      } //# sourceMappingURL=startWith.js.map

      /***/

    },

    /***/
    43190:
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/switchMap.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "switchMap": function switchMap() {
          return (
            /* binding */
            _switchMap
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./map */
      88002);
      /* harmony import */


      var _observable_from__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../observable/from */
      69412);
      /* harmony import */


      var _innerSubscribe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../innerSubscribe */
      85345);

      function _switchMap(project, resultSelector) {
        if (typeof resultSelector === 'function') {
          return function (source) {
            return source.pipe(_switchMap(function (a, i) {
              return (0, _observable_from__WEBPACK_IMPORTED_MODULE_0__.from)(project(a, i)).pipe((0, _map__WEBPACK_IMPORTED_MODULE_1__.map)(function (b, ii) {
                return resultSelector(a, b, i, ii);
              }));
            }));
          };
        }

        return function (source) {
          return source.lift(new SwitchMapOperator(project));
        };
      }

      var SwitchMapOperator = /*#__PURE__*/function () {
        function SwitchMapOperator(project) {
          _classCallCheck2(this, SwitchMapOperator);

          this.project = project;
        }

        _createClass2(SwitchMapOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
          }
        }]);

        return SwitchMapOperator;
      }();

      var SwitchMapSubscriber = /*#__PURE__*/function (_innerSubscribe__WEBP3) {
        _inherits(SwitchMapSubscriber, _innerSubscribe__WEBP3);

        var _super88 = _createSuper(SwitchMapSubscriber);

        function SwitchMapSubscriber(destination, project) {
          var _this236;

          _classCallCheck2(this, SwitchMapSubscriber);

          _this236 = _super88.call(this, destination);
          _this236.project = project;
          _this236.index = 0;
          return _this236;
        }

        _createClass2(SwitchMapSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var result;
            var index = this.index++;

            try {
              result = this.project(value, index);
            } catch (error) {
              this.destination.error(error);
              return;
            }

            this._innerSub(result);
          }
        }, {
          key: "_innerSub",
          value: function _innerSub(result) {
            var innerSubscription = this.innerSubscription;

            if (innerSubscription) {
              innerSubscription.unsubscribe();
            }

            var innerSubscriber = new _innerSubscribe__WEBPACK_IMPORTED_MODULE_2__.SimpleInnerSubscriber(this);
            var destination = this.destination;
            destination.add(innerSubscriber);
            this.innerSubscription = (0, _innerSubscribe__WEBPACK_IMPORTED_MODULE_2__.innerSubscribe)(result, innerSubscriber);

            if (this.innerSubscription !== innerSubscriber) {
              destination.add(this.innerSubscription);
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var innerSubscription = this.innerSubscription;

            if (!innerSubscription || innerSubscription.closed) {
              _get(_getPrototypeOf(SwitchMapSubscriber.prototype), "_complete", this).call(this);
            }

            this.unsubscribe();
          }
        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            this.innerSubscription = undefined;
          }
        }, {
          key: "notifyComplete",
          value: function notifyComplete() {
            this.innerSubscription = undefined;

            if (this.isStopped) {
              _get(_getPrototypeOf(SwitchMapSubscriber.prototype), "_complete", this).call(this);
            }
          }
        }, {
          key: "notifyNext",
          value: function notifyNext(innerValue) {
            this.destination.next(innerValue);
          }
        }]);

        return SwitchMapSubscriber;
      }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_2__.SimpleOuterSubscriber); //# sourceMappingURL=switchMap.js.map

      /***/

    },

    /***/
    15257:
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/take.js ***!
      \***************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "take": function take() {
          return (
            /* binding */
            _take
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../Subscriber */
      77393);
      /* harmony import */


      var _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/ArgumentOutOfRangeError */
      7108);
      /* harmony import */


      var _observable_empty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../observable/empty */
      59193);

      function _take(count) {
        return function (source) {
          if (count === 0) {
            return (0, _observable_empty__WEBPACK_IMPORTED_MODULE_0__.empty)();
          } else {
            return source.lift(new TakeOperator(count));
          }
        };
      }

      var TakeOperator = /*#__PURE__*/function () {
        function TakeOperator(total) {
          _classCallCheck2(this, TakeOperator);

          this.total = total;

          if (this.total < 0) {
            throw new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__.ArgumentOutOfRangeError();
          }
        }

        _createClass2(TakeOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new TakeSubscriber(subscriber, this.total));
          }
        }]);

        return TakeOperator;
      }();

      var TakeSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_18) {
        _inherits(TakeSubscriber, _Subscriber__WEBPACK_18);

        var _super89 = _createSuper(TakeSubscriber);

        function TakeSubscriber(destination, total) {
          var _this237;

          _classCallCheck2(this, TakeSubscriber);

          _this237 = _super89.call(this, destination);
          _this237.total = total;
          _this237.count = 0;
          return _this237;
        }

        _createClass2(TakeSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var total = this.total;
            var count = ++this.count;

            if (count <= total) {
              this.destination.next(value);

              if (count === total) {
                this.destination.complete();
                this.unsubscribe();
              }
            }
          }
        }]);

        return TakeSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_2__.Subscriber); //# sourceMappingURL=take.js.map

      /***/

    },

    /***/
    548:
    /*!*******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/takeLast.js ***!
      \*******************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "takeLast": function takeLast() {
          return (
            /* binding */
            _takeLast
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../Subscriber */
      77393);
      /* harmony import */


      var _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/ArgumentOutOfRangeError */
      7108);
      /* harmony import */


      var _observable_empty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../observable/empty */
      59193);

      function _takeLast(count) {
        return function takeLastOperatorFunction(source) {
          if (count === 0) {
            return (0, _observable_empty__WEBPACK_IMPORTED_MODULE_0__.empty)();
          } else {
            return source.lift(new TakeLastOperator(count));
          }
        };
      }

      var TakeLastOperator = /*#__PURE__*/function () {
        function TakeLastOperator(total) {
          _classCallCheck2(this, TakeLastOperator);

          this.total = total;

          if (this.total < 0) {
            throw new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__.ArgumentOutOfRangeError();
          }
        }

        _createClass2(TakeLastOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
          }
        }]);

        return TakeLastOperator;
      }();

      var TakeLastSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_19) {
        _inherits(TakeLastSubscriber, _Subscriber__WEBPACK_19);

        var _super90 = _createSuper(TakeLastSubscriber);

        function TakeLastSubscriber(destination, total) {
          var _this238;

          _classCallCheck2(this, TakeLastSubscriber);

          _this238 = _super90.call(this, destination);
          _this238.total = total;
          _this238.ring = new Array();
          _this238.count = 0;
          return _this238;
        }

        _createClass2(TakeLastSubscriber, [{
          key: "_next",
          value: function _next(value) {
            var ring = this.ring;
            var total = this.total;
            var count = this.count++;

            if (ring.length < total) {
              ring.push(value);
            } else {
              var index = count % total;
              ring[index] = value;
            }
          }
        }, {
          key: "_complete",
          value: function _complete() {
            var destination = this.destination;
            var count = this.count;

            if (count > 0) {
              var total = this.count >= this.total ? this.total : this.count;
              var ring = this.ring;

              for (var i = 0; i < total; i++) {
                var idx = count++ % total;
                destination.next(ring[idx]);
              }
            }

            destination.complete();
          }
        }]);

        return TakeLastSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_2__.Subscriber); //# sourceMappingURL=takeLast.js.map

      /***/

    },

    /***/
    68307:
    /*!**************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/tap.js ***!
      \**************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "tap": function tap() {
          return (
            /* binding */
            _tap
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      77393);
      /* harmony import */


      var _util_noop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/noop */
      98640);
      /* harmony import */


      var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../util/isFunction */
      69105);

      function _tap(nextOrObserver, error, complete) {
        return function tapOperatorFunction(source) {
          return source.lift(new DoOperator(nextOrObserver, error, complete));
        };
      }

      var DoOperator = /*#__PURE__*/function () {
        function DoOperator(nextOrObserver, error, complete) {
          _classCallCheck2(this, DoOperator);

          this.nextOrObserver = nextOrObserver;
          this.error = error;
          this.complete = complete;
        }

        _createClass2(DoOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
          }
        }]);

        return DoOperator;
      }();

      var TapSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_20) {
        _inherits(TapSubscriber, _Subscriber__WEBPACK_20);

        var _super91 = _createSuper(TapSubscriber);

        function TapSubscriber(destination, observerOrNext, error, complete) {
          var _this239;

          _classCallCheck2(this, TapSubscriber);

          _this239 = _super91.call(this, destination);
          _this239._tapNext = _util_noop__WEBPACK_IMPORTED_MODULE_1__.noop;
          _this239._tapError = _util_noop__WEBPACK_IMPORTED_MODULE_1__.noop;
          _this239._tapComplete = _util_noop__WEBPACK_IMPORTED_MODULE_1__.noop;
          _this239._tapError = error || _util_noop__WEBPACK_IMPORTED_MODULE_1__.noop;
          _this239._tapComplete = complete || _util_noop__WEBPACK_IMPORTED_MODULE_1__.noop;

          if ((0, _util_isFunction__WEBPACK_IMPORTED_MODULE_2__.isFunction)(observerOrNext)) {
            _this239._context = _assertThisInitialized(_this239);
            _this239._tapNext = observerOrNext;
          } else if (observerOrNext) {
            _this239._context = observerOrNext;
            _this239._tapNext = observerOrNext.next || _util_noop__WEBPACK_IMPORTED_MODULE_1__.noop;
            _this239._tapError = observerOrNext.error || _util_noop__WEBPACK_IMPORTED_MODULE_1__.noop;
            _this239._tapComplete = observerOrNext.complete || _util_noop__WEBPACK_IMPORTED_MODULE_1__.noop;
          }

          return _this239;
        }

        _createClass2(TapSubscriber, [{
          key: "_next",
          value: function _next(value) {
            try {
              this._tapNext.call(this._context, value);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            this.destination.next(value);
          }
        }, {
          key: "_error",
          value: function _error(err) {
            try {
              this._tapError.call(this._context, err);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            this.destination.error(err);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            try {
              this._tapComplete.call(this._context);
            } catch (err) {
              this.destination.error(err);
              return;
            }

            return this.destination.complete();
          }
        }]);

        return TapSubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber); //# sourceMappingURL=tap.js.map

      /***/

    },

    /***/
    44635:
    /*!***********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js ***!
      \***********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "throwIfEmpty": function throwIfEmpty() {
          return (
            /* binding */
            _throwIfEmpty
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _util_EmptyError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../util/EmptyError */
      13410);
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      77393);

      function _throwIfEmpty() {
        var errorFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultErrorFactory;
        return function (source) {
          return source.lift(new ThrowIfEmptyOperator(errorFactory));
        };
      }

      var ThrowIfEmptyOperator = /*#__PURE__*/function () {
        function ThrowIfEmptyOperator(errorFactory) {
          _classCallCheck2(this, ThrowIfEmptyOperator);

          this.errorFactory = errorFactory;
        }

        _createClass2(ThrowIfEmptyOperator, [{
          key: "call",
          value: function call(subscriber, source) {
            return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));
          }
        }]);

        return ThrowIfEmptyOperator;
      }();

      var ThrowIfEmptySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_21) {
        _inherits(ThrowIfEmptySubscriber, _Subscriber__WEBPACK_21);

        var _super92 = _createSuper(ThrowIfEmptySubscriber);

        function ThrowIfEmptySubscriber(destination, errorFactory) {
          var _this240;

          _classCallCheck2(this, ThrowIfEmptySubscriber);

          _this240 = _super92.call(this, destination);
          _this240.errorFactory = errorFactory;
          _this240.hasValue = false;
          return _this240;
        }

        _createClass2(ThrowIfEmptySubscriber, [{
          key: "_next",
          value: function _next(value) {
            this.hasValue = true;
            this.destination.next(value);
          }
        }, {
          key: "_complete",
          value: function _complete() {
            if (!this.hasValue) {
              var err;

              try {
                err = this.errorFactory();
              } catch (e) {
                err = e;
              }

              this.destination.error(err);
            } else {
              return this.destination.complete();
            }
          }
        }]);

        return ThrowIfEmptySubscriber;
      }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber);

      function defaultErrorFactory() {
        return new _util_EmptyError__WEBPACK_IMPORTED_MODULE_1__.EmptyError();
      } //# sourceMappingURL=throwIfEmpty.js.map

      /***/

    },

    /***/
    2590:
    /*!******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/operators/toArray.js ***!
      \******************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "toArray": function toArray() {
          return (
            /* binding */
            _toArray2
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./reduce */
      67130);

      function toArrayReducer(arr, item, index) {
        if (index === 0) {
          return [item];
        }

        arr.push(item);
        return arr;
      }

      function _toArray2() {
        return (0, _reduce__WEBPACK_IMPORTED_MODULE_0__.reduce)(toArrayReducer, []);
      } //# sourceMappingURL=toArray.js.map

      /***/

    },

    /***/
    94087:
    /*!************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduleArray.js ***!
      \************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "scheduleArray": function scheduleArray() {
          return (
            /* binding */
            _scheduleArray
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      69165);
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Subscription */
      10826);

      function _scheduleArray(input, scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {
          var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription();
          var i = 0;
          sub.add(scheduler.schedule(function () {
            if (i === input.length) {
              subscriber.complete();
              return;
            }

            subscriber.next(input[i++]);

            if (!subscriber.closed) {
              sub.add(this.schedule());
            }
          }));
          return sub;
        });
      } //# sourceMappingURL=scheduleArray.js.map

      /***/

    },

    /***/
    27431:
    /*!***************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduleIterable.js ***!
      \***************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "scheduleIterable": function scheduleIterable() {
          return (
            /* binding */
            _scheduleIterable
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      69165);
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Subscription */
      10826);
      /* harmony import */


      var _symbol_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../symbol/iterator */
      20377);

      function _scheduleIterable(input, scheduler) {
        if (!input) {
          throw new Error('Iterable cannot be null');
        }

        return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {
          var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription();
          var iterator;
          sub.add(function () {
            if (iterator && typeof iterator["return"] === 'function') {
              iterator["return"]();
            }
          });
          sub.add(scheduler.schedule(function () {
            iterator = input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_2__.iterator]();
            sub.add(scheduler.schedule(function () {
              if (subscriber.closed) {
                return;
              }

              var value;
              var done;

              try {
                var result = iterator.next();
                value = result.value;
                done = result.done;
              } catch (err) {
                subscriber.error(err);
                return;
              }

              if (done) {
                subscriber.complete();
              } else {
                subscriber.next(value);
                this.schedule();
              }
            }));
          }));
          return sub;
        });
      } //# sourceMappingURL=scheduleIterable.js.map

      /***/

    },

    /***/
    53298:
    /*!*****************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduleObservable.js ***!
      \*****************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "scheduleObservable": function scheduleObservable() {
          return (
            /* binding */
            _scheduleObservable
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      69165);
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Subscription */
      10826);
      /* harmony import */


      var _symbol_observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../symbol/observable */
      16554);

      function _scheduleObservable(input, scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {
          var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription();
          sub.add(scheduler.schedule(function () {
            var observable = input[_symbol_observable__WEBPACK_IMPORTED_MODULE_2__.observable]();

            sub.add(observable.subscribe({
              next: function next(value) {
                sub.add(scheduler.schedule(function () {
                  return subscriber.next(value);
                }));
              },
              error: function error(err) {
                sub.add(scheduler.schedule(function () {
                  return subscriber.error(err);
                }));
              },
              complete: function complete() {
                sub.add(scheduler.schedule(function () {
                  return subscriber.complete();
                }));
              }
            }));
          }));
          return sub;
        });
      } //# sourceMappingURL=scheduleObservable.js.map

      /***/

    },

    /***/
    24531:
    /*!**************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduled/schedulePromise.js ***!
      \**************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "schedulePromise": function schedulePromise() {
          return (
            /* binding */
            _schedulePromise
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Observable */
      69165);
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Subscription */
      10826);

      function _schedulePromise(input, scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {
          var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription();
          sub.add(scheduler.schedule(function () {
            return input.then(function (value) {
              sub.add(scheduler.schedule(function () {
                subscriber.next(value);
                sub.add(scheduler.schedule(function () {
                  return subscriber.complete();
                }));
              }));
            }, function (err) {
              sub.add(scheduler.schedule(function () {
                return subscriber.error(err);
              }));
            });
          }));
          return sub;
        });
      } //# sourceMappingURL=schedulePromise.js.map

      /***/

    },

    /***/
    83501:
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduled.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "scheduled": function scheduled() {
          return (
            /* binding */
            _scheduled
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _scheduleObservable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./scheduleObservable */
      53298);
      /* harmony import */


      var _schedulePromise__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./schedulePromise */
      24531);
      /* harmony import */


      var _scheduleArray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./scheduleArray */
      94087);
      /* harmony import */


      var _scheduleIterable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ./scheduleIterable */
      27431);
      /* harmony import */


      var _util_isInteropObservable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../util/isInteropObservable */
      26375);
      /* harmony import */


      var _util_isPromise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../util/isPromise */
      44072);
      /* harmony import */


      var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../util/isArrayLike */
      69489);
      /* harmony import */


      var _util_isIterable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../util/isIterable */
      73249);

      function _scheduled(input, scheduler) {
        if (input != null) {
          if ((0, _util_isInteropObservable__WEBPACK_IMPORTED_MODULE_0__.isInteropObservable)(input)) {
            return (0, _scheduleObservable__WEBPACK_IMPORTED_MODULE_1__.scheduleObservable)(input, scheduler);
          } else if ((0, _util_isPromise__WEBPACK_IMPORTED_MODULE_2__.isPromise)(input)) {
            return (0, _schedulePromise__WEBPACK_IMPORTED_MODULE_3__.schedulePromise)(input, scheduler);
          } else if ((0, _util_isArrayLike__WEBPACK_IMPORTED_MODULE_4__.isArrayLike)(input)) {
            return (0, _scheduleArray__WEBPACK_IMPORTED_MODULE_5__.scheduleArray)(input, scheduler);
          } else if ((0, _util_isIterable__WEBPACK_IMPORTED_MODULE_6__.isIterable)(input) || typeof input === 'string') {
            return (0, _scheduleIterable__WEBPACK_IMPORTED_MODULE_7__.scheduleIterable)(input, scheduler);
          }
        }

        throw new TypeError((input !== null && typeof input || input) + ' is not observable');
      } //# sourceMappingURL=scheduled.js.map

      /***/

    },

    /***/
    22901:
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/Action.js ***!
      \*****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "Action": function Action() {
          return (
            /* binding */
            _Action
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscription */
      10826);

      var _Action = /*#__PURE__*/function (_Subscription__WEBPAC3) {
        _inherits(_Action, _Subscription__WEBPAC3);

        var _super93 = _createSuper(_Action);

        function _Action(scheduler, work) {
          _classCallCheck2(this, _Action);

          return _super93.call(this);
        }

        _createClass2(_Action, [{
          key: "schedule",
          value: function schedule(state) {
            var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            return this;
          }
        }]);

        return _Action;
      }(_Subscription__WEBPACK_IMPORTED_MODULE_0__.Subscription); //# sourceMappingURL=Action.js.map

      /***/

    },

    /***/
    401:
    /*!**********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js ***!
      \**********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "AsyncAction": function AsyncAction() {
          return (
            /* binding */
            _AsyncAction
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./Action */
      22901);

      var _AsyncAction = /*#__PURE__*/function (_Action__WEBPACK_IMPO) {
        _inherits(_AsyncAction, _Action__WEBPACK_IMPO);

        var _super94 = _createSuper(_AsyncAction);

        function _AsyncAction(scheduler, work) {
          var _this241;

          _classCallCheck2(this, _AsyncAction);

          _this241 = _super94.call(this, scheduler, work);
          _this241.scheduler = scheduler;
          _this241.work = work;
          _this241.pending = false;
          return _this241;
        }

        _createClass2(_AsyncAction, [{
          key: "schedule",
          value: function schedule(state) {
            var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            if (this.closed) {
              return this;
            }

            this.state = state;
            var id = this.id;
            var scheduler = this.scheduler;

            if (id != null) {
              this.id = this.recycleAsyncId(scheduler, id, delay);
            }

            this.pending = true;
            this.delay = delay;
            this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
            return this;
          }
        }, {
          key: "requestAsyncId",
          value: function requestAsyncId(scheduler, id) {
            var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            return setInterval(scheduler.flush.bind(scheduler, this), delay);
          }
        }, {
          key: "recycleAsyncId",
          value: function recycleAsyncId(scheduler, id) {
            var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            if (delay !== null && this.delay === delay && this.pending === false) {
              return id;
            }

            clearInterval(id);
            return undefined;
          }
        }, {
          key: "execute",
          value: function execute(state, delay) {
            if (this.closed) {
              return new Error('executing a cancelled action');
            }

            this.pending = false;

            var error = this._execute(state, delay);

            if (error) {
              return error;
            } else if (this.pending === false && this.id != null) {
              this.id = this.recycleAsyncId(this.scheduler, this.id, null);
            }
          }
        }, {
          key: "_execute",
          value: function _execute(state, delay) {
            var errored = false;
            var errorValue = undefined;

            try {
              this.work(state);
            } catch (e) {
              errored = true;
              errorValue = !!e && e || new Error(e);
            }

            if (errored) {
              this.unsubscribe();
              return errorValue;
            }
          }
        }, {
          key: "_unsubscribe",
          value: function _unsubscribe() {
            var id = this.id;
            var scheduler = this.scheduler;
            var actions = scheduler.actions;
            var index = actions.indexOf(this);
            this.work = null;
            this.state = null;
            this.pending = false;
            this.scheduler = null;

            if (index !== -1) {
              actions.splice(index, 1);
            }

            if (id != null) {
              this.id = this.recycleAsyncId(scheduler, id, null);
            }

            this.delay = null;
          }
        }]);

        return _AsyncAction;
      }(_Action__WEBPACK_IMPORTED_MODULE_0__.Action); //# sourceMappingURL=AsyncAction.js.map

      /***/

    },

    /***/
    4548:
    /*!*************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js ***!
      \*************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "AsyncScheduler": function AsyncScheduler() {
          return (
            /* binding */
            _AsyncScheduler
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Scheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Scheduler */
      2217);

      var _AsyncScheduler = /*#__PURE__*/function (_Scheduler__WEBPACK_I) {
        _inherits(_AsyncScheduler, _Scheduler__WEBPACK_I);

        var _super95 = _createSuper(_AsyncScheduler);

        function _AsyncScheduler(SchedulerAction) {
          var _this242;

          var now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Scheduler__WEBPACK_IMPORTED_MODULE_0__.Scheduler.now;

          _classCallCheck2(this, _AsyncScheduler);

          _this242 = _super95.call(this, SchedulerAction, function () {
            if (_AsyncScheduler.delegate && _AsyncScheduler.delegate !== _assertThisInitialized(_this242)) {
              return _AsyncScheduler.delegate.now();
            } else {
              return now();
            }
          });
          _this242.actions = [];
          _this242.active = false;
          _this242.scheduled = undefined;
          return _this242;
        }

        _createClass2(_AsyncScheduler, [{
          key: "schedule",
          value: function schedule(work) {
            var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var state = arguments.length > 2 ? arguments[2] : undefined;

            if (_AsyncScheduler.delegate && _AsyncScheduler.delegate !== this) {
              return _AsyncScheduler.delegate.schedule(work, delay, state);
            } else {
              return _get(_getPrototypeOf(_AsyncScheduler.prototype), "schedule", this).call(this, work, delay, state);
            }
          }
        }, {
          key: "flush",
          value: function flush(action) {
            var actions = this.actions;

            if (this.active) {
              actions.push(action);
              return;
            }

            var error;
            this.active = true;

            do {
              if (error = action.execute(action.state, action.delay)) {
                break;
              }
            } while (action = actions.shift());

            this.active = false;

            if (error) {
              while (action = actions.shift()) {
                action.unsubscribe();
              }

              throw error;
            }
          }
        }]);

        return _AsyncScheduler;
      }(_Scheduler__WEBPACK_IMPORTED_MODULE_0__.Scheduler); //# sourceMappingURL=AsyncScheduler.js.map

      /***/

    },

    /***/
    99403:
    /*!**********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/QueueAction.js ***!
      \**********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "QueueAction": function QueueAction() {
          return (
            /* binding */
            _QueueAction
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _AsyncAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AsyncAction */
      401);

      var _QueueAction = /*#__PURE__*/function (_AsyncAction__WEBPACK) {
        _inherits(_QueueAction, _AsyncAction__WEBPACK);

        var _super96 = _createSuper(_QueueAction);

        function _QueueAction(scheduler, work) {
          var _this243;

          _classCallCheck2(this, _QueueAction);

          _this243 = _super96.call(this, scheduler, work);
          _this243.scheduler = scheduler;
          _this243.work = work;
          return _this243;
        }

        _createClass2(_QueueAction, [{
          key: "schedule",
          value: function schedule(state) {
            var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            if (delay > 0) {
              return _get(_getPrototypeOf(_QueueAction.prototype), "schedule", this).call(this, state, delay);
            }

            this.delay = delay;
            this.state = state;
            this.scheduler.flush(this);
            return this;
          }
        }, {
          key: "execute",
          value: function execute(state, delay) {
            return delay > 0 || this.closed ? _get(_getPrototypeOf(_QueueAction.prototype), "execute", this).call(this, state, delay) : this._execute(state, delay);
          }
        }, {
          key: "requestAsyncId",
          value: function requestAsyncId(scheduler, id) {
            var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
              return _get(_getPrototypeOf(_QueueAction.prototype), "requestAsyncId", this).call(this, scheduler, id, delay);
            }

            return scheduler.flush(this);
          }
        }]);

        return _QueueAction;
      }(_AsyncAction__WEBPACK_IMPORTED_MODULE_0__.AsyncAction); //# sourceMappingURL=QueueAction.js.map

      /***/

    },

    /***/
    40099:
    /*!*************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/QueueScheduler.js ***!
      \*************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "QueueScheduler": function QueueScheduler() {
          return (
            /* binding */
            _QueueScheduler
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AsyncScheduler */
      4548);

      var _QueueScheduler = /*#__PURE__*/function (_AsyncScheduler__WEBP) {
        _inherits(_QueueScheduler, _AsyncScheduler__WEBP);

        var _super97 = _createSuper(_QueueScheduler);

        function _QueueScheduler() {
          _classCallCheck2(this, _QueueScheduler);

          return _super97.apply(this, arguments);
        }

        return _QueueScheduler;
      }(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__.AsyncScheduler); //# sourceMappingURL=QueueScheduler.js.map

      /***/

    },

    /***/
    33637:
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/async.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "asyncScheduler": function asyncScheduler() {
          return (
            /* binding */
            _asyncScheduler
          );
        },

        /* harmony export */
        "async": function async() {
          return (
            /* binding */
            _async
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _AsyncAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./AsyncAction */
      401);
      /* harmony import */


      var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./AsyncScheduler */
      4548);

      var _asyncScheduler = new _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__.AsyncScheduler(_AsyncAction__WEBPACK_IMPORTED_MODULE_1__.AsyncAction);

      var _async = _asyncScheduler; //# sourceMappingURL=async.js.map

      /***/
    },

    /***/
    29661:
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/scheduler/queue.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "queueScheduler": function queueScheduler() {
          return (
            /* binding */
            _queueScheduler
          );
        },

        /* harmony export */
        "queue": function queue() {
          return (
            /* binding */
            _queue
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _QueueAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./QueueAction */
      99403);
      /* harmony import */


      var _QueueScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./QueueScheduler */
      40099);

      var _queueScheduler = new _QueueScheduler__WEBPACK_IMPORTED_MODULE_0__.QueueScheduler(_QueueAction__WEBPACK_IMPORTED_MODULE_1__.QueueAction);

      var _queue = _queueScheduler; //# sourceMappingURL=queue.js.map

      /***/
    },

    /***/
    20377:
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/symbol/iterator.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "getSymbolIterator": function getSymbolIterator() {
          return (
            /* binding */
            _getSymbolIterator
          );
        },

        /* harmony export */
        "iterator": function iterator() {
          return (
            /* binding */
            _iterator20
          );
        },

        /* harmony export */
        "$$iterator": function $$iterator() {
          return (
            /* binding */
            _$$iterator
          );
        }
        /* harmony export */

      });

      function _getSymbolIterator() {
        if (typeof Symbol !== 'function' || !Symbol.iterator) {
          return '@@iterator';
        }

        return Symbol.iterator;
      }

      var _iterator20 = _getSymbolIterator();

      var _$$iterator = _iterator20; //# sourceMappingURL=iterator.js.map

      /***/
    },

    /***/
    16554:
    /*!******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/symbol/observable.js ***!
      \******************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "observable": function observable() {
          return (
            /* binding */
            _observable
          );
        }
        /* harmony export */

      });

      var _observable = function () {
        return typeof Symbol === 'function' && Symbol.observable || '@@observable';
      }(); //# sourceMappingURL=observable.js.map

      /***/

    },

    /***/
    29181:
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "rxSubscriber": function rxSubscriber() {
          return (
            /* binding */
            _rxSubscriber
          );
        },

        /* harmony export */
        "$$rxSubscriber": function $$rxSubscriber() {
          return (
            /* binding */
            _$$rxSubscriber
          );
        }
        /* harmony export */

      });

      var _rxSubscriber = function () {
        return typeof Symbol === 'function' ? Symbol('rxSubscriber') : '@@rxSubscriber_' + Math.random();
      }();

      var _$$rxSubscriber = _rxSubscriber; //# sourceMappingURL=rxSubscriber.js.map

      /***/
    },

    /***/
    7108:
    /*!*****************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js ***!
      \*****************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ArgumentOutOfRangeError": function ArgumentOutOfRangeError() {
          return (
            /* binding */
            _ArgumentOutOfRangeError
          );
        }
        /* harmony export */

      });

      var ArgumentOutOfRangeErrorImpl = function () {
        function ArgumentOutOfRangeErrorImpl() {
          Error.call(this);
          this.message = 'argument out of range';
          this.name = 'ArgumentOutOfRangeError';
          return this;
        }

        ArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);
        return ArgumentOutOfRangeErrorImpl;
      }();

      var _ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl; //# sourceMappingURL=ArgumentOutOfRangeError.js.map

      /***/
    },

    /***/
    13410:
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/EmptyError.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "EmptyError": function EmptyError() {
          return (
            /* binding */
            _EmptyError
          );
        }
        /* harmony export */

      });

      var EmptyErrorImpl = function () {
        function EmptyErrorImpl() {
          Error.call(this);
          this.message = 'no elements in sequence';
          this.name = 'EmptyError';
          return this;
        }

        EmptyErrorImpl.prototype = Object.create(Error.prototype);
        return EmptyErrorImpl;
      }();

      var _EmptyError = EmptyErrorImpl; //# sourceMappingURL=EmptyError.js.map

      /***/
    },

    /***/
    77971:
    /*!*****************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js ***!
      \*****************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ObjectUnsubscribedError": function ObjectUnsubscribedError() {
          return (
            /* binding */
            _ObjectUnsubscribedError
          );
        }
        /* harmony export */

      });

      var ObjectUnsubscribedErrorImpl = function () {
        function ObjectUnsubscribedErrorImpl() {
          Error.call(this);
          this.message = 'object unsubscribed';
          this.name = 'ObjectUnsubscribedError';
          return this;
        }

        ObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);
        return ObjectUnsubscribedErrorImpl;
      }();

      var _ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl; //# sourceMappingURL=ObjectUnsubscribedError.js.map

      /***/
    },

    /***/
    57744:
    /*!*************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/UnsubscriptionError.js ***!
      \*************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "UnsubscriptionError": function UnsubscriptionError() {
          return (
            /* binding */
            _UnsubscriptionError
          );
        }
        /* harmony export */

      });

      var UnsubscriptionErrorImpl = function () {
        function UnsubscriptionErrorImpl(errors) {
          Error.call(this);
          this.message = errors ? "".concat(errors.length, " errors occurred during unsubscription:\n").concat(errors.map(function (err, i) {
            return "".concat(i + 1, ") ").concat(err.toString());
          }).join('\n  ')) : '';
          this.name = 'UnsubscriptionError';
          this.errors = errors;
          return this;
        }

        UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);
        return UnsubscriptionErrorImpl;
      }();

      var _UnsubscriptionError = UnsubscriptionErrorImpl; //# sourceMappingURL=UnsubscriptionError.js.map

      /***/
    },

    /***/
    13179:
    /*!********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/canReportError.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "canReportError": function canReportError() {
          return (
            /* binding */
            _canReportError
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      77393);

      function _canReportError(observer) {
        while (observer) {
          var _observer = observer,
              closed = _observer.closed,
              destination = _observer.destination,
              isStopped = _observer.isStopped;

          if (closed || isStopped) {
            return false;
          } else if (destination && destination instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber) {
            observer = destination;
          } else {
            observer = null;
          }
        }

        return true;
      } //# sourceMappingURL=canReportError.js.map

      /***/

    },

    /***/
    54449:
    /*!*********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/hostReportError.js ***!
      \*********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "hostReportError": function hostReportError() {
          return (
            /* binding */
            _hostReportError
          );
        }
        /* harmony export */

      });

      function _hostReportError(err) {
        setTimeout(function () {
          throw err;
        }, 0);
      } //# sourceMappingURL=hostReportError.js.map

      /***/

    },

    /***/
    54487:
    /*!**************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/identity.js ***!
      \**************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "identity": function identity() {
          return (
            /* binding */
            _identity
          );
        }
        /* harmony export */

      });

      function _identity(x) {
        return x;
      } //# sourceMappingURL=identity.js.map

      /***/

    },

    /***/
    59796:
    /*!*************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isArray.js ***!
      \*************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "isArray": function isArray() {
          return (
            /* binding */
            _isArray
          );
        }
        /* harmony export */

      });

      var _isArray = function () {
        return Array.isArray || function (x) {
          return x && typeof x.length === 'number';
        };
      }(); //# sourceMappingURL=isArray.js.map

      /***/

    },

    /***/
    69489:
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isArrayLike.js ***!
      \*****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "isArrayLike": function isArrayLike() {
          return (
            /* binding */
            _isArrayLike
          );
        }
        /* harmony export */

      });

      var _isArrayLike = function _isArrayLike(x) {
        return x && typeof x.length === 'number' && typeof x !== 'function';
      }; //# sourceMappingURL=isArrayLike.js.map

      /***/

    },

    /***/
    39989:
    /*!************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isDate.js ***!
      \************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "isDate": function isDate() {
          return (
            /* binding */
            _isDate
          );
        }
        /* harmony export */

      });

      function _isDate(value) {
        return value instanceof Date && !isNaN(+value);
      } //# sourceMappingURL=isDate.js.map

      /***/

    },

    /***/
    69105:
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isFunction.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "isFunction": function isFunction() {
          return (
            /* binding */
            _isFunction
          );
        }
        /* harmony export */

      });

      function _isFunction(x) {
        return typeof x === 'function';
      } //# sourceMappingURL=isFunction.js.map

      /***/

    },

    /***/
    26375:
    /*!*************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isInteropObservable.js ***!
      \*************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "isInteropObservable": function isInteropObservable() {
          return (
            /* binding */
            _isInteropObservable
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _symbol_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../symbol/observable */
      16554);

      function _isInteropObservable(input) {
        return input && typeof input[_symbol_observable__WEBPACK_IMPORTED_MODULE_0__.observable] === 'function';
      } //# sourceMappingURL=isInteropObservable.js.map

      /***/

    },

    /***/
    73249:
    /*!****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isIterable.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "isIterable": function isIterable() {
          return (
            /* binding */
            _isIterable
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _symbol_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../symbol/iterator */
      20377);

      function _isIterable(input) {
        return input && typeof input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_0__.iterator] === 'function';
      } //# sourceMappingURL=isIterable.js.map

      /***/

    },

    /***/
    81555:
    /*!**************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isObject.js ***!
      \**************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "isObject": function isObject() {
          return (
            /* binding */
            _isObject
          );
        }
        /* harmony export */

      });

      function _isObject(x) {
        return x !== null && typeof x === 'object';
      } //# sourceMappingURL=isObject.js.map

      /***/

    },

    /***/
    44072:
    /*!***************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isPromise.js ***!
      \***************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "isPromise": function isPromise() {
          return (
            /* binding */
            _isPromise
          );
        }
        /* harmony export */

      });

      function _isPromise(value) {
        return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
      } //# sourceMappingURL=isPromise.js.map

      /***/

    },

    /***/
    54869:
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/isScheduler.js ***!
      \*****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "isScheduler": function isScheduler() {
          return (
            /* binding */
            _isScheduler
          );
        }
        /* harmony export */

      });

      function _isScheduler(value) {
        return value && typeof value.schedule === 'function';
      } //# sourceMappingURL=isScheduler.js.map

      /***/

    },

    /***/
    98640:
    /*!**********************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/noop.js ***!
      \**********************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "noop": function noop() {
          return (
            /* binding */
            _noop
          );
        }
        /* harmony export */

      });

      function _noop() {} //# sourceMappingURL=noop.js.map

      /***/

    },

    /***/
    34022:
    /*!**********************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/pipe.js ***!
      \**********************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "pipe": function pipe() {
          return (
            /* binding */
            _pipe
          );
        },

        /* harmony export */
        "pipeFromArray": function pipeFromArray() {
          return (
            /* binding */
            _pipeFromArray
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./identity */
      54487);

      function _pipe() {
        for (var _len25 = arguments.length, fns = new Array(_len25), _key26 = 0; _key26 < _len25; _key26++) {
          fns[_key26] = arguments[_key26];
        }

        return _pipeFromArray(fns);
      }

      function _pipeFromArray(fns) {
        if (fns.length === 0) {
          return _identity__WEBPACK_IMPORTED_MODULE_0__.identity;
        }

        if (fns.length === 1) {
          return fns[0];
        }

        return function piped(input) {
          return fns.reduce(function (prev, fn) {
            return fn(prev);
          }, input);
        };
      } //# sourceMappingURL=pipe.js.map

      /***/

    },

    /***/
    86847:
    /*!*****************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeTo.js ***!
      \*****************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "subscribeTo": function subscribeTo() {
          return (
            /* binding */
            _subscribeTo
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _subscribeToArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./subscribeToArray */
      55015);
      /* harmony import */


      var _subscribeToPromise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./subscribeToPromise */
      35104);
      /* harmony import */


      var _subscribeToIterable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ./subscribeToIterable */
      99529);
      /* harmony import */


      var _subscribeToObservable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./subscribeToObservable */
      32788);
      /* harmony import */


      var _isArrayLike__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./isArrayLike */
      69489);
      /* harmony import */


      var _isPromise__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./isPromise */
      44072);
      /* harmony import */


      var _isObject__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ./isObject */
      81555);
      /* harmony import */


      var _symbol_iterator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../symbol/iterator */
      20377);
      /* harmony import */


      var _symbol_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../symbol/observable */
      16554);

      var _subscribeTo = function _subscribeTo(result) {
        if (!!result && typeof result[_symbol_observable__WEBPACK_IMPORTED_MODULE_0__.observable] === 'function') {
          return (0, _subscribeToObservable__WEBPACK_IMPORTED_MODULE_1__.subscribeToObservable)(result);
        } else if ((0, _isArrayLike__WEBPACK_IMPORTED_MODULE_2__.isArrayLike)(result)) {
          return (0, _subscribeToArray__WEBPACK_IMPORTED_MODULE_3__.subscribeToArray)(result);
        } else if ((0, _isPromise__WEBPACK_IMPORTED_MODULE_4__.isPromise)(result)) {
          return (0, _subscribeToPromise__WEBPACK_IMPORTED_MODULE_5__.subscribeToPromise)(result);
        } else if (!!result && typeof result[_symbol_iterator__WEBPACK_IMPORTED_MODULE_6__.iterator] === 'function') {
          return (0, _subscribeToIterable__WEBPACK_IMPORTED_MODULE_7__.subscribeToIterable)(result);
        } else {
          var value = (0, _isObject__WEBPACK_IMPORTED_MODULE_8__.isObject)(result) ? 'an invalid object' : "'".concat(result, "'");
          var msg = "You provided ".concat(value, " where a stream was expected.") + ' You can provide an Observable, Promise, Array, or Iterable.';
          throw new TypeError(msg);
        }
      }; //# sourceMappingURL=subscribeTo.js.map

      /***/

    },

    /***/
    55015:
    /*!**********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToArray.js ***!
      \**********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "subscribeToArray": function subscribeToArray() {
          return (
            /* binding */
            _subscribeToArray
          );
        }
        /* harmony export */

      });

      var _subscribeToArray = function _subscribeToArray(array) {
        return function (subscriber) {
          for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
            subscriber.next(array[i]);
          }

          subscriber.complete();
        };
      }; //# sourceMappingURL=subscribeToArray.js.map

      /***/

    },

    /***/
    99529:
    /*!*************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToIterable.js ***!
      \*************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "subscribeToIterable": function subscribeToIterable() {
          return (
            /* binding */
            _subscribeToIterable
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _symbol_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../symbol/iterator */
      20377);

      var _subscribeToIterable = function _subscribeToIterable(iterable) {
        return function (subscriber) {
          var iterator = iterable[_symbol_iterator__WEBPACK_IMPORTED_MODULE_0__.iterator]();

          do {
            var item = void 0;

            try {
              item = iterator.next();
            } catch (err) {
              subscriber.error(err);
              return subscriber;
            }

            if (item.done) {
              subscriber.complete();
              break;
            }

            subscriber.next(item.value);

            if (subscriber.closed) {
              break;
            }
          } while (true);

          if (typeof iterator["return"] === 'function') {
            subscriber.add(function () {
              if (iterator["return"]) {
                iterator["return"]();
              }
            });
          }

          return subscriber;
        };
      }; //# sourceMappingURL=subscribeToIterable.js.map

      /***/

    },

    /***/
    32788:
    /*!***************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToObservable.js ***!
      \***************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "subscribeToObservable": function subscribeToObservable() {
          return (
            /* binding */
            _subscribeToObservable
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _symbol_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../symbol/observable */
      16554);

      var _subscribeToObservable = function _subscribeToObservable(obj) {
        return function (subscriber) {
          var obs = obj[_symbol_observable__WEBPACK_IMPORTED_MODULE_0__.observable]();

          if (typeof obs.subscribe !== 'function') {
            throw new TypeError('Provided object does not correctly implement Symbol.observable');
          } else {
            return obs.subscribe(subscriber);
          }
        };
      }; //# sourceMappingURL=subscribeToObservable.js.map

      /***/

    },

    /***/
    35104:
    /*!************************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToPromise.js ***!
      \************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "subscribeToPromise": function subscribeToPromise() {
          return (
            /* binding */
            _subscribeToPromise
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _hostReportError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./hostReportError */
      54449);

      var _subscribeToPromise = function _subscribeToPromise(promise) {
        return function (subscriber) {
          promise.then(function (value) {
            if (!subscriber.closed) {
              subscriber.next(value);
              subscriber.complete();
            }
          }, function (err) {
            return subscriber.error(err);
          }).then(null, _hostReportError__WEBPACK_IMPORTED_MODULE_0__.hostReportError);
          return subscriber;
        };
      }; //# sourceMappingURL=subscribeToPromise.js.map

      /***/

    },

    /***/
    75604:
    /*!***********************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js ***!
      \***********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "subscribeToResult": function subscribeToResult() {
          return (
            /* binding */
            _subscribeToResult
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../InnerSubscriber */
      80268);
      /* harmony import */


      var _subscribeTo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./subscribeTo */
      86847);
      /* harmony import */


      var _Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../Observable */
      69165);

      function _subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
        var innerSubscriber = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_0__.InnerSubscriber(outerSubscriber, outerValue, outerIndex);

        if (innerSubscriber.closed) {
          return undefined;
        }

        if (result instanceof _Observable__WEBPACK_IMPORTED_MODULE_1__.Observable) {
          return result.subscribe(innerSubscriber);
        }

        return (0, _subscribeTo__WEBPACK_IMPORTED_MODULE_2__.subscribeTo)(result)(innerSubscriber);
      } //# sourceMappingURL=subscribeToResult.js.map

      /***/

    },

    /***/
    31821:
    /*!******************************************************************!*\
      !*** ./node_modules/rxjs/_esm2015/internal/util/toSubscriber.js ***!
      \******************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "toSubscriber": function toSubscriber() {
          return (
            /* binding */
            _toSubscriber
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../Subscriber */
      77393);
      /* harmony import */


      var _symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../symbol/rxSubscriber */
      29181);
      /* harmony import */


      var _Observer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../Observer */
      46490);

      function _toSubscriber(nextOrObserver, error, complete) {
        if (nextOrObserver) {
          if (nextOrObserver instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber) {
            return nextOrObserver;
          }

          if (nextOrObserver[_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__.rxSubscriber]) {
            return nextOrObserver[_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__.rxSubscriber]();
          }
        }

        if (!nextOrObserver && !error && !complete) {
          return new _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber(_Observer__WEBPACK_IMPORTED_MODULE_2__.empty);
        }

        return new _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber(nextOrObserver, error, complete);
      } //# sourceMappingURL=toSubscriber.js.map

      /***/

    },

    /***/
    25075:
    /*!******************************************************!*\
      !*** ./node_modules/tsparticles/dist/Core/Canvas.js ***!
      \******************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Canvas = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../Utils */
      57711);

      var Canvas = /*#__PURE__*/function () {
        function Canvas(container) {
          _classCallCheck2(this, Canvas);

          this.container = container;
          this.size = {
            height: 0,
            width: 0
          };
          this.context = null;
          this.generatedCanvas = false;
        }

        _createClass2(Canvas, [{
          key: "init",
          value: function init() {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;

            this.resize();
            var options = this.container.options;
            var element = this.element;

            if (element) {
              if (options.backgroundMode.enable) {
                this.originalStyle = Utils_1.Utils.deepExtend({}, element.style);
                element.style.position = "fixed";
                element.style.zIndex = options.backgroundMode.zIndex.toString(10);
                element.style.top = "0";
                element.style.left = "0";
                element.style.width = "100%";
                element.style.height = "100%";
              } else {
                element.style.position = (_b = (_a = this.originalStyle) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : "";
                element.style.zIndex = (_d = (_c = this.originalStyle) === null || _c === void 0 ? void 0 : _c.zIndex) !== null && _d !== void 0 ? _d : "";
                element.style.top = (_f = (_e = this.originalStyle) === null || _e === void 0 ? void 0 : _e.top) !== null && _f !== void 0 ? _f : "";
                element.style.left = (_h = (_g = this.originalStyle) === null || _g === void 0 ? void 0 : _g.left) !== null && _h !== void 0 ? _h : "";
                element.style.width = (_k = (_j = this.originalStyle) === null || _j === void 0 ? void 0 : _j.width) !== null && _k !== void 0 ? _k : "";
                element.style.height = (_m = (_l = this.originalStyle) === null || _l === void 0 ? void 0 : _l.height) !== null && _m !== void 0 ? _m : "";
              }
            }

            var cover = options.backgroundMask.cover;
            var color = cover.color;
            var trail = options.particles.move.trail;
            var coverRgb = Utils_1.ColorUtils.colorToRgb(color);
            this.coverColor = coverRgb !== undefined ? {
              r: coverRgb.r,
              g: coverRgb.g,
              b: coverRgb.b,
              a: cover.opacity
            } : undefined;
            this.trailFillColor = Utils_1.ColorUtils.colorToRgb(trail.fillColor);
            this.initBackground();
            this.paint();
          }
        }, {
          key: "loadCanvas",
          value: function loadCanvas(canvas, generatedCanvas) {
            var _a;

            if (!canvas.className) {
              canvas.className = Utils_1.Constants.canvasClass;
            }

            if (this.generatedCanvas) {
              (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();
            }

            this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : this.generatedCanvas;
            this.element = canvas;
            this.originalStyle = Utils_1.Utils.deepExtend({}, this.element.style);
            this.size.height = canvas.offsetHeight;
            this.size.width = canvas.offsetWidth;
            this.context = this.element.getContext("2d");
            this.container.retina.init();
            this.initBackground();
          }
        }, {
          key: "destroy",
          value: function destroy() {
            var _a;

            if (this.generatedCanvas) {
              (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();
            }

            if (this.context) {
              Utils_1.CanvasUtils.clear(this.context, this.size);
            }
          }
        }, {
          key: "resize",
          value: function resize() {
            if (!this.element) {
              return;
            }

            this.element.width = this.size.width;
            this.element.height = this.size.height;
          }
        }, {
          key: "paint",
          value: function paint() {
            var options = this.container.options;

            if (!this.context) {
              return;
            }

            if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {
              Utils_1.CanvasUtils.clear(this.context, this.size);
              this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.coverColor, this.coverColor.a));
            } else {
              this.paintBase();
            }
          }
        }, {
          key: "clear",
          value: function clear() {
            var options = this.container.options;
            var trail = options.particles.move.trail;

            if (options.backgroundMask.enable) {
              this.paint();
            } else if (trail.enable && trail.length > 0 && this.trailFillColor) {
              this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.trailFillColor, 1 / trail.length));
            } else if (this.context) {
              Utils_1.CanvasUtils.clear(this.context, this.size);
            }
          }
        }, {
          key: "windowResize",
          value: function windowResize() {
            if (!this.element) {
              return;
            }

            var container = this.container;
            container.canvas.initSize();
            container.particles.setDensity();

            var _iterator21 = _createForOfIteratorHelper(container.plugins),
                _step20;

            try {
              for (_iterator21.s(); !(_step20 = _iterator21.n()).done;) {
                var _step20$value = _slicedToArray(_step20.value, 2),
                    plugin = _step20$value[1];

                if (plugin.resize !== undefined) {
                  plugin.resize();
                }
              }
            } catch (err) {
              _iterator21.e(err);
            } finally {
              _iterator21.f();
            }
          }
        }, {
          key: "initSize",
          value: function initSize() {
            if (!this.element) {
              return;
            }

            var container = this.container;
            var pxRatio = container.retina.pixelRatio;
            container.canvas.size.width = this.element.offsetWidth * pxRatio;
            container.canvas.size.height = this.element.offsetHeight * pxRatio;
            this.element.width = container.canvas.size.width;
            this.element.height = container.canvas.size.height;
          }
        }, {
          key: "drawConnectLine",
          value: function drawConnectLine(p1, p2) {
            var _a;

            var lineStyle = this.lineStyle(p1, p2);

            if (!lineStyle) {
              return;
            }

            var ctx = this.context;

            if (!ctx) {
              return;
            }

            var pos1 = p1.getPosition();
            var pos2 = p2.getPosition();
            Utils_1.CanvasUtils.drawConnectLine(ctx, (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);
          }
        }, {
          key: "drawGrabLine",
          value: function drawGrabLine(particle, lineColor, opacity, mousePos) {
            var _a;

            var container = this.container;
            var ctx = container.canvas.context;

            if (!ctx) {
              return;
            }

            var beginPos = particle.getPosition();
            Utils_1.CanvasUtils.drawGrabLine(ctx, (_a = particle.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);
          }
        }, {
          key: "drawParticleShadow",
          value: function drawParticleShadow(particle, mousePos) {
            if (!this.context) {
              return;
            }

            Utils_1.CanvasUtils.drawParticleShadow(this.container, this.context, particle, mousePos);
          }
        }, {
          key: "drawLinkTriangle",
          value: function drawLinkTriangle(p1, link1, link2) {
            var _a;

            var container = this.container;
            var options = container.options;
            var p2 = link1.destination;
            var p3 = link2.destination;
            var triangleOptions = p1.particlesOptions.links.triangles;
            var opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;

            if (opacityTriangle <= 0) {
              return;
            }

            var pos1 = p1.getPosition();
            var pos2 = p2.getPosition();
            var pos3 = p3.getPosition();
            var ctx = this.context;

            if (!ctx) {
              return;
            }

            if (Utils_1.NumberUtils.getDistance(pos1, pos2) > container.retina.linksDistance || Utils_1.NumberUtils.getDistance(pos3, pos2) > container.retina.linksDistance || Utils_1.NumberUtils.getDistance(pos3, pos1) > container.retina.linksDistance) {
              return;
            }

            var colorTriangle = Utils_1.ColorUtils.colorToRgb(triangleOptions.color);

            if (!colorTriangle) {
              var linksOptions = p1.particlesOptions.links;
              var linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;
              colorTriangle = Utils_1.ColorUtils.getLinkColor(p1, p2, linkColor);
            }

            if (!colorTriangle) {
              return;
            }

            Utils_1.CanvasUtils.drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);
          }
        }, {
          key: "drawLinkLine",
          value: function drawLinkLine(p1, link) {
            var _a, _b;

            var container = this.container;
            var options = container.options;
            var p2 = link.destination;
            var opacity = link.opacity;
            var pos1 = p1.getPosition();
            var pos2 = p2.getPosition();
            var ctx = this.context;

            if (!ctx) {
              return;
            }

            var colorLine;
            var twinkle = p1.particlesOptions.twinkle.lines;

            if (twinkle.enable) {
              var twinkleFreq = twinkle.frequency;
              var twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);
              var twinkling = Math.random() < twinkleFreq;

              if (twinkling && twinkleRgb !== undefined) {
                colorLine = twinkleRgb;
                opacity = twinkle.opacity;
              }
            }

            if (!colorLine) {
              var linksOptions = p1.particlesOptions.links;
              var linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;
              colorLine = Utils_1.ColorUtils.getLinkColor(p1, p2, linkColor);
            }

            if (!colorLine) {
              return;
            }

            var width = (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth;
            var maxDistance = (_b = p1.linksDistance) !== null && _b !== void 0 ? _b : container.retina.linksDistance;
            Utils_1.CanvasUtils.drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.particlesOptions.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.particlesOptions.links.shadow);
          }
        }, {
          key: "drawParticle",
          value: function drawParticle(particle, delta) {
            var _a, _b, _c, _d;

            if (((_a = particle.image) === null || _a === void 0 ? void 0 : _a.loaded) === false || particle.spawning || particle.destroyed) {
              return;
            }

            var pfColor = particle.getFillColor();
            var psColor = (_b = particle.getStrokeColor()) !== null && _b !== void 0 ? _b : pfColor;

            if (!pfColor && !psColor) {
              return;
            }

            var options = this.container.options;
            var pOptions = particle.particlesOptions;
            var twinkle = pOptions.twinkle.particles;
            var twinkleFreq = twinkle.frequency;
            var twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);
            var twinkling = twinkle.enable && Math.random() < twinkleFreq;
            var radius = particle.getRadius();
            var opacity = twinkling ? twinkle.opacity : (_c = particle.bubble.opacity) !== null && _c !== void 0 ? _c : particle.opacity.value;
            var infectionStage = particle.infecter.infectionStage;
            var infection = options.infection;
            var infectionStages = infection.stages;
            var infectionColor = infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;
            var infectionRgb = Utils_1.ColorUtils.colorToRgb(infectionColor);
            var fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : pfColor ? Utils_1.ColorUtils.hslToRgb(pfColor) : undefined;
            var sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : psColor ? Utils_1.ColorUtils.hslToRgb(psColor) : undefined;
            var fillColorValue = fColor !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(fColor, opacity) : undefined;

            if (!this.context || !fillColorValue && !sColor) {
              return;
            }

            var strokeColorValue = sColor !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(sColor, (_d = particle.stroke.opacity) !== null && _d !== void 0 ? _d : opacity) : fillColorValue;
            this.drawParticleLinks(particle);

            if (radius > 0) {
              Utils_1.CanvasUtils.drawParticle(this.container, this.context, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, options.backgroundMask.composite, radius, opacity, particle.particlesOptions.shadow);
            }
          }
        }, {
          key: "drawParticleLinks",
          value: function drawParticleLinks(particle) {
            var _this244 = this;

            if (!this.context) {
              return;
            }

            var container = this.container;
            var particles = container.particles;
            var pOptions = particle.particlesOptions;

            if (particle.links.length > 0) {
              this.context.save();
              var p1Links = particle.links.filter(function (l) {
                var linkFreq = container.particles.getLinkFrequency(particle, l.destination);
                return linkFreq <= pOptions.links.frequency;
              });

              var _iterator22 = _createForOfIteratorHelper(p1Links),
                  _step21;

              try {
                var _loop7 = function _loop7() {
                  var link = _step21.value;
                  var p2 = link.destination;

                  if (pOptions.links.triangles.enable) {
                    var links = p1Links.map(function (l) {
                      return l.destination;
                    });
                    var vertices = p2.links.filter(function (t) {
                      var linkFreq = container.particles.getLinkFrequency(p2, t.destination);
                      return linkFreq <= p2.particlesOptions.links.frequency && links.indexOf(t.destination) >= 0;
                    });

                    if (vertices.length) {
                      var _iterator23 = _createForOfIteratorHelper(vertices),
                          _step22;

                      try {
                        for (_iterator23.s(); !(_step22 = _iterator23.n()).done;) {
                          var vertex = _step22.value;
                          var p3 = vertex.destination;
                          var triangleFreq = particles.getTriangleFrequency(particle, p2, p3);

                          if (triangleFreq > pOptions.links.triangles.frequency) {
                            continue;
                          }

                          _this244.drawLinkTriangle(particle, link, vertex);
                        }
                      } catch (err) {
                        _iterator23.e(err);
                      } finally {
                        _iterator23.f();
                      }
                    }
                  }

                  if (link.opacity > 0 && container.retina.linksWidth > 0) {
                    _this244.drawLinkLine(particle, link);
                  }
                };

                for (_iterator22.s(); !(_step21 = _iterator22.n()).done;) {
                  _loop7();
                }
              } catch (err) {
                _iterator22.e(err);
              } finally {
                _iterator22.f();
              }

              this.context.restore();
            }
          }
        }, {
          key: "drawPlugin",
          value: function drawPlugin(plugin, delta) {
            if (!this.context) {
              return;
            }

            Utils_1.CanvasUtils.drawPlugin(this.context, plugin, delta);
          }
        }, {
          key: "drawLight",
          value: function drawLight(mousePos) {
            if (!this.context) {
              return;
            }

            Utils_1.CanvasUtils.drawLight(this.container, this.context, mousePos);
          }
        }, {
          key: "paintBase",
          value: function paintBase(baseColor) {
            if (!this.context) {
              return;
            }

            Utils_1.CanvasUtils.paintBase(this.context, this.size, baseColor);
          }
        }, {
          key: "lineStyle",
          value: function lineStyle(p1, p2) {
            var options = this.container.options;
            var connectOptions = options.interactivity.modes.connect;

            if (this.context) {
              return Utils_1.CanvasUtils.gradient(this.context, p1, p2, connectOptions.links.opacity);
            }
          }
        }, {
          key: "initBackground",
          value: function initBackground() {
            var options = this.container.options;
            var background = options.background;
            var element = this.element;

            if (!element) {
              return;
            }

            var elementStyle = element.style;

            if (background.color) {
              var color = Utils_1.ColorUtils.colorToRgb(background.color);

              if (color) {
                elementStyle.backgroundColor = Utils_1.ColorUtils.getStyleFromRgb(color, background.opacity);
              }
            }

            if (background.image) {
              elementStyle.backgroundImage = background.image;
            }

            if (background.position) {
              elementStyle.backgroundPosition = background.position;
            }

            if (background.repeat) {
              elementStyle.backgroundRepeat = background.repeat;
            }

            if (background.size) {
              elementStyle.backgroundSize = background.size;
            }
          }
        }]);

        return Canvas;
      }();

      exports.Canvas = Canvas;
      /***/
    },

    /***/
    81233:
    /*!*********************************************************!*\
      !*** ./node_modules/tsparticles/dist/Core/Container.js ***!
      \*********************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function (resolve) {
            resolve(value);
          });
        }

        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }

          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }

          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }

          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Container = void 0;

      var Canvas_1 = __webpack_require__(
      /*! ./Canvas */
      25075);

      var Particles_1 = __webpack_require__(
      /*! ./Particles */
      56143);

      var Retina_1 = __webpack_require__(
      /*! ./Retina */
      69006);

      var FrameManager_1 = __webpack_require__(
      /*! ./FrameManager */
      92965);

      var Options_1 = __webpack_require__(
      /*! ../Options/Classes/Options */
      26703);

      var Utils_1 = __webpack_require__(
      /*! ../Utils */
      57711);

      var Container = /*#__PURE__*/function () {
        function Container(id, sourceOptions) {
          var _this245 = this;

          _classCallCheck2(this, Container);

          this.id = id;
          this.sourceOptions = sourceOptions;
          this.firstStart = true;
          this.started = false;
          this.destroyed = false;
          this.paused = true;
          this.lastFrameTime = 0;
          this.pageHidden = false;
          this.retina = new Retina_1.Retina(this);
          this.canvas = new Canvas_1.Canvas(this);
          this.particles = new Particles_1.Particles(this);
          this.drawer = new FrameManager_1.FrameManager(this);
          this.noise = {
            generate: function generate() {
              return {
                angle: Math.random() * Math.PI * 2,
                length: Math.random()
              };
            },
            init: function init() {},
            update: function update() {}
          };
          this.interactivity = {
            mouse: {
              clicking: false,
              inside: false
            }
          };
          this.bubble = {};
          this.repulse = {
            particles: []
          };
          this.attract = {
            particles: []
          };
          this.plugins = new Map();
          this.drawers = new Map();
          this.density = 1;
          this.options = new Options_1.Options();

          for (var _len26 = arguments.length, presets = new Array(_len26 > 2 ? _len26 - 2 : 0), _key27 = 2; _key27 < _len26; _key27++) {
            presets[_key27 - 2] = arguments[_key27];
          }

          for (var _i31 = 0, _presets = presets; _i31 < _presets.length; _i31++) {
            var preset = _presets[_i31];
            this.options.load(Utils_1.Plugins.getPreset(preset));
          }

          var shapes = Utils_1.Plugins.getSupportedShapes();

          var _iterator24 = _createForOfIteratorHelper(shapes),
              _step23;

          try {
            for (_iterator24.s(); !(_step23 = _iterator24.n()).done;) {
              var type = _step23.value;
              var drawer = Utils_1.Plugins.getShapeDrawer(type);

              if (drawer) {
                this.drawers.set(type, drawer);
              }
            }
          } catch (err) {
            _iterator24.e(err);
          } finally {
            _iterator24.f();
          }

          if (this.sourceOptions) {
            this.options.load(this.sourceOptions);
          }

          this.fpsLimit = this.options.fpsLimit > 0 ? this.options.fpsLimit : 60;
          this.options.setTheme(undefined);
          this.eventListeners = new Utils_1.EventListeners(this);

          if (typeof IntersectionObserver !== "undefined" && IntersectionObserver) {
            this.intersectionObserver = new IntersectionObserver(function (entries) {
              return _this245.intersectionManager(entries);
            });
          }
        }

        _createClass2(Container, [{
          key: "play",
          value: function play(force) {
            var needsUpdate = this.paused || force;

            if (this.firstStart && !this.options.autoPlay) {
              this.firstStart = false;
              return;
            }

            if (this.paused) {
              this.paused = false;
            }

            if (needsUpdate) {
              var _iterator25 = _createForOfIteratorHelper(this.plugins),
                  _step24;

              try {
                for (_iterator25.s(); !(_step24 = _iterator25.n()).done;) {
                  var _step24$value = _slicedToArray(_step24.value, 2),
                      plugin = _step24$value[1];

                  if (plugin.play) {
                    plugin.play();
                  }
                }
              } catch (err) {
                _iterator25.e(err);
              } finally {
                _iterator25.f();
              }

              this.lastFrameTime = performance.now();
            }

            this.draw();
          }
        }, {
          key: "pause",
          value: function pause() {
            if (this.drawAnimationFrame !== undefined) {
              Utils_1.Utils.cancelAnimation(this.drawAnimationFrame);
              delete this.drawAnimationFrame;
            }

            if (this.paused) {
              return;
            }

            var _iterator26 = _createForOfIteratorHelper(this.plugins),
                _step25;

            try {
              for (_iterator26.s(); !(_step25 = _iterator26.n()).done;) {
                var _step25$value = _slicedToArray(_step25.value, 2),
                    plugin = _step25$value[1];

                if (plugin.pause) {
                  plugin.pause();
                }
              }
            } catch (err) {
              _iterator26.e(err);
            } finally {
              _iterator26.f();
            }

            if (!this.pageHidden) {
              this.paused = true;
            }
          }
        }, {
          key: "draw",
          value: function draw() {
            var _this246 = this;

            this.drawAnimationFrame = Utils_1.Utils.animate(function (timestamp) {
              return _this246.drawer.nextFrame(timestamp);
            });
          }
        }, {
          key: "getAnimationStatus",
          value: function getAnimationStatus() {
            return !this.paused;
          }
        }, {
          key: "setNoise",
          value: function setNoise(noiseOrGenerator, init, update) {
            if (!noiseOrGenerator) {
              return;
            }

            if (typeof noiseOrGenerator === "function") {
              this.noise.generate = noiseOrGenerator;

              if (init) {
                this.noise.init = init;
              }

              if (update) {
                this.noise.update = update;
              }
            } else {
              if (noiseOrGenerator.generate) {
                this.noise.generate = noiseOrGenerator.generate;
              }

              if (noiseOrGenerator.init) {
                this.noise.init = noiseOrGenerator.init;
              }

              if (noiseOrGenerator.update) {
                this.noise.update = noiseOrGenerator.update;
              }
            }
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.stop();
            this.canvas.destroy();

            var _iterator27 = _createForOfIteratorHelper(this.drawers),
                _step26;

            try {
              for (_iterator27.s(); !(_step26 = _iterator27.n()).done;) {
                var _step26$value = _slicedToArray(_step26.value, 2),
                    drawer = _step26$value[1];

                if (drawer.destroy) {
                  drawer.destroy(this);
                }
              }
            } catch (err) {
              _iterator27.e(err);
            } finally {
              _iterator27.f();
            }

            var _iterator28 = _createForOfIteratorHelper(this.drawers.keys()),
                _step27;

            try {
              for (_iterator28.s(); !(_step27 = _iterator28.n()).done;) {
                var key = _step27.value;
                this.drawers["delete"](key);
              }
            } catch (err) {
              _iterator28.e(err);
            } finally {
              _iterator28.f();
            }

            this.destroyed = true;
          }
        }, {
          key: "exportImg",
          value: function exportImg(callback) {
            this.exportImage(callback);
          }
        }, {
          key: "exportImage",
          value: function exportImage(callback, type, quality) {
            var _a;

            return (_a = this.canvas.element) === null || _a === void 0 ? void 0 : _a.toBlob(callback, type !== null && type !== void 0 ? type : "image/png", quality);
          }
        }, {
          key: "exportConfiguration",
          value: function exportConfiguration() {
            return JSON.stringify(this.options, undefined, 2);
          }
        }, {
          key: "refresh",
          value: function refresh() {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
              return regeneratorRuntime.wrap(function _callee$(_context4) {
                while (1) {
                  switch (_context4.prev = _context4.next) {
                    case 0:
                      this.stop();
                      _context4.next = 3;
                      return this.start();

                    case 3:
                    case "end":
                      return _context4.stop();
                  }
                }
              }, _callee, this);
            }));
          }
        }, {
          key: "stop",
          value: function stop() {
            if (!this.started) {
              return;
            }

            this.firstStart = true;
            this.started = false;
            this.eventListeners.removeListeners();
            this.pause();
            this.particles.clear();
            this.canvas.clear();

            if (this.interactivity.element instanceof HTMLElement && this.intersectionObserver) {
              this.intersectionObserver.observe(this.interactivity.element);
            }

            var _iterator29 = _createForOfIteratorHelper(this.plugins),
                _step28;

            try {
              for (_iterator29.s(); !(_step28 = _iterator29.n()).done;) {
                var _step28$value = _slicedToArray(_step28.value, 2),
                    plugin = _step28$value[1];

                if (plugin.stop) {
                  plugin.stop();
                }
              }
            } catch (err) {
              _iterator29.e(err);
            } finally {
              _iterator29.f();
            }

            var _iterator30 = _createForOfIteratorHelper(this.plugins.keys()),
                _step29;

            try {
              for (_iterator30.s(); !(_step29 = _iterator30.n()).done;) {
                var key = _step29.value;
                this.plugins["delete"](key);
              }
            } catch (err) {
              _iterator30.e(err);
            } finally {
              _iterator30.f();
            }

            this.particles.linksColors = new Map();
            delete this.particles.grabLineColor;
            delete this.particles.linksColor;
          }
        }, {
          key: "loadTheme",
          value: function loadTheme(name) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
              return regeneratorRuntime.wrap(function _callee2$(_context5) {
                while (1) {
                  switch (_context5.prev = _context5.next) {
                    case 0:
                      this.options.setTheme(name);
                      _context5.next = 3;
                      return this.refresh();

                    case 3:
                    case "end":
                      return _context5.stop();
                  }
                }
              }, _callee2, this);
            }));
          }
        }, {
          key: "start",
          value: function start() {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
              var _iterator31, _step30, _step30$value, plugin;

              return regeneratorRuntime.wrap(function _callee3$(_context6) {
                while (1) {
                  switch (_context6.prev = _context6.next) {
                    case 0:
                      if (!this.started) {
                        _context6.next = 2;
                        break;
                      }

                      return _context6.abrupt("return");

                    case 2:
                      _context6.next = 4;
                      return this.init();

                    case 4:
                      this.started = true;
                      this.eventListeners.addListeners();

                      if (this.interactivity.element instanceof HTMLElement && this.intersectionObserver) {
                        this.intersectionObserver.observe(this.interactivity.element);
                      }

                      _iterator31 = _createForOfIteratorHelper(this.plugins);
                      _context6.prev = 8;

                      _iterator31.s();

                    case 10:
                      if ((_step30 = _iterator31.n()).done) {
                        _context6.next = 20;
                        break;
                      }

                      _step30$value = _slicedToArray(_step30.value, 2), plugin = _step30$value[1];

                      if (!(plugin.startAsync !== undefined)) {
                        _context6.next = 17;
                        break;
                      }

                      _context6.next = 15;
                      return plugin.startAsync();

                    case 15:
                      _context6.next = 18;
                      break;

                    case 17:
                      if (plugin.start !== undefined) {
                        plugin.start();
                      }

                    case 18:
                      _context6.next = 10;
                      break;

                    case 20:
                      _context6.next = 25;
                      break;

                    case 22:
                      _context6.prev = 22;
                      _context6.t0 = _context6["catch"](8);

                      _iterator31.e(_context6.t0);

                    case 25:
                      _context6.prev = 25;

                      _iterator31.f();

                      return _context6.finish(25);

                    case 28:
                      this.play();

                    case 29:
                    case "end":
                      return _context6.stop();
                  }
                }
              }, _callee3, this, [[8, 22, 25, 28]]);
            }));
          }
        }, {
          key: "init",
          value: function init() {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
              var availablePlugins, _iterator32, _step31, _step31$value, id, plugin, _iterator33, _step32, _step32$value, drawer, _iterator34, _step33, _step33$value, _plugin2;

              return regeneratorRuntime.wrap(function _callee4$(_context7) {
                while (1) {
                  switch (_context7.prev = _context7.next) {
                    case 0:
                      this.retina.init();
                      this.canvas.init();
                      this.fpsLimit = this.options.fpsLimit > 0 ? this.options.fpsLimit : 60;
                      availablePlugins = Utils_1.Plugins.getAvailablePlugins(this);
                      _iterator32 = _createForOfIteratorHelper(availablePlugins);

                      try {
                        for (_iterator32.s(); !(_step31 = _iterator32.n()).done;) {
                          _step31$value = _slicedToArray(_step31.value, 2), id = _step31$value[0], plugin = _step31$value[1];
                          this.plugins.set(id, plugin);
                        }
                      } catch (err) {
                        _iterator32.e(err);
                      } finally {
                        _iterator32.f();
                      }

                      _iterator33 = _createForOfIteratorHelper(this.drawers);
                      _context7.prev = 7;

                      _iterator33.s();

                    case 9:
                      if ((_step32 = _iterator33.n()).done) {
                        _context7.next = 16;
                        break;
                      }

                      _step32$value = _slicedToArray(_step32.value, 2), drawer = _step32$value[1];

                      if (!drawer.init) {
                        _context7.next = 14;
                        break;
                      }

                      _context7.next = 14;
                      return drawer.init(this);

                    case 14:
                      _context7.next = 9;
                      break;

                    case 16:
                      _context7.next = 21;
                      break;

                    case 18:
                      _context7.prev = 18;
                      _context7.t0 = _context7["catch"](7);

                      _iterator33.e(_context7.t0);

                    case 21:
                      _context7.prev = 21;

                      _iterator33.f();

                      return _context7.finish(21);

                    case 24:
                      _iterator34 = _createForOfIteratorHelper(this.plugins);
                      _context7.prev = 25;

                      _iterator34.s();

                    case 27:
                      if ((_step33 = _iterator34.n()).done) {
                        _context7.next = 38;
                        break;
                      }

                      _step33$value = _slicedToArray(_step33.value, 2), _plugin2 = _step33$value[1];

                      if (!_plugin2.init) {
                        _context7.next = 33;
                        break;
                      }

                      _plugin2.init(this.options);

                      _context7.next = 36;
                      break;

                    case 33:
                      if (!(_plugin2.initAsync !== undefined)) {
                        _context7.next = 36;
                        break;
                      }

                      _context7.next = 36;
                      return _plugin2.initAsync(this.options);

                    case 36:
                      _context7.next = 27;
                      break;

                    case 38:
                      _context7.next = 43;
                      break;

                    case 40:
                      _context7.prev = 40;
                      _context7.t1 = _context7["catch"](25);

                      _iterator34.e(_context7.t1);

                    case 43:
                      _context7.prev = 43;

                      _iterator34.f();

                      return _context7.finish(43);

                    case 46:
                      this.canvas.initSize();
                      this.particles.init();
                      this.particles.setDensity();

                    case 49:
                    case "end":
                      return _context7.stop();
                  }
                }
              }, _callee4, this, [[7, 18, 21, 24], [25, 40, 43, 46]]);
            }));
          }
        }, {
          key: "intersectionManager",
          value: function intersectionManager(entries) {
            if (!this.options.pauseOnOutsideViewport) {
              return;
            }

            var _iterator35 = _createForOfIteratorHelper(entries),
                _step34;

            try {
              for (_iterator35.s(); !(_step34 = _iterator35.n()).done;) {
                var entry = _step34.value;

                if (entry.target !== this.interactivity.element) {
                  continue;
                }

                if (entry.isIntersecting) {
                  this.play();
                } else {
                  this.pause();
                }
              }
            } catch (err) {
              _iterator35.e(err);
            } finally {
              _iterator35.f();
            }
          }
        }]);

        return Container;
      }();

      exports.Container = Container;
      /***/
    },

    /***/
    92965:
    /*!************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Core/FrameManager.js ***!
      \************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.FrameManager = void 0;

      var FrameManager = /*#__PURE__*/function () {
        function FrameManager(container) {
          _classCallCheck2(this, FrameManager);

          this.container = container;
        }

        _createClass2(FrameManager, [{
          key: "nextFrame",
          value: function nextFrame(timestamp) {
            try {
              var container = this.container;

              if (container.lastFrameTime !== undefined && timestamp < container.lastFrameTime + 1000 / container.fpsLimit) {
                container.draw();
                return;
              }

              var deltaValue = timestamp - container.lastFrameTime;
              var delta = {
                value: deltaValue,
                factor: 60 * deltaValue / 1000
              };
              container.lastFrameTime = timestamp;
              container.particles.draw(delta);

              if (container.getAnimationStatus()) {
                container.draw();
              }
            } catch (e) {
              console.error("tsParticles error in animation loop", e);
            }
          }
        }]);

        return FrameManager;
      }();

      exports.FrameManager = FrameManager;
      /***/
    },

    /***/
    80903:
    /*!******************************************************!*\
      !*** ./node_modules/tsparticles/dist/Core/Loader.js ***!
      \******************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function (resolve) {
            resolve(value);
          });
        }

        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }

          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }

          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }

          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Loader = void 0;

      var Container_1 = __webpack_require__(
      /*! ./Container */
      81233);

      var Utils_1 = __webpack_require__(
      /*! ../Utils */
      57711);

      var tsParticlesDom = [];

      function fetchError(statusCode) {
        console.error("Error tsParticles - fetch status: ".concat(statusCode));
        console.error("Error tsParticles - File config not found");
      }

      var Loader = /*#__PURE__*/function () {
        function Loader() {
          _classCallCheck2(this, Loader);
        }

        _createClass2(Loader, null, [{
          key: "dom",
          value: function dom() {
            return tsParticlesDom;
          }
        }, {
          key: "domItem",
          value: function domItem(index) {
            var dom = Loader.dom();
            var item = dom[index];

            if (item && !item.destroyed) {
              return item;
            }

            dom.splice(index, 1);
          }
        }, {
          key: "load",
          value: function load(tagId, options, index) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
              var domContainer;
              return regeneratorRuntime.wrap(function _callee5$(_context8) {
                while (1) {
                  switch (_context8.prev = _context8.next) {
                    case 0:
                      domContainer = document.getElementById(tagId);

                      if (domContainer) {
                        _context8.next = 3;
                        break;
                      }

                      return _context8.abrupt("return");

                    case 3:
                      return _context8.abrupt("return", Loader.set(tagId, domContainer, options, index));

                    case 4:
                    case "end":
                      return _context8.stop();
                  }
                }
              }, _callee5);
            }));
          }
        }, {
          key: "set",
          value: function set(id, domContainer, options, index) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
              var currentOptions, dom, oldIndex, old, canvasEl, generatedCanvas, existingCanvases, newItem;
              return regeneratorRuntime.wrap(function _callee6$(_context9) {
                while (1) {
                  switch (_context9.prev = _context9.next) {
                    case 0:
                      currentOptions = options instanceof Array ? Utils_1.Utils.itemFromArray(options, index) : options;
                      dom = Loader.dom();
                      oldIndex = dom.findIndex(function (v) {
                        return v.id === id;
                      });

                      if (oldIndex >= 0) {
                        old = Loader.domItem(oldIndex);

                        if (old && !old.destroyed) {
                          old.destroy();
                          dom.splice(oldIndex, 1);
                        }
                      }

                      if (domContainer.tagName.toLowerCase() === "canvas") {
                        canvasEl = domContainer;
                        generatedCanvas = false;
                      } else {
                        existingCanvases = domContainer.getElementsByTagName("canvas");

                        if (existingCanvases.length) {
                          canvasEl = existingCanvases[0];

                          if (!canvasEl.className) {
                            canvasEl.className = Utils_1.Constants.canvasClass;
                          }

                          generatedCanvas = false;
                        } else {
                          generatedCanvas = true;
                          canvasEl = document.createElement("canvas");
                          canvasEl.className = Utils_1.Constants.canvasClass;
                          canvasEl.style.width = "100%";
                          canvasEl.style.height = "100%";
                          domContainer.appendChild(canvasEl);
                        }
                      }

                      newItem = new Container_1.Container(id, currentOptions);

                      if (oldIndex >= 0) {
                        dom.splice(oldIndex, 0, newItem);
                      } else {
                        dom.push(newItem);
                      }

                      newItem.canvas.loadCanvas(canvasEl, generatedCanvas);
                      _context9.next = 10;
                      return newItem.start();

                    case 10:
                      return _context9.abrupt("return", newItem);

                    case 11:
                    case "end":
                      return _context9.stop();
                  }
                }
              }, _callee6);
            }));
          }
        }, {
          key: "loadJSON",
          value: function loadJSON(tagId, jsonUrl, index) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
              var url, response;
              return regeneratorRuntime.wrap(function _callee7$(_context10) {
                while (1) {
                  switch (_context10.prev = _context10.next) {
                    case 0:
                      url = jsonUrl instanceof Array ? Utils_1.Utils.itemFromArray(jsonUrl, index) : jsonUrl;
                      _context10.next = 3;
                      return fetch(url);

                    case 3:
                      response = _context10.sent;

                      if (!response.ok) {
                        _context10.next = 13;
                        break;
                      }

                      _context10.t0 = Loader;
                      _context10.t1 = tagId;
                      _context10.next = 9;
                      return response.json();

                    case 9:
                      _context10.t2 = _context10.sent;
                      return _context10.abrupt("return", _context10.t0.load.call(_context10.t0, _context10.t1, _context10.t2));

                    case 13:
                      fetchError(response.status);

                    case 14:
                    case "end":
                      return _context10.stop();
                  }
                }
              }, _callee7);
            }));
          }
        }, {
          key: "setJSON",
          value: function setJSON(id, domContainer, jsonUrl) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
              var response, options;
              return regeneratorRuntime.wrap(function _callee8$(_context11) {
                while (1) {
                  switch (_context11.prev = _context11.next) {
                    case 0:
                      _context11.next = 2;
                      return fetch(jsonUrl);

                    case 2:
                      response = _context11.sent;

                      if (!response.ok) {
                        _context11.next = 10;
                        break;
                      }

                      _context11.next = 6;
                      return response.json();

                    case 6:
                      options = _context11.sent;
                      return _context11.abrupt("return", Loader.set(id, domContainer, options));

                    case 10:
                      fetchError(response.status);

                    case 11:
                    case "end":
                      return _context11.stop();
                  }
                }
              }, _callee8);
            }));
          }
        }, {
          key: "setOnClickHandler",
          value: function setOnClickHandler(callback) {
            var dom = Loader.dom();

            if (dom.length === 0) {
              throw new Error("Can only set click handlers after calling tsParticles.load() or tsParticles.loadJSON()");
            }

            var _iterator36 = _createForOfIteratorHelper(dom),
                _step35;

            try {
              var _loop8 = function _loop8() {
                var domItem = _step35.value;
                var el = domItem.interactivity.element;

                if (!el) {
                  return "continue";
                }

                var clickOrTouchHandler = function clickOrTouchHandler(e, pos) {
                  if (domItem.destroyed) {
                    return;
                  }

                  var pxRatio = domItem.retina.pixelRatio;
                  var posRetina = {
                    x: pos.x * pxRatio,
                    y: pos.y * pxRatio
                  };
                  var particles = domItem.particles.quadTree.queryCircle(posRetina, domItem.retina.sizeValue);
                  callback(e, particles);
                };

                var clickHandler = function clickHandler(e) {
                  if (domItem.destroyed) {
                    return;
                  }

                  var mouseEvent = e;
                  var pos = {
                    x: mouseEvent.offsetX || mouseEvent.clientX,
                    y: mouseEvent.offsetY || mouseEvent.clientY
                  };
                  clickOrTouchHandler(e, pos);
                };

                var touchStartHandler = function touchStartHandler() {
                  if (domItem.destroyed) {
                    return;
                  }

                  touched = true;
                  touchMoved = false;
                };

                var touchMoveHandler = function touchMoveHandler() {
                  if (domItem.destroyed) {
                    return;
                  }

                  touchMoved = true;
                };

                var touchEndHandler = function touchEndHandler(e) {
                  var _a, _b, _c;

                  if (domItem.destroyed) {
                    return;
                  }

                  if (touched && !touchMoved) {
                    var touchEvent = e;
                    var lastTouch = touchEvent.touches[touchEvent.touches.length - 1];
                    var canvasRect = (_a = domItem.canvas.element) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
                    var pos = {
                      x: lastTouch.clientX - ((_b = canvasRect === null || canvasRect === void 0 ? void 0 : canvasRect.left) !== null && _b !== void 0 ? _b : 0),
                      y: lastTouch.clientY - ((_c = canvasRect === null || canvasRect === void 0 ? void 0 : canvasRect.top) !== null && _c !== void 0 ? _c : 0)
                    };
                    clickOrTouchHandler(e, pos);
                  }

                  touched = false;
                  touchMoved = false;
                };

                var touchCancelHandler = function touchCancelHandler() {
                  if (domItem.destroyed) {
                    return;
                  }

                  touched = false;
                  touchMoved = false;
                };

                var touched = false;
                var touchMoved = false;
                el.addEventListener("click", clickHandler);
                el.addEventListener("touchstart", touchStartHandler);
                el.addEventListener("touchmove", touchMoveHandler);
                el.addEventListener("touchend", touchEndHandler);
                el.addEventListener("touchcancel", touchCancelHandler);
              };

              for (_iterator36.s(); !(_step35 = _iterator36.n()).done;) {
                var _ret2 = _loop8();

                if (_ret2 === "continue") continue;
              }
            } catch (err) {
              _iterator36.e(err);
            } finally {
              _iterator36.f();
            }
          }
        }]);

        return Loader;
      }();

      exports.Loader = Loader;
      /***/
    },

    /***/
    27113:
    /*!********************************************************!*\
      !*** ./node_modules/tsparticles/dist/Core/Particle.js ***!
      \********************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Particle = void 0;

      var Updater_1 = __webpack_require__(
      /*! ./Particle/Updater */
      42804);

      var Particles_1 = __webpack_require__(
      /*! ../Options/Classes/Particles/Particles */
      57622);

      var Shape_1 = __webpack_require__(
      /*! ../Options/Classes/Particles/Shape/Shape */
      61125);

      var Enums_1 = __webpack_require__(
      /*! ../Enums */
      9717);

      var Utils_1 = __webpack_require__(
      /*! ../Utils */
      57711);

      var Infecter_1 = __webpack_require__(
      /*! ./Particle/Infecter */
      67120);

      var Mover_1 = __webpack_require__(
      /*! ./Particle/Mover */
      98449);

      var Particle = /*#__PURE__*/function () {
        function Particle(id, container, position, overrideOptions) {
          _classCallCheck2(this, Particle);

          var _a, _b, _c, _d, _e, _f, _g, _h, _j;

          this.id = id;
          this.container = container;
          this.links = [];
          this.fill = true;
          this.close = true;
          this.lastNoiseTime = 0;
          this.destroyed = false;
          this.misplaced = false;
          var pxRatio = container.retina.pixelRatio;
          var options = container.options;
          var particlesOptions = new Particles_1.Particles();
          particlesOptions.load(options.particles);
          var shapeType = particlesOptions.shape.type;
          var reduceDuplicates = particlesOptions.reduceDuplicates;
          this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;

          if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {
            if (overrideOptions.shape.type) {
              var overrideShapeType = overrideOptions.shape.type;
              this.shape = overrideShapeType instanceof Array ? Utils_1.Utils.itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;
            }

            var shapeOptions = new Shape_1.Shape();
            shapeOptions.load(overrideOptions.shape);

            if (this.shape) {
              var shapeData = shapeOptions.options[this.shape];

              if (shapeData) {
                this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);
              }
            }
          } else {
            var _shapeData = particlesOptions.shape.options[this.shape];

            if (_shapeData) {
              this.shapeData = Utils_1.Utils.deepExtend({}, _shapeData instanceof Array ? Utils_1.Utils.itemFromArray(_shapeData, this.id, reduceDuplicates) : _shapeData);
            }
          }

          if (overrideOptions !== undefined) {
            particlesOptions.load(overrideOptions);
          }

          if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {
            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);
          }

          this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;
          this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;
          this.particlesOptions = particlesOptions;
          this.noiseDelay = Utils_1.NumberUtils.getValue(this.particlesOptions.move.noise.delay) * 1000;
          container.retina.initParticle(this);
          var color = this.particlesOptions.color;
          var sizeOptions = this.particlesOptions.size;
          var sizeValue = Utils_1.NumberUtils.getValue(sizeOptions) * container.retina.pixelRatio;
          var randomSize = typeof sizeOptions.random === "boolean" ? sizeOptions.random : sizeOptions.random.enable;
          this.size = {
            value: sizeValue
          };
          this.direction = this.particlesOptions.move.direction;
          this.bubble = {
            inRange: false
          };
          this.initialVelocity = this.calculateVelocity();
          this.velocity = {
            horizontal: this.initialVelocity.horizontal,
            vertical: this.initialVelocity.vertical
          };
          this.pathAngle = Math.atan2(this.initialVelocity.vertical, this.initialVelocity.horizontal);
          var rotateOptions = this.particlesOptions.rotate;
          this.rotate = {
            value: (rotateOptions.random.enable ? Math.random() * 360 : rotateOptions.value) * Math.PI / 180
          };
          var rotateDirection = rotateOptions.direction;

          if (rotateDirection === Enums_1.RotateDirection.random) {
            var index = Math.floor(Math.random() * 2);
            rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;
          }

          switch (rotateDirection) {
            case Enums_1.RotateDirection.counterClockwise:
            case "counterClockwise":
              this.rotate.status = Enums_1.AnimationStatus.decreasing;
              break;

            case Enums_1.RotateDirection.clockwise:
              this.rotate.status = Enums_1.AnimationStatus.increasing;
              break;
          }

          var rotateAnimation = this.particlesOptions.rotate.animation;

          if (rotateAnimation.enable) {
            this.rotate.velocity = rotateAnimation.speed / 360 * container.retina.reduceFactor;

            if (!rotateAnimation.sync) {
              this.rotate.velocity *= Math.random();
            }
          }

          var sizeAnimation = this.particlesOptions.size.animation;

          if (sizeAnimation.enable) {
            this.size.status = Enums_1.AnimationStatus.increasing;

            if (!randomSize) {
              switch (sizeAnimation.startValue) {
                case Enums_1.StartValueType.min:
                  this.size.value = sizeAnimation.minimumValue * pxRatio;
                  break;

                case Enums_1.StartValueType.random:
                  this.size.value = Utils_1.NumberUtils.randomInRange(sizeAnimation.minimumValue * pxRatio, this.size.value);
                  break;

                case Enums_1.StartValueType.max:
                default:
                  this.size.status = Enums_1.AnimationStatus.decreasing;
                  break;
              }
            }

            this.size.velocity = ((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;

            if (!sizeAnimation.sync) {
              this.size.velocity *= Math.random();
            }
          }

          this.color = {
            value: Utils_1.ColorUtils.colorToHsl(color, this.id, reduceDuplicates)
          };
          var colorAnimation = this.particlesOptions.color.animation;

          if (colorAnimation.enable) {
            this.color.velocity = colorAnimation.speed / 100 * container.retina.reduceFactor;

            if (!colorAnimation.sync) {
              this.color.velocity *= Math.random();
            }
          }

          this.position = this.calcPosition(this.container, position);
          this.initialPosition = {
            x: this.position.x,
            y: this.position.y
          };
          this.offset = {
            x: 0,
            y: 0
          };
          var opacityOptions = this.particlesOptions.opacity;
          var randomOpacity = typeof opacityOptions.random === "boolean" ? opacityOptions.random : opacityOptions.random.enable;
          this.opacity = {
            value: Utils_1.NumberUtils.getValue(opacityOptions)
          };
          var opacityAnimation = opacityOptions.animation;

          if (opacityAnimation.enable) {
            this.opacity.status = Enums_1.AnimationStatus.increasing;

            if (!randomOpacity) {
              switch (opacityAnimation.startValue) {
                case Enums_1.StartValueType.min:
                  this.opacity.value = opacityAnimation.minimumValue;
                  break;

                case Enums_1.StartValueType.random:
                  this.opacity.value = Utils_1.NumberUtils.randomInRange(opacityAnimation.minimumValue, this.opacity.value);
                  break;

                case Enums_1.StartValueType.max:
                default:
                  this.opacity.status = Enums_1.AnimationStatus.decreasing;
                  break;
              }
            }

            this.opacity.velocity = opacityAnimation.speed / 100 * container.retina.reduceFactor;

            if (!opacityAnimation.sync) {
              this.opacity.velocity *= Math.random();
            }
          }

          this.sides = 24;
          var drawer = container.drawers.get(this.shape);

          if (!drawer) {
            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);

            if (drawer) {
              container.drawers.set(this.shape, drawer);
            }
          }

          var sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;

          if (sideCountFunc) {
            this.sides = sideCountFunc(this);
          }

          var imageShape = this.loadImageShape(container, drawer);

          if (imageShape) {
            this.image = imageShape.image;
            this.fill = imageShape.fill;
            this.close = imageShape.close;
          }

          this.stroke = this.particlesOptions.stroke instanceof Array ? Utils_1.Utils.itemFromArray(this.particlesOptions.stroke, this.id, reduceDuplicates) : this.particlesOptions.stroke;
          this.strokeWidth = this.stroke.width * container.retina.pixelRatio;
          this.strokeColor = {
            value: (_h = Utils_1.ColorUtils.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.color.value
          };

          if (typeof this.stroke.color !== "string") {
            var strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;

            if (strokeColorAnimation && this.strokeColor) {
              if (strokeColorAnimation.enable) {
                this.strokeColor.velocity = strokeColorAnimation.speed / 100 * container.retina.reduceFactor;

                if (!strokeColorAnimation.sync) {
                  this.strokeColor.velocity = this.strokeColor.velocity * Math.random();
                }
              } else {
                this.strokeColor.velocity = 0;
              }

              if (strokeColorAnimation.enable && !strokeColorAnimation.sync && this.strokeColor.value) {
                this.strokeColor.value.h = Math.random() * 360;
              }
            }
          }

          var lifeOptions = particlesOptions.life;
          this.lifeDelay = container.retina.reduceFactor ? Utils_1.NumberUtils.getValue(lifeOptions.delay) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0;
          this.lifeDelayTime = 0;
          this.lifeDuration = container.retina.reduceFactor ? Utils_1.NumberUtils.getValue(lifeOptions.duration) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0;
          this.lifeTime = 0;
          this.livesRemaining = particlesOptions.life.count;
          this.spawning = this.lifeDelay > 0;

          if (this.lifeDuration <= 0) {
            this.lifeDuration = -1;
          }

          if (this.livesRemaining <= 0) {
            this.livesRemaining = -1;
          }

          this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.particlesOptions.shadow.color);
          this.updater = new Updater_1.Updater(container, this);
          this.infecter = new Infecter_1.Infecter(container);
          this.mover = new Mover_1.Mover(container, this);
        }

        _createClass2(Particle, [{
          key: "move",
          value: function move(delta) {
            this.mover.move(delta);
          }
        }, {
          key: "update",
          value: function update(delta) {
            this.updater.update(delta);
          }
        }, {
          key: "draw",
          value: function draw(delta) {
            this.container.canvas.drawParticle(this, delta);
          }
        }, {
          key: "getPosition",
          value: function getPosition() {
            return {
              x: this.position.x + this.offset.x,
              y: this.position.y + this.offset.y
            };
          }
        }, {
          key: "getRadius",
          value: function getRadius() {
            return this.bubble.radius || this.size.value;
          }
        }, {
          key: "getFillColor",
          value: function getFillColor() {
            var _a;

            return (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.color.value;
          }
        }, {
          key: "getStrokeColor",
          value: function getStrokeColor() {
            var _a, _b;

            return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.strokeColor.value) !== null && _b !== void 0 ? _b : this.color.value;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.destroyed = true;
            this.bubble.inRange = false;
            this.links = [];
          }
        }, {
          key: "calcPosition",
          value: function calcPosition(container, position) {
            var _a, _b;

            var _iterator37 = _createForOfIteratorHelper(container.plugins),
                _step36;

            try {
              for (_iterator37.s(); !(_step36 = _iterator37.n()).done;) {
                var _step36$value = _slicedToArray(_step36.value, 2),
                    plugin = _step36$value[1];

                var pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;

                if (pluginPos !== undefined) {
                  return Utils_1.Utils.deepExtend({}, pluginPos);
                }
              }
            } catch (err) {
              _iterator37.e(err);
            } finally {
              _iterator37.f();
            }

            var pos = {
              x: (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * container.canvas.size.width,
              y: (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * container.canvas.size.height
            };
            var outMode = this.particlesOptions.move.outMode;

            if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {
              if (pos.x > container.canvas.size.width - this.size.value * 2) {
                pos.x -= this.size.value;
              } else if (pos.x < this.size.value * 2) {
                pos.x += this.size.value;
              }
            }

            if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {
              if (pos.y > container.canvas.size.height - this.size.value * 2) {
                pos.y -= this.size.value;
              } else if (pos.y < this.size.value * 2) {
                pos.y += this.size.value;
              }
            }

            return pos;
          }
        }, {
          key: "calculateVelocity",
          value: function calculateVelocity() {
            var baseVelocity = Utils_1.NumberUtils.getParticleBaseVelocity(this);
            var res = {
              horizontal: 0,
              vertical: 0
            };
            var moveOptions = this.particlesOptions.move;
            var rad;
            var radOffset = Math.PI / 4;

            if (typeof moveOptions.angle === "number") {
              rad = Math.PI / 180 * moveOptions.angle;
            } else {
              rad = Math.PI / 180 * moveOptions.angle.value;
              radOffset = Math.PI / 180 * moveOptions.angle.offset;
            }

            var range = {
              left: Math.sin(radOffset + rad / 2) - Math.sin(radOffset - rad / 2),
              right: Math.cos(radOffset + rad / 2) - Math.cos(radOffset - rad / 2)
            };

            if (moveOptions.straight) {
              res.horizontal = baseVelocity.x;
              res.vertical = baseVelocity.y;

              if (moveOptions.random) {
                res.horizontal += Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;
                res.vertical += Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;
              }
            } else {
              res.horizontal = baseVelocity.x + Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;
              res.vertical = baseVelocity.y + Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;
            }

            return res;
          }
        }, {
          key: "loadImageShape",
          value: function loadImageShape(container, drawer) {
            var _this247 = this;

            var _a, _b, _c, _d, _e;

            if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {
              return;
            }

            var imageDrawer = drawer;
            var images = imageDrawer.getImages(container).images;
            var imageData = this.shapeData;
            var image = (_a = images.find(function (t) {
              return t.source === imageData.src;
            })) !== null && _a !== void 0 ? _a : images[0];
            var color = this.getFillColor();
            var imageRes;

            if (!image) {
              return;
            }

            if (image.svgData !== undefined && imageData.replaceColor && color) {
              var svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);
              var svg = new Blob([svgColoredData], {
                type: "image/svg+xml"
              });
              var domUrl = URL || window.URL || window.webkitURL || window;
              var url = domUrl.createObjectURL(svg);
              var img = new Image();
              imageRes = {
                data: image,
                loaded: false,
                ratio: imageData.width / imageData.height,
                replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,
                source: imageData.src
              };
              img.addEventListener("load", function () {
                if (_this247.image) {
                  _this247.image.loaded = true;
                  image.element = img;
                }

                domUrl.revokeObjectURL(url);
              });
              img.addEventListener("error", function () {
                domUrl.revokeObjectURL(url);
                Utils_1.Utils.loadImage(imageData.src).then(function (img2) {
                  if (_this247.image) {
                    image.element = img2.element;
                    _this247.image.loaded = true;
                  }
                });
              });
              img.src = url;
            } else {
              imageRes = {
                data: image,
                loaded: true,
                ratio: imageData.width / imageData.height,
                replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,
                source: imageData.src
              };
            }

            if (!imageRes.ratio) {
              imageRes.ratio = 1;
            }

            var fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;
            var close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;
            return {
              image: imageRes,
              fill: fill,
              close: close
            };
          }
        }]);

        return Particle;
      }();

      exports.Particle = Particle;
      /***/
    },

    /***/
    67120:
    /*!*****************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Core/Particle/Infecter.js ***!
      \*****************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Infecter = void 0;

      var Infecter = /*#__PURE__*/function () {
        function Infecter(container) {
          _classCallCheck2(this, Infecter);

          this.container = container;
        }

        _createClass2(Infecter, [{
          key: "startInfection",
          value: function startInfection(stage) {
            var options = this.container.options;
            var stages = options.infection.stages;
            var stagesCount = stages.length;

            if (stage > stagesCount || stage < 0) {
              return;
            }

            this.infectionDelay = 0;
            this.infectionDelayStage = stage;
          }
        }, {
          key: "updateInfectionStage",
          value: function updateInfectionStage(stage) {
            var options = this.container.options;
            var stagesCount = options.infection.stages.length;

            if (stage > stagesCount || stage < 0 || this.infectionStage !== undefined && this.infectionStage > stage) {
              return;
            }

            this.infectionStage = stage;
            this.infectionTime = 0;
          }
        }, {
          key: "updateInfection",
          value: function updateInfection(delta) {
            var options = this.container.options;
            var infection = options.infection;
            var stages = options.infection.stages;
            var stagesCount = stages.length;

            if (this.infectionDelay !== undefined && this.infectionDelayStage !== undefined) {
              var stage = this.infectionDelayStage;

              if (stage > stagesCount || stage < 0) {
                return;
              }

              if (this.infectionDelay > infection.delay * 1000) {
                this.infectionStage = stage;
                this.infectionTime = 0;
                delete this.infectionDelay;
                delete this.infectionDelayStage;
              } else {
                this.infectionDelay += delta;
              }
            } else {
              delete this.infectionDelay;
              delete this.infectionDelayStage;
            }

            if (this.infectionStage !== undefined && this.infectionTime !== undefined) {
              var infectionStage = stages[this.infectionStage];

              if (infectionStage.duration !== undefined && infectionStage.duration >= 0) {
                if (this.infectionTime > infectionStage.duration * 1000) {
                  this.nextInfectionStage();
                } else {
                  this.infectionTime += delta;
                }
              } else {
                this.infectionTime += delta;
              }
            } else {
              delete this.infectionStage;
              delete this.infectionTime;
            }
          }
        }, {
          key: "nextInfectionStage",
          value: function nextInfectionStage() {
            var options = this.container.options;
            var stagesCount = options.infection.stages.length;

            if (stagesCount <= 0 || this.infectionStage === undefined) {
              return;
            }

            this.infectionTime = 0;

            if (stagesCount <= ++this.infectionStage) {
              if (options.infection.cure) {
                delete this.infectionStage;
                delete this.infectionTime;
                return;
              } else {
                this.infectionStage = 0;
                this.infectionTime = 0;
              }
            }
          }
        }]);

        return Infecter;
      }();

      exports.Infecter = Infecter;
      /***/
    },

    /***/
    92914:
    /*!***************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Core/Particle/InteractionManager.js ***!
      \***************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.InteractionManager = void 0;

      var Grabber_1 = __webpack_require__(
      /*! ../../Interactions/External/Grabber */
      15235);

      var Repulser_1 = __webpack_require__(
      /*! ../../Interactions/External/Repulser */
      85059);

      var Bubbler_1 = __webpack_require__(
      /*! ../../Interactions/External/Bubbler */
      80527);

      var Connector_1 = __webpack_require__(
      /*! ../../Interactions/External/Connector */
      43301);

      var Linker_1 = __webpack_require__(
      /*! ../../Interactions/Particles/Linker */
      77357);

      var Attractor_1 = __webpack_require__(
      /*! ../../Interactions/Particles/Attractor */
      34078);

      var Collider_1 = __webpack_require__(
      /*! ../../Interactions/Particles/Collider */
      39799);

      var Infecter_1 = __webpack_require__(
      /*! ../../Interactions/Particles/Infecter */
      64639);

      var TrailMaker_1 = __webpack_require__(
      /*! ../../Interactions/External/TrailMaker */
      18889);

      var Attractor_2 = __webpack_require__(
      /*! ../../Interactions/External/Attractor */
      96388);

      var Lighter_1 = __webpack_require__(
      /*! ../../Interactions/Particles/Lighter */
      2137);

      var Lighter_2 = __webpack_require__(
      /*! ../../Interactions/External/Lighter */
      93453);

      var Bouncer_1 = __webpack_require__(
      /*! ../../Interactions/External/Bouncer */
      69799);

      var InteractionManager = /*#__PURE__*/function () {
        function InteractionManager(container) {
          _classCallCheck2(this, InteractionManager);

          this.container = container;
          this.externalInteractors = [new Bouncer_1.Bouncer(container), new Bubbler_1.Bubbler(container), new Connector_1.Connector(container), new Grabber_1.Grabber(container), new Lighter_2.Lighter(container), new Attractor_2.Attractor(container), new Repulser_1.Repulser(container), new TrailMaker_1.TrailMaker(container)];
          this.particleInteractors = [new Attractor_1.Attractor(container), new Lighter_1.Lighter(container), new Collider_1.Collider(container), new Infecter_1.Infecter(container), new Linker_1.Linker(container)];
        }

        _createClass2(InteractionManager, [{
          key: "init",
          value: function init() {}
        }, {
          key: "externalInteract",
          value: function externalInteract(delta) {
            var _iterator38 = _createForOfIteratorHelper(this.externalInteractors),
                _step37;

            try {
              for (_iterator38.s(); !(_step37 = _iterator38.n()).done;) {
                var interactor = _step37.value;

                if (interactor.isEnabled()) {
                  interactor.interact(delta);
                }
              }
            } catch (err) {
              _iterator38.e(err);
            } finally {
              _iterator38.f();
            }
          }
        }, {
          key: "particlesInteract",
          value: function particlesInteract(particle, delta) {
            var _iterator39 = _createForOfIteratorHelper(this.externalInteractors),
                _step38;

            try {
              for (_iterator39.s(); !(_step38 = _iterator39.n()).done;) {
                var interactor = _step38.value;
                interactor.reset(particle);
              }
            } catch (err) {
              _iterator39.e(err);
            } finally {
              _iterator39.f();
            }

            var _iterator40 = _createForOfIteratorHelper(this.particleInteractors),
                _step39;

            try {
              for (_iterator40.s(); !(_step39 = _iterator40.n()).done;) {
                var _interactor = _step39.value;

                if (_interactor.isEnabled(particle)) {
                  _interactor.interact(particle, delta);
                }
              }
            } catch (err) {
              _iterator40.e(err);
            } finally {
              _iterator40.f();
            }
          }
        }]);

        return InteractionManager;
      }();

      exports.InteractionManager = InteractionManager;
      /***/
    },

    /***/
    98449:
    /*!**************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Core/Particle/Mover.js ***!
      \**************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Mover = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Enums_1 = __webpack_require__(
      /*! ../../Enums */
      9717);

      var Mover = /*#__PURE__*/function () {
        function Mover(container, particle) {
          _classCallCheck2(this, Mover);

          this.container = container;
          this.particle = particle;
        }

        _createClass2(Mover, [{
          key: "move",
          value: function move(delta) {
            var particle = this.particle;
            particle.bubble.inRange = false;
            particle.links = [];

            var _iterator41 = _createForOfIteratorHelper(this.container.plugins),
                _step40;

            try {
              for (_iterator41.s(); !(_step40 = _iterator41.n()).done;) {
                var _step40$value = _slicedToArray(_step40.value, 2),
                    plugin = _step40$value[1];

                if (particle.destroyed) {
                  break;
                }

                if (plugin.particleUpdate) {
                  plugin.particleUpdate(particle, delta);
                }
              }
            } catch (err) {
              _iterator41.e(err);
            } finally {
              _iterator41.f();
            }

            if (particle.destroyed) {
              return;
            }

            this.moveParticle(delta);
            this.moveParallax();
          }
        }, {
          key: "moveParticle",
          value: function moveParticle(delta) {
            var _a, _b;

            var particle = this.particle;
            var particlesOptions = particle.particlesOptions;

            if (!particlesOptions.move.enable) {
              return;
            }

            var container = this.container;
            var slowFactor = this.getProximitySpeedFactor();
            var baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed) * container.retina.reduceFactor;
            var maxSize = (_b = particle.sizeValue) !== null && _b !== void 0 ? _b : container.retina.sizeValue;
            var sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;
            var moveSpeed = baseSpeed / 2 * sizeFactor * slowFactor * delta.factor;
            this.applyNoise(delta);
            var gravityOptions = particlesOptions.move.gravity;

            if (gravityOptions.enable) {
              particle.velocity.vertical += gravityOptions.acceleration * delta.factor / (60 * moveSpeed);
            }

            var velocity = {
              horizontal: particle.velocity.horizontal * moveSpeed,
              vertical: particle.velocity.vertical * moveSpeed
            };

            if (gravityOptions.enable && velocity.vertical >= gravityOptions.maxSpeed && gravityOptions.maxSpeed > 0) {
              velocity.vertical = gravityOptions.maxSpeed;
              particle.velocity.vertical = velocity.vertical / moveSpeed;
            }

            particle.position.x += velocity.horizontal;
            particle.position.y += velocity.vertical;

            if (particlesOptions.move.vibrate) {
              particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));
              particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));
            }

            var initialPosition = particle.initialPosition;
            var initialDistance = Utils_1.NumberUtils.getDistance(initialPosition, particle.position);

            if (particle.maxDistance) {
              if (initialDistance >= particle.maxDistance && !particle.misplaced) {
                particle.misplaced = initialDistance > particle.maxDistance;
                particle.velocity.horizontal = particle.velocity.vertical / 2 - particle.velocity.horizontal;
                particle.velocity.vertical = particle.velocity.horizontal / 2 - particle.velocity.vertical;
              } else if (initialDistance < particle.maxDistance && particle.misplaced) {
                particle.misplaced = false;
              } else if (particle.misplaced) {
                if (particle.position.x < initialPosition.x && particle.velocity.horizontal < 0 || particle.position.x > initialPosition.x && particle.velocity.horizontal > 0) {
                  particle.velocity.horizontal *= -Math.random();
                }

                if (particle.position.y < initialPosition.y && particle.velocity.vertical < 0 || particle.position.y > initialPosition.y && particle.velocity.vertical > 0) {
                  particle.velocity.vertical *= -Math.random();
                }
              }
            }
          }
        }, {
          key: "applyNoise",
          value: function applyNoise(delta) {
            var particle = this.particle;
            var particlesOptions = particle.particlesOptions;
            var noiseOptions = particlesOptions.move.noise;
            var noiseEnabled = noiseOptions.enable;

            if (!noiseEnabled) {
              return;
            }

            var container = this.container;

            if (particle.lastNoiseTime <= particle.noiseDelay) {
              particle.lastNoiseTime += delta.value;
              return;
            }

            var noise = container.noise.generate(particle);
            particle.velocity.horizontal += Math.cos(noise.angle) * noise.length;
            particle.velocity.horizontal = Utils_1.NumberUtils.clamp(particle.velocity.horizontal, -1, 1);
            particle.velocity.vertical += Math.sin(noise.angle) * noise.length;
            particle.velocity.vertical = Utils_1.NumberUtils.clamp(particle.velocity.vertical, -1, 1);
            particle.lastNoiseTime -= particle.noiseDelay;
          }
        }, {
          key: "moveParallax",
          value: function moveParallax() {
            var container = this.container;
            var options = container.options;

            if (Utils_1.Utils.isSsr() || !options.interactivity.events.onHover.parallax.enable) {
              return;
            }

            var particle = this.particle;
            var parallaxForce = options.interactivity.events.onHover.parallax.force;
            var mousePos = container.interactivity.mouse.position;

            if (!mousePos) {
              return;
            }

            var canvasCenter = {
              x: container.canvas.size.width / 2,
              y: container.canvas.size.height / 2
            };
            var parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;
            var factor = particle.getRadius() / parallaxForce;
            var tmp = {
              x: (mousePos.x - canvasCenter.x) * factor,
              y: (mousePos.y - canvasCenter.y) * factor
            };
            particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;
            particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;
          }
        }, {
          key: "getProximitySpeedFactor",
          value: function getProximitySpeedFactor() {
            var container = this.container;
            var options = container.options;
            var active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);

            if (!active) {
              return 1;
            }

            var mousePos = this.container.interactivity.mouse.position;

            if (!mousePos) {
              return 1;
            }

            var particlePos = this.particle.getPosition();
            var dist = Utils_1.NumberUtils.getDistance(mousePos, particlePos);
            var radius = container.retina.slowModeRadius;

            if (dist > radius) {
              return 1;
            }

            var proximityFactor = dist / radius || 0;
            var slowFactor = options.interactivity.modes.slow.factor;
            return proximityFactor / slowFactor;
          }
        }]);

        return Mover;
      }();

      exports.Mover = Mover;
      /***/
    },

    /***/
    42804:
    /*!****************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Core/Particle/Updater.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Updater = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Enums_1 = __webpack_require__(
      /*! ../../Enums */
      9717);

      var OutModeDirection_1 = __webpack_require__(
      /*! ../../Enums/Directions/OutModeDirection */
      49974);

      function bounceHorizontal(data) {
        if (data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceHorizontal || data.outMode === "bounceHorizontal") {
          var velocity = data.particle.velocity.horizontal;
          var bounced = false;

          if (data.direction === OutModeDirection_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0 || data.direction === OutModeDirection_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0) {
            var newVelocity = Utils_1.NumberUtils.getValue(data.particle.particlesOptions.bounce.horizontal);
            data.particle.velocity.horizontal *= -newVelocity;
            bounced = true;
          }

          if (bounced) {
            var minPos = data.offset.x + data.size;

            if (data.bounds.right >= data.canvasSize.width) {
              data.particle.position.x = data.canvasSize.width - minPos;
            } else if (data.bounds.left <= 0) {
              data.particle.position.x = minPos;
            }
          }
        }
      }

      function bounceVertical(data) {
        if (data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceVertical || data.outMode === "bounceVertical") {
          var velocity = data.particle.velocity.vertical;
          var bounced = false;

          if (data.direction === OutModeDirection_1.OutModeDirection.bottom && data.bounds.bottom >= data.canvasSize.height && velocity > 0 || data.direction === OutModeDirection_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0) {
            var newVelocity = Utils_1.NumberUtils.getValue(data.particle.particlesOptions.bounce.vertical);
            data.particle.velocity.vertical *= -newVelocity;
            bounced = true;
          }

          if (bounced) {
            var minPos = data.offset.y + data.size;

            if (data.bounds.bottom >= data.canvasSize.height) {
              data.particle.position.y = data.canvasSize.height - minPos;
            } else if (data.bounds.top <= 0) {
              data.particle.position.y = minPos;
            }
          }
        }
      }

      function checkDestroy(particle, destroy, value, minValue, maxValue) {
        switch (destroy) {
          case Enums_1.DestroyType.max:
            if (value >= maxValue) {
              particle.destroy();
            }

            break;

          case Enums_1.DestroyType.min:
            if (value <= minValue) {
              particle.destroy();
            }

            break;
        }
      }

      var Updater = /*#__PURE__*/function () {
        function Updater(container, particle) {
          _classCallCheck2(this, Updater);

          this.container = container;
          this.particle = particle;
        }

        _createClass2(Updater, [{
          key: "update",
          value: function update(delta) {
            if (this.particle.destroyed) {
              return;
            }

            this.updateLife(delta);

            if (this.particle.destroyed || this.particle.spawning) {
              return;
            }

            this.updateOpacity(delta);
            this.updateSize(delta);
            this.updateAngle(delta);
            this.updateColor(delta);
            this.updateStrokeColor(delta);
            this.updateOutModes(delta);
          }
        }, {
          key: "updateLife",
          value: function updateLife(delta) {
            var particle = this.particle;
            var justSpawned = false;

            if (particle.spawning) {
              particle.lifeDelayTime += delta.value;

              if (particle.lifeDelayTime >= particle.lifeDelay) {
                justSpawned = true;
                particle.spawning = false;
                particle.lifeDelayTime = 0;
                particle.lifeTime = 0;
              }
            }

            if (particle.lifeDuration === -1) {
              return;
            }

            if (!particle.spawning) {
              if (justSpawned) {
                particle.lifeTime = 0;
              } else {
                particle.lifeTime += delta.value;
              }

              if (particle.lifeTime >= particle.lifeDuration) {
                particle.lifeTime = 0;

                if (particle.livesRemaining > 0) {
                  particle.livesRemaining--;
                }

                if (particle.livesRemaining === 0) {
                  particle.destroy();
                  return;
                }

                var canvasSize = this.container.canvas.size;
                particle.position.x = Utils_1.NumberUtils.randomInRange(0, canvasSize.width);
                particle.position.y = Utils_1.NumberUtils.randomInRange(0, canvasSize.height);
                particle.spawning = true;
                particle.lifeDelayTime = 0;
                particle.lifeTime = 0;
                var lifeOptions = particle.particlesOptions.life;
                particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;
                particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;
              }
            }
          }
        }, {
          key: "updateOpacity",
          value: function updateOpacity(delta) {
            var _a, _b;

            var particle = this.particle;
            var opacityAnim = particle.particlesOptions.opacity.anim;
            var minValue = opacityAnim.minimumValue;
            var maxValue = particle.particlesOptions.opacity.value;

            if (opacityAnim.enable) {
              switch (particle.opacity.status) {
                case Enums_1.AnimationStatus.increasing:
                  if (particle.opacity.value >= maxValue) {
                    particle.opacity.status = Enums_1.AnimationStatus.decreasing;
                  } else {
                    particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;
                  }

                  break;

                case Enums_1.AnimationStatus.decreasing:
                  if (particle.opacity.value <= minValue) {
                    particle.opacity.status = Enums_1.AnimationStatus.increasing;
                  } else {
                    particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;
                  }

                  break;
              }

              checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);

              if (!particle.destroyed) {
                particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);
              }
            }
          }
        }, {
          key: "updateSize",
          value: function updateSize(delta) {
            var _a, _b;

            var container = this.container;
            var particle = this.particle;
            var sizeOpt = particle.particlesOptions.size;
            var sizeAnim = sizeOpt.animation;
            var sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;
            var maxValue = (_b = particle.sizeValue) !== null && _b !== void 0 ? _b : container.retina.sizeValue;
            var minValue = sizeAnim.minimumValue * container.retina.pixelRatio;

            if (sizeAnim.enable) {
              switch (particle.size.status) {
                case Enums_1.AnimationStatus.increasing:
                  if (particle.size.value >= maxValue) {
                    particle.size.status = Enums_1.AnimationStatus.decreasing;
                  } else {
                    particle.size.value += sizeVelocity;
                  }

                  break;

                case Enums_1.AnimationStatus.decreasing:
                  if (particle.size.value <= minValue) {
                    particle.size.status = Enums_1.AnimationStatus.increasing;
                  } else {
                    particle.size.value -= sizeVelocity;
                  }

              }

              checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);

              if (!particle.destroyed) {
                particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);
              }
            }
          }
        }, {
          key: "updateAngle",
          value: function updateAngle(delta) {
            var _a;

            var particle = this.particle;
            var rotate = particle.particlesOptions.rotate;
            var rotateAnimation = rotate.animation;
            var speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;
            var max = 2 * Math.PI;

            if (rotate.path) {
              particle.pathAngle = Math.atan2(particle.velocity.vertical, particle.velocity.horizontal);
            } else if (rotateAnimation.enable) {
              switch (particle.rotate.status) {
                case Enums_1.AnimationStatus.increasing:
                  particle.rotate.value += speed;

                  if (particle.rotate.value > max) {
                    particle.rotate.value -= max;
                  }

                  break;

                case Enums_1.AnimationStatus.decreasing:
                default:
                  particle.rotate.value -= speed;

                  if (particle.rotate.value < 0) {
                    particle.rotate.value += max;
                  }

                  break;
              }
            }
          }
        }, {
          key: "updateColor",
          value: function updateColor(delta) {
            var _a;

            var particle = this.particle;

            if (particle.color.value === undefined) {
              return;
            }

            if (particle.particlesOptions.color.animation.enable) {
              particle.color.value.h += ((_a = particle.color.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;

              if (particle.color.value.h > 360) {
                particle.color.value.h -= 360;
              }
            }
          }
        }, {
          key: "updateStrokeColor",
          value: function updateStrokeColor(delta) {
            var _a, _b;

            var particle = this.particle;
            var color = particle.stroke.color;

            if (typeof color === "string" || color === undefined) {
              return;
            }

            if (particle.strokeColor.value === undefined) {
              return;
            }

            if (color.animation.enable) {
              particle.strokeColor.value.h += ((_b = (_a = particle.strokeColor.velocity) !== null && _a !== void 0 ? _a : particle.color.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;

              if (particle.strokeColor.value.h > 360) {
                particle.strokeColor.value.h -= 360;
              }
            }
          }
        }, {
          key: "updateOutModes",
          value: function updateOutModes(delta) {
            var _a, _b, _c, _d;

            var outModes = this.particle.particlesOptions.move.outModes;
            this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes["default"], OutModeDirection_1.OutModeDirection.bottom);
            this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes["default"], OutModeDirection_1.OutModeDirection.left);
            this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes["default"], OutModeDirection_1.OutModeDirection.right);
            this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes["default"], OutModeDirection_1.OutModeDirection.top);
          }
        }, {
          key: "updateOutMode",
          value: function updateOutMode(delta, outMode, direction) {
            var container = this.container;
            var particle = this.particle;

            switch (outMode) {
              case Enums_1.OutMode.bounce:
              case Enums_1.OutMode.bounceVertical:
              case Enums_1.OutMode.bounceHorizontal:
              case "bounceVertical":
              case "bounceHorizontal":
                this.updateBounce(delta, direction, outMode);
                break;

              case Enums_1.OutMode.destroy:
                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {
                  container.particles.remove(particle);
                }

                break;

              case Enums_1.OutMode.out:
                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {
                  this.fixOutOfCanvasPosition(direction);
                }

                break;

              case Enums_1.OutMode.none:
                this.bounceNone(direction);
                break;
            }
          }
        }, {
          key: "fixOutOfCanvasPosition",
          value: function fixOutOfCanvasPosition(direction) {
            var container = this.container;
            var particle = this.particle;
            var wrap = particle.particlesOptions.move.warp;
            var canvasSize = container.canvas.size;
            var newPos = {
              bottom: canvasSize.height + particle.getRadius() - particle.offset.y,
              left: -particle.getRadius() - particle.offset.x,
              right: canvasSize.width + particle.getRadius() + particle.offset.x,
              top: -particle.getRadius() - particle.offset.y
            };
            var sizeValue = particle.getRadius();
            var nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);

            if (direction === OutModeDirection_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {
              particle.position.x = newPos.left;

              if (!wrap) {
                particle.position.y = Math.random() * canvasSize.height;
              }
            } else if (direction === OutModeDirection_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {
              particle.position.x = newPos.right;

              if (!wrap) {
                particle.position.y = Math.random() * canvasSize.height;
              }
            }

            if (direction === OutModeDirection_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {
              if (!wrap) {
                particle.position.x = Math.random() * canvasSize.width;
              }

              particle.position.y = newPos.top;
            } else if (direction === OutModeDirection_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {
              if (!wrap) {
                particle.position.x = Math.random() * canvasSize.width;
              }

              particle.position.y = newPos.bottom;
            }
          }
        }, {
          key: "updateBounce",
          value: function updateBounce(delta, direction, outMode) {
            var container = this.container;
            var particle = this.particle;
            var handled = false;

            var _iterator42 = _createForOfIteratorHelper(container.plugins),
                _step41;

            try {
              for (_iterator42.s(); !(_step41 = _iterator42.n()).done;) {
                var _step41$value = _slicedToArray(_step41.value, 2),
                    plugin = _step41$value[1];

                if (plugin.particleBounce !== undefined) {
                  handled = plugin.particleBounce(particle, delta, direction);
                }

                if (handled) {
                  break;
                }
              }
            } catch (err) {
              _iterator42.e(err);
            } finally {
              _iterator42.f();
            }

            if (handled) {
              return;
            }

            var pos = particle.getPosition(),
                offset = particle.offset,
                size = particle.getRadius(),
                bounds = Utils_1.Utils.calculateBounds(pos, size),
                canvasSize = container.canvas.size;
            bounceHorizontal({
              particle: particle,
              outMode: outMode,
              direction: direction,
              bounds: bounds,
              canvasSize: canvasSize,
              offset: offset,
              size: size
            });
            bounceVertical({
              particle: particle,
              outMode: outMode,
              direction: direction,
              bounds: bounds,
              canvasSize: canvasSize,
              offset: offset,
              size: size
            });
          }
        }, {
          key: "bounceNone",
          value: function bounceNone(direction) {
            var particle = this.particle;

            if (particle.particlesOptions.move.distance) {
              return;
            }

            var gravityOptions = particle.particlesOptions.move.gravity;
            var container = this.container;

            if (!gravityOptions.enable) {
              if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {
                container.particles.remove(particle);
              }
            } else {
              var position = particle.position;

              if (gravityOptions.acceleration >= 0 && position.y > container.canvas.size.height && direction === OutModeDirection_1.OutModeDirection.bottom || gravityOptions.acceleration < 0 && position.y < 0 && direction === OutModeDirection_1.OutModeDirection.top) {
                container.particles.remove(particle);
              }
            }
          }
        }]);

        return Updater;
      }();

      exports.Updater = Updater;
      /***/
    },

    /***/
    56143:
    /*!*********************************************************!*\
      !*** ./node_modules/tsparticles/dist/Core/Particles.js ***!
      \*********************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Particles = void 0;

      var Particle_1 = __webpack_require__(
      /*! ./Particle */
      27113);

      var Utils_1 = __webpack_require__(
      /*! ../Utils */
      57711);

      var InteractionManager_1 = __webpack_require__(
      /*! ./Particle/InteractionManager */
      92914);

      var Particles = /*#__PURE__*/function () {
        function Particles(container) {
          _classCallCheck2(this, Particles);

          this.container = container;
          this.nextId = 0;
          this.array = [];
          this.limit = 0;
          this.linksFreq = new Map();
          this.trianglesFreq = new Map();
          this.interactionManager = new InteractionManager_1.InteractionManager(container);
          var canvasSize = this.container.canvas.size;
          this.linksColors = new Map();
          this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);
        }

        _createClass2(Particles, [{
          key: "count",
          get: function get() {
            return this.array.length;
          }
        }, {
          key: "init",
          value: function init() {
            var container = this.container;
            var options = container.options;
            this.linksFreq = new Map();
            this.trianglesFreq = new Map();
            var handled = false;

            var _iterator43 = _createForOfIteratorHelper(options.manualParticles),
                _step42;

            try {
              for (_iterator43.s(); !(_step42 = _iterator43.n()).done;) {
                var particle = _step42.value;
                var pos = particle.position ? {
                  x: particle.position.x * container.canvas.size.width / 100,
                  y: particle.position.y * container.canvas.size.height / 100
                } : undefined;
                this.addParticle(pos, particle.options);
              }
            } catch (err) {
              _iterator43.e(err);
            } finally {
              _iterator43.f();
            }

            var _iterator44 = _createForOfIteratorHelper(container.plugins),
                _step43;

            try {
              for (_iterator44.s(); !(_step43 = _iterator44.n()).done;) {
                var _step43$value = _slicedToArray(_step43.value, 2),
                    plugin = _step43$value[1];

                if (plugin.particlesInitialization !== undefined) {
                  handled = plugin.particlesInitialization();
                }

                if (handled) {
                  break;
                }
              }
            } catch (err) {
              _iterator44.e(err);
            } finally {
              _iterator44.f();
            }

            if (!handled) {
              for (var i = this.count; i < options.particles.number.value; i++) {
                this.addParticle();
              }
            }

            if (options.infection.enable) {
              for (var _i32 = 0; _i32 < options.infection.infections; _i32++) {
                var notInfected = this.array.filter(function (p) {
                  return p.infecter.infectionStage === undefined;
                });
                var infected = Utils_1.Utils.itemFromArray(notInfected);
                infected.infecter.startInfection(0);
              }
            }

            this.interactionManager.init();
            container.noise.init();
          }
        }, {
          key: "redraw",
          value: function redraw() {
            this.clear();
            this.init();
            this.draw({
              value: 0,
              factor: 0
            });
          }
        }, {
          key: "removeAt",
          value: function removeAt(index, quantity) {
            if (index >= 0 && index <= this.count) {
              var _iterator45 = _createForOfIteratorHelper(this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)),
                  _step44;

              try {
                for (_iterator45.s(); !(_step44 = _iterator45.n()).done;) {
                  var particle = _step44.value;
                  particle.destroy();
                }
              } catch (err) {
                _iterator45.e(err);
              } finally {
                _iterator45.f();
              }
            }
          }
        }, {
          key: "remove",
          value: function remove(particle) {
            this.removeAt(this.array.indexOf(particle));
          }
        }, {
          key: "update",
          value: function update(delta) {
            var container = this.container;
            var particlesToDelete = [];
            container.noise.update();

            var _iterator46 = _createForOfIteratorHelper(this.array),
                _step45;

            try {
              for (_iterator46.s(); !(_step45 = _iterator46.n()).done;) {
                var _particle = _step45.value;

                _particle.move(delta);

                if (_particle.destroyed) {
                  particlesToDelete.push(_particle);
                  continue;
                }

                this.quadTree.insert(new Utils_1.Point(_particle.getPosition(), _particle));
              }
            } catch (err) {
              _iterator46.e(err);
            } finally {
              _iterator46.f();
            }

            for (var _i33 = 0, _particlesToDelete = particlesToDelete; _i33 < _particlesToDelete.length; _i33++) {
              var particle = _particlesToDelete[_i33];
              this.remove(particle);
            }

            this.interactionManager.externalInteract(delta);

            var _iterator47 = _createForOfIteratorHelper(this.container.particles.array),
                _step46;

            try {
              for (_iterator47.s(); !(_step46 = _iterator47.n()).done;) {
                var _particle2 = _step46.value;

                _particle2.update(delta);

                if (!_particle2.destroyed && !_particle2.spawning) {
                  this.interactionManager.particlesInteract(_particle2, delta);
                }
              }
            } catch (err) {
              _iterator47.e(err);
            } finally {
              _iterator47.f();
            }
          }
        }, {
          key: "draw",
          value: function draw(delta) {
            var container = this.container;
            container.canvas.clear();
            var canvasSize = this.container.canvas.size;
            this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);
            this.update(delta);

            var _iterator48 = _createForOfIteratorHelper(container.plugins),
                _step47;

            try {
              for (_iterator48.s(); !(_step47 = _iterator48.n()).done;) {
                var _step47$value = _slicedToArray(_step47.value, 2),
                    plugin = _step47$value[1];

                container.canvas.drawPlugin(plugin, delta);
              }
            } catch (err) {
              _iterator48.e(err);
            } finally {
              _iterator48.f();
            }

            var _iterator49 = _createForOfIteratorHelper(this.array),
                _step48;

            try {
              for (_iterator49.s(); !(_step48 = _iterator49.n()).done;) {
                var p = _step48.value;
                p.draw(delta);
              }
            } catch (err) {
              _iterator49.e(err);
            } finally {
              _iterator49.f();
            }
          }
        }, {
          key: "clear",
          value: function clear() {
            this.array = [];
          }
        }, {
          key: "push",
          value: function push(nb, mouse, overrideOptions) {
            var container = this.container;
            var options = container.options;
            var limit = options.particles.number.limit * container.density;
            this.pushing = true;

            if (limit > 0) {
              var countToRemove = this.count + nb - limit;

              if (countToRemove > 0) {
                this.removeQuantity(countToRemove);
              }
            }

            for (var i = 0; i < nb; i++) {
              this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions);
            }

            this.pushing = false;
          }
        }, {
          key: "addParticle",
          value: function addParticle(position, overrideOptions) {
            try {
              var particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions);
              this.array.push(particle);
              this.nextId++;
              return particle;
            } catch (_a) {
              console.warn("error adding particle");
              return;
            }
          }
        }, {
          key: "removeQuantity",
          value: function removeQuantity(quantity) {
            this.removeAt(0, quantity);
          }
        }, {
          key: "getLinkFrequency",
          value: function getLinkFrequency(p1, p2) {
            var key = "".concat(Math.min(p1.id, p2.id), "_").concat(Math.max(p1.id, p2.id));
            var res = this.linksFreq.get(key);

            if (res === undefined) {
              res = Math.random();
              this.linksFreq.set(key, res);
            }

            return res;
          }
        }, {
          key: "getTriangleFrequency",
          value: function getTriangleFrequency(p1, p2, p3) {
            var _ref11 = [p1.id, p2.id, p3.id],
                id1 = _ref11[0],
                id2 = _ref11[1],
                id3 = _ref11[2];

            if (id1 > id2) {
              var _ref12 = [id1, id2];
              id2 = _ref12[0];
              id1 = _ref12[1];
            }

            if (id2 > id3) {
              var _ref13 = [id2, id3];
              id3 = _ref13[0];
              id2 = _ref13[1];
            }

            if (id1 > id3) {
              var _ref14 = [id1, id3];
              id3 = _ref14[0];
              id1 = _ref14[1];
            }

            var key = "".concat(id1, "_").concat(id2, "_").concat(id3);
            var res = this.trianglesFreq.get(key);

            if (res === undefined) {
              res = Math.random();
              this.trianglesFreq.set(key, res);
            }

            return res;
          }
        }, {
          key: "setDensity",
          value: function setDensity() {
            var options = this.container.options;
            this.applyDensity(options.particles);
          }
        }, {
          key: "applyDensity",
          value: function applyDensity(options) {
            var _a;

            if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {
              return;
            }

            var numberOptions = options.number;
            var densityFactor = this.initDensityFactor(numberOptions.density);
            var optParticlesNumber = numberOptions.value;
            var optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;
            var particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor;
            var particlesCount = this.count;
            this.limit = numberOptions.limit * densityFactor;

            if (particlesCount < particlesNumber) {
              this.push(Math.abs(particlesNumber - particlesCount), undefined, options);
            } else if (particlesCount > particlesNumber) {
              this.removeQuantity(particlesCount - particlesNumber);
            }
          }
        }, {
          key: "initDensityFactor",
          value: function initDensityFactor(densityOptions) {
            var container = this.container;

            if (!container.canvas.element || !densityOptions.enable) {
              return 1;
            }

            var canvas = container.canvas.element;
            var pxRatio = container.retina.pixelRatio;
            return canvas.width * canvas.height / (densityOptions.factor * pxRatio * pxRatio * densityOptions.area);
          }
        }]);

        return Particles;
      }();

      exports.Particles = Particles;
      /***/
    },

    /***/
    69006:
    /*!******************************************************!*\
      !*** ./node_modules/tsparticles/dist/Core/Retina.js ***!
      \******************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Retina = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../Utils */
      57711);

      var Retina = /*#__PURE__*/function () {
        function Retina(container) {
          _classCallCheck2(this, Retina);

          this.container = container;
        }

        _createClass2(Retina, [{
          key: "init",
          value: function init() {
            var _this248 = this;

            var container = this.container;
            var options = container.options;

            if (options.detectRetina) {
              this.pixelRatio = Utils_1.Utils.isSsr() ? 1 : window.devicePixelRatio;
            } else {
              this.pixelRatio = 1;
            }

            var motionOptions = this.container.options.motion;

            if (motionOptions && (motionOptions.disable || motionOptions.reduce.value)) {
              if (Utils_1.Utils.isSsr() || typeof matchMedia === "undefined" || !matchMedia) {
                this.reduceFactor = 1;
              } else {
                var mediaQuery = matchMedia("(prefers-reduced-motion: reduce)");

                if (mediaQuery) {
                  this.handleMotionChange(mediaQuery);

                  var handleChange = function handleChange() {
                    _this248.handleMotionChange(mediaQuery);

                    container.refresh()["catch"](function () {});
                  };

                  if (mediaQuery.addEventListener !== undefined) {
                    mediaQuery.addEventListener("change", handleChange);
                  } else if (mediaQuery.addListener !== undefined) {
                    mediaQuery.addListener(handleChange);
                  }
                }
              }
            } else {
              this.reduceFactor = 1;
            }

            var ratio = this.pixelRatio;

            if (container.canvas.element) {
              var element = container.canvas.element;
              container.canvas.size.width = element.offsetWidth * ratio;
              container.canvas.size.height = element.offsetHeight * ratio;
            }

            var particles = options.particles;
            this.linksDistance = particles.links.distance * ratio;
            this.linksWidth = particles.links.width * ratio;
            this.moveSpeed = particles.move.speed * ratio;
            this.sizeValue = particles.size.value * ratio;
            this.sizeAnimationSpeed = particles.size.animation.speed * ratio;
            var modes = options.interactivity.modes;
            this.connectModeDistance = modes.connect.distance * ratio;
            this.connectModeRadius = modes.connect.radius * ratio;
            this.grabModeDistance = modes.grab.distance * ratio;
            this.repulseModeDistance = modes.repulse.distance * ratio;
            this.bounceModeDistance = modes.bounce.distance * ratio;
            this.attractModeDistance = modes.attract.distance * ratio;
            this.slowModeRadius = modes.slow.radius * ratio;
            this.bubbleModeDistance = modes.bubble.distance * ratio;

            if (modes.bubble.size) {
              this.bubbleModeSize = modes.bubble.size * ratio;
            }
          }
        }, {
          key: "initParticle",
          value: function initParticle(particle) {
            var particlesOptions = particle.particlesOptions;
            var ratio = this.pixelRatio;
            particle.linksDistance = particlesOptions.links.distance * ratio;
            particle.linksWidth = particlesOptions.links.width * ratio;
            particle.moveSpeed = particlesOptions.move.speed * ratio;
            particle.sizeValue = particlesOptions.size.value * ratio;
            particle.sizeAnimationSpeed = particlesOptions.size.animation.speed * ratio;
            particle.maxDistance = particlesOptions.move.distance * ratio;
          }
        }, {
          key: "handleMotionChange",
          value: function handleMotionChange(mediaQuery) {
            var options = this.container.options;

            if (mediaQuery.matches) {
              var motion = options.motion;
              this.reduceFactor = motion.disable ? 0 : motion.reduce.value ? 1 / motion.reduce.factor : 1;
            } else {
              this.reduceFactor = 1;
            }
          }
        }]);

        return Retina;
      }();

      exports.Retina = Retina;
      /***/
    },

    /***/
    7284:
    /*!****************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/AnimationStatus.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.AnimationStatus = void 0;
      var AnimationStatus;

      (function (AnimationStatus) {
        AnimationStatus[AnimationStatus["increasing"] = 0] = "increasing";
        AnimationStatus[AnimationStatus["decreasing"] = 1] = "decreasing";
      })(AnimationStatus = exports.AnimationStatus || (exports.AnimationStatus = {}));
      /***/

    },

    /***/
    29768:
    /*!*************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/Directions/MoveDirection.js ***!
      \*************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.MoveDirection = void 0;
      var MoveDirection;

      (function (MoveDirection) {
        MoveDirection["bottom"] = "bottom";
        MoveDirection["bottomLeft"] = "bottom-left";
        MoveDirection["bottomRight"] = "bottom-right";
        MoveDirection["left"] = "left";
        MoveDirection["none"] = "none";
        MoveDirection["right"] = "right";
        MoveDirection["top"] = "top";
        MoveDirection["topLeft"] = "top-left";
        MoveDirection["topRight"] = "top-right";
      })(MoveDirection = exports.MoveDirection || (exports.MoveDirection = {}));
      /***/

    },

    /***/
    49974:
    /*!****************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/Directions/OutModeDirection.js ***!
      \****************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.OutModeDirection = void 0;
      var OutModeDirection;

      (function (OutModeDirection) {
        OutModeDirection["bottom"] = "bottom";
        OutModeDirection["left"] = "left";
        OutModeDirection["right"] = "right";
        OutModeDirection["top"] = "top";
      })(OutModeDirection = exports.OutModeDirection || (exports.OutModeDirection = {}));
      /***/

    },

    /***/
    33426:
    /*!***************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/Directions/RotateDirection.js ***!
      \***************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.RotateDirection = void 0;
      var RotateDirection;

      (function (RotateDirection) {
        RotateDirection["clockwise"] = "clockwise";
        RotateDirection["counterClockwise"] = "counter-clockwise";
        RotateDirection["random"] = "random";
      })(RotateDirection = exports.RotateDirection || (exports.RotateDirection = {}));
      /***/

    },

    /***/
    25725:
    /*!*****************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/Directions/index.js ***!
      \*****************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

      var __exportStar = this && this.__exportStar || function (m, exports) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        }
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      __exportStar(__webpack_require__(
      /*! ./MoveDirection */
      29768), exports);

      __exportStar(__webpack_require__(
      /*! ./RotateDirection */
      33426), exports);
      /***/

    },

    /***/
    33786:
    /*!********************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/InteractivityDetect.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.InteractivityDetect = void 0;
      var InteractivityDetect;

      (function (InteractivityDetect) {
        InteractivityDetect["canvas"] = "canvas";
        InteractivityDetect["parent"] = "parent";
        InteractivityDetect["window"] = "window";
      })(InteractivityDetect = exports.InteractivityDetect || (exports.InteractivityDetect = {}));
      /***/

    },

    /***/
    82601:
    /*!****************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/Modes/ClickMode.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ClickMode = void 0;
      var ClickMode;

      (function (ClickMode) {
        ClickMode["attract"] = "attract";
        ClickMode["bubble"] = "bubble";
        ClickMode["push"] = "push";
        ClickMode["remove"] = "remove";
        ClickMode["repulse"] = "repulse";
        ClickMode["pause"] = "pause";
        ClickMode["trail"] = "trail";
      })(ClickMode = exports.ClickMode || (exports.ClickMode = {}));
      /***/

    },

    /***/
    91949:
    /*!********************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/Modes/CollisionMode.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.CollisionMode = void 0;
      var CollisionMode;

      (function (CollisionMode) {
        CollisionMode["absorb"] = "absorb";
        CollisionMode["bounce"] = "bounce";
        CollisionMode["destroy"] = "destroy";
      })(CollisionMode = exports.CollisionMode || (exports.CollisionMode = {}));
      /***/

    },

    /***/
    71601:
    /*!**************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/Modes/DivMode.js ***!
      \**************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DivMode = void 0;
      var DivMode;

      (function (DivMode) {
        DivMode["bounce"] = "bounce";
        DivMode["bubble"] = "bubble";
        DivMode["repulse"] = "repulse";
      })(DivMode = exports.DivMode || (exports.DivMode = {}));
      /***/

    },

    /***/
    4075:
    /*!****************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/Modes/HoverMode.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.HoverMode = void 0;
      var HoverMode;

      (function (HoverMode) {
        HoverMode["attract"] = "attract";
        HoverMode["bounce"] = "bounce";
        HoverMode["bubble"] = "bubble";
        HoverMode["connect"] = "connect";
        HoverMode["grab"] = "grab";
        HoverMode["light"] = "light";
        HoverMode["repulse"] = "repulse";
        HoverMode["slow"] = "slow";
        HoverMode["trail"] = "trail";
      })(HoverMode = exports.HoverMode || (exports.HoverMode = {}));
      /***/

    },

    /***/
    78932:
    /*!**************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/Modes/OutMode.js ***!
      \**************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.OutMode = void 0;
      var OutMode;

      (function (OutMode) {
        OutMode["bounce"] = "bounce";
        OutMode["bounceHorizontal"] = "bounce-horizontal";
        OutMode["bounceVertical"] = "bounce-vertical";
        OutMode["none"] = "none";
        OutMode["out"] = "out";
        OutMode["destroy"] = "destroy";
      })(OutMode = exports.OutMode || (exports.OutMode = {}));
      /***/

    },

    /***/
    7277:
    /*!***************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/Modes/SizeMode.js ***!
      \***************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SizeMode = void 0;
      var SizeMode;

      (function (SizeMode) {
        SizeMode["precise"] = "precise";
        SizeMode["percent"] = "percent";
      })(SizeMode = exports.SizeMode || (exports.SizeMode = {}));
      /***/

    },

    /***/
    74428:
    /*!****************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/Modes/ThemeMode.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ThemeMode = void 0;
      var ThemeMode;

      (function (ThemeMode) {
        ThemeMode["any"] = "any";
        ThemeMode["dark"] = "dark";
        ThemeMode["light"] = "light";
      })(ThemeMode = exports.ThemeMode || (exports.ThemeMode = {}));
      /***/

    },

    /***/
    42495:
    /*!************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/Modes/index.js ***!
      \************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

      var __exportStar = this && this.__exportStar || function (m, exports) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        }
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      __exportStar(__webpack_require__(
      /*! ./ClickMode */
      82601), exports);

      __exportStar(__webpack_require__(
      /*! ./DivMode */
      71601), exports);

      __exportStar(__webpack_require__(
      /*! ./HoverMode */
      4075), exports);

      __exportStar(__webpack_require__(
      /*! ./CollisionMode */
      91949), exports);

      __exportStar(__webpack_require__(
      /*! ./OutMode */
      78932), exports);

      __exportStar(__webpack_require__(
      /*! ./SizeMode */
      7277), exports);

      __exportStar(__webpack_require__(
      /*! ./ThemeMode */
      74428), exports);
      /***/

    },

    /***/
    94263:
    /*!******************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/Types/DestroyType.js ***!
      \******************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DestroyType = void 0;
      var DestroyType;

      (function (DestroyType) {
        DestroyType["none"] = "none";
        DestroyType["max"] = "max";
        DestroyType["min"] = "min";
      })(DestroyType = exports.DestroyType || (exports.DestroyType = {}));
      /***/

    },

    /***/
    41237:
    /*!**************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/Types/DivType.js ***!
      \**************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DivType = void 0;
      var DivType;

      (function (DivType) {
        DivType["circle"] = "circle";
        DivType["rectangle"] = "rectangle";
      })(DivType = exports.DivType || (exports.DivType = {}));
      /***/

    },

    /***/
    48508:
    /*!************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/Types/ProcessBubbleType.js ***!
      \************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ProcessBubbleType = void 0;
      var ProcessBubbleType;

      (function (ProcessBubbleType) {
        ProcessBubbleType["color"] = "color";
        ProcessBubbleType["opacity"] = "opacity";
        ProcessBubbleType["size"] = "size";
      })(ProcessBubbleType = exports.ProcessBubbleType || (exports.ProcessBubbleType = {}));
      /***/

    },

    /***/
    42371:
    /*!****************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/Types/ShapeType.js ***!
      \****************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ShapeType = void 0;
      var ShapeType;

      (function (ShapeType) {
        ShapeType["char"] = "char";
        ShapeType["character"] = "character";
        ShapeType["circle"] = "circle";
        ShapeType["edge"] = "edge";
        ShapeType["image"] = "image";
        ShapeType["images"] = "images";
        ShapeType["line"] = "line";
        ShapeType["polygon"] = "polygon";
        ShapeType["square"] = "square";
        ShapeType["star"] = "star";
        ShapeType["triangle"] = "triangle";
      })(ShapeType = exports.ShapeType || (exports.ShapeType = {}));
      /***/

    },

    /***/
    27251:
    /*!*********************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/Types/StartValueType.js ***!
      \*********************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.StartValueType = void 0;
      var StartValueType;

      (function (StartValueType) {
        StartValueType["max"] = "max";
        StartValueType["min"] = "min";
        StartValueType["random"] = "random";
      })(StartValueType = exports.StartValueType || (exports.StartValueType = {}));
      /***/

    },

    /***/
    32112:
    /*!************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/Types/index.js ***!
      \************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

      var __exportStar = this && this.__exportStar || function (m, exports) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        }
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      __exportStar(__webpack_require__(
      /*! ./DestroyType */
      94263), exports);

      __exportStar(__webpack_require__(
      /*! ./ProcessBubbleType */
      48508), exports);

      __exportStar(__webpack_require__(
      /*! ./ShapeType */
      42371), exports);

      __exportStar(__webpack_require__(
      /*! ./StartValueType */
      27251), exports);

      __exportStar(__webpack_require__(
      /*! ./DivType */
      41237), exports);
      /***/

    },

    /***/
    9717:
    /*!******************************************************!*\
      !*** ./node_modules/tsparticles/dist/Enums/index.js ***!
      \******************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

      var __exportStar = this && this.__exportStar || function (m, exports) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        }
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      __exportStar(__webpack_require__(
      /*! ./Directions */
      25725), exports);

      __exportStar(__webpack_require__(
      /*! ./Modes */
      42495), exports);

      __exportStar(__webpack_require__(
      /*! ./AnimationStatus */
      7284), exports);

      __exportStar(__webpack_require__(
      /*! ./Types */
      32112), exports);

      __exportStar(__webpack_require__(
      /*! ./InteractivityDetect */
      33786), exports);
      /***/

    },

    /***/
    96388:
    /*!**************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Interactions/External/Attractor.js ***!
      \**************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Attractor = void 0;

      var Enums_1 = __webpack_require__(
      /*! ../../Enums */
      9717);

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Attractor = /*#__PURE__*/function () {
        function Attractor(container) {
          _classCallCheck2(this, Attractor);

          this.container = container;
        }

        _createClass2(Attractor, [{
          key: "isEnabled",
          value: function isEnabled() {
            var container = this.container;
            var options = container.options;
            var mouse = container.interactivity.mouse;
            var events = options.interactivity.events;

            if (!(events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {
              return false;
            }

            var hoverMode = events.onHover.mode;
            var clickMode = events.onClick.mode;
            return Utils_1.Utils.isInArray(Enums_1.HoverMode.attract, hoverMode) || Utils_1.Utils.isInArray(Enums_1.ClickMode.attract, clickMode);
          }
        }, {
          key: "reset",
          value: function reset() {}
        }, {
          key: "interact",
          value: function interact() {
            var container = this.container;
            var options = container.options;
            var mouseMoveStatus = container.interactivity.status === Utils_1.Constants.mouseMoveEvent;
            var events = options.interactivity.events;
            var hoverEnabled = events.onHover.enable;
            var hoverMode = events.onHover.mode;
            var clickEnabled = events.onClick.enable;
            var clickMode = events.onClick.mode;

            if (mouseMoveStatus && hoverEnabled && Utils_1.Utils.isInArray(Enums_1.HoverMode.attract, hoverMode)) {
              this.hoverAttract();
            } else if (clickEnabled && Utils_1.Utils.isInArray(Enums_1.ClickMode.attract, clickMode)) {
              this.clickAttract();
            }
          }
        }, {
          key: "hoverAttract",
          value: function hoverAttract() {
            var container = this.container;
            var mousePos = container.interactivity.mouse.position;

            if (!mousePos) {
              return;
            }

            var attractRadius = container.retina.attractModeDistance;
            this.processAttract(mousePos, attractRadius, new Utils_1.Circle(mousePos.x, mousePos.y, attractRadius));
          }
        }, {
          key: "processAttract",
          value: function processAttract(position, attractRadius, area) {
            var container = this.container;
            var query = container.particles.quadTree.query(area);

            var _iterator50 = _createForOfIteratorHelper(query),
                _step49;

            try {
              for (_iterator50.s(); !(_step49 = _iterator50.n()).done;) {
                var particle = _step49.value;

                var _Utils_1$NumberUtils$ = Utils_1.NumberUtils.getDistances(particle.position, position),
                    dx = _Utils_1$NumberUtils$.dx,
                    dy = _Utils_1$NumberUtils$.dy,
                    distance = _Utils_1$NumberUtils$.distance;

                var normVec = {
                  x: dx / distance,
                  y: dy / distance
                };
                var velocity = container.options.interactivity.modes.attract.speed;
                var attractFactor = Utils_1.NumberUtils.clamp((1 - Math.pow(distance / attractRadius, 2)) * velocity, 0, 50);
                particle.position.x = particle.position.x - normVec.x * attractFactor;
                particle.position.y = particle.position.y - normVec.y * attractFactor;
              }
            } catch (err) {
              _iterator50.e(err);
            } finally {
              _iterator50.f();
            }
          }
        }, {
          key: "clickAttract",
          value: function clickAttract() {
            var container = this.container;

            if (!container.attract.finish) {
              if (!container.attract.count) {
                container.attract.count = 0;
              }

              container.attract.count++;

              if (container.attract.count === container.particles.count) {
                container.attract.finish = true;
              }
            }

            if (container.attract.clicking) {
              var mousePos = container.interactivity.mouse.clickPosition;

              if (!mousePos) {
                return;
              }

              var attractRadius = container.retina.attractModeDistance;
              this.processAttract(mousePos, attractRadius, new Utils_1.Circle(mousePos.x, mousePos.y, attractRadius));
            } else if (container.attract.clicking === false) {
              container.attract.particles = [];
            }

            return;
          }
        }]);

        return Attractor;
      }();

      exports.Attractor = Attractor;
      /***/
    },

    /***/
    69799:
    /*!************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Interactions/External/Bouncer.js ***!
      \************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Bouncer = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Modes_1 = __webpack_require__(
      /*! ../../Enums/Modes */
      42495);

      var Utils_2 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Modes_2 = __webpack_require__(
      /*! ../../Enums/Modes */
      42495);

      var Types_1 = __webpack_require__(
      /*! ../../Enums/Types */
      32112);

      var Bouncer = /*#__PURE__*/function () {
        function Bouncer(container) {
          _classCallCheck2(this, Bouncer);

          this.container = container;
        }

        _createClass2(Bouncer, [{
          key: "isEnabled",
          value: function isEnabled() {
            var container = this.container;
            var options = container.options;
            var mouse = container.interactivity.mouse;
            var events = options.interactivity.events;
            var divs = events.onDiv;
            return mouse.position && events.onHover.enable && Utils_2.Utils.isInArray(Modes_1.HoverMode.bounce, events.onHover.mode) || Utils_2.Utils.isDivModeEnabled(Modes_2.DivMode.bounce, divs);
          }
        }, {
          key: "interact",
          value: function interact() {
            var _this249 = this;

            var container = this.container;
            var options = container.options;
            var events = options.interactivity.events;
            var mouseMoveStatus = container.interactivity.status === Utils_1.Constants.mouseMoveEvent;
            var hoverEnabled = events.onHover.enable;
            var hoverMode = events.onHover.mode;
            var divs = events.onDiv;

            if (mouseMoveStatus && hoverEnabled && Utils_2.Utils.isInArray(Modes_1.HoverMode.bounce, hoverMode)) {
              this.processMouseBounce();
            } else {
              Utils_2.Utils.divModeExecute(Modes_2.DivMode.bounce, divs, function (selector, div) {
                return _this249.singleSelectorBounce(selector, div);
              });
            }
          }
        }, {
          key: "reset",
          value: function reset() {}
        }, {
          key: "processMouseBounce",
          value: function processMouseBounce() {
            var container = this.container;
            var pxRatio = container.retina.pixelRatio;
            var tolerance = 10 * pxRatio;
            var mousePos = container.interactivity.mouse.position;
            var radius = container.retina.bounceModeDistance;

            if (mousePos) {
              this.processBounce(mousePos, radius, new Utils_2.Circle(mousePos.x, mousePos.y, radius + tolerance));
            }
          }
        }, {
          key: "singleSelectorBounce",
          value: function singleSelectorBounce(selector, div) {
            var _this250 = this;

            var container = this.container;
            var query = document.querySelectorAll(selector);

            if (!query.length) {
              return;
            }

            query.forEach(function (item) {
              var elem = item;
              var pxRatio = container.retina.pixelRatio;
              var pos = {
                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,
                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio
              };
              var radius = elem.offsetWidth / 2 * pxRatio;
              var tolerance = 10 * pxRatio;
              var area = div.type === Types_1.DivType.circle ? new Utils_2.Circle(pos.x, pos.y, radius + tolerance) : new Utils_2.Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);

              _this250.processBounce(pos, radius, area);
            });
          }
        }, {
          key: "processBounce",
          value: function processBounce(position, radius, area) {
            var query = this.container.particles.quadTree.query(area);

            var _iterator51 = _createForOfIteratorHelper(query),
                _step50;

            try {
              for (_iterator51.s(); !(_step50 = _iterator51.n()).done;) {
                var particle = _step50.value;

                if (area instanceof Utils_2.Circle) {
                  Utils_2.Utils.circleBounce(Utils_2.Utils.circleBounceDataFromParticle(particle), {
                    position: position,
                    radius: radius,
                    velocity: {
                      horizontal: 0,
                      vertical: 0
                    },
                    factor: {
                      horizontal: 0,
                      vertical: 0
                    }
                  });
                } else if (area instanceof Utils_2.Rectangle) {
                  Utils_2.Utils.rectBounce(particle, Utils_2.Utils.calculateBounds(position, radius));
                }
              }
            } catch (err) {
              _iterator51.e(err);
            } finally {
              _iterator51.f();
            }
          }
        }]);

        return Bouncer;
      }();

      exports.Bouncer = Bouncer;
      /***/
    },

    /***/
    80527:
    /*!************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Interactions/External/Bubbler.js ***!
      \************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Bubbler = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Enums_1 = __webpack_require__(
      /*! ../../Enums */
      9717);

      function calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {
        if (modeValue > optionsValue) {
          var size = particleValue + (modeValue - optionsValue) * ratio;
          return Utils_1.NumberUtils.clamp(size, particleValue, modeValue);
        } else if (modeValue < optionsValue) {
          var _size = particleValue - (optionsValue - modeValue) * ratio;

          return Utils_1.NumberUtils.clamp(_size, modeValue, particleValue);
        }
      }

      var Bubbler = /*#__PURE__*/function () {
        function Bubbler(container) {
          _classCallCheck2(this, Bubbler);

          this.container = container;
        }

        _createClass2(Bubbler, [{
          key: "isEnabled",
          value: function isEnabled() {
            var container = this.container;
            var options = container.options;
            var mouse = container.interactivity.mouse;
            var events = options.interactivity.events;
            var divs = events.onDiv;
            var divBubble = Utils_1.Utils.isDivModeEnabled(Enums_1.DivMode.bubble, divs);

            if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {
              return false;
            }

            var hoverMode = events.onHover.mode;
            var clickMode = events.onClick.mode;
            return Utils_1.Utils.isInArray(Enums_1.HoverMode.bubble, hoverMode) || Utils_1.Utils.isInArray(Enums_1.ClickMode.bubble, clickMode) || divBubble;
          }
        }, {
          key: "reset",
          value: function reset(particle, force) {
            if (!particle.bubble.inRange || force) {
              delete particle.bubble.div;
              delete particle.bubble.opacity;
              delete particle.bubble.radius;
              delete particle.bubble.color;
            }
          }
        }, {
          key: "interact",
          value: function interact() {
            var _this251 = this;

            var options = this.container.options;
            var events = options.interactivity.events;
            var onHover = events.onHover;
            var onClick = events.onClick;
            var hoverEnabled = onHover.enable;
            var hoverMode = onHover.mode;
            var clickEnabled = onClick.enable;
            var clickMode = onClick.mode;
            var divs = events.onDiv;

            if (hoverEnabled && Utils_1.Utils.isInArray(Enums_1.HoverMode.bubble, hoverMode)) {
              this.hoverBubble();
            } else if (clickEnabled && Utils_1.Utils.isInArray(Enums_1.ClickMode.bubble, clickMode)) {
              this.clickBubble();
            } else {
              Utils_1.Utils.divModeExecute(Enums_1.DivMode.bubble, divs, function (selector, div) {
                return _this251.singleSelectorHover(selector, div);
              });
            }
          }
        }, {
          key: "singleSelectorHover",
          value: function singleSelectorHover(selector, div) {
            var _this252 = this;

            var container = this.container;
            var selectors = document.querySelectorAll(selector);

            if (!selectors.length) {
              return;
            }

            selectors.forEach(function (item) {
              var elem = item;
              var pxRatio = container.retina.pixelRatio;
              var pos = {
                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,
                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio
              };
              var repulseRadius = elem.offsetWidth / 2 * pxRatio;
              var area = div.type === Enums_1.DivType.circle ? new Utils_1.Circle(pos.x, pos.y, repulseRadius) : new Utils_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio);
              var query = container.particles.quadTree.query(area);

              var _iterator52 = _createForOfIteratorHelper(query),
                  _step51;

              try {
                for (_iterator52.s(); !(_step51 = _iterator52.n()).done;) {
                  var particle = _step51.value;

                  if (!area.contains(particle.getPosition())) {
                    continue;
                  }

                  particle.bubble.inRange = true;
                  var divs = container.options.interactivity.modes.bubble.divs;
                  var divBubble = Utils_1.Utils.divMode(divs, elem);

                  if (!particle.bubble.div || particle.bubble.div !== elem) {
                    _this252.reset(particle, true);

                    particle.bubble.div = elem;
                  }

                  _this252.hoverBubbleSize(particle, 1, divBubble);

                  _this252.hoverBubbleOpacity(particle, 1, divBubble);

                  _this252.hoverBubbleColor(particle, divBubble);
                }
              } catch (err) {
                _iterator52.e(err);
              } finally {
                _iterator52.f();
              }
            });
          }
        }, {
          key: "process",
          value: function process(particle, distMouse, timeSpent, data) {
            var container = this.container;
            var bubbleParam = data.bubbleObj.optValue;

            if (bubbleParam === undefined) {
              return;
            }

            var options = container.options;
            var bubbleDuration = options.interactivity.modes.bubble.duration;
            var bubbleDistance = container.retina.bubbleModeDistance;
            var particlesParam = data.particlesObj.optValue;
            var pObjBubble = data.bubbleObj.value;
            var pObj = data.particlesObj.value || 0;
            var type = data.type;

            if (bubbleParam !== particlesParam) {
              if (!container.bubble.durationEnd) {
                if (distMouse <= bubbleDistance) {
                  var obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;

                  if (obj !== bubbleParam) {
                    var value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;

                    if (type === Enums_1.ProcessBubbleType.size) {
                      particle.bubble.radius = value;
                    }

                    if (type === Enums_1.ProcessBubbleType.opacity) {
                      particle.bubble.opacity = value;
                    }
                  }
                } else {
                  if (type === Enums_1.ProcessBubbleType.size) {
                    delete particle.bubble.radius;
                  }

                  if (type === Enums_1.ProcessBubbleType.opacity) {
                    delete particle.bubble.opacity;
                  }
                }
              } else if (pObjBubble) {
                if (type === Enums_1.ProcessBubbleType.size) {
                  delete particle.bubble.radius;
                }

                if (type === Enums_1.ProcessBubbleType.opacity) {
                  delete particle.bubble.opacity;
                }
              }
            }
          }
        }, {
          key: "clickBubble",
          value: function clickBubble() {
            var _a;

            var container = this.container;
            var options = container.options;
            var mouseClickPos = container.interactivity.mouse.clickPosition;

            if (mouseClickPos === undefined) {
              return;
            }

            var distance = container.retina.bubbleModeDistance;
            var query = container.particles.quadTree.queryCircle(mouseClickPos, distance);

            var _iterator53 = _createForOfIteratorHelper(query),
                _step52;

            try {
              for (_iterator53.s(); !(_step52 = _iterator53.n()).done;) {
                var particle = _step52.value;

                if (!container.bubble.clicking) {
                  continue;
                }

                particle.bubble.inRange = !container.bubble.durationEnd;
                var pos = particle.getPosition();
                var distMouse = Utils_1.NumberUtils.getDistance(pos, mouseClickPos);
                var timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;

                if (timeSpent > options.interactivity.modes.bubble.duration) {
                  container.bubble.durationEnd = true;
                }

                if (timeSpent > options.interactivity.modes.bubble.duration * 2) {
                  container.bubble.clicking = false;
                  container.bubble.durationEnd = false;
                }

                var sizeData = {
                  bubbleObj: {
                    optValue: container.retina.bubbleModeSize,
                    value: particle.bubble.radius
                  },
                  particlesObj: {
                    optValue: (_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue,
                    value: particle.size.value
                  },
                  type: Enums_1.ProcessBubbleType.size
                };
                this.process(particle, distMouse, timeSpent, sizeData);
                var opacityData = {
                  bubbleObj: {
                    optValue: options.interactivity.modes.bubble.opacity,
                    value: particle.bubble.opacity
                  },
                  particlesObj: {
                    optValue: particle.particlesOptions.opacity.value,
                    value: particle.opacity.value
                  },
                  type: Enums_1.ProcessBubbleType.opacity
                };
                this.process(particle, distMouse, timeSpent, opacityData);

                if (!container.bubble.durationEnd) {
                  if (distMouse <= container.retina.bubbleModeDistance) {
                    this.hoverBubbleColor(particle);
                  } else {
                    delete particle.bubble.color;
                  }
                } else {
                  delete particle.bubble.color;
                }
              }
            } catch (err) {
              _iterator53.e(err);
            } finally {
              _iterator53.f();
            }
          }
        }, {
          key: "hoverBubble",
          value: function hoverBubble() {
            var container = this.container;
            var mousePos = container.interactivity.mouse.position;

            if (mousePos === undefined) {
              return;
            }

            var distance = container.retina.bubbleModeDistance;
            var query = container.particles.quadTree.queryCircle(mousePos, distance);

            var _iterator54 = _createForOfIteratorHelper(query),
                _step53;

            try {
              for (_iterator54.s(); !(_step53 = _iterator54.n()).done;) {
                var particle = _step53.value;
                particle.bubble.inRange = true;
                var pos = particle.getPosition();
                var pointDistance = Utils_1.NumberUtils.getDistance(pos, mousePos);
                var ratio = 1 - pointDistance / distance;

                if (pointDistance <= distance) {
                  if (ratio >= 0 && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {
                    this.hoverBubbleSize(particle, ratio);
                    this.hoverBubbleOpacity(particle, ratio);
                    this.hoverBubbleColor(particle);
                  }
                } else {
                  this.reset(particle);
                }

                if (container.interactivity.status === Utils_1.Constants.mouseLeaveEvent) {
                  this.reset(particle);
                }
              }
            } catch (err) {
              _iterator54.e(err);
            } finally {
              _iterator54.f();
            }
          }
        }, {
          key: "hoverBubbleSize",
          value: function hoverBubbleSize(particle, ratio, divBubble) {
            var _a;

            var container = this.container;
            var modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;

            if (modeSize === undefined) {
              return;
            }

            var optSize = (_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue;
            var pSize = particle.size.value;
            var size = calculateBubbleValue(pSize, modeSize, optSize, ratio);

            if (size !== undefined) {
              particle.bubble.radius = size;
            }
          }
        }, {
          key: "hoverBubbleOpacity",
          value: function hoverBubbleOpacity(particle, ratio, divBubble) {
            var _a;

            var options = this.container.options;
            var modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;

            if (modeOpacity === undefined) {
              return;
            }

            var optOpacity = particle.particlesOptions.opacity.value;
            var pOpacity = particle.opacity.value;
            var opacity = calculateBubbleValue(pOpacity, modeOpacity, optOpacity, ratio);

            if (opacity !== undefined) {
              particle.bubble.opacity = opacity;
            }
          }
        }, {
          key: "hoverBubbleColor",
          value: function hoverBubbleColor(particle, divBubble) {
            var _a;

            var options = this.container.options;

            if (particle.bubble.color === undefined) {
              var modeColor = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.color) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.color;

              if (modeColor === undefined) {
                return;
              }

              var bubbleColor = modeColor instanceof Array ? Utils_1.Utils.itemFromArray(modeColor) : modeColor;
              particle.bubble.color = Utils_1.ColorUtils.colorToHsl(bubbleColor);
            }
          }
        }]);

        return Bubbler;
      }();

      exports.Bubbler = Bubbler;
      /***/
    },

    /***/
    43301:
    /*!**************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Interactions/External/Connector.js ***!
      \**************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Connector = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Modes_1 = __webpack_require__(
      /*! ../../Enums/Modes */
      42495);

      var Connector = /*#__PURE__*/function () {
        function Connector(container) {
          _classCallCheck2(this, Connector);

          this.container = container;
        }

        _createClass2(Connector, [{
          key: "isEnabled",
          value: function isEnabled() {
            var container = this.container;
            var mouse = container.interactivity.mouse;
            var events = container.options.interactivity.events;

            if (!(events.onHover.enable && mouse.position)) {
              return false;
            }

            var hoverMode = events.onHover.mode;
            return Utils_1.Utils.isInArray(Modes_1.HoverMode.connect, hoverMode);
          }
        }, {
          key: "reset",
          value: function reset() {}
        }, {
          key: "interact",
          value: function interact() {
            var container = this.container;
            var options = container.options;

            if (options.interactivity.events.onHover.enable && container.interactivity.status === "mousemove") {
              var mousePos = container.interactivity.mouse.position;

              if (!mousePos) {
                return;
              }

              var distance = Math.abs(container.retina.connectModeRadius);
              var query = container.particles.quadTree.queryCircle(mousePos, distance);
              var i = 0;

              var _iterator55 = _createForOfIteratorHelper(query),
                  _step54;

              try {
                for (_iterator55.s(); !(_step54 = _iterator55.n()).done;) {
                  var p1 = _step54.value;
                  var pos1 = p1.getPosition();

                  var _iterator56 = _createForOfIteratorHelper(query.slice(i + 1)),
                      _step55;

                  try {
                    for (_iterator56.s(); !(_step55 = _iterator56.n()).done;) {
                      var p2 = _step55.value;
                      var pos2 = p2.getPosition();
                      var distMax = Math.abs(container.retina.connectModeDistance);
                      var xDiff = Math.abs(pos1.x - pos2.x);
                      var yDiff = Math.abs(pos1.y - pos2.y);

                      if (xDiff < distMax && yDiff < distMax) {
                        container.canvas.drawConnectLine(p1, p2);
                      }
                    }
                  } catch (err) {
                    _iterator56.e(err);
                  } finally {
                    _iterator56.f();
                  }

                  ++i;
                }
              } catch (err) {
                _iterator55.e(err);
              } finally {
                _iterator55.f();
              }
            }
          }
        }]);

        return Connector;
      }();

      exports.Connector = Connector;
      /***/
    },

    /***/
    15235:
    /*!************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Interactions/External/Grabber.js ***!
      \************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Grabber = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Modes_1 = __webpack_require__(
      /*! ../../Enums/Modes */
      42495);

      var Grabber = /*#__PURE__*/function () {
        function Grabber(container) {
          _classCallCheck2(this, Grabber);

          this.container = container;
        }

        _createClass2(Grabber, [{
          key: "isEnabled",
          value: function isEnabled() {
            var container = this.container;
            var mouse = container.interactivity.mouse;
            var events = container.options.interactivity.events;

            if (!(events.onHover.enable && mouse.position)) {
              return false;
            }

            var hoverMode = events.onHover.mode;
            return Utils_1.Utils.isInArray(Modes_1.HoverMode.grab, hoverMode);
          }
        }, {
          key: "reset",
          value: function reset() {}
        }, {
          key: "interact",
          value: function interact() {
            var _a;

            var container = this.container;
            var options = container.options;
            var interactivity = options.interactivity;

            if (interactivity.events.onHover.enable && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {
              var mousePos = container.interactivity.mouse.position;

              if (mousePos === undefined) {
                return;
              }

              var distance = container.retina.grabModeDistance;
              var query = container.particles.quadTree.queryCircle(mousePos, distance);

              var _iterator57 = _createForOfIteratorHelper(query),
                  _step56;

              try {
                for (_iterator57.s(); !(_step56 = _iterator57.n()).done;) {
                  var particle = _step56.value;
                  var pos = particle.getPosition();
                  var pointDistance = Utils_1.NumberUtils.getDistance(pos, mousePos);

                  if (pointDistance <= distance) {
                    var grabLineOptions = interactivity.modes.grab.links;
                    var lineOpacity = grabLineOptions.opacity;
                    var opacityLine = lineOpacity - pointDistance * lineOpacity / distance;

                    if (opacityLine > 0) {
                      var optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.particlesOptions.links.color;

                      if (!container.particles.grabLineColor) {
                        var linksOptions = container.options.interactivity.modes.grab.links;
                        container.particles.grabLineColor = Utils_1.ColorUtils.getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);
                      }

                      var colorLine = Utils_1.ColorUtils.getLinkColor(particle, undefined, container.particles.grabLineColor);

                      if (colorLine === undefined) {
                        return;
                      }

                      container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);
                    }
                  }
                }
              } catch (err) {
                _iterator57.e(err);
              } finally {
                _iterator57.f();
              }
            }
          }
        }]);

        return Grabber;
      }();

      exports.Grabber = Grabber;
      /***/
    },

    /***/
    93453:
    /*!************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Interactions/External/Lighter.js ***!
      \************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Lighter = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Modes_1 = __webpack_require__(
      /*! ../../Enums/Modes */
      42495);

      var Lighter = /*#__PURE__*/function () {
        function Lighter(container) {
          _classCallCheck2(this, Lighter);

          this.container = container;
        }

        _createClass2(Lighter, [{
          key: "interact",
          value: function interact() {
            var container = this.container;
            var options = container.options;

            if (options.interactivity.events.onHover.enable && container.interactivity.status === "mousemove") {
              var mousePos = container.interactivity.mouse.position;

              if (!mousePos) {
                return;
              }

              container.canvas.drawLight(mousePos);
            }
          }
        }, {
          key: "isEnabled",
          value: function isEnabled() {
            var container = this.container;
            var mouse = container.interactivity.mouse;
            var events = container.options.interactivity.events;

            if (!(events.onHover.enable && mouse.position)) {
              return false;
            }

            var hoverMode = events.onHover.mode;
            return Utils_1.Utils.isInArray(Modes_1.HoverMode.light, hoverMode);
          }
        }, {
          key: "reset",
          value: function reset() {}
        }]);

        return Lighter;
      }();

      exports.Lighter = Lighter;
      /***/
    },

    /***/
    85059:
    /*!*************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Interactions/External/Repulser.js ***!
      \*************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Repulser = void 0;

      var Enums_1 = __webpack_require__(
      /*! ../../Enums */
      9717);

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Repulser = /*#__PURE__*/function () {
        function Repulser(container) {
          _classCallCheck2(this, Repulser);

          this.container = container;
        }

        _createClass2(Repulser, [{
          key: "isEnabled",
          value: function isEnabled() {
            var container = this.container;
            var options = container.options;
            var mouse = container.interactivity.mouse;
            var events = options.interactivity.events;
            var divs = events.onDiv;
            var divRepulse = Utils_1.Utils.isDivModeEnabled(Enums_1.DivMode.repulse, divs);

            if (!(divRepulse || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {
              return false;
            }

            var hoverMode = events.onHover.mode;
            var clickMode = events.onClick.mode;
            return Utils_1.Utils.isInArray(Enums_1.HoverMode.repulse, hoverMode) || Utils_1.Utils.isInArray(Enums_1.ClickMode.repulse, clickMode) || divRepulse;
          }
        }, {
          key: "reset",
          value: function reset() {}
        }, {
          key: "interact",
          value: function interact() {
            var _this253 = this;

            var container = this.container;
            var options = container.options;
            var mouseMoveStatus = container.interactivity.status === Utils_1.Constants.mouseMoveEvent;
            var events = options.interactivity.events;
            var hoverEnabled = events.onHover.enable;
            var hoverMode = events.onHover.mode;
            var clickEnabled = events.onClick.enable;
            var clickMode = events.onClick.mode;
            var divs = events.onDiv;

            if (mouseMoveStatus && hoverEnabled && Utils_1.Utils.isInArray(Enums_1.HoverMode.repulse, hoverMode)) {
              this.hoverRepulse();
            } else if (clickEnabled && Utils_1.Utils.isInArray(Enums_1.ClickMode.repulse, clickMode)) {
              this.clickRepulse();
            } else {
              Utils_1.Utils.divModeExecute(Enums_1.DivMode.repulse, divs, function (selector, div) {
                return _this253.singleSelectorRepulse(selector, div);
              });
            }
          }
        }, {
          key: "singleSelectorRepulse",
          value: function singleSelectorRepulse(selector, div) {
            var _this254 = this;

            var container = this.container;
            var query = document.querySelectorAll(selector);

            if (!query.length) {
              return;
            }

            query.forEach(function (item) {
              var elem = item;
              var pxRatio = container.retina.pixelRatio;
              var pos = {
                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,
                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio
              };
              var repulseRadius = elem.offsetWidth / 2 * pxRatio;
              var area = div.type === Enums_1.DivType.circle ? new Utils_1.Circle(pos.x, pos.y, repulseRadius) : new Utils_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio);
              var divs = container.options.interactivity.modes.repulse.divs;
              var divRepulse = Utils_1.Utils.divMode(divs, elem);

              _this254.processRepulse(pos, repulseRadius, area, divRepulse);
            });
          }
        }, {
          key: "hoverRepulse",
          value: function hoverRepulse() {
            var container = this.container;
            var mousePos = container.interactivity.mouse.position;

            if (!mousePos) {
              return;
            }

            var repulseRadius = container.retina.repulseModeDistance;
            this.processRepulse(mousePos, repulseRadius, new Utils_1.Circle(mousePos.x, mousePos.y, repulseRadius));
          }
        }, {
          key: "processRepulse",
          value: function processRepulse(position, repulseRadius, area, divRepulse) {
            var _a;

            var container = this.container;
            var query = container.particles.quadTree.query(area);

            var _iterator58 = _createForOfIteratorHelper(query),
                _step57;

            try {
              for (_iterator58.s(); !(_step57 = _iterator58.n()).done;) {
                var particle = _step57.value;

                var _Utils_1$NumberUtils$2 = Utils_1.NumberUtils.getDistances(particle.position, position),
                    dx = _Utils_1$NumberUtils$2.dx,
                    dy = _Utils_1$NumberUtils$2.dy,
                    distance = _Utils_1$NumberUtils$2.distance;

                var normVec = {
                  x: dx / distance,
                  y: dy / distance
                };
                var velocity = ((_a = divRepulse === null || divRepulse === void 0 ? void 0 : divRepulse.speed) !== null && _a !== void 0 ? _a : container.options.interactivity.modes.repulse.speed) * 100;
                var repulseFactor = Utils_1.NumberUtils.clamp((1 - Math.pow(distance / repulseRadius, 2)) * velocity, 0, 50);
                particle.position.x = particle.position.x + normVec.x * repulseFactor;
                particle.position.y = particle.position.y + normVec.y * repulseFactor;
              }
            } catch (err) {
              _iterator58.e(err);
            } finally {
              _iterator58.f();
            }
          }
        }, {
          key: "clickRepulse",
          value: function clickRepulse() {
            var container = this.container;

            if (!container.repulse.finish) {
              if (!container.repulse.count) {
                container.repulse.count = 0;
              }

              container.repulse.count++;

              if (container.repulse.count === container.particles.count) {
                container.repulse.finish = true;
              }
            }

            if (container.repulse.clicking) {
              var repulseDistance = container.retina.repulseModeDistance;
              var repulseRadius = Math.pow(repulseDistance / 6, 3);
              var mouseClickPos = container.interactivity.mouse.clickPosition;

              if (mouseClickPos === undefined) {
                return;
              }

              var range = new Utils_1.Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius);
              var query = container.particles.quadTree.query(range);

              var _iterator59 = _createForOfIteratorHelper(query),
                  _step58;

              try {
                for (_iterator59.s(); !(_step58 = _iterator59.n()).done;) {
                  var particle = _step58.value;

                  var _Utils_1$NumberUtils$3 = Utils_1.NumberUtils.getDistances(mouseClickPos, particle.position),
                      dx = _Utils_1$NumberUtils$3.dx,
                      dy = _Utils_1$NumberUtils$3.dy,
                      distance = _Utils_1$NumberUtils$3.distance;

                  var d = distance * distance;
                  var velocity = container.options.interactivity.modes.repulse.speed;
                  var force = -repulseRadius * velocity / d;

                  if (d <= repulseRadius) {
                    container.repulse.particles.push(particle);
                    var angle = Math.atan2(dy, dx);
                    particle.velocity.horizontal = force * Math.cos(angle);
                    particle.velocity.vertical = force * Math.sin(angle);
                  }
                }
              } catch (err) {
                _iterator59.e(err);
              } finally {
                _iterator59.f();
              }
            } else if (container.repulse.clicking === false) {
              var _iterator60 = _createForOfIteratorHelper(container.repulse.particles),
                  _step59;

              try {
                for (_iterator60.s(); !(_step59 = _iterator60.n()).done;) {
                  var _particle3 = _step59.value;
                  _particle3.velocity.horizontal = _particle3.initialVelocity.horizontal;
                  _particle3.velocity.vertical = _particle3.initialVelocity.vertical;
                }
              } catch (err) {
                _iterator60.e(err);
              } finally {
                _iterator60.f();
              }

              container.repulse.particles = [];
            }
          }
        }]);

        return Repulser;
      }();

      exports.Repulser = Repulser;
      /***/
    },

    /***/
    18889:
    /*!***************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Interactions/External/TrailMaker.js ***!
      \***************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.TrailMaker = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Modes_1 = __webpack_require__(
      /*! ../../Enums/Modes */
      42495);

      var TrailMaker = /*#__PURE__*/function () {
        function TrailMaker(container) {
          _classCallCheck2(this, TrailMaker);

          this.container = container;
          this.delay = 0;
        }

        _createClass2(TrailMaker, [{
          key: "interact",
          value: function interact(delta) {
            if (!this.container.retina.reduceFactor) {
              return;
            }

            var container = this.container;
            var options = container.options;
            var trailOptions = options.interactivity.modes.trail;
            var optDelay = trailOptions.delay * 1000 / this.container.retina.reduceFactor;

            if (this.delay < optDelay) {
              this.delay += delta.value;
            }

            if (this.delay >= optDelay) {
              container.particles.push(trailOptions.quantity, container.interactivity.mouse, trailOptions.particles);
              this.delay -= optDelay;
            }
          }
        }, {
          key: "isEnabled",
          value: function isEnabled() {
            var container = this.container;
            var options = container.options;
            var mouse = container.interactivity.mouse;
            var events = options.interactivity.events;
            return mouse.clicking && mouse.inside && !!mouse.position && Utils_1.Utils.isInArray(Modes_1.ClickMode.trail, events.onClick.mode) || mouse.inside && !!mouse.position && Utils_1.Utils.isInArray(Modes_1.HoverMode.trail, events.onHover.mode);
          }
        }, {
          key: "reset",
          value: function reset() {}
        }]);

        return TrailMaker;
      }();

      exports.TrailMaker = TrailMaker;
      /***/
    },

    /***/
    34078:
    /*!***************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Interactions/Particles/Attractor.js ***!
      \***************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Attractor = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Attractor = /*#__PURE__*/function () {
        function Attractor(container) {
          _classCallCheck2(this, Attractor);

          this.container = container;
        }

        _createClass2(Attractor, [{
          key: "interact",
          value: function interact(p1) {
            var _a;

            var container = this.container;
            var distance = (_a = p1.linksDistance) !== null && _a !== void 0 ? _a : container.retina.linksDistance;
            var pos1 = p1.getPosition();
            var query = container.particles.quadTree.queryCircle(pos1, distance);

            var _iterator61 = _createForOfIteratorHelper(query),
                _step60;

            try {
              for (_iterator61.s(); !(_step60 = _iterator61.n()).done;) {
                var p2 = _step60.value;

                if (p1 === p2 || !p2.particlesOptions.move.attract.enable || p2.destroyed || p2.spawning) {
                  continue;
                }

                var pos2 = p2.getPosition();

                var _Utils_1$NumberUtils$4 = Utils_1.NumberUtils.getDistances(pos1, pos2),
                    dx = _Utils_1$NumberUtils$4.dx,
                    dy = _Utils_1$NumberUtils$4.dy;

                var rotate = p1.particlesOptions.move.attract.rotate;
                var ax = dx / (rotate.x * 1000);
                var ay = dy / (rotate.y * 1000);
                p1.velocity.horizontal -= ax;
                p1.velocity.vertical -= ay;
                p2.velocity.horizontal += ax;
                p2.velocity.vertical += ay;
              }
            } catch (err) {
              _iterator61.e(err);
            } finally {
              _iterator61.f();
            }
          }
        }, {
          key: "isEnabled",
          value: function isEnabled(particle) {
            return particle.particlesOptions.move.attract.enable;
          }
        }, {
          key: "reset",
          value: function reset() {}
        }]);

        return Attractor;
      }();

      exports.Attractor = Attractor;
      /***/
    },

    /***/
    39799:
    /*!**************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Interactions/Particles/Collider.js ***!
      \**************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Collider = void 0;

      var Enums_1 = __webpack_require__(
      /*! ../../Enums */
      9717);

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      function bounce(p1, p2) {
        Utils_1.Utils.circleBounce(Utils_1.Utils.circleBounceDataFromParticle(p1), Utils_1.Utils.circleBounceDataFromParticle(p2));
      }

      function destroy(p1, p2) {
        if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {
          p1.destroy();
        } else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {
          p2.destroy();
        } else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {
          if (p1.getRadius() >= p2.getRadius()) {
            p2.destroy();
          } else {
            p1.destroy();
          }
        }
      }

      var Collider = /*#__PURE__*/function () {
        function Collider(container) {
          _classCallCheck2(this, Collider);

          this.container = container;
        }

        _createClass2(Collider, [{
          key: "isEnabled",
          value: function isEnabled(particle) {
            return particle.particlesOptions.collisions.enable;
          }
        }, {
          key: "reset",
          value: function reset() {}
        }, {
          key: "interact",
          value: function interact(p1) {
            var container = this.container;
            var pos1 = p1.getPosition();
            var query = container.particles.quadTree.queryCircle(pos1, p1.getRadius() * 2);

            var _iterator62 = _createForOfIteratorHelper(query),
                _step61;

            try {
              for (_iterator62.s(); !(_step61 = _iterator62.n()).done;) {
                var p2 = _step61.value;

                if (p1 === p2 || !p2.particlesOptions.collisions.enable || p1.particlesOptions.collisions.mode !== p2.particlesOptions.collisions.mode || p2.destroyed || p2.spawning) {
                  continue;
                }

                var pos2 = p2.getPosition();
                var dist = Utils_1.NumberUtils.getDistance(pos1, pos2);
                var radius1 = p1.getRadius();
                var radius2 = p2.getRadius();
                var distP = radius1 + radius2;

                if (dist <= distP) {
                  this.resolveCollision(p1, p2);
                }
              }
            } catch (err) {
              _iterator62.e(err);
            } finally {
              _iterator62.f();
            }
          }
        }, {
          key: "resolveCollision",
          value: function resolveCollision(p1, p2) {
            switch (p1.particlesOptions.collisions.mode) {
              case Enums_1.CollisionMode.absorb:
                {
                  this.absorb(p1, p2);
                  break;
                }

              case Enums_1.CollisionMode.bounce:
                {
                  bounce(p1, p2);
                  break;
                }

              case Enums_1.CollisionMode.destroy:
                {
                  destroy(p1, p2);
                  break;
                }
            }
          }
        }, {
          key: "absorb",
          value: function absorb(p1, p2) {
            var container = this.container;
            var fps = container.options.fpsLimit / 1000;

            if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {
              p1.destroy();
            } else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {
              p2.destroy();
            } else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {
              if (p1.getRadius() >= p2.getRadius()) {
                var factor = Utils_1.NumberUtils.clamp(p1.getRadius() / p2.getRadius(), 0, p2.getRadius()) * fps;
                p1.size.value += factor;
                p2.size.value -= factor;

                if (p2.getRadius() <= container.retina.pixelRatio) {
                  p2.size.value = 0;
                  p2.destroy();
                }
              } else {
                var _factor = Utils_1.NumberUtils.clamp(p2.getRadius() / p1.getRadius(), 0, p1.getRadius()) * fps;

                p1.size.value -= _factor;
                p2.size.value += _factor;

                if (p1.getRadius() <= container.retina.pixelRatio) {
                  p1.size.value = 0;
                  p1.destroy();
                }
              }
            }
          }
        }]);

        return Collider;
      }();

      exports.Collider = Collider;
      /***/
    },

    /***/
    64639:
    /*!**************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Interactions/Particles/Infecter.js ***!
      \**************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Infecter = void 0;

      var Infecter = /*#__PURE__*/function () {
        function Infecter(container) {
          _classCallCheck2(this, Infecter);

          this.container = container;
        }

        _createClass2(Infecter, [{
          key: "isEnabled",
          value: function isEnabled() {
            return this.container.options.infection.enable;
          }
        }, {
          key: "reset",
          value: function reset() {}
        }, {
          key: "interact",
          value: function interact(p1, delta) {
            var _a, _b;

            var infecter1 = p1.infecter;
            infecter1.updateInfection(delta.value);

            if (infecter1.infectionStage === undefined) {
              return;
            }

            var container = this.container;
            var options = container.options;
            var infectionOptions = options.infection;

            if (!infectionOptions.enable || infectionOptions.stages.length < 1) {
              return;
            }

            var infectionStage1 = infectionOptions.stages[infecter1.infectionStage];
            var pxRatio = container.retina.pixelRatio;
            var radius = p1.getRadius() * 2 + infectionStage1.radius * pxRatio;
            var pos = p1.getPosition();
            var infectedStage1 = (_a = infectionStage1.infectedStage) !== null && _a !== void 0 ? _a : infecter1.infectionStage;
            var query = container.particles.quadTree.queryCircle(pos, radius);
            var infections = infectionStage1.rate;
            var neighbors = query.length;

            var _iterator63 = _createForOfIteratorHelper(query),
                _step62;

            try {
              for (_iterator63.s(); !(_step62 = _iterator63.n()).done;) {
                var p2 = _step62.value;

                if (p2 === p1 || p2.destroyed || p2.spawning || !(p2.infecter.infectionStage === undefined || p2.infecter.infectionStage !== infecter1.infectionStage)) {
                  continue;
                }

                var infecter2 = p2.infecter;

                if (Math.random() < infections / neighbors) {
                  if (infecter2.infectionStage === undefined) {
                    infecter2.startInfection(infectedStage1);
                  } else if (infecter2.infectionStage < infecter1.infectionStage) {
                    infecter2.updateInfectionStage(infectedStage1);
                  } else if (infecter2.infectionStage > infecter1.infectionStage) {
                    var infectionStage2 = infectionOptions.stages[infecter2.infectionStage];
                    var infectedStage2 = (_b = infectionStage2 === null || infectionStage2 === void 0 ? void 0 : infectionStage2.infectedStage) !== null && _b !== void 0 ? _b : infecter2.infectionStage;
                    infecter1.updateInfectionStage(infectedStage2);
                  }
                }
              }
            } catch (err) {
              _iterator63.e(err);
            } finally {
              _iterator63.f();
            }
          }
        }]);

        return Infecter;
      }();

      exports.Infecter = Infecter;
      /***/
    },

    /***/
    2137:
    /*!*************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Interactions/Particles/Lighter.js ***!
      \*************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Lighter = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Modes_1 = __webpack_require__(
      /*! ../../Enums/Modes */
      42495);

      var Lighter = /*#__PURE__*/function () {
        function Lighter(container) {
          _classCallCheck2(this, Lighter);

          this.container = container;
        }

        _createClass2(Lighter, [{
          key: "interact",
          value: function interact(particle) {
            var container = this.container;
            var options = container.options;

            if (options.interactivity.events.onHover.enable && container.interactivity.status === "mousemove") {
              var mousePos = this.container.interactivity.mouse.position;

              if (mousePos) {
                container.canvas.drawParticleShadow(particle, mousePos);
              }
            }
          }
        }, {
          key: "isEnabled",
          value: function isEnabled() {
            var container = this.container;
            var mouse = container.interactivity.mouse;
            var events = container.options.interactivity.events;

            if (!(events.onHover.enable && mouse.position)) {
              return false;
            }

            var hoverMode = events.onHover.mode;
            return Utils_1.Utils.isInArray(Modes_1.HoverMode.light, hoverMode);
          }
        }, {
          key: "reset",
          value: function reset() {}
        }]);

        return Lighter;
      }();

      exports.Lighter = Lighter;
      /***/
    },

    /***/
    77357:
    /*!************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Interactions/Particles/Linker.js ***!
      \************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Linker = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Linker = /*#__PURE__*/function () {
        function Linker(container) {
          _classCallCheck2(this, Linker);

          this.container = container;
        }

        _createClass2(Linker, [{
          key: "isEnabled",
          value: function isEnabled(particle) {
            return particle.particlesOptions.links.enable;
          }
        }, {
          key: "reset",
          value: function reset() {}
        }, {
          key: "interact",
          value: function interact(p1) {
            var _a;

            var container = this.container;
            var linkOpt1 = p1.particlesOptions.links;
            var optOpacity = linkOpt1.opacity;
            var optDistance = (_a = p1.linksDistance) !== null && _a !== void 0 ? _a : container.retina.linksDistance;
            var canvasSize = container.canvas.size;
            var warp = linkOpt1.warp;
            var pos1 = p1.getPosition();
            var range = warp ? new Utils_1.CircleWarp(pos1.x, pos1.y, optDistance, canvasSize) : new Utils_1.Circle(pos1.x, pos1.y, optDistance);
            var query = container.particles.quadTree.query(range);

            var _iterator64 = _createForOfIteratorHelper(query),
                _step63;

            try {
              for (_iterator64.s(); !(_step63 = _iterator64.n()).done;) {
                var p2 = _step63.value;
                var linkOpt2 = p2.particlesOptions.links;

                if (p1 === p2 || !linkOpt2.enable || linkOpt1.id !== linkOpt2.id || p2.spawning || p2.destroyed) {
                  continue;
                }

                var pos2 = p2.getPosition();
                var distance = Utils_1.NumberUtils.getDistance(pos1, pos2);

                if (warp) {
                  if (distance > optDistance) {
                    var pos2NE = {
                      x: pos2.x - canvasSize.width,
                      y: pos2.y
                    };
                    distance = Utils_1.NumberUtils.getDistance(pos1, pos2NE);

                    if (distance > optDistance) {
                      var pos2SE = {
                        x: pos2.x - canvasSize.width,
                        y: pos2.y - canvasSize.height
                      };
                      distance = Utils_1.NumberUtils.getDistance(pos1, pos2SE);

                      if (distance > optDistance) {
                        var pos2SW = {
                          x: pos2.x,
                          y: pos2.y - canvasSize.height
                        };
                        distance = Utils_1.NumberUtils.getDistance(pos1, pos2SW);
                      }
                    }
                  }
                }

                if (distance > optDistance) {
                  return;
                }

                var opacityLine = (1 - distance / optDistance) * optOpacity;
                var linksOptions = p1.particlesOptions.links;
                var linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;

                if (!linkColor) {
                  var optColor = linksOptions.color;
                  linkColor = Utils_1.ColorUtils.getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);

                  if (linksOptions.id !== undefined) {
                    container.particles.linksColors.set(linksOptions.id, linkColor);
                  } else {
                    container.particles.linksColor = linkColor;
                  }
                }

                if (p2.links.map(function (t) {
                  return t.destination;
                }).indexOf(p1) === -1 && p1.links.map(function (t) {
                  return t.destination;
                }).indexOf(p2) === -1) {
                  p1.links.push({
                    destination: p2,
                    opacity: opacityLine
                  });
                }
              }
            } catch (err) {
              _iterator64.e(err);
            } finally {
              _iterator64.f();
            }
          }
        }]);

        return Linker;
      }();

      exports.Linker = Linker;
      /***/
    },

    /***/
    56338:
    /*!****************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/BackgroundMask/BackgroundMask.js ***!
      \****************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.BackgroundMask = void 0;

      var BackgroundMaskCover_1 = __webpack_require__(
      /*! ./BackgroundMaskCover */
      16599);

      var BackgroundMask = /*#__PURE__*/function () {
        function BackgroundMask() {
          _classCallCheck2(this, BackgroundMask);

          this.composite = "destination-out";
          this.cover = new BackgroundMaskCover_1.BackgroundMaskCover();
          this.enable = false;
        }

        _createClass2(BackgroundMask, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.composite !== undefined) {
              this.composite = data.composite;
            }

            if (data.cover !== undefined) {
              var cover = data.cover;
              var color = typeof data.cover === "string" ? {
                color: data.cover
              } : data.cover;
              this.cover.load(cover.color !== undefined ? cover : {
                color: color
              });
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }
          }
        }]);

        return BackgroundMask;
      }();

      exports.BackgroundMask = BackgroundMask;
      /***/
    },

    /***/
    16599:
    /*!*********************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/BackgroundMask/BackgroundMaskCover.js ***!
      \*********************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.BackgroundMaskCover = void 0;

      var OptionsColor_1 = __webpack_require__(
      /*! ../OptionsColor */
      91287);

      var BackgroundMaskCover = /*#__PURE__*/function () {
        function BackgroundMaskCover() {
          _classCallCheck2(this, BackgroundMaskCover);

          this.color = new OptionsColor_1.OptionsColor();
          this.opacity = 1;
        }

        _createClass2(BackgroundMaskCover, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.color !== undefined) {
              this.color = OptionsColor_1.OptionsColor.create(this.color, data.color);
            }

            if (data.opacity !== undefined) {
              this.opacity = data.opacity;
            }
          }
        }]);

        return BackgroundMaskCover;
      }();

      exports.BackgroundMaskCover = BackgroundMaskCover;
      /***/
    },

    /***/
    57359:
    /*!****************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/BackgroundMode/BackgroundMode.js ***!
      \****************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.BackgroundMode = void 0;

      var BackgroundMode = /*#__PURE__*/function () {
        function BackgroundMode() {
          _classCallCheck2(this, BackgroundMode);

          this.enable = false;
          this.zIndex = -1;
        }

        _createClass2(BackgroundMode, [{
          key: "load",
          value: function load(data) {
            if (!data) {
              return;
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            if (data.zIndex !== undefined) {
              this.zIndex = data.zIndex;
            }
          }
        }]);

        return BackgroundMode;
      }();

      exports.BackgroundMode = BackgroundMode;
      /***/
    },

    /***/
    12803:
    /*!********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Background/Background.js ***!
      \********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Background = void 0;

      var OptionsColor_1 = __webpack_require__(
      /*! ../OptionsColor */
      91287);

      var Background = /*#__PURE__*/function () {
        function Background() {
          _classCallCheck2(this, Background);

          this.color = new OptionsColor_1.OptionsColor();
          this.color.value = "";
          this.image = "";
          this.position = "";
          this.repeat = "";
          this.size = "";
          this.opacity = 1;
        }

        _createClass2(Background, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.color !== undefined) {
              this.color = OptionsColor_1.OptionsColor.create(this.color, data.color);
            }

            if (data.image !== undefined) {
              this.image = data.image;
            }

            if (data.position !== undefined) {
              this.position = data.position;
            }

            if (data.repeat !== undefined) {
              this.repeat = data.repeat;
            }

            if (data.size !== undefined) {
              this.size = data.size;
            }

            if (data.opacity !== undefined) {
              this.opacity = data.opacity;
            }
          }
        }]);

        return Background;
      }();

      exports.Background = Background;
      /***/
    },

    /***/
    21595:
    /*!******************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Infection/Infection.js ***!
      \******************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Infection = void 0;

      var InfectionStage_1 = __webpack_require__(
      /*! ./InfectionStage */
      61565);

      var Infection = /*#__PURE__*/function () {
        function Infection() {
          _classCallCheck2(this, Infection);

          this.cure = false;
          this.delay = 0;
          this.enable = false;
          this.infections = 0;
          this.stages = [];
        }

        _createClass2(Infection, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.cure !== undefined) {
              this.cure = data.cure;
            }

            if (data.delay !== undefined) {
              this.delay = data.delay;
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            if (data.infections !== undefined) {
              this.infections = data.infections;
            }

            if (data.stages === undefined) {
              return;
            }

            this.stages = data.stages.map(function (t) {
              var s = new InfectionStage_1.InfectionStage();
              s.load(t);
              return s;
            });
          }
        }]);

        return Infection;
      }();

      exports.Infection = Infection;
      /***/
    },

    /***/
    61565:
    /*!***********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Infection/InfectionStage.js ***!
      \***********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.InfectionStage = void 0;

      var OptionsColor_1 = __webpack_require__(
      /*! ../OptionsColor */
      91287);

      var InfectionStage = /*#__PURE__*/function () {
        function InfectionStage() {
          _classCallCheck2(this, InfectionStage);

          this.color = new OptionsColor_1.OptionsColor();
          this.color.value = "#ff0000";
          this.radius = 0;
          this.rate = 1;
        }

        _createClass2(InfectionStage, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.color !== undefined) {
              this.color = OptionsColor_1.OptionsColor.create(this.color, data.color);
            }

            this.duration = data.duration;
            this.infectedStage = data.infectedStage;

            if (data.radius !== undefined) {
              this.radius = data.radius;
            }

            if (data.rate !== undefined) {
              this.rate = data.rate;
            }
          }
        }]);

        return InfectionStage;
      }();

      exports.InfectionStage = InfectionStage;
      /***/
    },

    /***/
    9104:
    /*!******************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Events/ClickEvent.js ***!
      \******************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ClickEvent = void 0;

      var ClickEvent = /*#__PURE__*/function () {
        function ClickEvent() {
          _classCallCheck2(this, ClickEvent);

          this.enable = false;
          this.mode = [];
        }

        _createClass2(ClickEvent, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            if (data.mode !== undefined) {
              this.mode = data.mode;
            }
          }
        }]);

        return ClickEvent;
      }();

      exports.ClickEvent = ClickEvent;
      /***/
    },

    /***/
    63143:
    /*!****************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Events/DivEvent.js ***!
      \****************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DivEvent = void 0;

      var Enums_1 = __webpack_require__(
      /*! ../../../../Enums */
      9717);

      var DivEvent = /*#__PURE__*/function () {
        function DivEvent() {
          _classCallCheck2(this, DivEvent);

          this.selectors = [];
          this.enable = false;
          this.mode = [];
          this.type = Enums_1.DivType.circle;
        }

        _createClass2(DivEvent, [{
          key: "elementId",
          get: function get() {
            return this.ids;
          },
          set: function set(value) {
            this.ids = value;
          }
        }, {
          key: "el",
          get: function get() {
            return this.elementId;
          },
          set: function set(value) {
            this.elementId = value;
          }
        }, {
          key: "ids",
          get: function get() {
            if (this.selectors instanceof Array) {
              return this.selectors.map(function (t) {
                return t.replace("#", "");
              });
            } else {
              return this.selectors.replace("#", "");
            }
          },
          set: function set(value) {
            if (value instanceof Array) {
              this.selectors = value.map(function (t) {
                return "#".concat(t);
              });
            } else {
              this.selectors = "#".concat(value);
            }
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a, _b;

            if (data === undefined) {
              return;
            }

            var ids = (_b = (_a = data.ids) !== null && _a !== void 0 ? _a : data.elementId) !== null && _b !== void 0 ? _b : data.el;

            if (ids !== undefined) {
              this.ids = ids;
            }

            if (data.selectors !== undefined) {
              this.selectors = data.selectors;
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            if (data.mode !== undefined) {
              this.mode = data.mode;
            }

            if (data.type !== undefined) {
              this.type = data.type;
            }
          }
        }]);

        return DivEvent;
      }();

      exports.DivEvent = DivEvent;
      /***/
    },

    /***/
    14207:
    /*!**************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Events/Events.js ***!
      \**************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Events = void 0;

      var ClickEvent_1 = __webpack_require__(
      /*! ./ClickEvent */
      9104);

      var DivEvent_1 = __webpack_require__(
      /*! ./DivEvent */
      63143);

      var HoverEvent_1 = __webpack_require__(
      /*! ./HoverEvent */
      44542);

      var Events = /*#__PURE__*/function () {
        function Events() {
          _classCallCheck2(this, Events);

          this.onClick = new ClickEvent_1.ClickEvent();
          this.onDiv = new DivEvent_1.DivEvent();
          this.onHover = new HoverEvent_1.HoverEvent();
          this.resize = true;
        }

        _createClass2(Events, [{
          key: "onclick",
          get: function get() {
            return this.onClick;
          },
          set: function set(value) {
            this.onClick = value;
          }
        }, {
          key: "ondiv",
          get: function get() {
            return this.onDiv;
          },
          set: function set(value) {
            this.onDiv = value;
          }
        }, {
          key: "onhover",
          get: function get() {
            return this.onHover;
          },
          set: function set(value) {
            this.onHover = value;
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a, _b, _c;

            if (data === undefined) {
              return;
            }

            this.onClick.load((_a = data.onClick) !== null && _a !== void 0 ? _a : data.onclick);
            var onDiv = (_b = data.onDiv) !== null && _b !== void 0 ? _b : data.ondiv;

            if (onDiv !== undefined) {
              if (onDiv instanceof Array) {
                this.onDiv = onDiv.map(function (div) {
                  var tmp = new DivEvent_1.DivEvent();
                  tmp.load(div);
                  return tmp;
                });
              } else {
                this.onDiv = new DivEvent_1.DivEvent();
                this.onDiv.load(onDiv);
              }
            }

            this.onHover.load((_c = data.onHover) !== null && _c !== void 0 ? _c : data.onhover);

            if (data.resize !== undefined) {
              this.resize = data.resize;
            }
          }
        }]);

        return Events;
      }();

      exports.Events = Events;
      /***/
    },

    /***/
    44542:
    /*!******************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Events/HoverEvent.js ***!
      \******************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.HoverEvent = void 0;

      var Parallax_1 = __webpack_require__(
      /*! ./Parallax */
      61848);

      var HoverEvent = /*#__PURE__*/function () {
        function HoverEvent() {
          _classCallCheck2(this, HoverEvent);

          this.enable = false;
          this.mode = [];
          this.parallax = new Parallax_1.Parallax();
        }

        _createClass2(HoverEvent, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            if (data.mode !== undefined) {
              this.mode = data.mode;
            }

            this.parallax.load(data.parallax);
          }
        }]);

        return HoverEvent;
      }();

      exports.HoverEvent = HoverEvent;
      /***/
    },

    /***/
    61848:
    /*!****************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Events/Parallax.js ***!
      \****************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Parallax = void 0;

      var Parallax = /*#__PURE__*/function () {
        function Parallax() {
          _classCallCheck2(this, Parallax);

          this.enable = false;
          this.force = 2;
          this.smooth = 10;
        }

        _createClass2(Parallax, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            if (data.force !== undefined) {
              this.force = data.force;
            }

            if (data.smooth !== undefined) {
              this.smooth = data.smooth;
            }
          }
        }]);

        return Parallax;
      }();

      exports.Parallax = Parallax;
      /***/
    },

    /***/
    70882:
    /*!**************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Interactivity.js ***!
      \**************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Interactivity = void 0;

      var Enums_1 = __webpack_require__(
      /*! ../../../Enums */
      9717);

      var Events_1 = __webpack_require__(
      /*! ./Events/Events */
      14207);

      var Modes_1 = __webpack_require__(
      /*! ./Modes/Modes */
      46974);

      var Interactivity = /*#__PURE__*/function () {
        function Interactivity() {
          _classCallCheck2(this, Interactivity);

          this.detectsOn = Enums_1.InteractivityDetect.canvas;
          this.events = new Events_1.Events();
          this.modes = new Modes_1.Modes();
        }

        _createClass2(Interactivity, [{
          key: "detect_on",
          get: function get() {
            return this.detectsOn;
          },
          set: function set(value) {
            this.detectsOn = value;
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a, _b, _c;

            if (data === undefined) {
              return;
            }

            var detectsOn = (_a = data.detectsOn) !== null && _a !== void 0 ? _a : data.detect_on;

            if (detectsOn !== undefined) {
              this.detectsOn = detectsOn;
            }

            this.events.load(data.events);
            this.modes.load(data.modes);

            if (((_c = (_b = data.modes) === null || _b === void 0 ? void 0 : _b.slow) === null || _c === void 0 ? void 0 : _c.active) === true) {
              if (this.events.onHover.mode instanceof Array) {
                if (this.events.onHover.mode.indexOf(Enums_1.HoverMode.slow) < 0) {
                  this.events.onHover.mode.push(Enums_1.HoverMode.slow);
                }
              } else if (this.events.onHover.mode !== Enums_1.HoverMode.slow) {
                this.events.onHover.mode = [this.events.onHover.mode, Enums_1.HoverMode.slow];
              }
            }
          }
        }]);

        return Interactivity;
      }();

      exports.Interactivity = Interactivity;
      /***/
    },

    /***/
    19042:
    /*!**************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/Attract.js ***!
      \**************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Attract = void 0;

      var Attract = /*#__PURE__*/function () {
        function Attract() {
          _classCallCheck2(this, Attract);

          this.distance = 200;
          this.duration = 0.4;
          this.speed = 1;
        }

        _createClass2(Attract, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.distance !== undefined) {
              this.distance = data.distance;
            }

            if (data.duration !== undefined) {
              this.duration = data.duration;
            }

            if (data.speed !== undefined) {
              this.speed = data.speed;
            }
          }
        }]);

        return Attract;
      }();

      exports.Attract = Attract;
      /***/
    },

    /***/
    92707:
    /*!*************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/Bounce.js ***!
      \*************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Bounce = void 0;

      var Bounce = /*#__PURE__*/function () {
        function Bounce() {
          _classCallCheck2(this, Bounce);

          this.distance = 200;
        }

        _createClass2(Bounce, [{
          key: "load",
          value: function load(data) {
            if (!data) {
              return;
            }

            if (data.distance !== undefined) {
              this.distance = data.distance;
            }
          }
        }]);

        return Bounce;
      }();

      exports.Bounce = Bounce;
      /***/
    },

    /***/
    18873:
    /*!*************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/Bubble.js ***!
      \*************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Bubble = void 0;

      var BubbleDiv_1 = __webpack_require__(
      /*! ./BubbleDiv */
      95542);

      var BubbleBase_1 = __webpack_require__(
      /*! ./BubbleBase */
      27479);

      var Bubble = /*#__PURE__*/function (_BubbleBase_1$BubbleB) {
        _inherits(Bubble, _BubbleBase_1$BubbleB);

        var _super98 = _createSuper(Bubble);

        function Bubble() {
          _classCallCheck2(this, Bubble);

          return _super98.apply(this, arguments);
        }

        _createClass2(Bubble, [{
          key: "load",
          value: function load(data) {
            _get(_getPrototypeOf(Bubble.prototype), "load", this).call(this, data);

            if (!(data !== undefined && data.divs !== undefined)) {
              return;
            }

            if (data.divs instanceof Array) {
              this.divs = data.divs.map(function (s) {
                var tmp = new BubbleDiv_1.BubbleDiv();
                tmp.load(s);
                return tmp;
              });
            } else {
              if (this.divs instanceof Array || !this.divs) {
                this.divs = new BubbleDiv_1.BubbleDiv();
              }

              this.divs.load(data.divs);
            }
          }
        }]);

        return Bubble;
      }(BubbleBase_1.BubbleBase);

      exports.Bubble = Bubble;
      /***/
    },

    /***/
    27479:
    /*!*****************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/BubbleBase.js ***!
      \*****************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.BubbleBase = void 0;

      var OptionsColor_1 = __webpack_require__(
      /*! ../../OptionsColor */
      91287);

      var BubbleBase = /*#__PURE__*/function () {
        function BubbleBase() {
          _classCallCheck2(this, BubbleBase);

          this.distance = 200;
          this.duration = 0.4;
        }

        _createClass2(BubbleBase, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.distance !== undefined) {
              this.distance = data.distance;
            }

            if (data.duration !== undefined) {
              this.duration = data.duration;
            }

            if (data.opacity !== undefined) {
              this.opacity = data.opacity;
            }

            if (data.color !== undefined) {
              if (data.color instanceof Array) {
                this.color = data.color.map(function (s) {
                  return OptionsColor_1.OptionsColor.create(undefined, s);
                });
              } else {
                if (this.color instanceof Array) {
                  this.color = new OptionsColor_1.OptionsColor();
                }

                this.color = OptionsColor_1.OptionsColor.create(this.color, data.color);
              }
            }

            if (data.size !== undefined) {
              this.size = data.size;
            }
          }
        }]);

        return BubbleBase;
      }();

      exports.BubbleBase = BubbleBase;
      /***/
    },

    /***/
    95542:
    /*!****************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/BubbleDiv.js ***!
      \****************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.BubbleDiv = void 0;

      var BubbleBase_1 = __webpack_require__(
      /*! ./BubbleBase */
      27479);

      var BubbleDiv = /*#__PURE__*/function (_BubbleBase_1$BubbleB2) {
        _inherits(BubbleDiv, _BubbleBase_1$BubbleB2);

        var _super99 = _createSuper(BubbleDiv);

        function BubbleDiv() {
          var _this255;

          _classCallCheck2(this, BubbleDiv);

          _this255 = _super99.call(this);
          _this255.selectors = [];
          return _this255;
        }

        _createClass2(BubbleDiv, [{
          key: "ids",
          get: function get() {
            if (this.selectors instanceof Array) {
              return this.selectors.map(function (t) {
                return t.replace("#", "");
              });
            } else {
              return this.selectors.replace("#", "");
            }
          },
          set: function set(value) {
            if (value instanceof Array) {
              this.selectors = value.map(function (t) {
                return "#".concat(t);
              });
            } else {
              this.selectors = "#".concat(value);
            }
          }
        }, {
          key: "load",
          value: function load(data) {
            _get(_getPrototypeOf(BubbleDiv.prototype), "load", this).call(this, data);

            if (data === undefined) {
              return;
            }

            if (data.ids !== undefined) {
              this.ids = data.ids;
            }

            if (data.selectors !== undefined) {
              this.selectors = data.selectors;
            }
          }
        }]);

        return BubbleDiv;
      }(BubbleBase_1.BubbleBase);

      exports.BubbleDiv = BubbleDiv;
      /***/
    },

    /***/
    30762:
    /*!**************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/Connect.js ***!
      \**************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Connect = void 0;

      var ConnectLinks_1 = __webpack_require__(
      /*! ./ConnectLinks */
      2667);

      var Connect = /*#__PURE__*/function () {
        function Connect() {
          _classCallCheck2(this, Connect);

          this.distance = 80;
          this.links = new ConnectLinks_1.ConnectLinks();
          this.radius = 60;
        }

        _createClass2(Connect, [{
          key: "line_linked",
          get: function get() {
            return this.links;
          },
          set: function set(value) {
            this.links = value;
          }
        }, {
          key: "lineLinked",
          get: function get() {
            return this.links;
          },
          set: function set(value) {
            this.links = value;
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a, _b;

            if (data === undefined) {
              return;
            }

            if (data.distance !== undefined) {
              this.distance = data.distance;
            }

            this.links.load((_b = (_a = data.links) !== null && _a !== void 0 ? _a : data.lineLinked) !== null && _b !== void 0 ? _b : data.line_linked);

            if (data.radius !== undefined) {
              this.radius = data.radius;
            }
          }
        }]);

        return Connect;
      }();

      exports.Connect = Connect;
      /***/
    },

    /***/
    2667:
    /*!*******************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/ConnectLinks.js ***!
      \*******************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ConnectLinks = void 0;

      var ConnectLinks = /*#__PURE__*/function () {
        function ConnectLinks() {
          _classCallCheck2(this, ConnectLinks);

          this.opacity = 0.5;
        }

        _createClass2(ConnectLinks, [{
          key: "load",
          value: function load(data) {
            if (!(data !== undefined && data.opacity !== undefined)) {
              return;
            }

            this.opacity = data.opacity;
          }
        }]);

        return ConnectLinks;
      }();

      exports.ConnectLinks = ConnectLinks;
      /***/
    },

    /***/
    97361:
    /*!***********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/Grab.js ***!
      \***********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Grab = void 0;

      var GrabLinks_1 = __webpack_require__(
      /*! ./GrabLinks */
      89046);

      var Grab = /*#__PURE__*/function () {
        function Grab() {
          _classCallCheck2(this, Grab);

          this.distance = 100;
          this.links = new GrabLinks_1.GrabLinks();
        }

        _createClass2(Grab, [{
          key: "line_linked",
          get: function get() {
            return this.links;
          },
          set: function set(value) {
            this.links = value;
          }
        }, {
          key: "lineLinked",
          get: function get() {
            return this.links;
          },
          set: function set(value) {
            this.links = value;
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a, _b;

            if (data === undefined) {
              return;
            }

            if (data.distance !== undefined) {
              this.distance = data.distance;
            }

            this.links.load((_b = (_a = data.links) !== null && _a !== void 0 ? _a : data.lineLinked) !== null && _b !== void 0 ? _b : data.line_linked);
          }
        }]);

        return Grab;
      }();

      exports.Grab = Grab;
      /***/
    },

    /***/
    89046:
    /*!****************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/GrabLinks.js ***!
      \****************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.GrabLinks = void 0;

      var OptionsColor_1 = __webpack_require__(
      /*! ../../OptionsColor */
      91287);

      var GrabLinks = /*#__PURE__*/function () {
        function GrabLinks() {
          _classCallCheck2(this, GrabLinks);

          this.blink = false;
          this.consent = false;
          this.opacity = 1;
        }

        _createClass2(GrabLinks, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.blink !== undefined) {
              this.blink = data.blink;
            }

            if (data.color !== undefined) {
              this.color = OptionsColor_1.OptionsColor.create(this.color, data.color);
            }

            if (data.consent !== undefined) {
              this.consent = data.consent;
            }

            if (data.opacity !== undefined) {
              this.opacity = data.opacity;
            }
          }
        }]);

        return GrabLinks;
      }();

      exports.GrabLinks = GrabLinks;
      /***/
    },

    /***/
    53820:
    /*!************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/Light.js ***!
      \************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Light = void 0;

      var LightArea_1 = __webpack_require__(
      /*! ./LightArea */
      28544);

      var LightShadow_1 = __webpack_require__(
      /*! ./LightShadow */
      15968);

      var Light = /*#__PURE__*/function () {
        function Light() {
          _classCallCheck2(this, Light);

          this.area = new LightArea_1.LightArea();
          this.shadow = new LightShadow_1.LightShadow();
        }

        _createClass2(Light, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            this.area.load(data.area);
            this.shadow.load(data.shadow);
          }
        }]);

        return Light;
      }();

      exports.Light = Light;
      /***/
    },

    /***/
    28544:
    /*!****************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/LightArea.js ***!
      \****************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.LightArea = void 0;

      var LightGradient_1 = __webpack_require__(
      /*! ./LightGradient */
      72242);

      var LightArea = /*#__PURE__*/function () {
        function LightArea() {
          _classCallCheck2(this, LightArea);

          this.gradient = new LightGradient_1.LightGradient();
          this.radius = 1000;
        }

        _createClass2(LightArea, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            this.gradient.load(data.gradient);

            if (data.radius !== undefined) {
              this.radius = data.radius;
            }
          }
        }]);

        return LightArea;
      }();

      exports.LightArea = LightArea;
      /***/
    },

    /***/
    72242:
    /*!********************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/LightGradient.js ***!
      \********************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.LightGradient = void 0;

      var OptionsColor_1 = __webpack_require__(
      /*! ../../OptionsColor */
      91287);

      var LightGradient = /*#__PURE__*/function () {
        function LightGradient() {
          _classCallCheck2(this, LightGradient);

          this.start = new OptionsColor_1.OptionsColor();
          this.stop = new OptionsColor_1.OptionsColor();
          this.start.value = "#ffffff";
          this.stop.value = "#000000";
        }

        _createClass2(LightGradient, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            this.start = OptionsColor_1.OptionsColor.create(this.start, data.start);
            this.stop = OptionsColor_1.OptionsColor.create(this.stop, data.stop);
          }
        }]);

        return LightGradient;
      }();

      exports.LightGradient = LightGradient;
      /***/
    },

    /***/
    15968:
    /*!******************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/LightShadow.js ***!
      \******************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.LightShadow = void 0;

      var OptionsColor_1 = __webpack_require__(
      /*! ../../OptionsColor */
      91287);

      var LightShadow = /*#__PURE__*/function () {
        function LightShadow() {
          _classCallCheck2(this, LightShadow);

          this.color = new OptionsColor_1.OptionsColor();
          this.color.value = "#000000";
          this.length = 2000;
        }

        _createClass2(LightShadow, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            this.color = OptionsColor_1.OptionsColor.create(this.color, data.color);

            if (data.length !== undefined) {
              this.length = data.length;
            }
          }
        }]);

        return LightShadow;
      }();

      exports.LightShadow = LightShadow;
      /***/
    },

    /***/
    46974:
    /*!************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/Modes.js ***!
      \************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Modes = void 0;

      var Bubble_1 = __webpack_require__(
      /*! ./Bubble */
      18873);

      var Connect_1 = __webpack_require__(
      /*! ./Connect */
      30762);

      var Grab_1 = __webpack_require__(
      /*! ./Grab */
      97361);

      var Remove_1 = __webpack_require__(
      /*! ./Remove */
      15217);

      var Push_1 = __webpack_require__(
      /*! ./Push */
      47134);

      var Repulse_1 = __webpack_require__(
      /*! ./Repulse */
      5306);

      var Slow_1 = __webpack_require__(
      /*! ./Slow */
      21146);

      var Trail_1 = __webpack_require__(
      /*! ./Trail */
      27614);

      var Attract_1 = __webpack_require__(
      /*! ./Attract */
      19042);

      var Light_1 = __webpack_require__(
      /*! ./Light */
      53820);

      var Bounce_1 = __webpack_require__(
      /*! ./Bounce */
      92707);

      var Modes = /*#__PURE__*/function () {
        function Modes() {
          _classCallCheck2(this, Modes);

          this.attract = new Attract_1.Attract();
          this.bounce = new Bounce_1.Bounce();
          this.bubble = new Bubble_1.Bubble();
          this.connect = new Connect_1.Connect();
          this.grab = new Grab_1.Grab();
          this.light = new Light_1.Light();
          this.push = new Push_1.Push();
          this.remove = new Remove_1.Remove();
          this.repulse = new Repulse_1.Repulse();
          this.slow = new Slow_1.Slow();
          this.trail = new Trail_1.Trail();
        }

        _createClass2(Modes, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            this.attract.load(data.attract);
            this.bubble.load(data.bubble);
            this.connect.load(data.connect);
            this.grab.load(data.grab);
            this.light.load(data.light);
            this.push.load(data.push);
            this.remove.load(data.remove);
            this.repulse.load(data.repulse);
            this.slow.load(data.slow);
            this.trail.load(data.trail);
          }
        }]);

        return Modes;
      }();

      exports.Modes = Modes;
      /***/
    },

    /***/
    47134:
    /*!***********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/Push.js ***!
      \***********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Push = void 0;

      var Push = /*#__PURE__*/function () {
        function Push() {
          _classCallCheck2(this, Push);

          this.quantity = 4;
        }

        _createClass2(Push, [{
          key: "particles_nb",
          get: function get() {
            return this.quantity;
          },
          set: function set(value) {
            this.quantity = value;
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a;

            if (data === undefined) {
              return;
            }

            var quantity = (_a = data.quantity) !== null && _a !== void 0 ? _a : data.particles_nb;

            if (quantity !== undefined) {
              this.quantity = quantity;
            }
          }
        }]);

        return Push;
      }();

      exports.Push = Push;
      /***/
    },

    /***/
    15217:
    /*!*************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/Remove.js ***!
      \*************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Remove = void 0;

      var Remove = /*#__PURE__*/function () {
        function Remove() {
          _classCallCheck2(this, Remove);

          this.quantity = 2;
        }

        _createClass2(Remove, [{
          key: "particles_nb",
          get: function get() {
            return this.quantity;
          },
          set: function set(value) {
            this.quantity = value;
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a;

            if (data === undefined) {
              return;
            }

            var quantity = (_a = data.quantity) !== null && _a !== void 0 ? _a : data.particles_nb;

            if (quantity !== undefined) {
              this.quantity = quantity;
            }
          }
        }]);

        return Remove;
      }();

      exports.Remove = Remove;
      /***/
    },

    /***/
    5306:
    /*!**************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/Repulse.js ***!
      \**************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Repulse = void 0;

      var RepulseDiv_1 = __webpack_require__(
      /*! ./RepulseDiv */
      70496);

      var RepulseBase_1 = __webpack_require__(
      /*! ./RepulseBase */
      17750);

      var Repulse = /*#__PURE__*/function (_RepulseBase_1$Repuls) {
        _inherits(Repulse, _RepulseBase_1$Repuls);

        var _super100 = _createSuper(Repulse);

        function Repulse() {
          _classCallCheck2(this, Repulse);

          return _super100.apply(this, arguments);
        }

        _createClass2(Repulse, [{
          key: "load",
          value: function load(data) {
            _get(_getPrototypeOf(Repulse.prototype), "load", this).call(this, data);

            if ((data === null || data === void 0 ? void 0 : data.divs) === undefined) {
              return;
            }

            if (data.divs instanceof Array) {
              this.divs = data.divs.map(function (s) {
                var tmp = new RepulseDiv_1.RepulseDiv();
                tmp.load(s);
                return tmp;
              });
            } else {
              if (this.divs instanceof Array || !this.divs) {
                this.divs = new RepulseDiv_1.RepulseDiv();
              }

              this.divs.load(data.divs);
            }
          }
        }]);

        return Repulse;
      }(RepulseBase_1.RepulseBase);

      exports.Repulse = Repulse;
      /***/
    },

    /***/
    17750:
    /*!******************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/RepulseBase.js ***!
      \******************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.RepulseBase = void 0;

      var RepulseBase = /*#__PURE__*/function () {
        function RepulseBase() {
          _classCallCheck2(this, RepulseBase);

          this.distance = 200;
          this.duration = 0.4;
          this.speed = 1;
        }

        _createClass2(RepulseBase, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.distance !== undefined) {
              this.distance = data.distance;
            }

            if (data.duration !== undefined) {
              this.duration = data.duration;
            }

            if (data.speed !== undefined) {
              this.speed = data.speed;
            }
          }
        }]);

        return RepulseBase;
      }();

      exports.RepulseBase = RepulseBase;
      /***/
    },

    /***/
    70496:
    /*!*****************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/RepulseDiv.js ***!
      \*****************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.RepulseDiv = void 0;

      var RepulseBase_1 = __webpack_require__(
      /*! ./RepulseBase */
      17750);

      var RepulseDiv = /*#__PURE__*/function (_RepulseBase_1$Repuls2) {
        _inherits(RepulseDiv, _RepulseBase_1$Repuls2);

        var _super101 = _createSuper(RepulseDiv);

        function RepulseDiv() {
          var _this256;

          _classCallCheck2(this, RepulseDiv);

          _this256 = _super101.call(this);
          _this256.selectors = [];
          return _this256;
        }

        _createClass2(RepulseDiv, [{
          key: "ids",
          get: function get() {
            if (this.selectors instanceof Array) {
              return this.selectors.map(function (t) {
                return t.replace("#", "");
              });
            } else {
              return this.selectors.replace("#", "");
            }
          },
          set: function set(value) {
            if (value instanceof Array) {
              this.selectors = value.map(function () {
                return "#".concat(value);
              });
            } else {
              this.selectors = "#".concat(value);
            }
          }
        }, {
          key: "load",
          value: function load(data) {
            _get(_getPrototypeOf(RepulseDiv.prototype), "load", this).call(this, data);

            if (data === undefined) {
              return;
            }

            if (data.ids !== undefined) {
              this.ids = data.ids;
            }

            if (data.selectors !== undefined) {
              this.selectors = data.selectors;
            }
          }
        }]);

        return RepulseDiv;
      }(RepulseBase_1.RepulseBase);

      exports.RepulseDiv = RepulseDiv;
      /***/
    },

    /***/
    21146:
    /*!***********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/Slow.js ***!
      \***********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Slow = void 0;

      var Slow = /*#__PURE__*/function () {
        function Slow() {
          _classCallCheck2(this, Slow);

          this.factor = 3;
          this.radius = 200;
        }

        _createClass2(Slow, [{
          key: "active",
          get: function get() {
            return false;
          },
          set: function set(_value) {}
        }, {
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.factor !== undefined) {
              this.factor = data.factor;
            }

            if (data.radius !== undefined) {
              this.radius = data.radius;
            }
          }
        }]);

        return Slow;
      }();

      exports.Slow = Slow;
      /***/
    },

    /***/
    27614:
    /*!************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Interactivity/Modes/Trail.js ***!
      \************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Trail = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../../../../Utils */
      57711);

      var Trail = /*#__PURE__*/function () {
        function Trail() {
          _classCallCheck2(this, Trail);

          this.delay = 1;
          this.quantity = 1;
        }

        _createClass2(Trail, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.delay !== undefined) {
              this.delay = data.delay;
            }

            if (data.quantity !== undefined) {
              this.quantity = data.quantity;
            }

            if (data.particles !== undefined) {
              this.particles = Utils_1.Utils.deepExtend({}, data.particles);
            }
          }
        }]);

        return Trail;
      }();

      exports.Trail = Trail;
      /***/
    },

    /***/
    3559:
    /*!*************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/ManualParticle.js ***!
      \*************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ManualParticle = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var ManualParticle = /*#__PURE__*/function () {
        function ManualParticle() {
          _classCallCheck2(this, ManualParticle);
        }

        _createClass2(ManualParticle, [{
          key: "load",
          value: function load(data) {
            var _a, _b;

            if (!data) {
              return;
            }

            if (data.position !== undefined) {
              this.position = {
                x: (_a = data.position.x) !== null && _a !== void 0 ? _a : 50,
                y: (_b = data.position.y) !== null && _b !== void 0 ? _b : 50
              };
            }

            if (data.options !== undefined) {
              this.options = Utils_1.Utils.deepExtend({}, data.options);
            }
          }
        }]);

        return ManualParticle;
      }();

      exports.ManualParticle = ManualParticle;
      /***/
    },

    /***/
    37523:
    /*!************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Motion/Motion.js ***!
      \************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Motion = void 0;

      var MotionReduce_1 = __webpack_require__(
      /*! ./MotionReduce */
      43067);

      var Motion = /*#__PURE__*/function () {
        function Motion() {
          _classCallCheck2(this, Motion);

          this.disable = false;
          this.reduce = new MotionReduce_1.MotionReduce();
        }

        _createClass2(Motion, [{
          key: "load",
          value: function load(data) {
            if (!data) {
              return;
            }

            if (data.disable !== undefined) {
              this.disable = data.disable;
            }

            this.reduce.load(data.reduce);
          }
        }]);

        return Motion;
      }();

      exports.Motion = Motion;
      /***/
    },

    /***/
    43067:
    /*!******************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Motion/MotionReduce.js ***!
      \******************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.MotionReduce = void 0;

      var MotionReduce = /*#__PURE__*/function () {
        function MotionReduce() {
          _classCallCheck2(this, MotionReduce);

          this.factor = 4;
          this.value = false;
        }

        _createClass2(MotionReduce, [{
          key: "load",
          value: function load(data) {
            if (!data) {
              return;
            }

            if (data.factor !== undefined) {
              this.factor = data.factor;
            }

            if (data.value !== undefined) {
              this.value = data.value;
            }
          }
        }]);

        return MotionReduce;
      }();

      exports.MotionReduce = MotionReduce;
      /***/
    },

    /***/
    26703:
    /*!******************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Options.js ***!
      \******************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Options = void 0;

      var Interactivity_1 = __webpack_require__(
      /*! ./Interactivity/Interactivity */
      70882);

      var Particles_1 = __webpack_require__(
      /*! ./Particles/Particles */
      57622);

      var BackgroundMask_1 = __webpack_require__(
      /*! ./BackgroundMask/BackgroundMask */
      56338);

      var Background_1 = __webpack_require__(
      /*! ./Background/Background */
      12803);

      var Infection_1 = __webpack_require__(
      /*! ./Infection/Infection */
      21595);

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Theme_1 = __webpack_require__(
      /*! ./Theme/Theme */
      30725);

      var Modes_1 = __webpack_require__(
      /*! ../../Enums/Modes */
      42495);

      var BackgroundMode_1 = __webpack_require__(
      /*! ./BackgroundMode/BackgroundMode */
      57359);

      var Motion_1 = __webpack_require__(
      /*! ./Motion/Motion */
      37523);

      var ManualParticle_1 = __webpack_require__(
      /*! ./ManualParticle */
      3559);

      var Options = /*#__PURE__*/function () {
        function Options() {
          _classCallCheck2(this, Options);

          this.autoPlay = true;
          this.background = new Background_1.Background();
          this.backgroundMask = new BackgroundMask_1.BackgroundMask();
          this.backgroundMode = new BackgroundMode_1.BackgroundMode();
          this.detectRetina = true;
          this.fpsLimit = 30;
          this.infection = new Infection_1.Infection();
          this.interactivity = new Interactivity_1.Interactivity();
          this.manualParticles = [];
          this.motion = new Motion_1.Motion();
          this.particles = new Particles_1.Particles();
          this.pauseOnBlur = true;
          this.pauseOnOutsideViewport = false;
          this.themes = [];
        }

        _createClass2(Options, [{
          key: "fps_limit",
          get: function get() {
            return this.fpsLimit;
          },
          set: function set(value) {
            this.fpsLimit = value;
          }
        }, {
          key: "retina_detect",
          get: function get() {
            return this.detectRetina;
          },
          set: function set(value) {
            this.detectRetina = value;
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a, _b;

            if (data === undefined) {
              return;
            }

            if (data.preset !== undefined) {
              if (data.preset instanceof Array) {
                var _iterator65 = _createForOfIteratorHelper(data.preset),
                    _step64;

                try {
                  for (_iterator65.s(); !(_step64 = _iterator65.n()).done;) {
                    var preset = _step64.value;
                    this.importPreset(preset);
                  }
                } catch (err) {
                  _iterator65.e(err);
                } finally {
                  _iterator65.f();
                }
              } else {
                this.importPreset(data.preset);
              }
            }

            if (data.autoPlay !== undefined) {
              this.autoPlay = data.autoPlay;
            }

            var detectRetina = (_a = data.detectRetina) !== null && _a !== void 0 ? _a : data.retina_detect;

            if (detectRetina !== undefined) {
              this.detectRetina = detectRetina;
            }

            var fpsLimit = (_b = data.fpsLimit) !== null && _b !== void 0 ? _b : data.fps_limit;

            if (fpsLimit !== undefined) {
              this.fpsLimit = fpsLimit;
            }

            if (data.pauseOnBlur !== undefined) {
              this.pauseOnBlur = data.pauseOnBlur;
            }

            if (data.pauseOnOutsideViewport !== undefined) {
              this.pauseOnOutsideViewport = data.pauseOnOutsideViewport;
            }

            this.background.load(data.background);
            this.backgroundMode.load(data.backgroundMode);
            this.backgroundMask.load(data.backgroundMask);
            this.infection.load(data.infection);
            this.interactivity.load(data.interactivity);

            if (data.manualParticles !== undefined) {
              this.manualParticles = data.manualParticles.map(function (t) {
                var tmp = new ManualParticle_1.ManualParticle();
                tmp.load(t);
                return tmp;
              });
            }

            this.motion.load(data.motion);
            this.particles.load(data.particles);
            Utils_1.Plugins.loadOptions(this, data);

            if (data.themes !== undefined) {
              var _iterator66 = _createForOfIteratorHelper(data.themes),
                  _step65;

              try {
                for (_iterator66.s(); !(_step65 = _iterator66.n()).done;) {
                  var theme = _step65.value;
                  var optTheme = new Theme_1.Theme();
                  optTheme.load(theme);
                  this.themes.push(optTheme);
                }
              } catch (err) {
                _iterator66.e(err);
              } finally {
                _iterator66.f();
              }
            }
          }
        }, {
          key: "setTheme",
          value: function setTheme(name) {
            if (name) {
              var chosenTheme = this.themes.find(function (theme) {
                return theme.name === name;
              });

              if (chosenTheme) {
                this.load(chosenTheme.options);
              }
            } else {
              var clientDarkMode = typeof matchMedia !== "undefined" && matchMedia("(prefers-color-scheme: dark)").matches;
              var defaultTheme = this.themes.find(function (theme) {
                return theme["default"].value && (theme["default"].mode === Modes_1.ThemeMode.dark && clientDarkMode || theme["default"].mode === Modes_1.ThemeMode.light && !clientDarkMode);
              });

              if (!defaultTheme) {
                defaultTheme = this.themes.find(function (theme) {
                  return theme["default"].value && theme["default"].mode === Modes_1.ThemeMode.any;
                });
              }

              if (defaultTheme) {
                this.load(defaultTheme.options);
              }
            }
          }
        }, {
          key: "importPreset",
          value: function importPreset(preset) {
            this.load(Utils_1.Plugins.getPreset(preset));
          }
        }]);

        return Options;
      }();

      exports.Options = Options;
      /***/
    },

    /***/
    91287:
    /*!***********************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/OptionsColor.js ***!
      \***********************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.OptionsColor = void 0;

      var OptionsColor = /*#__PURE__*/function () {
        function OptionsColor() {
          _classCallCheck2(this, OptionsColor);

          this.value = "#fff";
        }

        _createClass2(OptionsColor, [{
          key: "load",
          value: function load(data) {
            if ((data === null || data === void 0 ? void 0 : data.value) === undefined) {
              return;
            }

            this.value = data.value;
          }
        }], [{
          key: "create",
          value: function create(source, data) {
            var color = source !== null && source !== void 0 ? source : new OptionsColor();

            if (data !== undefined) {
              color.load(typeof data === "string" ? {
                value: data
              } : data);
            }

            return color;
          }
        }]);

        return OptionsColor;
      }();

      exports.OptionsColor = OptionsColor;
      /***/
    },

    /***/
    14846:
    /*!************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/AnimatableColor.js ***!
      \************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.AnimatableColor = void 0;

      var OptionsColor_1 = __webpack_require__(
      /*! ../OptionsColor */
      91287);

      var ColorAnimation_1 = __webpack_require__(
      /*! ./ColorAnimation */
      12906);

      var AnimatableColor = /*#__PURE__*/function (_OptionsColor_1$Optio) {
        _inherits(AnimatableColor, _OptionsColor_1$Optio);

        var _super102 = _createSuper(AnimatableColor);

        function AnimatableColor() {
          var _this257;

          _classCallCheck2(this, AnimatableColor);

          _this257 = _super102.call(this);
          _this257.animation = new ColorAnimation_1.ColorAnimation();
          return _this257;
        }

        _createClass2(AnimatableColor, [{
          key: "load",
          value: function load(data) {
            _get(_getPrototypeOf(AnimatableColor.prototype), "load", this).call(this, data);

            this.animation.load(data === null || data === void 0 ? void 0 : data.animation);
          }
        }], [{
          key: "create",
          value: function create(source, data) {
            var color = source !== null && source !== void 0 ? source : new AnimatableColor();

            if (data !== undefined) {
              color.load(typeof data === "string" ? {
                value: data
              } : data);
            }

            return color;
          }
        }]);

        return AnimatableColor;
      }(OptionsColor_1.OptionsColor);

      exports.AnimatableColor = AnimatableColor;
      /***/
    },

    /***/
    35342:
    /*!**********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Bounce/Bounce.js ***!
      \**********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Bounce = void 0;

      var BounceFactor_1 = __webpack_require__(
      /*! ./BounceFactor */
      14200);

      var Bounce = /*#__PURE__*/function () {
        function Bounce() {
          _classCallCheck2(this, Bounce);

          this.horizontal = new BounceFactor_1.BounceFactor();
          this.vertical = new BounceFactor_1.BounceFactor();
        }

        _createClass2(Bounce, [{
          key: "load",
          value: function load(data) {
            if (!data) {
              return;
            }

            this.horizontal.load(data.horizontal);
            this.vertical.load(data.vertical);
          }
        }]);

        return Bounce;
      }();

      exports.Bounce = Bounce;
      /***/
    },

    /***/
    14200:
    /*!****************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Bounce/BounceFactor.js ***!
      \****************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.BounceFactor = void 0;

      var ValueWithRandom_1 = __webpack_require__(
      /*! ../../ValueWithRandom */
      80035);

      var BounceFactor = /*#__PURE__*/function (_ValueWithRandom_1$Va) {
        _inherits(BounceFactor, _ValueWithRandom_1$Va);

        var _super103 = _createSuper(BounceFactor);

        function BounceFactor() {
          var _this258;

          _classCallCheck2(this, BounceFactor);

          _this258 = _super103.call(this);
          _this258.random.minimumValue = 0.1;
          _this258.value = 1;
          return _this258;
        }

        return BounceFactor;
      }(ValueWithRandom_1.ValueWithRandom);

      exports.BounceFactor = BounceFactor;
      /***/
    },

    /***/
    56171:
    /*!*******************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Collisions.js ***!
      \*******************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Collisions = void 0;

      var Enums_1 = __webpack_require__(
      /*! ../../../Enums */
      9717);

      var Bounce_1 = __webpack_require__(
      /*! ./Bounce/Bounce */
      35342);

      var Collisions = /*#__PURE__*/function () {
        function Collisions() {
          _classCallCheck2(this, Collisions);

          this.bounce = new Bounce_1.Bounce();
          this.enable = false;
          this.mode = Enums_1.CollisionMode.bounce;
        }

        _createClass2(Collisions, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            this.bounce.load(data.bounce);

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            if (data.mode !== undefined) {
              this.mode = data.mode;
            }
          }
        }]);

        return Collisions;
      }();

      exports.Collisions = Collisions;
      /***/
    },

    /***/
    12906:
    /*!***********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/ColorAnimation.js ***!
      \***********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ColorAnimation = void 0;

      var ColorAnimation = /*#__PURE__*/function () {
        function ColorAnimation() {
          _classCallCheck2(this, ColorAnimation);

          this.enable = false;
          this.speed = 1;
          this.sync = true;
        }

        _createClass2(ColorAnimation, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            if (data.speed !== undefined) {
              this.speed = data.speed;
            }

            if (data.sync !== undefined) {
              this.sync = data.sync;
            }
          }
        }]);

        return ColorAnimation;
      }();

      exports.ColorAnimation = ColorAnimation;
      /***/
    },

    /***/
    10821:
    /*!******************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Life/Life.js ***!
      \******************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Life = void 0;

      var LifeDelay_1 = __webpack_require__(
      /*! ./LifeDelay */
      947);

      var LifeDuration_1 = __webpack_require__(
      /*! ./LifeDuration */
      35274);

      var Life = /*#__PURE__*/function () {
        function Life() {
          _classCallCheck2(this, Life);

          this.count = 0;
          this.delay = new LifeDelay_1.LifeDelay();
          this.duration = new LifeDuration_1.LifeDuration();
        }

        _createClass2(Life, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.count !== undefined) {
              this.count = data.count;
            }

            this.delay.load(data.delay);
            this.duration.load(data.duration);
          }
        }]);

        return Life;
      }();

      exports.Life = Life;
      /***/
    },

    /***/
    947:
    /*!***********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Life/LifeDelay.js ***!
      \***********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.LifeDelay = void 0;

      var ValueWithRandom_1 = __webpack_require__(
      /*! ../../ValueWithRandom */
      80035);

      var LifeDelay = /*#__PURE__*/function (_ValueWithRandom_1$Va2) {
        _inherits(LifeDelay, _ValueWithRandom_1$Va2);

        var _super104 = _createSuper(LifeDelay);

        function LifeDelay() {
          var _this259;

          _classCallCheck2(this, LifeDelay);

          _this259 = _super104.call(this);
          _this259.sync = false;
          return _this259;
        }

        _createClass2(LifeDelay, [{
          key: "load",
          value: function load(data) {
            if (!data) {
              return;
            }

            _get(_getPrototypeOf(LifeDelay.prototype), "load", this).call(this, data);

            if (data.sync !== undefined) {
              this.sync = data.sync;
            }
          }
        }]);

        return LifeDelay;
      }(ValueWithRandom_1.ValueWithRandom);

      exports.LifeDelay = LifeDelay;
      /***/
    },

    /***/
    35274:
    /*!**************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Life/LifeDuration.js ***!
      \**************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.LifeDuration = void 0;

      var ValueWithRandom_1 = __webpack_require__(
      /*! ../../ValueWithRandom */
      80035);

      var LifeDuration = /*#__PURE__*/function (_ValueWithRandom_1$Va3) {
        _inherits(LifeDuration, _ValueWithRandom_1$Va3);

        var _super105 = _createSuper(LifeDuration);

        function LifeDuration() {
          var _this260;

          _classCallCheck2(this, LifeDuration);

          _this260 = _super105.call(this);
          _this260.random.minimumValue = 0.0001;
          _this260.sync = false;
          return _this260;
        }

        _createClass2(LifeDuration, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            _get(_getPrototypeOf(LifeDuration.prototype), "load", this).call(this, data);

            if (data.sync !== undefined) {
              this.sync = data.sync;
            }
          }
        }]);

        return LifeDuration;
      }(ValueWithRandom_1.ValueWithRandom);

      exports.LifeDuration = LifeDuration;
      /***/
    },

    /***/
    96636:
    /*!********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Links/Links.js ***!
      \********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Links = void 0;

      var LinksShadow_1 = __webpack_require__(
      /*! ./LinksShadow */
      4132);

      var LinksTriangle_1 = __webpack_require__(
      /*! ./LinksTriangle */
      76164);

      var OptionsColor_1 = __webpack_require__(
      /*! ../../OptionsColor */
      91287);

      var Links = /*#__PURE__*/function () {
        function Links() {
          _classCallCheck2(this, Links);

          this.blink = false;
          this.color = new OptionsColor_1.OptionsColor();
          this.consent = false;
          this.distance = 100;
          this.enable = false;
          this.frequency = 1;
          this.opacity = 1;
          this.shadow = new LinksShadow_1.LinksShadow();
          this.triangles = new LinksTriangle_1.LinksTriangle();
          this.width = 1;
          this.warp = false;
        }

        _createClass2(Links, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.id !== undefined) {
              this.id = data.id;
            }

            if (data.blink !== undefined) {
              this.blink = data.blink;
            }

            this.color = OptionsColor_1.OptionsColor.create(this.color, data.color);

            if (data.consent !== undefined) {
              this.consent = data.consent;
            }

            if (data.distance !== undefined) {
              this.distance = data.distance;
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            if (data.frequency !== undefined) {
              this.frequency = data.frequency;
            }

            if (data.opacity !== undefined) {
              this.opacity = data.opacity;
            }

            this.shadow.load(data.shadow);
            this.triangles.load(data.triangles);

            if (data.width !== undefined) {
              this.width = data.width;
            }

            if (data.warp !== undefined) {
              this.warp = data.warp;
            }
          }
        }]);

        return Links;
      }();

      exports.Links = Links;
      /***/
    },

    /***/
    4132:
    /*!**************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Links/LinksShadow.js ***!
      \**************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.LinksShadow = void 0;

      var OptionsColor_1 = __webpack_require__(
      /*! ../../OptionsColor */
      91287);

      var LinksShadow = /*#__PURE__*/function () {
        function LinksShadow() {
          _classCallCheck2(this, LinksShadow);

          this.blur = 5;
          this.color = new OptionsColor_1.OptionsColor();
          this.enable = false;
          this.color.value = "#00ff00";
        }

        _createClass2(LinksShadow, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.blur !== undefined) {
              this.blur = data.blur;
            }

            this.color = OptionsColor_1.OptionsColor.create(this.color, data.color);

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }
          }
        }]);

        return LinksShadow;
      }();

      exports.LinksShadow = LinksShadow;
      /***/
    },

    /***/
    76164:
    /*!****************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Links/LinksTriangle.js ***!
      \****************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.LinksTriangle = void 0;

      var OptionsColor_1 = __webpack_require__(
      /*! ../../OptionsColor */
      91287);

      var LinksTriangle = /*#__PURE__*/function () {
        function LinksTriangle() {
          _classCallCheck2(this, LinksTriangle);

          this.enable = false;
          this.frequency = 1;
        }

        _createClass2(LinksTriangle, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.color !== undefined) {
              this.color = OptionsColor_1.OptionsColor.create(this.color, data.color);
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            if (data.frequency !== undefined) {
              this.frequency = data.frequency;
            }

            if (data.opacity !== undefined) {
              this.opacity = data.opacity;
            }
          }
        }]);

        return LinksTriangle;
      }();

      exports.LinksTriangle = LinksTriangle;
      /***/
    },

    /***/
    32503:
    /*!*********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Move/Attract.js ***!
      \*********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Attract = void 0;

      var Attract = /*#__PURE__*/function () {
        function Attract() {
          _classCallCheck2(this, Attract);

          this.enable = false;
          this.rotate = {
            x: 3000,
            y: 3000
          };
        }

        _createClass2(Attract, [{
          key: "rotateX",
          get: function get() {
            return this.rotate.x;
          },
          set: function set(value) {
            this.rotate.x = value;
          }
        }, {
          key: "rotateY",
          get: function get() {
            return this.rotate.y;
          },
          set: function set(value) {
            this.rotate.y = value;
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a, _b, _c, _d;

            if (data === undefined) {
              return;
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            var rotateX = (_b = (_a = data.rotate) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : data.rotateX;

            if (rotateX !== undefined) {
              this.rotate.x = rotateX;
            }

            var rotateY = (_d = (_c = data.rotate) === null || _c === void 0 ? void 0 : _c.y) !== null && _d !== void 0 ? _d : data.rotateY;

            if (rotateY !== undefined) {
              this.rotate.y = rotateY;
            }
          }
        }]);

        return Attract;
      }();

      exports.Attract = Attract;
      /***/
    },

    /***/
    5682:
    /*!******************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Move/Move.js ***!
      \******************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Move = void 0;

      var Attract_1 = __webpack_require__(
      /*! ./Attract */
      32503);

      var Enums_1 = __webpack_require__(
      /*! ../../../../Enums */
      9717);

      var Trail_1 = __webpack_require__(
      /*! ./Trail */
      14260);

      var Noise_1 = __webpack_require__(
      /*! ./Noise/Noise */
      38701);

      var MoveAngle_1 = __webpack_require__(
      /*! ./MoveAngle */
      49056);

      var MoveGravity_1 = __webpack_require__(
      /*! ./MoveGravity */
      3970);

      var OutModes_1 = __webpack_require__(
      /*! ./OutModes */
      66659);

      var Move = /*#__PURE__*/function () {
        function Move() {
          _classCallCheck2(this, Move);

          this.angle = new MoveAngle_1.MoveAngle();
          this.attract = new Attract_1.Attract();
          this.direction = Enums_1.MoveDirection.none;
          this.distance = 0;
          this.enable = false;
          this.gravity = new MoveGravity_1.MoveGravity();
          this.noise = new Noise_1.Noise();
          this.outModes = new OutModes_1.OutModes();
          this.random = false;
          this.size = false;
          this.speed = 2;
          this.straight = false;
          this.trail = new Trail_1.Trail();
          this.vibrate = false;
          this.warp = false;
        }

        _createClass2(Move, [{
          key: "collisions",
          get: function get() {
            return false;
          },
          set: function set(value) {}
        }, {
          key: "bounce",
          get: function get() {
            return this.collisions;
          },
          set: function set(value) {
            this.collisions = value;
          }
        }, {
          key: "out_mode",
          get: function get() {
            return this.outMode;
          },
          set: function set(value) {
            this.outMode = value;
          }
        }, {
          key: "outMode",
          get: function get() {
            return this.outModes["default"];
          },
          set: function set(value) {
            this.outModes["default"] = value;
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a, _b;

            if (data === undefined) {
              return;
            }

            if (data.angle !== undefined) {
              if (typeof data.angle === "number") {
                this.angle.value = data.angle;
              } else {
                this.angle.load(data.angle);
              }
            }

            this.attract.load(data.attract);

            if (data.direction !== undefined) {
              this.direction = data.direction;
            }

            if (data.distance !== undefined) {
              this.distance = data.distance;
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            this.gravity.load(data.gravity);
            this.noise.load(data.noise);
            var outMode = (_a = data.outMode) !== null && _a !== void 0 ? _a : data.out_mode;

            if (data.outModes !== undefined || outMode !== undefined) {
              if (typeof data.outModes === "string" || data.outModes === undefined && outMode !== undefined) {
                this.outModes.load({
                  "default": (_b = data.outModes) !== null && _b !== void 0 ? _b : outMode
                });
              } else {
                this.outModes.load(data.outModes);
              }
            }

            if (data.random !== undefined) {
              this.random = data.random;
            }

            if (data.size !== undefined) {
              this.size = data.size;
            }

            if (data.speed !== undefined) {
              this.speed = data.speed;
            }

            if (data.straight !== undefined) {
              this.straight = data.straight;
            }

            this.trail.load(data.trail);

            if (data.vibrate !== undefined) {
              this.vibrate = data.vibrate;
            }

            if (data.warp !== undefined) {
              this.warp = data.warp;
            }
          }
        }]);

        return Move;
      }();

      exports.Move = Move;
      /***/
    },

    /***/
    49056:
    /*!***********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Move/MoveAngle.js ***!
      \***********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.MoveAngle = void 0;

      var MoveAngle = /*#__PURE__*/function () {
        function MoveAngle() {
          _classCallCheck2(this, MoveAngle);

          this.offset = 45;
          this.value = 90;
        }

        _createClass2(MoveAngle, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.offset !== undefined) {
              this.offset = data.offset;
            }

            if (data.value !== undefined) {
              this.value = data.value;
            }
          }
        }]);

        return MoveAngle;
      }();

      exports.MoveAngle = MoveAngle;
      /***/
    },

    /***/
    3970:
    /*!*************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Move/MoveGravity.js ***!
      \*************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.MoveGravity = void 0;

      var MoveGravity = /*#__PURE__*/function () {
        function MoveGravity() {
          _classCallCheck2(this, MoveGravity);

          this.acceleration = 9.81;
          this.enable = false;
          this.maxSpeed = 50;
        }

        _createClass2(MoveGravity, [{
          key: "load",
          value: function load(data) {
            if (!data) {
              return;
            }

            if (data.acceleration !== undefined) {
              this.acceleration = data.acceleration;
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            if (data.maxSpeed !== undefined) {
              this.maxSpeed = data.maxSpeed;
            }
          }
        }]);

        return MoveGravity;
      }();

      exports.MoveGravity = MoveGravity;
      /***/
    },

    /***/
    38701:
    /*!*************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Move/Noise/Noise.js ***!
      \*************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Noise = void 0;

      var NoiseDelay_1 = __webpack_require__(
      /*! ./NoiseDelay */
      63928);

      var Noise = /*#__PURE__*/function () {
        function Noise() {
          _classCallCheck2(this, Noise);

          this.delay = new NoiseDelay_1.NoiseDelay();
          this.enable = false;
        }

        _createClass2(Noise, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            this.delay.load(data.delay);

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }
          }
        }]);

        return Noise;
      }();

      exports.Noise = Noise;
      /***/
    },

    /***/
    63928:
    /*!******************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Move/Noise/NoiseDelay.js ***!
      \******************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.NoiseDelay = void 0;

      var ValueWithRandom_1 = __webpack_require__(
      /*! ../../../ValueWithRandom */
      80035);

      var NoiseDelay = /*#__PURE__*/function (_ValueWithRandom_1$Va4) {
        _inherits(NoiseDelay, _ValueWithRandom_1$Va4);

        var _super106 = _createSuper(NoiseDelay);

        function NoiseDelay() {
          _classCallCheck2(this, NoiseDelay);

          return _super106.call(this);
        }

        return NoiseDelay;
      }(ValueWithRandom_1.ValueWithRandom);

      exports.NoiseDelay = NoiseDelay;
      /***/
    },

    /***/
    66659:
    /*!**********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Move/OutModes.js ***!
      \**********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.OutModes = void 0;

      var Modes_1 = __webpack_require__(
      /*! ../../../../Enums/Modes */
      42495);

      var OutModes = /*#__PURE__*/function () {
        function OutModes() {
          _classCallCheck2(this, OutModes);

          this["default"] = Modes_1.OutMode.out;
        }

        _createClass2(OutModes, [{
          key: "load",
          value: function load(data) {
            var _a, _b, _c, _d;

            if (!data) {
              return;
            }

            if (data["default"] !== undefined) {
              this["default"] = data["default"];
            }

            this.bottom = (_a = data.bottom) !== null && _a !== void 0 ? _a : data["default"];
            this.left = (_b = data.left) !== null && _b !== void 0 ? _b : data["default"];
            this.right = (_c = data.right) !== null && _c !== void 0 ? _c : data["default"];
            this.top = (_d = data.top) !== null && _d !== void 0 ? _d : data["default"];
          }
        }]);

        return OutModes;
      }();

      exports.OutModes = OutModes;
      /***/
    },

    /***/
    14260:
    /*!*******************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Move/Trail.js ***!
      \*******************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Trail = void 0;

      var OptionsColor_1 = __webpack_require__(
      /*! ../../OptionsColor */
      91287);

      var Trail = /*#__PURE__*/function () {
        function Trail() {
          _classCallCheck2(this, Trail);

          this.enable = false;
          this.length = 10;
          this.fillColor = new OptionsColor_1.OptionsColor();
          this.fillColor.value = "#000000";
        }

        _createClass2(Trail, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            this.fillColor = OptionsColor_1.OptionsColor.create(this.fillColor, data.fillColor);

            if (data.length !== undefined) {
              this.length = data.length;
            }
          }
        }]);

        return Trail;
      }();

      exports.Trail = Trail;
      /***/
    },

    /***/
    77931:
    /*!***********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Number/Density.js ***!
      \***********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Density = void 0;

      var Density = /*#__PURE__*/function () {
        function Density() {
          _classCallCheck2(this, Density);

          this.enable = false;
          this.area = 800;
          this.factor = 1000;
        }

        _createClass2(Density, [{
          key: "value_area",
          get: function get() {
            return this.area;
          },
          set: function set(value) {
            this.area = value;
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a;

            if (data === undefined) {
              return;
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            var area = (_a = data.area) !== null && _a !== void 0 ? _a : data.value_area;

            if (area !== undefined) {
              this.area = area;
            }

            if (data.factor !== undefined) {
              this.factor = data.factor;
            }
          }
        }]);

        return Density;
      }();

      exports.Density = Density;
      /***/
    },

    /***/
    11576:
    /*!*******************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Number/ParticlesNumber.js ***!
      \*******************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ParticlesNumber = void 0;

      var Density_1 = __webpack_require__(
      /*! ./Density */
      77931);

      var ParticlesNumber = /*#__PURE__*/function () {
        function ParticlesNumber() {
          _classCallCheck2(this, ParticlesNumber);

          this.density = new Density_1.Density();
          this.limit = 0;
          this.value = 100;
        }

        _createClass2(ParticlesNumber, [{
          key: "max",
          get: function get() {
            return this.limit;
          },
          set: function set(value) {
            this.limit = value;
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a;

            if (data === undefined) {
              return;
            }

            this.density.load(data.density);
            var limit = (_a = data.limit) !== null && _a !== void 0 ? _a : data.max;

            if (limit !== undefined) {
              this.limit = limit;
            }

            if (data.value !== undefined) {
              this.value = data.value;
            }
          }
        }]);

        return ParticlesNumber;
      }();

      exports.ParticlesNumber = ParticlesNumber;
      /***/
    },

    /***/
    69411:
    /*!************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Opacity/Opacity.js ***!
      \************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Opacity = void 0;

      var OpacityAnimation_1 = __webpack_require__(
      /*! ./OpacityAnimation */
      5226);

      var ValueWithRandom_1 = __webpack_require__(
      /*! ../../ValueWithRandom */
      80035);

      var Opacity = /*#__PURE__*/function (_ValueWithRandom_1$Va5) {
        _inherits(Opacity, _ValueWithRandom_1$Va5);

        var _super107 = _createSuper(Opacity);

        function Opacity() {
          var _this261;

          _classCallCheck2(this, Opacity);

          _this261 = _super107.call(this);
          _this261.animation = new OpacityAnimation_1.OpacityAnimation();
          _this261.random.minimumValue = 0.1;
          _this261.value = 1;
          return _this261;
        }

        _createClass2(Opacity, [{
          key: "anim",
          get: function get() {
            return this.animation;
          },
          set: function set(value) {
            this.animation = value;
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a;

            if (!data) {
              return;
            }

            _get(_getPrototypeOf(Opacity.prototype), "load", this).call(this, data);

            this.animation.load((_a = data.animation) !== null && _a !== void 0 ? _a : data.anim);
          }
        }]);

        return Opacity;
      }(ValueWithRandom_1.ValueWithRandom);

      exports.Opacity = Opacity;
      /***/
    },

    /***/
    5226:
    /*!*********************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Opacity/OpacityAnimation.js ***!
      \*********************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.OpacityAnimation = void 0;

      var Types_1 = __webpack_require__(
      /*! ../../../../Enums/Types */
      32112);

      var OpacityAnimation = /*#__PURE__*/function () {
        function OpacityAnimation() {
          _classCallCheck2(this, OpacityAnimation);

          this.destroy = Types_1.DestroyType.none;
          this.enable = false;
          this.minimumValue = 0;
          this.speed = 2;
          this.startValue = Types_1.StartValueType.random;
          this.sync = false;
        }

        _createClass2(OpacityAnimation, [{
          key: "opacity_min",
          get: function get() {
            return this.minimumValue;
          },
          set: function set(value) {
            this.minimumValue = value;
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a;

            if (data === undefined) {
              return;
            }

            if (data.destroy !== undefined) {
              this.destroy = data.destroy;
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            var minimumValue = (_a = data.minimumValue) !== null && _a !== void 0 ? _a : data.opacity_min;

            if (minimumValue !== undefined) {
              this.minimumValue = minimumValue;
            }

            if (data.speed !== undefined) {
              this.speed = data.speed;
            }

            if (data.startValue !== undefined) {
              this.startValue = data.startValue;
            }

            if (data.sync !== undefined) {
              this.sync = data.sync;
            }
          }
        }]);

        return OpacityAnimation;
      }();

      exports.OpacityAnimation = OpacityAnimation;
      /***/
    },

    /***/
    57622:
    /*!******************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Particles.js ***!
      \******************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Particles = void 0;

      var Links_1 = __webpack_require__(
      /*! ./Links/Links */
      96636);

      var Move_1 = __webpack_require__(
      /*! ./Move/Move */
      5682);

      var ParticlesNumber_1 = __webpack_require__(
      /*! ./Number/ParticlesNumber */
      11576);

      var Opacity_1 = __webpack_require__(
      /*! ./Opacity/Opacity */
      69411);

      var Shape_1 = __webpack_require__(
      /*! ./Shape/Shape */
      61125);

      var Size_1 = __webpack_require__(
      /*! ./Size/Size */
      690);

      var Rotate_1 = __webpack_require__(
      /*! ./Rotate/Rotate */
      52097);

      var Shadow_1 = __webpack_require__(
      /*! ./Shadow */
      22749);

      var Stroke_1 = __webpack_require__(
      /*! ./Stroke */
      12609);

      var Collisions_1 = __webpack_require__(
      /*! ./Collisions */
      56171);

      var Twinkle_1 = __webpack_require__(
      /*! ./Twinkle/Twinkle */
      9265);

      var AnimatableColor_1 = __webpack_require__(
      /*! ./AnimatableColor */
      14846);

      var Life_1 = __webpack_require__(
      /*! ./Life/Life */
      10821);

      var Bounce_1 = __webpack_require__(
      /*! ./Bounce/Bounce */
      35342);

      var Particles = /*#__PURE__*/function () {
        function Particles() {
          _classCallCheck2(this, Particles);

          this.bounce = new Bounce_1.Bounce();
          this.collisions = new Collisions_1.Collisions();
          this.color = new AnimatableColor_1.AnimatableColor();
          this.life = new Life_1.Life();
          this.links = new Links_1.Links();
          this.move = new Move_1.Move();
          this.number = new ParticlesNumber_1.ParticlesNumber();
          this.opacity = new Opacity_1.Opacity();
          this.reduceDuplicates = false;
          this.rotate = new Rotate_1.Rotate();
          this.shadow = new Shadow_1.Shadow();
          this.shape = new Shape_1.Shape();
          this.size = new Size_1.Size();
          this.stroke = new Stroke_1.Stroke();
          this.twinkle = new Twinkle_1.Twinkle();
        }

        _createClass2(Particles, [{
          key: "line_linked",
          get: function get() {
            return this.links;
          },
          set: function set(value) {
            this.links = value;
          }
        }, {
          key: "lineLinked",
          get: function get() {
            return this.links;
          },
          set: function set(value) {
            this.links = value;
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a, _b, _c, _d, _e, _f, _g;

            if (data === undefined) {
              return;
            }

            this.bounce.load(data.bounce);
            this.color = AnimatableColor_1.AnimatableColor.create(this.color, data.color);
            this.life.load(data.life);
            var links = (_b = (_a = data.links) !== null && _a !== void 0 ? _a : data.lineLinked) !== null && _b !== void 0 ? _b : data.line_linked;

            if (links !== undefined) {
              this.links.load(links);
            }

            this.move.load(data.move);
            this.number.load(data.number);
            this.opacity.load(data.opacity);

            if (data.reduceDuplicates !== undefined) {
              this.reduceDuplicates = data.reduceDuplicates;
            }

            this.rotate.load(data.rotate);
            this.shape.load(data.shape);
            this.size.load(data.size);
            this.shadow.load(data.shadow);
            this.twinkle.load(data.twinkle);
            var collisions = (_d = (_c = data.move) === null || _c === void 0 ? void 0 : _c.collisions) !== null && _d !== void 0 ? _d : (_e = data.move) === null || _e === void 0 ? void 0 : _e.bounce;

            if (collisions !== undefined) {
              this.collisions.enable = collisions;
            }

            this.collisions.load(data.collisions);
            var strokeToLoad = (_f = data.stroke) !== null && _f !== void 0 ? _f : (_g = data.shape) === null || _g === void 0 ? void 0 : _g.stroke;

            if (strokeToLoad === undefined) {
              return;
            }

            if (strokeToLoad instanceof Array) {
              this.stroke = strokeToLoad.map(function (s) {
                var tmp = new Stroke_1.Stroke();
                tmp.load(s);
                return tmp;
              });
            } else {
              if (this.stroke instanceof Array) {
                this.stroke = new Stroke_1.Stroke();
              }

              this.stroke.load(strokeToLoad);
            }
          }
        }]);

        return Particles;
      }();

      exports.Particles = Particles;
      /***/
    },

    /***/
    52097:
    /*!**********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Rotate/Rotate.js ***!
      \**********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Rotate = void 0;

      var RotateAnimation_1 = __webpack_require__(
      /*! ./RotateAnimation */
      44903);

      var Enums_1 = __webpack_require__(
      /*! ../../../../Enums */
      9717);

      var ValueWithRandom_1 = __webpack_require__(
      /*! ../../ValueWithRandom */
      80035);

      var Rotate = /*#__PURE__*/function (_ValueWithRandom_1$Va6) {
        _inherits(Rotate, _ValueWithRandom_1$Va6);

        var _super108 = _createSuper(Rotate);

        function Rotate() {
          var _this262;

          _classCallCheck2(this, Rotate);

          _this262 = _super108.call(this);
          _this262.animation = new RotateAnimation_1.RotateAnimation();
          _this262.direction = Enums_1.RotateDirection.clockwise;
          _this262.path = false;
          return _this262;
        }

        _createClass2(Rotate, [{
          key: "load",
          value: function load(data) {
            if (!data) {
              return;
            }

            _get(_getPrototypeOf(Rotate.prototype), "load", this).call(this, data);

            if (data.direction !== undefined) {
              this.direction = data.direction;
            }

            this.animation.load(data.animation);

            if (data.path !== undefined) {
              this.path = data.path;
            }
          }
        }]);

        return Rotate;
      }(ValueWithRandom_1.ValueWithRandom);

      exports.Rotate = Rotate;
      /***/
    },

    /***/
    44903:
    /*!*******************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Rotate/RotateAnimation.js ***!
      \*******************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.RotateAnimation = void 0;

      var RotateAnimation = /*#__PURE__*/function () {
        function RotateAnimation() {
          _classCallCheck2(this, RotateAnimation);

          this.enable = false;
          this.speed = 0;
          this.sync = false;
        }

        _createClass2(RotateAnimation, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            if (data.speed !== undefined) {
              this.speed = data.speed;
            }

            if (data.sync !== undefined) {
              this.sync = data.sync;
            }
          }
        }]);

        return RotateAnimation;
      }();

      exports.RotateAnimation = RotateAnimation;
      /***/
    },

    /***/
    22749:
    /*!***************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Shadow.js ***!
      \***************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Shadow = void 0;

      var OptionsColor_1 = __webpack_require__(
      /*! ../OptionsColor */
      91287);

      var Shadow = /*#__PURE__*/function () {
        function Shadow() {
          _classCallCheck2(this, Shadow);

          this.blur = 0;
          this.color = new OptionsColor_1.OptionsColor();
          this.enable = false;
          this.offset = {
            x: 0,
            y: 0
          };
          this.color.value = "#000000";
        }

        _createClass2(Shadow, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.blur !== undefined) {
              this.blur = data.blur;
            }

            this.color = OptionsColor_1.OptionsColor.create(this.color, data.color);

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            if (data.offset === undefined) {
              return;
            }

            if (data.offset.x !== undefined) {
              this.offset.x = data.offset.x;
            }

            if (data.offset.y !== undefined) {
              this.offset.y = data.offset.y;
            }
          }
        }]);

        return Shadow;
      }();

      exports.Shadow = Shadow;
      /***/
    },

    /***/
    61125:
    /*!********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Shape/Shape.js ***!
      \********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Shape = void 0;

      var Enums_1 = __webpack_require__(
      /*! ../../../../Enums */
      9717);

      var Utils_1 = __webpack_require__(
      /*! ../../../../Utils */
      57711);

      var Shape = /*#__PURE__*/function () {
        function Shape() {
          _classCallCheck2(this, Shape);

          this.options = {};
          this.type = Enums_1.ShapeType.circle;
        }

        _createClass2(Shape, [{
          key: "image",
          get: function get() {
            var _a;

            return (_a = this.options[Enums_1.ShapeType.image]) !== null && _a !== void 0 ? _a : this.options[Enums_1.ShapeType.images];
          },
          set: function set(value) {
            this.options[Enums_1.ShapeType.image] = value;
            this.options[Enums_1.ShapeType.images] = value;
          }
        }, {
          key: "custom",
          get: function get() {
            return this.options;
          },
          set: function set(value) {
            this.options = value;
          }
        }, {
          key: "images",
          get: function get() {
            return this.image instanceof Array ? this.image : [this.image];
          },
          set: function set(value) {
            this.image = value;
          }
        }, {
          key: "stroke",
          get: function get() {
            return [];
          },
          set: function set(_value) {}
        }, {
          key: "character",
          get: function get() {
            var _a;

            return (_a = this.options[Enums_1.ShapeType.character]) !== null && _a !== void 0 ? _a : this.options[Enums_1.ShapeType["char"]];
          },
          set: function set(value) {
            this.options[Enums_1.ShapeType.character] = value;
            this.options[Enums_1.ShapeType["char"]] = value;
          }
        }, {
          key: "polygon",
          get: function get() {
            var _a;

            return (_a = this.options[Enums_1.ShapeType.polygon]) !== null && _a !== void 0 ? _a : this.options[Enums_1.ShapeType.star];
          },
          set: function set(value) {
            this.options[Enums_1.ShapeType.polygon] = value;
            this.options[Enums_1.ShapeType.star] = value;
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a, _b, _c;

            if (data === undefined) {
              return;
            }

            var options = (_a = data.options) !== null && _a !== void 0 ? _a : data.custom;

            if (options !== undefined) {
              for (var shape in options) {
                var item = options[shape];

                if (item !== undefined) {
                  this.options[shape] = Utils_1.Utils.deepExtend((_b = this.options[shape]) !== null && _b !== void 0 ? _b : {}, item);
                }
              }
            }

            this.loadShape(data.character, Enums_1.ShapeType.character, Enums_1.ShapeType["char"], true);
            this.loadShape(data.polygon, Enums_1.ShapeType.polygon, Enums_1.ShapeType.star, false);
            this.loadShape((_c = data.image) !== null && _c !== void 0 ? _c : data.images, Enums_1.ShapeType.image, Enums_1.ShapeType.images, true);

            if (data.type !== undefined) {
              this.type = data.type;
            }
          }
        }, {
          key: "loadShape",
          value: function loadShape(item, mainKey, altKey, altOverride) {
            var _a, _b, _c, _d;

            if (item === undefined) {
              return;
            }

            if (item instanceof Array) {
              if (!(this.options[mainKey] instanceof Array)) {
                this.options[mainKey] = [];

                if (!this.options[altKey] || altOverride) {
                  this.options[altKey] = [];
                }
              }

              this.options[mainKey] = Utils_1.Utils.deepExtend((_a = this.options[mainKey]) !== null && _a !== void 0 ? _a : [], item);

              if (!this.options[altKey] || altOverride) {
                this.options[altKey] = Utils_1.Utils.deepExtend((_b = this.options[altKey]) !== null && _b !== void 0 ? _b : [], item);
              }
            } else {
              if (this.options[mainKey] instanceof Array) {
                this.options[mainKey] = {};

                if (!this.options[altKey] || altOverride) {
                  this.options[altKey] = {};
                }
              }

              this.options[mainKey] = Utils_1.Utils.deepExtend((_c = this.options[mainKey]) !== null && _c !== void 0 ? _c : {}, item);

              if (!this.options[altKey] || altOverride) {
                this.options[altKey] = Utils_1.Utils.deepExtend((_d = this.options[altKey]) !== null && _d !== void 0 ? _d : {}, item);
              }
            }
          }
        }]);

        return Shape;
      }();

      exports.Shape = Shape;
      /***/
    },

    /***/
    690:
    /*!******************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Size/Size.js ***!
      \******************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Size = void 0;

      var SizeAnimation_1 = __webpack_require__(
      /*! ./SizeAnimation */
      60066);

      var ValueWithRandom_1 = __webpack_require__(
      /*! ../../ValueWithRandom */
      80035);

      var Size = /*#__PURE__*/function (_ValueWithRandom_1$Va7) {
        _inherits(Size, _ValueWithRandom_1$Va7);

        var _super109 = _createSuper(Size);

        function Size() {
          var _this263;

          _classCallCheck2(this, Size);

          _this263 = _super109.call(this);
          _this263.animation = new SizeAnimation_1.SizeAnimation();
          _this263.random.minimumValue = 1;
          _this263.value = 3;
          return _this263;
        }

        _createClass2(Size, [{
          key: "anim",
          get: function get() {
            return this.animation;
          },
          set: function set(value) {
            this.animation = value;
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a;

            if (!data) {
              return;
            }

            _get(_getPrototypeOf(Size.prototype), "load", this).call(this, data);

            var animation = (_a = data.animation) !== null && _a !== void 0 ? _a : data.anim;

            if (animation !== undefined) {
              this.animation.load(animation);
            }
          }
        }]);

        return Size;
      }(ValueWithRandom_1.ValueWithRandom);

      exports.Size = Size;
      /***/
    },

    /***/
    60066:
    /*!***************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Size/SizeAnimation.js ***!
      \***************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SizeAnimation = void 0;

      var Enums_1 = __webpack_require__(
      /*! ../../../../Enums */
      9717);

      var SizeAnimation = /*#__PURE__*/function () {
        function SizeAnimation() {
          _classCallCheck2(this, SizeAnimation);

          this.destroy = Enums_1.DestroyType.none;
          this.enable = false;
          this.minimumValue = 0;
          this.speed = 5;
          this.startValue = Enums_1.StartValueType.random;
          this.sync = false;
        }

        _createClass2(SizeAnimation, [{
          key: "size_min",
          get: function get() {
            return this.minimumValue;
          },
          set: function set(value) {
            this.minimumValue = value;
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a;

            if (data === undefined) {
              return;
            }

            if (data.destroy !== undefined) {
              this.destroy = data.destroy;
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            var minimumValue = (_a = data.minimumValue) !== null && _a !== void 0 ? _a : data.size_min;

            if (minimumValue !== undefined) {
              this.minimumValue = minimumValue;
            }

            if (data.speed !== undefined) {
              this.speed = data.speed;
            }

            if (data.startValue !== undefined) {
              this.startValue = data.startValue;
            }

            if (data.sync !== undefined) {
              this.sync = data.sync;
            }
          }
        }]);

        return SizeAnimation;
      }();

      exports.SizeAnimation = SizeAnimation;
      /***/
    },

    /***/
    12609:
    /*!***************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Stroke.js ***!
      \***************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Stroke = void 0;

      var AnimatableColor_1 = __webpack_require__(
      /*! ./AnimatableColor */
      14846);

      var Stroke = /*#__PURE__*/function () {
        function Stroke() {
          _classCallCheck2(this, Stroke);

          this.width = 0;
        }

        _createClass2(Stroke, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.color !== undefined) {
              this.color = AnimatableColor_1.AnimatableColor.create(this.color, data.color);
            }

            if (data.width !== undefined) {
              this.width = data.width;
            }

            if (data.opacity !== undefined) {
              this.opacity = data.opacity;
            }
          }
        }]);

        return Stroke;
      }();

      exports.Stroke = Stroke;
      /***/
    },

    /***/
    9265:
    /*!************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Twinkle/Twinkle.js ***!
      \************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Twinkle = void 0;

      var TwinkleValues_1 = __webpack_require__(
      /*! ./TwinkleValues */
      27111);

      var Twinkle = /*#__PURE__*/function () {
        function Twinkle() {
          _classCallCheck2(this, Twinkle);

          this.lines = new TwinkleValues_1.TwinkleValues();
          this.particles = new TwinkleValues_1.TwinkleValues();
        }

        _createClass2(Twinkle, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            this.lines.load(data.lines);
            this.particles.load(data.particles);
          }
        }]);

        return Twinkle;
      }();

      exports.Twinkle = Twinkle;
      /***/
    },

    /***/
    27111:
    /*!******************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Particles/Twinkle/TwinkleValues.js ***!
      \******************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.TwinkleValues = void 0;

      var OptionsColor_1 = __webpack_require__(
      /*! ../../OptionsColor */
      91287);

      var TwinkleValues = /*#__PURE__*/function () {
        function TwinkleValues() {
          _classCallCheck2(this, TwinkleValues);

          this.enable = false;
          this.frequency = 0.05;
          this.opacity = 1;
        }

        _createClass2(TwinkleValues, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.color !== undefined) {
              this.color = OptionsColor_1.OptionsColor.create(this.color, data.color);
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            if (data.frequency !== undefined) {
              this.frequency = data.frequency;
            }

            if (data.opacity !== undefined) {
              this.opacity = data.opacity;
            }
          }
        }]);

        return TwinkleValues;
      }();

      exports.TwinkleValues = TwinkleValues;
      /***/
    },

    /***/
    49486:
    /*!*****************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Random.js ***!
      \*****************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Random = void 0;

      var Random = /*#__PURE__*/function () {
        function Random() {
          _classCallCheck2(this, Random);

          this.enable = false;
          this.minimumValue = 0;
        }

        _createClass2(Random, [{
          key: "load",
          value: function load(data) {
            if (!data) {
              return;
            }

            if (data.enable !== undefined) {
              this.enable = data.enable;
            }

            if (data.minimumValue !== undefined) {
              this.minimumValue = data.minimumValue;
            }
          }
        }]);

        return Random;
      }();

      exports.Random = Random;
      /***/
    },

    /***/
    30725:
    /*!**********************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Theme/Theme.js ***!
      \**********************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Theme = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../../../Utils */
      57711);

      var ThemeDefault_1 = __webpack_require__(
      /*! ./ThemeDefault */
      16087);

      var Theme = /*#__PURE__*/function () {
        function Theme() {
          _classCallCheck2(this, Theme);

          this.name = "";
          this["default"] = new ThemeDefault_1.ThemeDefault();
        }

        _createClass2(Theme, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.name !== undefined) {
              this.name = data.name;
            }

            this["default"].load(data["default"]);

            if (data.options !== undefined) {
              this.options = Utils_1.Utils.deepExtend({}, data.options);
            }
          }
        }]);

        return Theme;
      }();

      exports.Theme = Theme;
      /***/
    },

    /***/
    16087:
    /*!*****************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/Theme/ThemeDefault.js ***!
      \*****************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ThemeDefault = void 0;

      var Modes_1 = __webpack_require__(
      /*! ../../../Enums/Modes */
      42495);

      var ThemeDefault = /*#__PURE__*/function () {
        function ThemeDefault() {
          _classCallCheck2(this, ThemeDefault);

          this.mode = Modes_1.ThemeMode.any;
          this.value = false;
        }

        _createClass2(ThemeDefault, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.mode !== undefined) {
              this.mode = data.mode;
            }

            if (data.value !== undefined) {
              this.value = data.value;
            }
          }
        }]);

        return ThemeDefault;
      }();

      exports.ThemeDefault = ThemeDefault;
      /***/
    },

    /***/
    80035:
    /*!**************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Options/Classes/ValueWithRandom.js ***!
      \**************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ValueWithRandom = void 0;

      var Random_1 = __webpack_require__(
      /*! ./Random */
      49486);

      var ValueWithRandom = /*#__PURE__*/function () {
        function ValueWithRandom() {
          _classCallCheck2(this, ValueWithRandom);

          this.random = new Random_1.Random();
          this.value = 0;
        }

        _createClass2(ValueWithRandom, [{
          key: "load",
          value: function load(data) {
            if (!data) {
              return;
            }

            if (typeof data.random === "boolean") {
              this.random.enable = data.random;
            } else {
              this.random.load(data.random);
            }

            if (data.value !== undefined) {
              this.value = data.value;
            }
          }
        }]);

        return ValueWithRandom;
      }();

      exports.ValueWithRandom = ValueWithRandom;
      /***/
    },

    /***/
    32309:
    /*!*****************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js ***!
      \*****************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.AbsorberInstance = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var AbsorberInstance = /*#__PURE__*/function () {
        function AbsorberInstance(absorbers, container, options, position) {
          _classCallCheck2(this, AbsorberInstance);

          var _a, _b;

          this.absorbers = absorbers;
          this.container = container;
          this.initialPosition = position;
          this.options = options;
          this.dragging = false;
          this.opacity = this.options.opacity;
          this.size = Utils_1.NumberUtils.getValue(options.size) * container.retina.pixelRatio;
          this.mass = this.size * options.size.density * container.retina.reduceFactor;
          var limit = options.size.limit;
          this.limit = limit !== undefined ? limit * container.retina.pixelRatio * container.retina.reduceFactor : limit;
          var color = typeof options.color === "string" ? {
            value: options.color
          } : options.color;
          this.color = (_a = Utils_1.ColorUtils.colorToRgb(color)) !== null && _a !== void 0 ? _a : {
            b: 0,
            g: 0,
            r: 0
          };
          this.position = (_b = this.initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();
        }

        _createClass2(AbsorberInstance, [{
          key: "attract",
          value: function attract(particle) {
            var options = this.options;

            if (options.draggable) {
              var mouse = this.container.interactivity.mouse;

              if (mouse.clicking && mouse.downPosition) {
                var mouseDist = Utils_1.NumberUtils.getDistance(this.position, mouse.downPosition);

                if (mouseDist <= this.size) {
                  this.dragging = true;
                }
              } else {
                this.dragging = false;
              }

              if (this.dragging && mouse.position) {
                this.position.x = mouse.position.x;
                this.position.y = mouse.position.y;
              }
            }

            var pos = particle.getPosition();

            var _Utils_1$NumberUtils$5 = Utils_1.NumberUtils.getDistances(this.position, pos),
                dx = _Utils_1$NumberUtils$5.dx,
                dy = _Utils_1$NumberUtils$5.dy,
                distance = _Utils_1$NumberUtils$5.distance;

            var angle = Math.atan2(dx, dy);
            var acceleration = this.mass / Math.pow(distance, 2) * this.container.retina.reduceFactor;

            if (distance < this.size + particle.getRadius()) {
              var sizeFactor = particle.getRadius() * 0.033 * this.container.retina.pixelRatio;

              if (this.size > particle.getRadius() && distance < this.size - particle.getRadius()) {
                if (options.destroy) {
                  particle.destroy();
                } else {
                  particle.needsNewPosition = true;
                  this.updateParticlePosition(particle, angle, acceleration);
                }
              } else {
                if (options.destroy) {
                  particle.size.value -= sizeFactor;
                }

                this.updateParticlePosition(particle, angle, acceleration);
              }

              if (this.limit === undefined || this.size < this.limit) {
                this.size += sizeFactor;
              }

              this.mass += sizeFactor * this.options.size.density * this.container.retina.reduceFactor;
            } else {
              this.updateParticlePosition(particle, angle, acceleration);
            }
          }
        }, {
          key: "resize",
          value: function resize() {
            var initialPosition = this.initialPosition;
            this.position = initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();
          }
        }, {
          key: "draw",
          value: function draw(context) {
            context.translate(this.position.x, this.position.y);
            context.beginPath();
            context.arc(0, 0, this.size, 0, Math.PI * 2, false);
            context.closePath();
            context.fillStyle = Utils_1.ColorUtils.getStyleFromRgb(this.color, this.opacity);
            context.fill();
          }
        }, {
          key: "calcPosition",
          value: function calcPosition() {
            var _a, _b;

            var container = this.container;
            var percentPosition = this.options.position;
            return {
              x: ((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100 * container.canvas.size.width,
              y: ((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100 * container.canvas.size.height
            };
          }
        }, {
          key: "updateParticlePosition",
          value: function updateParticlePosition(particle, angle, acceleration) {
            var _a;

            if (particle.destroyed) {
              return;
            }

            var canvasSize = this.container.canvas.size;

            if (particle.needsNewPosition) {
              var pSize = particle.getRadius();
              particle.position.x = Math.random() * (canvasSize.width - pSize * 2) + pSize;
              particle.position.y = Math.random() * (canvasSize.height - pSize * 2) + pSize;
              particle.needsNewPosition = false;
            }

            if (this.options.orbits) {
              if (particle.orbitRadius === undefined) {
                particle.orbitRadius = Utils_1.NumberUtils.getDistance(particle.getPosition(), this.position);
              }

              if (particle.orbitRadius <= this.size && !this.options.destroy) {
                particle.orbitRadius = Math.random() * Math.max(canvasSize.width, canvasSize.height);
              }

              if (particle.orbitAngle === undefined) {
                particle.orbitAngle = Math.random() * Math.PI * 2;
              }

              var orbitRadius = particle.orbitRadius;
              var orbitAngle = particle.orbitAngle;
              particle.velocity.horizontal = 0;
              particle.velocity.vertical = 0;
              particle.position.x = this.position.x + orbitRadius * Math.cos(orbitAngle);
              particle.position.y = this.position.y + orbitRadius * Math.sin(orbitAngle);
              particle.orbitRadius -= acceleration;
              particle.orbitAngle += ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : this.container.retina.moveSpeed) / 100 * this.container.retina.reduceFactor;
            } else {
              particle.velocity.horizontal += Math.sin(angle) * acceleration;
              particle.velocity.vertical += Math.cos(angle) * acceleration;
            }
          }
        }]);

        return AbsorberInstance;
      }();

      exports.AbsorberInstance = AbsorberInstance;
      /***/
    },

    /***/
    68980:
    /*!**********************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/Absorbers/Absorbers.js ***!
      \**********************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Absorbers = void 0;

      var AbsorberInstance_1 = __webpack_require__(
      /*! ./AbsorberInstance */
      32309);

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Absorber_1 = __webpack_require__(
      /*! ./Options/Classes/Absorber */
      67961);

      var Enums_1 = __webpack_require__(
      /*! ./Enums */
      34626);

      var Absorbers = /*#__PURE__*/function () {
        function Absorbers(container) {
          var _this264 = this;

          _classCallCheck2(this, Absorbers);

          this.container = container;
          this.array = [];
          this.absorbers = [];
          this.interactivityAbsorbers = [];
          var overridableContainer = container;

          overridableContainer.addAbsorber = function (options, position) {
            return _this264.addAbsorber(options, position);
          };
        }

        _createClass2(Absorbers, [{
          key: "init",
          value: function init(options) {
            var _a, _b;

            if (!options) {
              return;
            }

            if (options.absorbers) {
              if (options.absorbers instanceof Array) {
                this.absorbers = options.absorbers.map(function (s) {
                  var tmp = new Absorber_1.Absorber();
                  tmp.load(s);
                  return tmp;
                });
              } else {
                if (this.absorbers instanceof Array) {
                  this.absorbers = new Absorber_1.Absorber();
                }

                this.absorbers.load(options.absorbers);
              }
            }

            var interactivityAbsorbers = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.absorbers;

            if (interactivityAbsorbers) {
              if (interactivityAbsorbers instanceof Array) {
                this.interactivityAbsorbers = interactivityAbsorbers.map(function (s) {
                  var tmp = new Absorber_1.Absorber();
                  tmp.load(s);
                  return tmp;
                });
              } else {
                if (this.interactivityAbsorbers instanceof Array) {
                  this.interactivityAbsorbers = new Absorber_1.Absorber();
                }

                this.interactivityAbsorbers.load(interactivityAbsorbers);
              }
            }

            if (this.absorbers instanceof Array) {
              var _iterator67 = _createForOfIteratorHelper(this.absorbers),
                  _step66;

              try {
                for (_iterator67.s(); !(_step66 = _iterator67.n()).done;) {
                  var absorberOptions = _step66.value;
                  this.addAbsorber(absorberOptions);
                }
              } catch (err) {
                _iterator67.e(err);
              } finally {
                _iterator67.f();
              }
            } else {
              this.addAbsorber(this.absorbers);
            }
          }
        }, {
          key: "particleUpdate",
          value: function particleUpdate(particle) {
            var _iterator68 = _createForOfIteratorHelper(this.array),
                _step67;

            try {
              for (_iterator68.s(); !(_step67 = _iterator68.n()).done;) {
                var absorber = _step67.value;
                absorber.attract(particle);

                if (particle.destroyed) {
                  break;
                }
              }
            } catch (err) {
              _iterator68.e(err);
            } finally {
              _iterator68.f();
            }
          }
        }, {
          key: "draw",
          value: function draw(context) {
            var _iterator69 = _createForOfIteratorHelper(this.array),
                _step68;

            try {
              for (_iterator69.s(); !(_step68 = _iterator69.n()).done;) {
                var absorber = _step68.value;
                context.save();
                absorber.draw(context);
                context.restore();
              }
            } catch (err) {
              _iterator69.e(err);
            } finally {
              _iterator69.f();
            }
          }
        }, {
          key: "stop",
          value: function stop() {
            this.array = [];
          }
        }, {
          key: "resize",
          value: function resize() {
            var _iterator70 = _createForOfIteratorHelper(this.array),
                _step69;

            try {
              for (_iterator70.s(); !(_step69 = _iterator70.n()).done;) {
                var absorber = _step69.value;
                absorber.resize();
              }
            } catch (err) {
              _iterator70.e(err);
            } finally {
              _iterator70.f();
            }
          }
        }, {
          key: "handleClickMode",
          value: function handleClickMode(mode) {
            var container = this.container;
            var absorberOptions = this.absorbers;
            var modeAbsorbers = this.interactivityAbsorbers;

            if (mode === Enums_1.AbsorberClickMode.absorber) {
              var absorbersModeOptions;

              if (modeAbsorbers instanceof Array) {
                if (modeAbsorbers.length > 0) {
                  absorbersModeOptions = Utils_1.Utils.itemFromArray(modeAbsorbers);
                }
              } else {
                absorbersModeOptions = modeAbsorbers;
              }

              var absorbersOptions = absorbersModeOptions !== null && absorbersModeOptions !== void 0 ? absorbersModeOptions : absorberOptions instanceof Array ? Utils_1.Utils.itemFromArray(absorberOptions) : absorberOptions;
              var aPosition = container.interactivity.mouse.clickPosition;
              this.addAbsorber(absorbersOptions, aPosition);
            }
          }
        }, {
          key: "addAbsorber",
          value: function addAbsorber(options, position) {
            var absorber = new AbsorberInstance_1.AbsorberInstance(this, this.container, options, position);
            this.array.push(absorber);
            return absorber;
          }
        }, {
          key: "removeAbsorber",
          value: function removeAbsorber(absorber) {
            var index = this.array.indexOf(absorber);

            if (index >= 0) {
              this.array.splice(index, 1);
            }
          }
        }]);

        return Absorbers;
      }();

      exports.Absorbers = Absorbers;
      /***/
    },

    /***/
    60545:
    /*!****************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/Absorbers/AbsorbersPlugin.js ***!
      \****************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

      var __exportStar = this && this.__exportStar || function (m, exports) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        }
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.AbsorbersPlugin = void 0;

      var Absorbers_1 = __webpack_require__(
      /*! ./Absorbers */
      68980);

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Enums_1 = __webpack_require__(
      /*! ./Enums */
      34626);

      var Absorber_1 = __webpack_require__(
      /*! ./Options/Classes/Absorber */
      67961);

      var AbsorbersPlugin = /*#__PURE__*/function () {
        function AbsorbersPlugin() {
          _classCallCheck2(this, AbsorbersPlugin);

          this.id = "absorbers";
        }

        _createClass2(AbsorbersPlugin, [{
          key: "getPlugin",
          value: function getPlugin(container) {
            return new Absorbers_1.Absorbers(container);
          }
        }, {
          key: "needsPlugin",
          value: function needsPlugin(options) {
            var _a, _b, _c;

            if (options === undefined) {
              return false;
            }

            var absorbers = options.absorbers;
            var loadAbsorbers = false;

            if (absorbers instanceof Array) {
              if (absorbers.length) {
                loadAbsorbers = true;
              }
            } else if (absorbers !== undefined) {
              loadAbsorbers = true;
            } else if (((_c = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onClick) === null || _c === void 0 ? void 0 : _c.mode) && Utils_1.Utils.isInArray(Enums_1.AbsorberClickMode.absorber, options.interactivity.events.onClick.mode)) {
              loadAbsorbers = true;
            }

            return loadAbsorbers;
          }
        }, {
          key: "loadOptions",
          value: function loadOptions(options, source) {
            var _a, _b;

            if (!this.needsPlugin(options) && !this.needsPlugin(source)) {
              return;
            }

            var optionsCast = options;

            if (source === null || source === void 0 ? void 0 : source.absorbers) {
              if ((source === null || source === void 0 ? void 0 : source.absorbers) instanceof Array) {
                optionsCast.absorbers = source === null || source === void 0 ? void 0 : source.absorbers.map(function (s) {
                  var tmp = new Absorber_1.Absorber();
                  tmp.load(s);
                  return tmp;
                });
              } else {
                var absorberOptions = optionsCast.absorbers;

                if ((absorberOptions === null || absorberOptions === void 0 ? void 0 : absorberOptions.load) === undefined) {
                  optionsCast.absorbers = absorberOptions = new Absorber_1.Absorber();
                }

                absorberOptions.load(source === null || source === void 0 ? void 0 : source.absorbers);
              }
            }

            var interactivityAbsorbers = (_b = (_a = source === null || source === void 0 ? void 0 : source.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.absorbers;

            if (interactivityAbsorbers) {
              if (interactivityAbsorbers instanceof Array) {
                optionsCast.interactivity.modes.absorbers = interactivityAbsorbers.map(function (s) {
                  var tmp = new Absorber_1.Absorber();
                  tmp.load(s);
                  return tmp;
                });
              } else {
                var _absorberOptions = optionsCast.interactivity.modes.absorbers;

                if ((_absorberOptions === null || _absorberOptions === void 0 ? void 0 : _absorberOptions.load) === undefined) {
                  optionsCast.interactivity.modes.absorbers = _absorberOptions = new Absorber_1.Absorber();
                }

                _absorberOptions.load(interactivityAbsorbers);
              }
            }
          }
        }]);

        return AbsorbersPlugin;
      }();

      var plugin = new AbsorbersPlugin();
      exports.AbsorbersPlugin = plugin;

      __exportStar(__webpack_require__(
      /*! ./Enums */
      34626), exports);
      /***/

    },

    /***/
    44696:
    /*!************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/Absorbers/Enums/AbsorberClickMode.js ***!
      \************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.AbsorberClickMode = void 0;
      var AbsorberClickMode;

      (function (AbsorberClickMode) {
        AbsorberClickMode["absorber"] = "absorber";
      })(AbsorberClickMode = exports.AbsorberClickMode || (exports.AbsorberClickMode = {}));
      /***/

    },

    /***/
    34626:
    /*!************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/Absorbers/Enums/index.js ***!
      \************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

      var __exportStar = this && this.__exportStar || function (m, exports) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        }
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      __exportStar(__webpack_require__(
      /*! ./AbsorberClickMode */
      44696), exports);
      /***/

    },

    /***/
    67961:
    /*!*************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/Absorbers/Options/Classes/Absorber.js ***!
      \*************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Absorber = void 0;

      var AbsorberSize_1 = __webpack_require__(
      /*! ./AbsorberSize */
      32415);

      var OptionsColor_1 = __webpack_require__(
      /*! ../../../../Options/Classes/OptionsColor */
      91287);

      var Absorber = /*#__PURE__*/function () {
        function Absorber() {
          _classCallCheck2(this, Absorber);

          this.color = new OptionsColor_1.OptionsColor();
          this.color.value = "#000000";
          this.draggable = false;
          this.opacity = 1;
          this.destroy = true;
          this.orbits = false;
          this.size = new AbsorberSize_1.AbsorberSize();
        }

        _createClass2(Absorber, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.color !== undefined) {
              this.color = OptionsColor_1.OptionsColor.create(this.color, data.color);
            }

            if (data.draggable !== undefined) {
              this.draggable = data.draggable;
            }

            if (data.opacity !== undefined) {
              this.opacity = data.opacity;
            }

            if (data.position !== undefined) {
              this.position = {
                x: data.position.x,
                y: data.position.y
              };
            }

            if (data.size !== undefined) {
              this.size.load(data.size);
            }

            if (data.destroy !== undefined) {
              this.destroy = data.destroy;
            }

            if (data.orbits !== undefined) {
              this.orbits = data.orbits;
            }
          }
        }]);

        return Absorber;
      }();

      exports.Absorber = Absorber;
      /***/
    },

    /***/
    32415:
    /*!*****************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/Absorbers/Options/Classes/AbsorberSize.js ***!
      \*****************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.AbsorberSize = void 0;

      var ValueWithRandom_1 = __webpack_require__(
      /*! ../../../../Options/Classes/ValueWithRandom */
      80035);

      var AbsorberSize = /*#__PURE__*/function (_ValueWithRandom_1$Va8) {
        _inherits(AbsorberSize, _ValueWithRandom_1$Va8);

        var _super110 = _createSuper(AbsorberSize);

        function AbsorberSize() {
          var _this265;

          _classCallCheck2(this, AbsorberSize);

          _this265 = _super110.call(this);
          _this265.density = 5;
          _this265.random.minimumValue = 1;
          _this265.value = 50;
          return _this265;
        }

        _createClass2(AbsorberSize, [{
          key: "load",
          value: function load(data) {
            if (!data) {
              return;
            }

            _get(_getPrototypeOf(AbsorberSize.prototype), "load", this).call(this, data);

            if (data.density !== undefined) {
              this.density = data.density;
            }

            if (data.limit !== undefined) {
              this.limit = data.limit;
            }

            if (data.limit !== undefined) {
              this.limit = data.limit;
            }
          }
        }]);

        return AbsorberSize;
      }(ValueWithRandom_1.ValueWithRandom);

      exports.AbsorberSize = AbsorberSize;
      /***/
    },

    /***/
    23056:
    /*!***************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/Emitters/EmitterInstance.js ***!
      \***************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.EmitterInstance = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Enums_1 = __webpack_require__(
      /*! ../../Enums */
      9717);

      var EmitterSize_1 = __webpack_require__(
      /*! ./Options/Classes/EmitterSize */
      61203);

      function randomCoordinate(position, offset) {
        return position + offset * (Math.random() - 0.5);
      }

      function randomPosition(position, offset) {
        return {
          x: randomCoordinate(position.x, offset.x),
          y: randomCoordinate(position.y, offset.y)
        };
      }

      var EmitterInstance = /*#__PURE__*/function () {
        function EmitterInstance(emitters, container, emitterOptions, position) {
          _classCallCheck2(this, EmitterInstance);

          var _a, _b, _c;

          this.emitters = emitters;
          this.container = container;
          this.initialPosition = position;
          this.emitterOptions = Utils_1.Utils.deepExtend({}, emitterOptions);
          this.position = (_a = this.initialPosition) !== null && _a !== void 0 ? _a : this.calcPosition();
          var particlesOptions = Utils_1.Utils.deepExtend({}, this.emitterOptions.particles);

          if (particlesOptions === undefined) {
            particlesOptions = {};
          }

          if (particlesOptions.move === undefined) {
            particlesOptions.move = {};
          }

          if (particlesOptions.move.direction === undefined) {
            particlesOptions.move.direction = this.emitterOptions.direction;
          }

          this.particlesOptions = particlesOptions;
          this.size = (_b = this.emitterOptions.size) !== null && _b !== void 0 ? _b : function () {
            var size = new EmitterSize_1.EmitterSize();
            size.load({
              height: 0,
              mode: Enums_1.SizeMode.percent,
              width: 0
            });
            return size;
          }();
          this.lifeCount = (_c = this.emitterOptions.life.count) !== null && _c !== void 0 ? _c : -1;
          this.immortal = this.lifeCount <= 0;
          this.play();
        }

        _createClass2(EmitterInstance, [{
          key: "play",
          value: function play() {
            var _this266 = this;

            if (this.container.retina.reduceFactor && (this.lifeCount > 0 || this.immortal || !this.emitterOptions.life.count)) {
              if (this.startInterval === undefined) {
                var delay = 1000 * this.emitterOptions.rate.delay / this.container.retina.reduceFactor;
                this.startInterval = window.setInterval(function () {
                  _this266.emit();
                }, delay);
              }

              if (this.lifeCount > 0 || this.immortal) {
                this.prepareToDie();
              }
            }
          }
        }, {
          key: "pause",
          value: function pause() {
            var interval = this.startInterval;

            if (interval !== undefined) {
              clearInterval(interval);
              delete this.startInterval;
            }
          }
        }, {
          key: "resize",
          value: function resize() {
            var initialPosition = this.initialPosition;
            this.position = initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();
          }
        }, {
          key: "prepareToDie",
          value: function prepareToDie() {
            var _this267 = this;

            var _a;

            var duration = (_a = this.emitterOptions.life) === null || _a === void 0 ? void 0 : _a.duration;

            if (this.container.retina.reduceFactor && (this.lifeCount > 0 || this.immortal) && duration !== undefined && duration > 0) {
              setTimeout(function () {
                var _a;

                _this267.pause();

                if (!_this267.immortal) {
                  _this267.lifeCount--;
                }

                if (_this267.lifeCount > 0 || _this267.immortal) {
                  _this267.position = _this267.calcPosition();
                  setTimeout(function () {
                    _this267.play();
                  }, ((_a = _this267.emitterOptions.life.delay) !== null && _a !== void 0 ? _a : 0) * 1000 / _this267.container.retina.reduceFactor);
                } else {
                  _this267.destroy();
                }
              }, duration * 1000);
            }
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.emitters.removeEmitter(this);
          }
        }, {
          key: "calcPosition",
          value: function calcPosition() {
            var _a, _b;

            var container = this.container;
            var percentPosition = this.emitterOptions.position;
            return {
              x: ((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100 * container.canvas.size.width,
              y: ((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100 * container.canvas.size.height
            };
          }
        }, {
          key: "emit",
          value: function emit() {
            var container = this.container;
            var position = this.position;
            var offset = {
              x: this.size.mode === Enums_1.SizeMode.percent ? container.canvas.size.width * this.size.width / 100 : this.size.width,
              y: this.size.mode === Enums_1.SizeMode.percent ? container.canvas.size.height * this.size.height / 100 : this.size.height
            };

            for (var i = 0; i < this.emitterOptions.rate.quantity; i++) {
              container.particles.addParticle(randomPosition(position, offset), this.particlesOptions);
            }
          }
        }]);

        return EmitterInstance;
      }();

      exports.EmitterInstance = EmitterInstance;
      /***/
    },

    /***/
    31816:
    /*!********************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/Emitters/Emitters.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Emitters = void 0;

      var EmitterInstance_1 = __webpack_require__(
      /*! ./EmitterInstance */
      23056);

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Emitter_1 = __webpack_require__(
      /*! ./Options/Classes/Emitter */
      8924);

      var Enums_1 = __webpack_require__(
      /*! ./Enums */
      80186);

      var Emitters = /*#__PURE__*/function () {
        function Emitters(container) {
          var _this268 = this;

          _classCallCheck2(this, Emitters);

          this.container = container;
          this.array = [];
          this.emitters = [];
          this.interactivityEmitters = [];
          var overridableContainer = container;

          overridableContainer.addEmitter = function (options, position) {
            return _this268.addEmitter(options, position);
          };
        }

        _createClass2(Emitters, [{
          key: "init",
          value: function init(options) {
            var _a, _b;

            if (!options) {
              return;
            }

            if (options.emitters) {
              if (options.emitters instanceof Array) {
                this.emitters = options.emitters.map(function (s) {
                  var tmp = new Emitter_1.Emitter();
                  tmp.load(s);
                  return tmp;
                });
              } else {
                if (this.emitters instanceof Array) {
                  this.emitters = new Emitter_1.Emitter();
                }

                this.emitters.load(options.emitters);
              }
            }

            var interactivityEmitters = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.emitters;

            if (interactivityEmitters) {
              if (interactivityEmitters instanceof Array) {
                this.interactivityEmitters = interactivityEmitters.map(function (s) {
                  var tmp = new Emitter_1.Emitter();
                  tmp.load(s);
                  return tmp;
                });
              } else {
                if (this.interactivityEmitters instanceof Array) {
                  this.interactivityEmitters = new Emitter_1.Emitter();
                }

                this.interactivityEmitters.load(interactivityEmitters);
              }
            }

            if (this.emitters instanceof Array) {
              var _iterator71 = _createForOfIteratorHelper(this.emitters),
                  _step70;

              try {
                for (_iterator71.s(); !(_step70 = _iterator71.n()).done;) {
                  var emitterOptions = _step70.value;
                  this.addEmitter(emitterOptions);
                }
              } catch (err) {
                _iterator71.e(err);
              } finally {
                _iterator71.f();
              }
            } else {
              this.addEmitter(this.emitters);
            }
          }
        }, {
          key: "play",
          value: function play() {
            var _iterator72 = _createForOfIteratorHelper(this.array),
                _step71;

            try {
              for (_iterator72.s(); !(_step71 = _iterator72.n()).done;) {
                var emitter = _step71.value;
                emitter.play();
              }
            } catch (err) {
              _iterator72.e(err);
            } finally {
              _iterator72.f();
            }
          }
        }, {
          key: "pause",
          value: function pause() {
            var _iterator73 = _createForOfIteratorHelper(this.array),
                _step72;

            try {
              for (_iterator73.s(); !(_step72 = _iterator73.n()).done;) {
                var emitter = _step72.value;
                emitter.pause();
              }
            } catch (err) {
              _iterator73.e(err);
            } finally {
              _iterator73.f();
            }
          }
        }, {
          key: "stop",
          value: function stop() {
            this.array = [];
          }
        }, {
          key: "handleClickMode",
          value: function handleClickMode(mode) {
            var container = this.container;
            var emitterOptions = this.emitters;
            var modeEmitters = this.interactivityEmitters;

            if (mode === Enums_1.EmitterClickMode.emitter) {
              var emitterModeOptions;

              if (modeEmitters instanceof Array) {
                if (modeEmitters.length > 0) {
                  emitterModeOptions = Utils_1.Utils.itemFromArray(modeEmitters);
                }
              } else {
                emitterModeOptions = modeEmitters;
              }

              var emittersOptions = emitterModeOptions !== null && emitterModeOptions !== void 0 ? emitterModeOptions : emitterOptions instanceof Array ? Utils_1.Utils.itemFromArray(emitterOptions) : emitterOptions;
              var ePosition = container.interactivity.mouse.clickPosition;
              this.addEmitter(Utils_1.Utils.deepExtend({}, emittersOptions), ePosition);
            }
          }
        }, {
          key: "resize",
          value: function resize() {
            var _iterator74 = _createForOfIteratorHelper(this.array),
                _step73;

            try {
              for (_iterator74.s(); !(_step73 = _iterator74.n()).done;) {
                var emitter = _step73.value;
                emitter.resize();
              }
            } catch (err) {
              _iterator74.e(err);
            } finally {
              _iterator74.f();
            }
          }
        }, {
          key: "addEmitter",
          value: function addEmitter(options, position) {
            var emitter = new EmitterInstance_1.EmitterInstance(this, this.container, options, position);
            this.array.push(emitter);
            return emitter;
          }
        }, {
          key: "removeEmitter",
          value: function removeEmitter(emitter) {
            var index = this.array.indexOf(emitter);

            if (index >= 0) {
              this.array.splice(index, 1);
            }
          }
        }]);

        return Emitters;
      }();

      exports.Emitters = Emitters;
      /***/
    },

    /***/
    23964:
    /*!**************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/Emitters/EmittersPlugin.js ***!
      \**************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

      var __exportStar = this && this.__exportStar || function (m, exports) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        }
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.EmittersPlugin = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var Emitters_1 = __webpack_require__(
      /*! ./Emitters */
      31816);

      var Enums_1 = __webpack_require__(
      /*! ./Enums */
      80186);

      var Emitter_1 = __webpack_require__(
      /*! ./Options/Classes/Emitter */
      8924);

      var EmittersPlugin = /*#__PURE__*/function () {
        function EmittersPlugin() {
          _classCallCheck2(this, EmittersPlugin);

          this.id = "emitters";
        }

        _createClass2(EmittersPlugin, [{
          key: "getPlugin",
          value: function getPlugin(container) {
            return new Emitters_1.Emitters(container);
          }
        }, {
          key: "needsPlugin",
          value: function needsPlugin(options) {
            var _a, _b, _c;

            if (options === undefined) {
              return false;
            }

            var emitters = options.emitters;
            var loadEmitters = false;

            if (emitters instanceof Array) {
              if (emitters.length) {
                loadEmitters = true;
              }
            } else if (emitters !== undefined) {
              loadEmitters = true;
            } else if (((_c = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onClick) === null || _c === void 0 ? void 0 : _c.mode) && Utils_1.Utils.isInArray(Enums_1.EmitterClickMode.emitter, options.interactivity.events.onClick.mode)) {
              loadEmitters = true;
            }

            return loadEmitters;
          }
        }, {
          key: "loadOptions",
          value: function loadOptions(options, source) {
            var _a, _b;

            if (!this.needsPlugin(options) && !this.needsPlugin(source)) {
              return;
            }

            var optionsCast = options;

            if (source === null || source === void 0 ? void 0 : source.emitters) {
              if ((source === null || source === void 0 ? void 0 : source.emitters) instanceof Array) {
                optionsCast.emitters = source === null || source === void 0 ? void 0 : source.emitters.map(function (s) {
                  var tmp = new Emitter_1.Emitter();
                  tmp.load(s);
                  return tmp;
                });
              } else {
                var emitterOptions = optionsCast.emitters;

                if ((emitterOptions === null || emitterOptions === void 0 ? void 0 : emitterOptions.load) === undefined) {
                  optionsCast.emitters = emitterOptions = new Emitter_1.Emitter();
                }

                emitterOptions.load(source === null || source === void 0 ? void 0 : source.emitters);
              }
            }

            var interactivityEmitters = (_b = (_a = source === null || source === void 0 ? void 0 : source.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.emitters;

            if (interactivityEmitters) {
              if (interactivityEmitters instanceof Array) {
                optionsCast.interactivity.modes.emitters = interactivityEmitters.map(function (s) {
                  var tmp = new Emitter_1.Emitter();
                  tmp.load(s);
                  return tmp;
                });
              } else {
                var _emitterOptions = optionsCast.interactivity.modes.emitters;

                if ((_emitterOptions === null || _emitterOptions === void 0 ? void 0 : _emitterOptions.load) === undefined) {
                  optionsCast.interactivity.modes.emitters = _emitterOptions = new Emitter_1.Emitter();
                }

                _emitterOptions.load(interactivityEmitters);
              }
            }
          }
        }]);

        return EmittersPlugin;
      }();

      var plugin = new EmittersPlugin();
      exports.EmittersPlugin = plugin;

      __exportStar(__webpack_require__(
      /*! ./Enums */
      80186), exports);
      /***/

    },

    /***/
    78100:
    /*!**********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/Emitters/Enums/EmitterClickMode.js ***!
      \**********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.EmitterClickMode = void 0;
      var EmitterClickMode;

      (function (EmitterClickMode) {
        EmitterClickMode["emitter"] = "emitter";
      })(EmitterClickMode = exports.EmitterClickMode || (exports.EmitterClickMode = {}));
      /***/

    },

    /***/
    80186:
    /*!***********************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/Emitters/Enums/index.js ***!
      \***********************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

      var __exportStar = this && this.__exportStar || function (m, exports) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        }
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      __exportStar(__webpack_require__(
      /*! ./EmitterClickMode */
      78100), exports);
      /***/

    },

    /***/
    8924:
    /*!***********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/Emitters/Options/Classes/Emitter.js ***!
      \***********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Emitter = void 0;

      var Enums_1 = __webpack_require__(
      /*! ../../../../Enums */
      9717);

      var EmitterRate_1 = __webpack_require__(
      /*! ./EmitterRate */
      90906);

      var EmitterLife_1 = __webpack_require__(
      /*! ./EmitterLife */
      80229);

      var Utils_1 = __webpack_require__(
      /*! ../../../../Utils */
      57711);

      var EmitterSize_1 = __webpack_require__(
      /*! ./EmitterSize */
      61203);

      var Emitter = /*#__PURE__*/function () {
        function Emitter() {
          _classCallCheck2(this, Emitter);

          this.direction = Enums_1.MoveDirection.none;
          this.life = new EmitterLife_1.EmitterLife();
          this.rate = new EmitterRate_1.EmitterRate();
        }

        _createClass2(Emitter, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.size !== undefined) {
              if (this.size === undefined) {
                this.size = new EmitterSize_1.EmitterSize();
              }

              this.size.load(data.size);
            }

            if (data.direction !== undefined) {
              this.direction = data.direction;
            }

            this.life.load(data.life);

            if (data.particles !== undefined) {
              this.particles = Utils_1.Utils.deepExtend({}, data.particles);
            }

            this.rate.load(data.rate);

            if (data.position !== undefined) {
              this.position = {
                x: data.position.x,
                y: data.position.y
              };
            }
          }
        }]);

        return Emitter;
      }();

      exports.Emitter = Emitter;
      /***/
    },

    /***/
    80229:
    /*!***************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/Emitters/Options/Classes/EmitterLife.js ***!
      \***************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.EmitterLife = void 0;

      var EmitterLife = /*#__PURE__*/function () {
        function EmitterLife() {
          _classCallCheck2(this, EmitterLife);
        }

        _createClass2(EmitterLife, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.count !== undefined) {
              this.count = data.count;
            }

            if (data.delay !== undefined) {
              this.delay = data.delay;
            }

            if (data.duration !== undefined) {
              this.duration = data.duration;
            }
          }
        }]);

        return EmitterLife;
      }();

      exports.EmitterLife = EmitterLife;
      /***/
    },

    /***/
    90906:
    /*!***************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/Emitters/Options/Classes/EmitterRate.js ***!
      \***************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.EmitterRate = void 0;

      var EmitterRate = /*#__PURE__*/function () {
        function EmitterRate() {
          _classCallCheck2(this, EmitterRate);

          this.quantity = 1;
          this.delay = 0.1;
        }

        _createClass2(EmitterRate, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.quantity !== undefined) {
              this.quantity = data.quantity;
            }

            if (data.delay !== undefined) {
              this.delay = data.delay;
            }
          }
        }]);

        return EmitterRate;
      }();

      exports.EmitterRate = EmitterRate;
      /***/
    },

    /***/
    61203:
    /*!***************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/Emitters/Options/Classes/EmitterSize.js ***!
      \***************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.EmitterSize = void 0;

      var Enums_1 = __webpack_require__(
      /*! ../../../../Enums */
      9717);

      var EmitterSize = /*#__PURE__*/function () {
        function EmitterSize() {
          _classCallCheck2(this, EmitterSize);

          this.mode = Enums_1.SizeMode.percent;
          this.height = 0;
          this.width = 0;
        }

        _createClass2(EmitterSize, [{
          key: "load",
          value: function load(data) {
            if (data === undefined) {
              return;
            }

            if (data.mode !== undefined) {
              this.mode = data.mode;
            }

            if (data.height !== undefined) {
              this.height = data.height;
            }

            if (data.width !== undefined) {
              this.width = data.width;
            }
          }
        }]);

        return EmitterSize;
      }();

      exports.EmitterSize = EmitterSize;
      /***/
    },

    /***/
    47797:
    /*!**************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/PolygonMask/Enums/InlineArrangement.js ***!
      \**************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.InlineArrangement = void 0;
      var InlineArrangement;

      (function (InlineArrangement) {
        InlineArrangement["equidistant"] = "equidistant";
        InlineArrangement["onePerPoint"] = "one-per-point";
        InlineArrangement["perPoint"] = "per-point";
        InlineArrangement["randomLength"] = "random-length";
        InlineArrangement["randomPoint"] = "random-point";
      })(InlineArrangement = exports.InlineArrangement || (exports.InlineArrangement = {}));
      /***/

    },

    /***/
    25626:
    /*!*****************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/PolygonMask/Enums/MoveType.js ***!
      \*****************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.MoveType = void 0;
      var MoveType;

      (function (MoveType) {
        MoveType["path"] = "path";
        MoveType["radius"] = "radius";
      })(MoveType = exports.MoveType || (exports.MoveType = {}));
      /***/

    },

    /***/
    86792:
    /*!*************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/PolygonMask/Enums/Type.js ***!
      \*************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Type = void 0;
      var Type;

      (function (Type) {
        Type["inline"] = "inline";
        Type["inside"] = "inside";
        Type["outside"] = "outside";
        Type["none"] = "none";
      })(Type = exports.Type || (exports.Type = {}));
      /***/

    },

    /***/
    67177:
    /*!**************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/PolygonMask/Enums/index.js ***!
      \**************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

      var __exportStar = this && this.__exportStar || function (m, exports) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        }
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      __exportStar(__webpack_require__(
      /*! ./InlineArrangement */
      47797), exports);

      __exportStar(__webpack_require__(
      /*! ./MoveType */
      25626), exports);

      __exportStar(__webpack_require__(
      /*! ./Type */
      86792), exports);
      /***/

    },

    /***/
    82077:
    /*!***********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/PolygonMask/Options/Classes/Draw.js ***!
      \***********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Draw = void 0;

      var DrawStroke_1 = __webpack_require__(
      /*! ./DrawStroke */
      54050);

      var OptionsColor_1 = __webpack_require__(
      /*! ../../../../Options/Classes/OptionsColor */
      91287);

      var Draw = /*#__PURE__*/function () {
        function Draw() {
          _classCallCheck2(this, Draw);

          this.enable = false;
          this.stroke = new DrawStroke_1.DrawStroke();
        }

        _createClass2(Draw, [{
          key: "lineWidth",
          get: function get() {
            return this.stroke.width;
          },
          set: function set(value) {
            this.stroke.width = value;
          }
        }, {
          key: "lineColor",
          get: function get() {
            return this.stroke.color;
          },
          set: function set(value) {
            this.stroke.color = OptionsColor_1.OptionsColor.create(this.stroke.color, value);
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a;

            if (data !== undefined) {
              if (data.enable !== undefined) {
                this.enable = data.enable;
              }

              var stroke = (_a = data.stroke) !== null && _a !== void 0 ? _a : {
                color: data.lineColor,
                width: data.lineWidth
              };
              this.stroke.load(stroke);
            }
          }
        }]);

        return Draw;
      }();

      exports.Draw = Draw;
      /***/
    },

    /***/
    54050:
    /*!*****************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/PolygonMask/Options/Classes/DrawStroke.js ***!
      \*****************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DrawStroke = void 0;

      var OptionsColor_1 = __webpack_require__(
      /*! ../../../../Options/Classes/OptionsColor */
      91287);

      var Utils_1 = __webpack_require__(
      /*! ../../../../Utils */
      57711);

      var DrawStroke = /*#__PURE__*/function () {
        function DrawStroke() {
          _classCallCheck2(this, DrawStroke);

          this.color = new OptionsColor_1.OptionsColor();
          this.width = 0.5;
          this.opacity = 1;
        }

        _createClass2(DrawStroke, [{
          key: "load",
          value: function load(data) {
            var _a;

            if (data !== undefined) {
              this.color = OptionsColor_1.OptionsColor.create(this.color, data.color);

              if (typeof this.color.value === "string") {
                this.opacity = (_a = Utils_1.ColorUtils.stringToAlpha(this.color.value)) !== null && _a !== void 0 ? _a : this.opacity;
              }

              if (data.opacity !== undefined) {
                this.opacity = data.opacity;
              }

              if (data.width !== undefined) {
                this.width = data.width;
              }
            }
          }
        }]);

        return DrawStroke;
      }();

      exports.DrawStroke = DrawStroke;
      /***/
    },

    /***/
    20163:
    /*!*************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/PolygonMask/Options/Classes/Inline.js ***!
      \*************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Inline = void 0;

      var Enums_1 = __webpack_require__(
      /*! ../../Enums */
      67177);

      var Inline = /*#__PURE__*/function () {
        function Inline() {
          _classCallCheck2(this, Inline);

          this.arrangement = Enums_1.InlineArrangement.onePerPoint;
        }

        _createClass2(Inline, [{
          key: "load",
          value: function load(data) {
            if (data !== undefined) {
              if (data.arrangement !== undefined) {
                this.arrangement = data.arrangement;
              }
            }
          }
        }]);

        return Inline;
      }();

      exports.Inline = Inline;
      /***/
    },

    /***/
    649:
    /*!***************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/PolygonMask/Options/Classes/LocalSvg.js ***!
      \***************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.LocalSvg = void 0;

      var LocalSvg = /*#__PURE__*/function () {
        function LocalSvg() {
          _classCallCheck2(this, LocalSvg);

          this.path = [];
          this.size = {
            height: 0,
            width: 0
          };
        }

        _createClass2(LocalSvg, [{
          key: "load",
          value: function load(data) {
            if (data !== undefined) {
              if (data.path !== undefined) {
                this.path = data.path;
              }

              if (data.size !== undefined) {
                if (data.size.width !== undefined) {
                  this.size.width = data.size.width;
                }

                if (data.size.height !== undefined) {
                  this.size.height = data.size.height;
                }
              }
            }
          }
        }]);

        return LocalSvg;
      }();

      exports.LocalSvg = LocalSvg;
      /***/
    },

    /***/
    25800:
    /*!***********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/PolygonMask/Options/Classes/Move.js ***!
      \***********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Move = void 0;

      var Enums_1 = __webpack_require__(
      /*! ../../Enums */
      67177);

      var Move = /*#__PURE__*/function () {
        function Move() {
          _classCallCheck2(this, Move);

          this.radius = 10;
          this.type = Enums_1.MoveType.path;
        }

        _createClass2(Move, [{
          key: "load",
          value: function load(data) {
            if (data !== undefined) {
              if (data.radius !== undefined) {
                this.radius = data.radius;
              }

              if (data.type !== undefined) {
                this.type = data.type;
              }
            }
          }
        }]);

        return Move;
      }();

      exports.Move = Move;
      /***/
    },

    /***/
    17235:
    /*!******************************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/PolygonMask/Options/Classes/PolygonMask.js ***!
      \******************************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.PolygonMask = void 0;

      var Enums_1 = __webpack_require__(
      /*! ../../Enums */
      67177);

      var Draw_1 = __webpack_require__(
      /*! ./Draw */
      82077);

      var Move_1 = __webpack_require__(
      /*! ./Move */
      25800);

      var Inline_1 = __webpack_require__(
      /*! ./Inline */
      20163);

      var LocalSvg_1 = __webpack_require__(
      /*! ./LocalSvg */
      649);

      var PolygonMask = /*#__PURE__*/function () {
        function PolygonMask() {
          _classCallCheck2(this, PolygonMask);

          this.draw = new Draw_1.Draw();
          this.enable = false;
          this.inline = new Inline_1.Inline();
          this.move = new Move_1.Move();
          this.scale = 1;
          this.type = Enums_1.Type.none;
        }

        _createClass2(PolygonMask, [{
          key: "inlineArrangement",
          get: function get() {
            return this.inline.arrangement;
          },
          set: function set(value) {
            this.inline.arrangement = value;
          }
        }, {
          key: "load",
          value: function load(data) {
            var _a;

            if (data !== undefined) {
              this.draw.load(data.draw);
              var inline = (_a = data.inline) !== null && _a !== void 0 ? _a : {
                arrangement: data.inlineArrangement
              };

              if (inline !== undefined) {
                this.inline.load(inline);
              }

              this.move.load(data.move);

              if (data.scale !== undefined) {
                this.scale = data.scale;
              }

              if (data.type !== undefined) {
                this.type = data.type;
              }

              if (data.enable !== undefined) {
                this.enable = data.enable;
              } else {
                this.enable = this.type !== Enums_1.Type.none;
              }

              if (data.url !== undefined) {
                this.url = data.url;
              }

              if (data.data !== undefined) {
                if (typeof data.data === "string") {
                  this.data = data.data;
                } else {
                  this.data = new LocalSvg_1.LocalSvg();
                  this.data.load(data.data);
                }
              }

              if (data.position !== undefined) {
                this.position = {
                  x: data.position.x,
                  y: data.position.y
                };
              }
            }
          }
        }]);

        return PolygonMask;
      }();

      exports.PolygonMask = PolygonMask;
      /***/
    },

    /***/
    77370:
    /*!**********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/PolygonMask/PolygonMaskInstance.js ***!
      \**********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function (resolve) {
            resolve(value);
          });
        }

        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }

          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }

          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }

          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.PolygonMaskInstance = void 0;

      var Enums_1 = __webpack_require__(
      /*! ./Enums */
      67177);

      var Utils_1 = __webpack_require__(
      /*! ../../Utils */
      57711);

      var PolygonMask_1 = __webpack_require__(
      /*! ./Options/Classes/PolygonMask */
      17235);

      function polygonBounce(particle) {
        particle.velocity.horizontal = particle.velocity.vertical / 2 - particle.velocity.horizontal;
        particle.velocity.vertical = particle.velocity.horizontal / 2 - particle.velocity.vertical;
      }

      function drawPolygonMask(context, rawData, stroke) {
        var color = Utils_1.ColorUtils.colorToRgb(stroke.color);

        if (!color) {
          return;
        }

        context.beginPath();
        context.moveTo(rawData[0].x, rawData[0].y);

        var _iterator75 = _createForOfIteratorHelper(rawData),
            _step74;

        try {
          for (_iterator75.s(); !(_step74 = _iterator75.n()).done;) {
            var item = _step74.value;
            context.lineTo(item.x, item.y);
          }
        } catch (err) {
          _iterator75.e(err);
        } finally {
          _iterator75.f();
        }

        context.closePath();
        context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color);
        context.lineWidth = stroke.width;
        context.stroke();
      }

      function drawPolygonMaskPath(context, path, stroke, position) {
        context.translate(position.x, position.y);
        var color = Utils_1.ColorUtils.colorToRgb(stroke.color);

        if (!color) {
          return;
        }

        context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color, stroke.opacity);
        context.lineWidth = stroke.width;
        context.stroke(path);
      }

      function parsePaths(paths, scale, offset) {
        var res = [];

        var _iterator76 = _createForOfIteratorHelper(paths),
            _step75;

        try {
          for (_iterator76.s(); !(_step75 = _iterator76.n()).done;) {
            var path = _step75.value;
            var segments = path.element.pathSegList;
            var len = segments.numberOfItems;
            var p = {
              x: 0,
              y: 0
            };

            for (var i = 0; i < len; i++) {
              var segment = segments.getItem(i);
              var svgPathSeg = window.SVGPathSeg;

              switch (segment.pathSegType) {
                case svgPathSeg.PATHSEG_MOVETO_ABS:
                case svgPathSeg.PATHSEG_LINETO_ABS:
                case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:
                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:
                case svgPathSeg.PATHSEG_ARC_ABS:
                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:
                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:
                  {
                    var absSeg = segment;
                    p.x = absSeg.x;
                    p.y = absSeg.y;
                    break;
                  }

                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:
                  p.x = segment.x;
                  break;

                case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:
                  p.y = segment.y;
                  break;

                case svgPathSeg.PATHSEG_LINETO_REL:
                case svgPathSeg.PATHSEG_MOVETO_REL:
                case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:
                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:
                case svgPathSeg.PATHSEG_ARC_REL:
                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:
                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:
                  {
                    var relSeg = segment;
                    p.x += relSeg.x;
                    p.y += relSeg.y;
                    break;
                  }

                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:
                  p.x += segment.x;
                  break;

                case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:
                  p.y += segment.y;
                  break;

                case svgPathSeg.PATHSEG_UNKNOWN:
                case svgPathSeg.PATHSEG_CLOSEPATH:
                  continue;
              }

              res.push({
                x: p.x * scale + offset.x,
                y: p.y * scale + offset.y
              });
            }
          }
        } catch (err) {
          _iterator76.e(err);
        } finally {
          _iterator76.f();
        }

        return res;
      }

      var PolygonMaskInstance = /*#__PURE__*/function () {
        function PolygonMaskInstance(container) {
          _classCallCheck2(this, PolygonMaskInstance);

          this.container = container;
          this.dimension = {
            height: 0,
            width: 0
          };
          this.path2DSupported = !!window.Path2D;
          this.options = new PolygonMask_1.PolygonMask();
          this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;
        }

        _createClass2(PolygonMaskInstance, [{
          key: "initAsync",
          value: function initAsync(options) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
              var polygonMaskOptions;
              return regeneratorRuntime.wrap(function _callee9$(_context12) {
                while (1) {
                  switch (_context12.prev = _context12.next) {
                    case 0:
                      this.options.load(options === null || options === void 0 ? void 0 : options.polygon);
                      polygonMaskOptions = this.options;
                      this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;

                      if (!polygonMaskOptions.enable) {
                        _context12.next = 6;
                        break;
                      }

                      _context12.next = 6;
                      return this.initRawData();

                    case 6:
                    case "end":
                      return _context12.stop();
                  }
                }
              }, _callee9, this);
            }));
          }
        }, {
          key: "resize",
          value: function resize() {
            var _this269 = this;

            var container = this.container;
            var options = this.options;

            if (!(options.enable && options.type !== Enums_1.Type.none)) {
              return;
            }

            if (this.redrawTimeout) {
              clearTimeout(this.redrawTimeout);
            }

            this.redrawTimeout = window.setTimeout(function () {
              return __awaiter(_this269, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                return regeneratorRuntime.wrap(function _callee10$(_context13) {
                  while (1) {
                    switch (_context13.prev = _context13.next) {
                      case 0:
                        _context13.next = 2;
                        return this.initRawData(true);

                      case 2:
                        container.particles.redraw();

                      case 3:
                      case "end":
                        return _context13.stop();
                    }
                  }
                }, _callee10, this);
              }));
            }, 250);
          }
        }, {
          key: "stop",
          value: function stop() {
            delete this.raw;
            delete this.paths;
          }
        }, {
          key: "particlesInitialization",
          value: function particlesInitialization() {
            var options = this.options;

            if (options.enable && options.type === Enums_1.Type.inline && (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint || options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {
              this.drawPoints();
              return true;
            }

            return false;
          }
        }, {
          key: "particlePosition",
          value: function particlePosition(position) {
            var _a, _b;

            var options = this.options;

            if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {
              return;
            }

            return Utils_1.Utils.deepExtend({}, position ? position : this.randomPoint());
          }
        }, {
          key: "particleBounce",
          value: function particleBounce(particle) {
            var options = this.options;

            if (options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline) {
              if (!this.checkInsidePolygon(particle.getPosition())) {
                polygonBounce(particle);
                return true;
              }
            } else if (options.enable && options.type === Enums_1.Type.inline && particle.initialPosition) {
              var dist = Utils_1.NumberUtils.getDistance(particle.initialPosition, particle.getPosition());

              if (dist > this.polygonMaskMoveRadius) {
                polygonBounce(particle);
                return true;
              }
            }

            return false;
          }
        }, {
          key: "clickPositionValid",
          value: function clickPositionValid(position) {
            var options = this.options;
            return options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline && this.checkInsidePolygon(position);
          }
        }, {
          key: "draw",
          value: function draw(context) {
            var _a;

            if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {
              return;
            }

            var options = this.options;
            var polygonDraw = options.draw;

            if (!(options.enable && polygonDraw.enable)) {
              return;
            }

            var rawData = this.raw;

            var _iterator77 = _createForOfIteratorHelper(this.paths),
                _step76;

            try {
              for (_iterator77.s(); !(_step76 = _iterator77.n()).done;) {
                var path = _step76.value;
                var path2d = path.path2d;
                var path2dSupported = this.path2DSupported;

                if (!context) {
                  continue;
                }

                if (path2dSupported && path2d && this.offset) {
                  drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);
                } else if (rawData) {
                  drawPolygonMask(context, rawData, polygonDraw.stroke);
                }
              }
            } catch (err) {
              _iterator77.e(err);
            } finally {
              _iterator77.f();
            }
          }
        }, {
          key: "checkInsidePolygon",
          value: function checkInsidePolygon(position) {
            var _a, _b;

            var container = this.container;
            var options = this.options;

            if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {
              return true;
            }

            if (!this.raw) {
              throw new Error(Utils_1.Constants.noPolygonFound);
            }

            var canvasSize = container.canvas.size;
            var x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;
            var y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;
            var inside = false;

            for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {
              var pi = this.raw[i];
              var pj = this.raw[j];
              var intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;

              if (intersect) {
                inside = !inside;
              }
            }

            return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;
          }
        }, {
          key: "parseSvgPath",
          value: function parseSvgPath(xml, force) {
            var _a, _b, _c;

            var forceDownload = force !== null && force !== void 0 ? force : false;

            if (this.paths !== undefined && !forceDownload) {
              return this.raw;
            }

            var container = this.container;
            var options = this.options;
            var parser = new DOMParser();
            var doc = parser.parseFromString(xml, "image/svg+xml");
            var svg = doc.getElementsByTagName("svg")[0];
            var svgPaths = svg.getElementsByTagName("path");

            if (!svgPaths.length) {
              svgPaths = doc.getElementsByTagName("path");
            }

            this.paths = [];

            for (var i = 0; i < svgPaths.length; i++) {
              var path = svgPaths.item(i);

              if (path) {
                this.paths.push({
                  element: path,
                  length: path.getTotalLength()
                });
              }
            }

            var pxRatio = container.retina.pixelRatio;
            var scale = options.scale / pxRatio;
            this.dimension.width = parseFloat((_a = svg.getAttribute("width")) !== null && _a !== void 0 ? _a : "0") * scale;
            this.dimension.height = parseFloat((_b = svg.getAttribute("height")) !== null && _b !== void 0 ? _b : "0") * scale;
            var position = (_c = options.position) !== null && _c !== void 0 ? _c : {
              x: 50,
              y: 50
            };
            this.offset = {
              x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,
              y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2
            };
            return parsePaths(this.paths, scale, this.offset);
          }
        }, {
          key: "downloadSvgPath",
          value: function downloadSvgPath(svgUrl, force) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
              var options, url, forceDownload, req;
              return regeneratorRuntime.wrap(function _callee11$(_context14) {
                while (1) {
                  switch (_context14.prev = _context14.next) {
                    case 0:
                      options = this.options;
                      url = svgUrl || options.url;
                      forceDownload = force !== null && force !== void 0 ? force : false;

                      if (!(!url || this.paths !== undefined && !forceDownload)) {
                        _context14.next = 5;
                        break;
                      }

                      return _context14.abrupt("return", this.raw);

                    case 5:
                      _context14.next = 7;
                      return fetch(url);

                    case 7:
                      req = _context14.sent;

                      if (req.ok) {
                        _context14.next = 10;
                        break;
                      }

                      throw new Error("tsParticles Error - Error occurred during polygon mask download");

                    case 10:
                      _context14.t0 = this;
                      _context14.next = 13;
                      return req.text();

                    case 13:
                      _context14.t1 = _context14.sent;
                      _context14.t2 = force;
                      return _context14.abrupt("return", _context14.t0.parseSvgPath.call(_context14.t0, _context14.t1, _context14.t2));

                    case 16:
                    case "end":
                      return _context14.stop();
                  }
                }
              }, _callee11, this);
            }));
          }
        }, {
          key: "drawPoints",
          value: function drawPoints() {
            if (!this.raw) {
              return;
            }

            var _iterator78 = _createForOfIteratorHelper(this.raw),
                _step77;

            try {
              for (_iterator78.s(); !(_step77 = _iterator78.n()).done;) {
                var item = _step77.value;
                this.container.particles.addParticle({
                  x: item.x,
                  y: item.y
                });
              }
            } catch (err) {
              _iterator78.e(err);
            } finally {
              _iterator78.f();
            }
          }
        }, {
          key: "randomPoint",
          value: function randomPoint() {
            var container = this.container;
            var options = this.options;
            var position;

            if (options.type === Enums_1.Type.inline) {
              switch (options.inline.arrangement) {
                case Enums_1.InlineArrangement.randomPoint:
                  position = this.getRandomPoint();
                  break;

                case Enums_1.InlineArrangement.randomLength:
                  position = this.getRandomPointByLength();
                  break;

                case Enums_1.InlineArrangement.equidistant:
                  position = this.getEquidistantPointByIndex(container.particles.count);
                  break;

                case Enums_1.InlineArrangement.onePerPoint:
                case Enums_1.InlineArrangement.perPoint:
                default:
                  position = this.getPointByIndex(container.particles.count);
              }
            } else {
              position = {
                x: Math.random() * container.canvas.size.width,
                y: Math.random() * container.canvas.size.height
              };
            }

            if (this.checkInsidePolygon(position)) {
              return position;
            } else {
              return this.randomPoint();
            }
          }
        }, {
          key: "getRandomPoint",
          value: function getRandomPoint() {
            if (!this.raw || !this.raw.length) {
              throw new Error(Utils_1.Constants.noPolygonDataLoaded);
            }

            var coords = Utils_1.Utils.itemFromArray(this.raw);
            return {
              x: coords.x,
              y: coords.y
            };
          }
        }, {
          key: "getRandomPointByLength",
          value: function getRandomPointByLength() {
            var _a, _b, _c;

            var options = this.options;

            if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {
              throw new Error(Utils_1.Constants.noPolygonDataLoaded);
            }

            var path = Utils_1.Utils.itemFromArray(this.paths);
            var distance = Math.floor(Math.random() * path.length) + 1;
            var point = path.element.getPointAtLength(distance);
            return {
              x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),
              y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)
            };
          }
        }, {
          key: "getEquidistantPointByIndex",
          value: function getEquidistantPointByIndex(index) {
            var _a, _b, _c, _d, _e, _f, _g;

            var options = this.container.options;
            var polygonMaskOptions = this.options;
            if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Utils_1.Constants.noPolygonDataLoaded);
            var offset = 0;
            var point;
            var totalLength = this.paths.reduce(function (tot, path) {
              return tot + path.length;
            }, 0);
            var distance = totalLength / options.particles.number.value;

            var _iterator79 = _createForOfIteratorHelper(this.paths),
                _step78;

            try {
              for (_iterator79.s(); !(_step78 = _iterator79.n()).done;) {
                var path = _step78.value;
                var pathDistance = distance * index - offset;

                if (pathDistance <= path.length) {
                  point = path.element.getPointAtLength(pathDistance);
                  break;
                } else {
                  offset += path.length;
                }
              }
            } catch (err) {
              _iterator79.e(err);
            } finally {
              _iterator79.f();
            }

            return {
              x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),
              y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)
            };
          }
        }, {
          key: "getPointByIndex",
          value: function getPointByIndex(index) {
            if (!this.raw || !this.raw.length) {
              throw new Error(Utils_1.Constants.noPolygonDataLoaded);
            }

            var coords = this.raw[index % this.raw.length];
            return {
              x: coords.x,
              y: coords.y
            };
          }
        }, {
          key: "createPath2D",
          value: function createPath2D() {
            var _this270 = this;

            var _a, _b;

            var options = this.options;

            if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {
              return;
            }

            var _iterator80 = _createForOfIteratorHelper(this.paths),
                _step79;

            try {
              var _loop9 = function _loop9() {
                var path = _step79.value;
                var pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute("d");

                if (pathData) {
                  var path2d = new Path2D(pathData);
                  var matrix = document.createElementNS("http://www.w3.org/2000/svg", "svg").createSVGMatrix();
                  var finalPath = new Path2D();
                  var transform = matrix.scale(options.scale);

                  if (finalPath.addPath) {
                    finalPath.addPath(path2d, transform);
                    path.path2d = finalPath;
                  } else {
                    delete path.path2d;
                  }
                } else {
                  delete path.path2d;
                }

                if (path.path2d || !_this270.raw) {
                  return "continue";
                }

                path.path2d = new Path2D();
                path.path2d.moveTo(_this270.raw[0].x, _this270.raw[0].y);

                _this270.raw.forEach(function (pos, i) {
                  var _a;

                  if (i > 0) {
                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);
                  }
                });

                path.path2d.closePath();
              };

              for (_iterator80.s(); !(_step79 = _iterator80.n()).done;) {
                var _ret3 = _loop9();

                if (_ret3 === "continue") continue;
              }
            } catch (err) {
              _iterator80.e(err);
            } finally {
              _iterator80.f();
            }
          }
        }, {
          key: "initRawData",
          value: function initRawData(force) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
              var options, data, svg, path, namespaces;
              return regeneratorRuntime.wrap(function _callee12$(_context15) {
                while (1) {
                  switch (_context15.prev = _context15.next) {
                    case 0:
                      options = this.options;

                      if (!options.url) {
                        _context15.next = 7;
                        break;
                      }

                      _context15.next = 4;
                      return this.downloadSvgPath(options.url, force);

                    case 4:
                      this.raw = _context15.sent;
                      _context15.next = 8;
                      break;

                    case 7:
                      if (options.data) {
                        data = options.data;

                        if (typeof data !== "string") {
                          path = data.path instanceof Array ? data.path.map(function (t) {
                            return "<path d=\"".concat(t, "\" />");
                          }).join("") : "<path d=\"".concat(data.path, "\" />");
                          namespaces = 'xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"';
                          svg = "<svg ".concat(namespaces, " width=\"").concat(data.size.width, "\" height=\"").concat(data.size.height, "\">").concat(path, "</svg>");
                        } else {
                          svg = data;
                        }

                        this.raw = this.parseSvgPath(svg, force);
                      }

                    case 8:
                      this.createPath2D();

                    case 9:
                    case "end":
                      return _context15.stop();
                  }
                }
              }, _callee12, this);
            }));
          }
        }]);

        return PolygonMaskInstance;
      }();

      exports.PolygonMaskInstance = PolygonMaskInstance;
      /***/
    },

    /***/
    44461:
    /*!********************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Plugins/PolygonMask/PolygonMaskPlugin.js ***!
      \********************************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

      var __exportStar = this && this.__exportStar || function (m, exports) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        }
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.PolygonMaskPlugin = void 0;

      var PolygonMaskInstance_1 = __webpack_require__(
      /*! ./PolygonMaskInstance */
      77370);

      var PolygonMask_1 = __webpack_require__(
      /*! ./Options/Classes/PolygonMask */
      17235);

      var Enums_1 = __webpack_require__(
      /*! ./Enums */
      67177);

      var PolygonMaskPlugin = /*#__PURE__*/function () {
        function PolygonMaskPlugin() {
          _classCallCheck2(this, PolygonMaskPlugin);

          this.id = "polygonMask";
        }

        _createClass2(PolygonMaskPlugin, [{
          key: "getPlugin",
          value: function getPlugin(container) {
            return new PolygonMaskInstance_1.PolygonMaskInstance(container);
          }
        }, {
          key: "needsPlugin",
          value: function needsPlugin(options) {
            var _a, _b, _c;

            return (_b = (_a = options === null || options === void 0 ? void 0 : options.polygon) === null || _a === void 0 ? void 0 : _a.enable) !== null && _b !== void 0 ? _b : ((_c = options === null || options === void 0 ? void 0 : options.polygon) === null || _c === void 0 ? void 0 : _c.type) !== undefined && options.polygon.type !== Enums_1.Type.none;
          }
        }, {
          key: "loadOptions",
          value: function loadOptions(options, source) {
            if (!this.needsPlugin(source)) {
              return;
            }

            var optionsCast = options;
            var polygonOptions = optionsCast.polygon;

            if ((polygonOptions === null || polygonOptions === void 0 ? void 0 : polygonOptions.load) === undefined) {
              optionsCast.polygon = polygonOptions = new PolygonMask_1.PolygonMask();
            }

            polygonOptions.load(source === null || source === void 0 ? void 0 : source.polygon);
          }
        }]);

        return PolygonMaskPlugin;
      }();

      var plugin = new PolygonMaskPlugin();
      exports.PolygonMaskPlugin = plugin;

      __exportStar(__webpack_require__(
      /*! ./Enums */
      67177), exports);
      /***/

    },

    /***/
    51993:
    /*!********************************************************************!*\
      !*** ./node_modules/tsparticles/dist/ShapeDrawers/CircleDrawer.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.CircleDrawer = void 0;

      var CircleDrawer = /*#__PURE__*/function () {
        function CircleDrawer() {
          _classCallCheck2(this, CircleDrawer);
        }

        _createClass2(CircleDrawer, [{
          key: "getSidesCount",
          value: function getSidesCount() {
            return 12;
          }
        }, {
          key: "draw",
          value: function draw(context, particle, radius) {
            context.arc(0, 0, radius, 0, Math.PI * 2, false);
          }
        }]);

        return CircleDrawer;
      }();

      exports.CircleDrawer = CircleDrawer;
      /***/
    },

    /***/
    24704:
    /*!*******************************************************************!*\
      !*** ./node_modules/tsparticles/dist/ShapeDrawers/ImageDrawer.js ***!
      \*******************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function (resolve) {
            resolve(value);
          });
        }

        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }

          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }

          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }

          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ImageDrawer = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../Utils */
      57711);

      var Enums_1 = __webpack_require__(
      /*! ../Enums */
      9717);

      var ImageDrawer = /*#__PURE__*/function () {
        function ImageDrawer() {
          _classCallCheck2(this, ImageDrawer);

          this.images = [];
        }

        _createClass2(ImageDrawer, [{
          key: "getSidesCount",
          value: function getSidesCount() {
            return 12;
          }
        }, {
          key: "getImages",
          value: function getImages(container) {
            var containerImages = this.images.filter(function (t) {
              return t.id === container.id;
            });

            if (!containerImages.length) {
              this.images.push({
                id: container.id,
                images: []
              });
              return this.getImages(container);
            } else {
              return containerImages[0];
            }
          }
        }, {
          key: "addImage",
          value: function addImage(container, image) {
            var containerImages = this.getImages(container);
            containerImages === null || containerImages === void 0 ? void 0 : containerImages.images.push(image);
          }
        }, {
          key: "init",
          value: function init(container) {
            var _a;

            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
              var options, shapeOptions, imageOptions, _iterator81, _step80, optionsImage;

              return regeneratorRuntime.wrap(function _callee13$(_context16) {
                while (1) {
                  switch (_context16.prev = _context16.next) {
                    case 0:
                      options = container.options;
                      shapeOptions = options.particles.shape;

                      if (!(!Utils_1.Utils.isInArray(Enums_1.ShapeType.image, shapeOptions.type) && !Utils_1.Utils.isInArray(Enums_1.ShapeType.images, shapeOptions.type))) {
                        _context16.next = 4;
                        break;
                      }

                      return _context16.abrupt("return");

                    case 4:
                      imageOptions = (_a = shapeOptions.options[Enums_1.ShapeType.images]) !== null && _a !== void 0 ? _a : shapeOptions.options[Enums_1.ShapeType.image];

                      if (!(imageOptions instanceof Array)) {
                        _context16.next = 25;
                        break;
                      }

                      _iterator81 = _createForOfIteratorHelper(imageOptions);
                      _context16.prev = 7;

                      _iterator81.s();

                    case 9:
                      if ((_step80 = _iterator81.n()).done) {
                        _context16.next = 15;
                        break;
                      }

                      optionsImage = _step80.value;
                      _context16.next = 13;
                      return this.loadImageShape(container, optionsImage);

                    case 13:
                      _context16.next = 9;
                      break;

                    case 15:
                      _context16.next = 20;
                      break;

                    case 17:
                      _context16.prev = 17;
                      _context16.t0 = _context16["catch"](7);

                      _iterator81.e(_context16.t0);

                    case 20:
                      _context16.prev = 20;

                      _iterator81.f();

                      return _context16.finish(20);

                    case 23:
                      _context16.next = 27;
                      break;

                    case 25:
                      _context16.next = 27;
                      return this.loadImageShape(container, imageOptions);

                    case 27:
                    case "end":
                      return _context16.stop();
                  }
                }
              }, _callee13, this, [[7, 17, 20, 23]]);
            }));
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.images = [];
          }
        }, {
          key: "loadImageShape",
          value: function loadImageShape(container, imageShape) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
              var image;
              return regeneratorRuntime.wrap(function _callee14$(_context17) {
                while (1) {
                  switch (_context17.prev = _context17.next) {
                    case 0:
                      _context17.prev = 0;

                      if (!imageShape.replaceColor) {
                        _context17.next = 7;
                        break;
                      }

                      _context17.next = 4;
                      return Utils_1.Utils.downloadSvgImage(imageShape.src);

                    case 4:
                      _context17.t0 = _context17.sent;
                      _context17.next = 10;
                      break;

                    case 7:
                      _context17.next = 9;
                      return Utils_1.Utils.loadImage(imageShape.src);

                    case 9:
                      _context17.t0 = _context17.sent;

                    case 10:
                      image = _context17.t0;
                      this.addImage(container, image);
                      _context17.next = 17;
                      break;

                    case 14:
                      _context17.prev = 14;
                      _context17.t1 = _context17["catch"](0);
                      console.warn("tsParticles error - ".concat(imageShape.src, " not found"));

                    case 17:
                    case "end":
                      return _context17.stop();
                  }
                }
              }, _callee14, this, [[0, 14]]);
            }));
          }
        }, {
          key: "draw",
          value: function draw(context, particle, radius, opacity) {
            var _a, _b;

            if (!context) {
              return;
            }

            var image = particle.image;
            var element = (_a = image === null || image === void 0 ? void 0 : image.data) === null || _a === void 0 ? void 0 : _a.element;

            if (!element) {
              return;
            }

            var ratio = (_b = image === null || image === void 0 ? void 0 : image.ratio) !== null && _b !== void 0 ? _b : 1;
            var pos = {
              x: -radius,
              y: -radius
            };

            if (!(image === null || image === void 0 ? void 0 : image.data.svgData) || !(image === null || image === void 0 ? void 0 : image.replaceColor)) {
              context.globalAlpha = opacity;
            }

            context.drawImage(element, pos.x, pos.y, radius * 2, radius * 2 / ratio);

            if (!(image === null || image === void 0 ? void 0 : image.data.svgData) || !(image === null || image === void 0 ? void 0 : image.replaceColor)) {
              context.globalAlpha = 1;
            }
          }
        }]);

        return ImageDrawer;
      }();

      exports.ImageDrawer = ImageDrawer;
      /***/
    },

    /***/
    66779:
    /*!******************************************************************!*\
      !*** ./node_modules/tsparticles/dist/ShapeDrawers/LineDrawer.js ***!
      \******************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.LineDrawer = void 0;

      var LineDrawer = /*#__PURE__*/function () {
        function LineDrawer() {
          _classCallCheck2(this, LineDrawer);
        }

        _createClass2(LineDrawer, [{
          key: "getSidesCount",
          value: function getSidesCount() {
            return 1;
          }
        }, {
          key: "draw",
          value: function draw(context, particle, radius) {
            context.moveTo(0, -radius / 2);
            context.lineTo(0, radius / 2);
          }
        }]);

        return LineDrawer;
      }();

      exports.LineDrawer = LineDrawer;
      /***/
    },

    /***/
    85777:
    /*!*********************************************************************!*\
      !*** ./node_modules/tsparticles/dist/ShapeDrawers/PolygonDrawer.js ***!
      \*********************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.PolygonDrawer = void 0;

      var PolygonDrawerBase_1 = __webpack_require__(
      /*! ./PolygonDrawerBase */
      57103);

      var PolygonDrawer = /*#__PURE__*/function (_PolygonDrawerBase_1$) {
        _inherits(PolygonDrawer, _PolygonDrawerBase_1$);

        var _super111 = _createSuper(PolygonDrawer);

        function PolygonDrawer() {
          _classCallCheck2(this, PolygonDrawer);

          return _super111.apply(this, arguments);
        }

        _createClass2(PolygonDrawer, [{
          key: "getSidesData",
          value: function getSidesData(particle, radius) {
            var _a, _b;

            var polygon = particle.shapeData;
            var sides = (_b = (_a = polygon === null || polygon === void 0 ? void 0 : polygon.sides) !== null && _a !== void 0 ? _a : polygon === null || polygon === void 0 ? void 0 : polygon.nb_sides) !== null && _b !== void 0 ? _b : 5;
            return {
              count: {
                denominator: 1,
                numerator: sides
              },
              length: radius * 2.66 / (sides / 3)
            };
          }
        }, {
          key: "getCenter",
          value: function getCenter(particle, radius) {
            var sides = this.getSidesCount(particle);
            return {
              x: -radius / (sides / 3.5),
              y: -radius / (2.66 / 3.5)
            };
          }
        }]);

        return PolygonDrawer;
      }(PolygonDrawerBase_1.PolygonDrawerBase);

      exports.PolygonDrawer = PolygonDrawer;
      /***/
    },

    /***/
    57103:
    /*!*************************************************************************!*\
      !*** ./node_modules/tsparticles/dist/ShapeDrawers/PolygonDrawerBase.js ***!
      \*************************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.PolygonDrawerBase = void 0;

      var PolygonDrawerBase = /*#__PURE__*/function () {
        function PolygonDrawerBase() {
          _classCallCheck2(this, PolygonDrawerBase);
        }

        _createClass2(PolygonDrawerBase, [{
          key: "getSidesCount",
          value: function getSidesCount(particle) {
            var _a, _b;

            var polygon = particle.shapeData;
            return (_b = (_a = polygon === null || polygon === void 0 ? void 0 : polygon.sides) !== null && _a !== void 0 ? _a : polygon === null || polygon === void 0 ? void 0 : polygon.nb_sides) !== null && _b !== void 0 ? _b : 5;
          }
        }, {
          key: "draw",
          value: function draw(context, particle, radius) {
            var start = this.getCenter(particle, radius);
            var side = this.getSidesData(particle, radius);
            var sideCount = side.count.numerator * side.count.denominator;
            var decimalSides = side.count.numerator / side.count.denominator;
            var interiorAngleDegrees = 180 * (decimalSides - 2) / decimalSides;
            var interiorAngle = Math.PI - Math.PI * interiorAngleDegrees / 180;

            if (!context) {
              return;
            }

            context.beginPath();
            context.translate(start.x, start.y);
            context.moveTo(0, 0);

            for (var i = 0; i < sideCount; i++) {
              context.lineTo(side.length, 0);
              context.translate(side.length, 0);
              context.rotate(interiorAngle);
            }
          }
        }]);

        return PolygonDrawerBase;
      }();

      exports.PolygonDrawerBase = PolygonDrawerBase;
      /***/
    },

    /***/
    11979:
    /*!********************************************************************!*\
      !*** ./node_modules/tsparticles/dist/ShapeDrawers/SquareDrawer.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SquareDrawer = void 0;

      var SquareDrawer = /*#__PURE__*/function () {
        function SquareDrawer() {
          _classCallCheck2(this, SquareDrawer);
        }

        _createClass2(SquareDrawer, [{
          key: "getSidesCount",
          value: function getSidesCount() {
            return 4;
          }
        }, {
          key: "draw",
          value: function draw(context, particle, radius) {
            context.rect(-radius, -radius, radius * 2, radius * 2);
          }
        }]);

        return SquareDrawer;
      }();

      exports.SquareDrawer = SquareDrawer;
      /***/
    },

    /***/
    27069:
    /*!******************************************************************!*\
      !*** ./node_modules/tsparticles/dist/ShapeDrawers/StarDrawer.js ***!
      \******************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.StarDrawer = void 0;

      var StarDrawer = /*#__PURE__*/function () {
        function StarDrawer() {
          _classCallCheck2(this, StarDrawer);
        }

        _createClass2(StarDrawer, [{
          key: "getSidesCount",
          value: function getSidesCount(particle) {
            var _a, _b;

            var star = particle.shapeData;
            return (_b = (_a = star === null || star === void 0 ? void 0 : star.sides) !== null && _a !== void 0 ? _a : star === null || star === void 0 ? void 0 : star.nb_sides) !== null && _b !== void 0 ? _b : 5;
          }
        }, {
          key: "draw",
          value: function draw(context, particle, radius) {
            var _a;

            var star = particle.shapeData;
            var sides = this.getSidesCount(particle);
            var inset = (_a = star === null || star === void 0 ? void 0 : star.inset) !== null && _a !== void 0 ? _a : 2;
            context.moveTo(0, 0 - radius);

            for (var i = 0; i < sides; i++) {
              context.rotate(Math.PI / sides);
              context.lineTo(0, 0 - radius * inset);
              context.rotate(Math.PI / sides);
              context.lineTo(0, 0 - radius);
            }
          }
        }]);

        return StarDrawer;
      }();

      exports.StarDrawer = StarDrawer;
      /***/
    },

    /***/
    12075:
    /*!******************************************************************!*\
      !*** ./node_modules/tsparticles/dist/ShapeDrawers/TextDrawer.js ***!
      \******************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function (resolve) {
            resolve(value);
          });
        }

        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }

          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }

          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }

          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.TextDrawer = void 0;

      var Utils_1 = __webpack_require__(
      /*! ../Utils */
      57711);

      var Enums_1 = __webpack_require__(
      /*! ../Enums */
      9717);

      var TextDrawer = /*#__PURE__*/function () {
        function TextDrawer() {
          _classCallCheck2(this, TextDrawer);
        }

        _createClass2(TextDrawer, [{
          key: "getSidesCount",
          value: function getSidesCount() {
            return 12;
          }
        }, {
          key: "init",
          value: function init(container) {
            var _a;

            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
              var options, shapeOptions, _iterator82, _step81, character;

              return regeneratorRuntime.wrap(function _callee15$(_context18) {
                while (1) {
                  switch (_context18.prev = _context18.next) {
                    case 0:
                      options = container.options;

                      if (!(Utils_1.Utils.isInArray(Enums_1.ShapeType["char"], options.particles.shape.type) || Utils_1.Utils.isInArray(Enums_1.ShapeType.character, options.particles.shape.type))) {
                        _context18.next = 26;
                        break;
                      }

                      shapeOptions = (_a = options.particles.shape.options[Enums_1.ShapeType.character]) !== null && _a !== void 0 ? _a : options.particles.shape.options[Enums_1.ShapeType["char"]];

                      if (!(shapeOptions instanceof Array)) {
                        _context18.next = 23;
                        break;
                      }

                      _iterator82 = _createForOfIteratorHelper(shapeOptions);
                      _context18.prev = 5;

                      _iterator82.s();

                    case 7:
                      if ((_step81 = _iterator82.n()).done) {
                        _context18.next = 13;
                        break;
                      }

                      character = _step81.value;
                      _context18.next = 11;
                      return Utils_1.Utils.loadFont(character);

                    case 11:
                      _context18.next = 7;
                      break;

                    case 13:
                      _context18.next = 18;
                      break;

                    case 15:
                      _context18.prev = 15;
                      _context18.t0 = _context18["catch"](5);

                      _iterator82.e(_context18.t0);

                    case 18:
                      _context18.prev = 18;

                      _iterator82.f();

                      return _context18.finish(18);

                    case 21:
                      _context18.next = 26;
                      break;

                    case 23:
                      if (!(shapeOptions !== undefined)) {
                        _context18.next = 26;
                        break;
                      }

                      _context18.next = 26;
                      return Utils_1.Utils.loadFont(shapeOptions);

                    case 26:
                    case "end":
                      return _context18.stop();
                  }
                }
              }, _callee15, null, [[5, 15, 18, 21]]);
            }));
          }
        }, {
          key: "draw",
          value: function draw(context, particle, radius) {
            var character = particle.shapeData;

            if (character === undefined) {
              return;
            }

            var textData = character.value;

            if (textData === undefined) {
              return;
            }

            var textParticle = particle;

            if (textParticle.text === undefined) {
              textParticle.text = textData instanceof Array ? Utils_1.Utils.itemFromArray(textData, particle.randomIndexData) : textData;
            }

            var text = textParticle.text;
            var style = character.style;
            var weight = character.weight;
            var size = Math.round(radius) * 2;
            var font = character.font;
            var fill = particle.fill;
            var offsetX = text.length * radius / 2;
            context.font = "".concat(style, " ").concat(weight, " ").concat(size, "px \"").concat(font, "\"");
            var pos = {
              x: -offsetX,
              y: radius / 2
            };

            if (fill) {
              context.fillText(text, pos.x, pos.y);
            } else {
              context.strokeText(text, pos.x, pos.y);
            }
          }
        }]);

        return TextDrawer;
      }();

      exports.TextDrawer = TextDrawer;
      /***/
    },

    /***/
    11130:
    /*!**********************************************************************!*\
      !*** ./node_modules/tsparticles/dist/ShapeDrawers/TriangleDrawer.js ***!
      \**********************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.TriangleDrawer = void 0;

      var PolygonDrawerBase_1 = __webpack_require__(
      /*! ./PolygonDrawerBase */
      57103);

      var TriangleDrawer = /*#__PURE__*/function (_PolygonDrawerBase_1$2) {
        _inherits(TriangleDrawer, _PolygonDrawerBase_1$2);

        var _super112 = _createSuper(TriangleDrawer);

        function TriangleDrawer() {
          _classCallCheck2(this, TriangleDrawer);

          return _super112.apply(this, arguments);
        }

        _createClass2(TriangleDrawer, [{
          key: "getSidesCount",
          value: function getSidesCount() {
            return 3;
          }
        }, {
          key: "getSidesData",
          value: function getSidesData(particle, radius) {
            return {
              count: {
                denominator: 2,
                numerator: 3
              },
              length: radius * 2
            };
          }
        }, {
          key: "getCenter",
          value: function getCenter(particle, radius) {
            return {
              x: -radius,
              y: radius / 1.66
            };
          }
        }]);

        return TriangleDrawer;
      }(PolygonDrawerBase_1.PolygonDrawerBase);

      exports.TriangleDrawer = TriangleDrawer;
      /***/
    },

    /***/
    9806:
    /*!*****************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Types/RecursivePartial.js ***!
      \*****************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      /***/
    },

    /***/
    74581:
    /*!**********************************************************!*\
      !*** ./node_modules/tsparticles/dist/Types/ShapeData.js ***!
      \**********************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      /***/
    },

    /***/
    60207:
    /*!*********************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Types/ShapeDrawerFunctions.js ***!
      \*********************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      /***/
    },

    /***/
    12472:
    /*!*****************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Types/SingleOrMultiple.js ***!
      \*****************************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      /***/
    },

    /***/
    76326:
    /*!******************************************************!*\
      !*** ./node_modules/tsparticles/dist/Types/index.js ***!
      \******************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

      var __exportStar = this && this.__exportStar || function (m, exports) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        }
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      __exportStar(__webpack_require__(
      /*! ./RecursivePartial */
      9806), exports);

      __exportStar(__webpack_require__(
      /*! ./ShapeData */
      74581), exports);

      __exportStar(__webpack_require__(
      /*! ./ShapeDrawerFunctions */
      60207), exports);

      __exportStar(__webpack_require__(
      /*! ./SingleOrMultiple */
      12472), exports);
      /***/

    },

    /***/
    65844:
    /*!************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Utils/CanvasUtils.js ***!
      \************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.CanvasUtils = void 0;

      var ColorUtils_1 = __webpack_require__(
      /*! ./ColorUtils */
      830);

      var NumberUtils_1 = __webpack_require__(
      /*! ./NumberUtils */
      27633);

      function drawLine(context, begin, end) {
        context.beginPath();
        context.moveTo(begin.x, begin.y);
        context.lineTo(end.x, end.y);
        context.closePath();
      }

      function drawTriangle(context, p1, p2, p3) {
        context.beginPath();
        context.moveTo(p1.x, p1.y);
        context.lineTo(p2.x, p2.y);
        context.lineTo(p3.x, p3.y);
        context.closePath();
      }

      var CanvasUtils = /*#__PURE__*/function () {
        function CanvasUtils() {
          _classCallCheck2(this, CanvasUtils);
        }

        _createClass2(CanvasUtils, null, [{
          key: "paintBase",
          value: function paintBase(context, dimension, baseColor) {
            context.save();
            context.fillStyle = baseColor !== null && baseColor !== void 0 ? baseColor : "rgba(0,0,0,0)";
            context.fillRect(0, 0, dimension.width, dimension.height);
            context.restore();
          }
        }, {
          key: "clear",
          value: function clear(context, dimension) {
            context.clearRect(0, 0, dimension.width, dimension.height);
          }
        }, {
          key: "drawLinkLine",
          value: function drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, composite, colorLine, opacity, shadow) {
            var drawn = false;

            if (NumberUtils_1.NumberUtils.getDistance(begin, end) <= maxDistance) {
              drawLine(context, begin, end);
              drawn = true;
            } else if (warp) {
              var pi1;
              var pi2;
              var endNE = {
                x: end.x - canvasSize.width,
                y: end.y
              };
              var d1 = NumberUtils_1.NumberUtils.getDistances(begin, endNE);

              if (d1.distance <= maxDistance) {
                var yi = begin.y - d1.dy / d1.dx * begin.x;
                pi1 = {
                  x: 0,
                  y: yi
                };
                pi2 = {
                  x: canvasSize.width,
                  y: yi
                };
              } else {
                var endSW = {
                  x: end.x,
                  y: end.y - canvasSize.height
                };
                var d2 = NumberUtils_1.NumberUtils.getDistances(begin, endSW);

                if (d2.distance <= maxDistance) {
                  var _yi = begin.y - d2.dy / d2.dx * begin.x;

                  var xi = -_yi / (d2.dy / d2.dx);
                  pi1 = {
                    x: xi,
                    y: 0
                  };
                  pi2 = {
                    x: xi,
                    y: canvasSize.height
                  };
                } else {
                  var endSE = {
                    x: end.x - canvasSize.width,
                    y: end.y - canvasSize.height
                  };
                  var d3 = NumberUtils_1.NumberUtils.getDistances(begin, endSE);

                  if (d3.distance <= maxDistance) {
                    var _yi2 = begin.y - d3.dy / d3.dx * begin.x;

                    var _xi = -_yi2 / (d3.dy / d3.dx);

                    pi1 = {
                      x: _xi,
                      y: _yi2
                    };
                    pi2 = {
                      x: pi1.x + canvasSize.width,
                      y: pi1.y + canvasSize.height
                    };
                  }
                }
              }

              if (pi1 && pi2) {
                drawLine(context, begin, pi1);
                drawLine(context, end, pi2);
                drawn = true;
              }
            }

            if (!drawn) {
              return;
            }

            context.lineWidth = width;

            if (backgroundMask) {
              context.globalCompositeOperation = composite;
            }

            context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);

            if (shadow.enable) {
              var shadowColor = ColorUtils_1.ColorUtils.colorToRgb(shadow.color);

              if (shadowColor) {
                context.shadowBlur = shadow.blur;
                context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);
              }
            }

            context.stroke();
          }
        }, {
          key: "drawLinkTriangle",
          value: function drawLinkTriangle(context, pos1, pos2, pos3, backgroundMask, composite, colorTriangle, opacityTriangle) {
            drawTriangle(context, pos1, pos2, pos3);

            if (backgroundMask) {
              context.globalCompositeOperation = composite;
            }

            context.fillStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorTriangle, opacityTriangle);
            context.fill();
          }
        }, {
          key: "drawConnectLine",
          value: function drawConnectLine(context, width, lineStyle, begin, end) {
            context.save();
            drawLine(context, begin, end);
            context.lineWidth = width;
            context.strokeStyle = lineStyle;
            context.stroke();
            context.restore();
          }
        }, {
          key: "gradient",
          value: function gradient(context, p1, p2, opacity) {
            var gradStop = Math.floor(p2.getRadius() / p1.getRadius());
            var color1 = p1.getFillColor();
            var color2 = p2.getFillColor();

            if (!color1 || !color2) {
              return;
            }

            var sourcePos = p1.getPosition();
            var destPos = p2.getPosition();
            var midRgb = ColorUtils_1.ColorUtils.mix(color1, color2, p1.getRadius(), p2.getRadius());
            var grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);
            grad.addColorStop(0, ColorUtils_1.ColorUtils.getStyleFromHsl(color1, opacity));
            grad.addColorStop(gradStop > 1 ? 1 : gradStop, ColorUtils_1.ColorUtils.getStyleFromRgb(midRgb, opacity));
            grad.addColorStop(1, ColorUtils_1.ColorUtils.getStyleFromHsl(color2, opacity));
            return grad;
          }
        }, {
          key: "drawGrabLine",
          value: function drawGrabLine(context, width, begin, end, colorLine, opacity) {
            context.save();
            drawLine(context, begin, end);
            context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);
            context.lineWidth = width;
            context.stroke();
            context.restore();
          }
        }, {
          key: "drawLight",
          value: function drawLight(container, context, mousePos) {
            var lightOptions = container.options.interactivity.modes.light.area;
            context.beginPath();
            context.arc(mousePos.x, mousePos.y, lightOptions.radius, 0, 2 * Math.PI);
            var gradientAmbientLight = context.createRadialGradient(mousePos.x, mousePos.y, 0, mousePos.x, mousePos.y, lightOptions.radius);
            var gradient = lightOptions.gradient;
            var gradientRgb = {
              start: ColorUtils_1.ColorUtils.colorToRgb(gradient.start),
              stop: ColorUtils_1.ColorUtils.colorToRgb(gradient.stop)
            };

            if (!gradientRgb.start || !gradientRgb.stop) {
              return;
            }

            gradientAmbientLight.addColorStop(0, ColorUtils_1.ColorUtils.getStyleFromRgb(gradientRgb.start));
            gradientAmbientLight.addColorStop(1, ColorUtils_1.ColorUtils.getStyleFromRgb(gradientRgb.stop));
            context.fillStyle = gradientAmbientLight;
            context.fill();
          }
        }, {
          key: "drawParticleShadow",
          value: function drawParticleShadow(container, context, particle, mousePos) {
            var pos = particle.getPosition();
            var shadowOptions = container.options.interactivity.modes.light.shadow;
            context.save();
            var radius = particle.getRadius();
            var sides = particle.sides;
            var full = Math.PI * 2 / sides;
            var angle = -particle.rotate.value + Math.PI / 4;
            var factor = 1;
            var dots = [];

            for (var i = 0; i < sides; i++) {
              dots.push({
                x: pos.x + radius * Math.sin(angle + full * i) * factor,
                y: pos.y + radius * Math.cos(angle + full * i) * factor
              });
            }

            var points = [];
            var shadowLength = shadowOptions.length;

            for (var _i34 = 0, _dots = dots; _i34 < _dots.length; _i34++) {
              var dot = _dots[_i34];
              var dotAngle = Math.atan2(mousePos.y - dot.y, mousePos.x - dot.x);
              var endX = dot.x + shadowLength * Math.sin(-dotAngle - Math.PI / 2);
              var endY = dot.y + shadowLength * Math.cos(-dotAngle - Math.PI / 2);
              points.push({
                endX: endX,
                endY: endY,
                startX: dot.x,
                startY: dot.y
              });
            }

            var shadowRgb = ColorUtils_1.ColorUtils.colorToRgb(shadowOptions.color);

            if (!shadowRgb) {
              return;
            }

            var shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowRgb);

            for (var _i35 = points.length - 1; _i35 >= 0; _i35--) {
              var n = _i35 == points.length - 1 ? 0 : _i35 + 1;
              context.beginPath();
              context.moveTo(points[_i35].startX, points[_i35].startY);
              context.lineTo(points[n].startX, points[n].startY);
              context.lineTo(points[n].endX, points[n].endY);
              context.lineTo(points[_i35].endX, points[_i35].endY);
              context.fillStyle = shadowColor;
              context.fill();
            }

            context.restore();
          }
        }, {
          key: "drawParticle",
          value: function drawParticle(container, context, particle, delta, fillColorValue, strokeColorValue, backgroundMask, composite, radius, opacity, shadow) {
            var pos = particle.getPosition();
            context.save();
            context.translate(pos.x, pos.y);
            context.beginPath();
            var angle = particle.rotate.value + (particle.particlesOptions.rotate.path ? particle.pathAngle : 0);

            if (angle !== 0) {
              context.rotate(angle);
            }

            if (backgroundMask) {
              context.globalCompositeOperation = composite;
            }

            var shadowColor = particle.shadowColor;

            if (shadow.enable && shadowColor) {
              context.shadowBlur = shadow.blur;
              context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);
              context.shadowOffsetX = shadow.offset.x;
              context.shadowOffsetY = shadow.offset.y;
            }

            if (fillColorValue) {
              context.fillStyle = fillColorValue;
            }

            var stroke = particle.stroke;
            context.lineWidth = particle.strokeWidth;

            if (strokeColorValue) {
              context.strokeStyle = strokeColorValue;
            }

            CanvasUtils.drawShape(container, context, particle, radius, opacity, delta);

            if (stroke.width > 0) {
              context.stroke();
            }

            if (particle.close) {
              context.closePath();
            }

            if (particle.fill) {
              context.fill();
            }

            context.restore();
            context.save();
            context.translate(pos.x, pos.y);

            if (angle !== 0) {
              context.rotate(angle);
            }

            if (backgroundMask) {
              context.globalCompositeOperation = composite;
            }

            CanvasUtils.drawShapeAfterEffect(container, context, particle, radius, opacity, delta);
            context.restore();
          }
        }, {
          key: "drawShape",
          value: function drawShape(container, context, particle, radius, opacity, delta) {
            if (!particle.shape) {
              return;
            }

            var drawer = container.drawers.get(particle.shape);

            if (!drawer) {
              return;
            }

            drawer.draw(context, particle, radius, opacity, delta.value, container.retina.pixelRatio);
          }
        }, {
          key: "drawShapeAfterEffect",
          value: function drawShapeAfterEffect(container, context, particle, radius, opacity, delta) {
            if (!particle.shape) {
              return;
            }

            var drawer = container.drawers.get(particle.shape);

            if (!(drawer === null || drawer === void 0 ? void 0 : drawer.afterEffect)) {
              return;
            }

            drawer.afterEffect(context, particle, radius, opacity, delta.value, container.retina.pixelRatio);
          }
        }, {
          key: "drawPlugin",
          value: function drawPlugin(context, plugin, delta) {
            if (plugin.draw !== undefined) {
              context.save();
              plugin.draw(context, delta);
              context.restore();
            }
          }
        }]);

        return CanvasUtils;
      }();

      exports.CanvasUtils = CanvasUtils;
      /***/
    },

    /***/
    18117:
    /*!*******************************************************!*\
      !*** ./node_modules/tsparticles/dist/Utils/Circle.js ***!
      \*******************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Circle = void 0;

      var Range_1 = __webpack_require__(
      /*! ./Range */
      63406);

      var Circle = /*#__PURE__*/function (_Range_1$Range) {
        _inherits(Circle, _Range_1$Range);

        var _super113 = _createSuper(Circle);

        function Circle(x, y, radius) {
          var _this271;

          _classCallCheck2(this, Circle);

          _this271 = _super113.call(this, x, y);
          _this271.radius = radius;
          return _this271;
        }

        _createClass2(Circle, [{
          key: "contains",
          value: function contains(point) {
            var d = Math.pow(point.x - this.position.x, 2) + Math.pow(point.y - this.position.y, 2);
            return d <= this.radius * this.radius;
          }
        }, {
          key: "intersects",
          value: function intersects(range) {
            var rect = range;
            var circle = range;
            var pos1 = this.position;
            var pos2 = range.position;
            var xDist = Math.abs(pos2.x - pos1.x);
            var yDist = Math.abs(pos2.y - pos1.y);
            var r = this.radius;

            if (circle.radius !== undefined) {
              var rSum = r + circle.radius;
              var dist = Math.sqrt(xDist * xDist + yDist + yDist);
              return rSum > dist;
            } else if (rect.size !== undefined) {
              var w = rect.size.width;
              var h = rect.size.height;
              var edges = Math.pow(xDist - w, 2) + Math.pow(yDist - h, 2);

              if (xDist > r + w || yDist > r + h) {
                return false;
              }

              if (xDist <= w || yDist <= h) {
                return true;
              }

              return edges <= r * r;
            }

            return false;
          }
        }]);

        return Circle;
      }(Range_1.Range);

      exports.Circle = Circle;
      /***/
    },

    /***/
    5299:
    /*!***********************************************************!*\
      !*** ./node_modules/tsparticles/dist/Utils/CircleWarp.js ***!
      \***********************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.CircleWarp = void 0;

      var Rectangle_1 = __webpack_require__(
      /*! ./Rectangle */
      10774);

      var Circle_1 = __webpack_require__(
      /*! ./Circle */
      18117);

      var CircleWarp = /*#__PURE__*/function (_Circle_1$Circle) {
        _inherits(CircleWarp, _Circle_1$Circle);

        var _super114 = _createSuper(CircleWarp);

        function CircleWarp(x, y, radius, canvasSize) {
          var _this272;

          _classCallCheck2(this, CircleWarp);

          _this272 = _super114.call(this, x, y, radius);
          _this272.canvasSize = canvasSize;
          _this272.canvasSize = {
            height: canvasSize.height,
            width: canvasSize.width
          };
          return _this272;
        }

        _createClass2(CircleWarp, [{
          key: "contains",
          value: function contains(point) {
            if (_get(_getPrototypeOf(CircleWarp.prototype), "contains", this).call(this, point)) {
              return true;
            }

            var posNE = {
              x: point.x - this.canvasSize.width,
              y: point.y
            };

            if (_get(_getPrototypeOf(CircleWarp.prototype), "contains", this).call(this, posNE)) {
              return true;
            }

            var posSE = {
              x: point.x - this.canvasSize.width,
              y: point.y - this.canvasSize.height
            };

            if (_get(_getPrototypeOf(CircleWarp.prototype), "contains", this).call(this, posSE)) {
              return true;
            }

            var posSW = {
              x: point.x,
              y: point.y - this.canvasSize.height
            };
            return _get(_getPrototypeOf(CircleWarp.prototype), "contains", this).call(this, posSW);
          }
        }, {
          key: "intersects",
          value: function intersects(range) {
            if (_get(_getPrototypeOf(CircleWarp.prototype), "intersects", this).call(this, range)) {
              return true;
            }

            var rect = range;
            var circle = range;
            var newPos = {
              x: range.position.x - this.canvasSize.width,
              y: range.position.y - this.canvasSize.height
            };

            if (circle.radius !== undefined) {
              var biggerCircle = new Circle_1.Circle(newPos.x, newPos.y, circle.radius * 2);
              return _get(_getPrototypeOf(CircleWarp.prototype), "intersects", this).call(this, biggerCircle);
            } else if (rect.size !== undefined) {
              var rectSW = new Rectangle_1.Rectangle(newPos.x, newPos.y, rect.size.width * 2, rect.size.height * 2);
              return _get(_getPrototypeOf(CircleWarp.prototype), "intersects", this).call(this, rectSW);
            }

            return false;
          }
        }]);

        return CircleWarp;
      }(Circle_1.Circle);

      exports.CircleWarp = CircleWarp;
      /***/
    },

    /***/
    830:
    /*!***********************************************************!*\
      !*** ./node_modules/tsparticles/dist/Utils/ColorUtils.js ***!
      \***********************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ColorUtils = void 0;

      var Utils_1 = __webpack_require__(
      /*! ./Utils */
      66485);

      var Constants_1 = __webpack_require__(
      /*! ./Constants */
      74222);

      var NumberUtils_1 = __webpack_require__(
      /*! ./NumberUtils */
      27633);

      function hue2rgb(p, q, t) {
        var tCalc = t;

        if (tCalc < 0) {
          tCalc += 1;
        }

        if (tCalc > 1) {
          tCalc -= 1;
        }

        if (tCalc < 1 / 6) {
          return p + (q - p) * 6 * tCalc;
        }

        if (tCalc < 1 / 2) {
          return q;
        }

        if (tCalc < 2 / 3) {
          return p + (q - p) * (2 / 3 - tCalc) * 6;
        }

        return p;
      }

      function stringToRgba(input) {
        if (input.startsWith("rgb")) {
          var regex = /rgba?\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([\d.]+)\s*)?\)/i;
          var result = regex.exec(input);
          return result ? {
            a: result.length > 4 ? parseFloat(result[5]) : 1,
            b: parseInt(result[3], 10),
            g: parseInt(result[2], 10),
            r: parseInt(result[1], 10)
          } : undefined;
        } else if (input.startsWith("hsl")) {
          var _regex = /hsla?\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([\d.]+)\s*)?\)/i;

          var _result = _regex.exec(input);

          return _result ? ColorUtils.hslaToRgba({
            a: _result.length > 4 ? parseFloat(_result[5]) : 1,
            h: parseInt(_result[1], 10),
            l: parseInt(_result[3], 10),
            s: parseInt(_result[2], 10)
          }) : undefined;
        } else if (input.startsWith("hsv")) {
          var _regex2 = /hsva?\(\s*(\d+)°\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([\d.]+)\s*)?\)/i;

          var _result2 = _regex2.exec(input);

          return _result2 ? ColorUtils.hsvaToRgba({
            a: _result2.length > 4 ? parseFloat(_result2[5]) : 1,
            h: parseInt(_result2[1], 10),
            s: parseInt(_result2[2], 10),
            v: parseInt(_result2[3], 10)
          }) : undefined;
        } else {
          var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i;
          var hexFixed = input.replace(shorthandRegex, function (_m, r, g, b, a) {
            return r + r + g + g + b + b + (a !== undefined ? a + a : "");
          });
          var _regex3 = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i;

          var _result3 = _regex3.exec(hexFixed);

          return _result3 ? {
            a: _result3[4] !== undefined ? parseInt(_result3[4], 16) / 0xff : 1,
            b: parseInt(_result3[3], 16),
            g: parseInt(_result3[2], 16),
            r: parseInt(_result3[1], 16)
          } : undefined;
        }
      }

      var ColorUtils = /*#__PURE__*/function () {
        function ColorUtils() {
          _classCallCheck2(this, ColorUtils);
        }

        _createClass2(ColorUtils, null, [{
          key: "colorToRgb",
          value: function colorToRgb(input, index) {
            var useIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            var _a, _b, _c;

            if (input === undefined) {
              return;
            }

            var color = typeof input === "string" ? {
              value: input
            } : input;
            var res;

            if (typeof color.value === "string") {
              if (color.value === Constants_1.Constants.randomColorValue) {
                res = ColorUtils.getRandomRgbColor();
              } else {
                res = ColorUtils.stringToRgb(color.value);
              }
            } else {
              if (color.value instanceof Array) {
                var colorSelected = Utils_1.Utils.itemFromArray(color.value, index, useIndex);
                res = ColorUtils.colorToRgb({
                  value: colorSelected
                });
              } else {
                var colorValue = color.value;
                var rgbColor = (_a = colorValue.rgb) !== null && _a !== void 0 ? _a : color.value;

                if (rgbColor.r !== undefined) {
                  res = rgbColor;
                } else {
                  var hslColor = (_b = colorValue.hsl) !== null && _b !== void 0 ? _b : color.value;

                  if (hslColor.h !== undefined && hslColor.l !== undefined) {
                    res = ColorUtils.hslToRgb(hslColor);
                  } else {
                    var hsvColor = (_c = colorValue.hsv) !== null && _c !== void 0 ? _c : color.value;

                    if (hsvColor.h !== undefined && hsvColor.v !== undefined) {
                      res = ColorUtils.hsvToRgb(hsvColor);
                    }
                  }
                }
              }
            }

            return res;
          }
        }, {
          key: "colorToHsl",
          value: function colorToHsl(color, index) {
            var useIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            var rgb = ColorUtils.colorToRgb(color, index, useIndex);
            return rgb !== undefined ? ColorUtils.rgbToHsl(rgb) : undefined;
          }
        }, {
          key: "rgbToHsl",
          value: function rgbToHsl(color) {
            var r1 = color.r / 255;
            var g1 = color.g / 255;
            var b1 = color.b / 255;
            var max = Math.max(r1, g1, b1);
            var min = Math.min(r1, g1, b1);
            var res = {
              h: 0,
              l: (max + min) / 2,
              s: 0
            };

            if (max != min) {
              res.s = res.l < 0.5 ? (max - min) / (max + min) : (max - min) / (2.0 - max - min);
              res.h = r1 === max ? (g1 - b1) / (max - min) : res.h = g1 === max ? 2.0 + (b1 - r1) / (max - min) : 4.0 + (r1 - g1) / (max - min);
            }

            res.l *= 100;
            res.s *= 100;
            res.h *= 60;

            if (res.h < 0) {
              res.h += 360;
            }

            return res;
          }
        }, {
          key: "stringToAlpha",
          value: function stringToAlpha(input) {
            var _a;

            return (_a = stringToRgba(input)) === null || _a === void 0 ? void 0 : _a.a;
          }
        }, {
          key: "stringToRgb",
          value: function stringToRgb(input) {
            return stringToRgba(input);
          }
        }, {
          key: "hslToRgb",
          value: function hslToRgb(hsl) {
            var result = {
              b: 0,
              g: 0,
              r: 0
            };
            var hslPercent = {
              h: hsl.h / 360,
              l: hsl.l / 100,
              s: hsl.s / 100
            };

            if (hslPercent.s === 0) {
              result.b = hslPercent.l;
              result.g = hslPercent.l;
              result.r = hslPercent.l;
            } else {
              var q = hslPercent.l < 0.5 ? hslPercent.l * (1 + hslPercent.s) : hslPercent.l + hslPercent.s - hslPercent.l * hslPercent.s;
              var p = 2 * hslPercent.l - q;
              result.r = hue2rgb(p, q, hslPercent.h + 1 / 3);
              result.g = hue2rgb(p, q, hslPercent.h);
              result.b = hue2rgb(p, q, hslPercent.h - 1 / 3);
            }

            result.r = Math.floor(result.r * 255);
            result.g = Math.floor(result.g * 255);
            result.b = Math.floor(result.b * 255);
            return result;
          }
        }, {
          key: "hslaToRgba",
          value: function hslaToRgba(hsla) {
            var rgbResult = ColorUtils.hslToRgb(hsla);
            return {
              a: hsla.a,
              b: rgbResult.b,
              g: rgbResult.g,
              r: rgbResult.r
            };
          }
        }, {
          key: "hslToHsv",
          value: function hslToHsv(hsl) {
            var l = hsl.l / 100,
                sl = hsl.s / 100;
            var v = l + sl * Math.min(l, 1 - l),
                sv = !v ? 0 : 2 * (1 - l / v);
            return {
              h: hsl.h,
              s: sv * 100,
              v: v * 100
            };
          }
        }, {
          key: "hslaToHsva",
          value: function hslaToHsva(hsla) {
            var hsvResult = ColorUtils.hslToHsv(hsla);
            return {
              a: hsla.a,
              h: hsvResult.h,
              s: hsvResult.s,
              v: hsvResult.v
            };
          }
        }, {
          key: "hsvToHsl",
          value: function hsvToHsl(hsv) {
            var v = hsv.v / 100,
                sv = hsv.s / 100;
            var l = v * (1 - sv / 2),
                sl = l === 0 || l === 1 ? 0 : (v - l) / Math.min(l, 1 - l);
            return {
              h: hsv.h,
              l: l * 100,
              s: sl * 100
            };
          }
        }, {
          key: "hsvaToHsla",
          value: function hsvaToHsla(hsva) {
            var hslResult = ColorUtils.hsvToHsl(hsva);
            return {
              a: hsva.a,
              h: hslResult.h,
              l: hslResult.l,
              s: hslResult.s
            };
          }
        }, {
          key: "hsvToRgb",
          value: function hsvToRgb(hsv) {
            var result = {
              b: 0,
              g: 0,
              r: 0
            };
            var hsvPercent = {
              h: hsv.h / 60,
              s: hsv.s / 100,
              v: hsv.v / 100
            };
            var c = hsvPercent.v * hsvPercent.s,
                x = c * (1 - Math.abs(hsvPercent.h % 2 - 1));
            var tempRgb;

            if (hsvPercent.h >= 0 && hsvPercent.h <= 1) {
              tempRgb = {
                r: c,
                g: x,
                b: 0
              };
            } else if (hsvPercent.h > 1 && hsvPercent.h <= 2) {
              tempRgb = {
                r: x,
                g: c,
                b: 0
              };
            } else if (hsvPercent.h > 2 && hsvPercent.h <= 3) {
              tempRgb = {
                r: 0,
                g: c,
                b: x
              };
            } else if (hsvPercent.h > 3 && hsvPercent.h <= 4) {
              tempRgb = {
                r: 0,
                g: x,
                b: c
              };
            } else if (hsvPercent.h > 4 && hsvPercent.h <= 5) {
              tempRgb = {
                r: x,
                g: 0,
                b: c
              };
            } else if (hsvPercent.h > 5 && hsvPercent.h <= 6) {
              tempRgb = {
                r: c,
                g: 0,
                b: x
              };
            }

            if (tempRgb) {
              var m = hsvPercent.v - c;
              result.r = Math.floor((tempRgb.r + m) * 255);
              result.g = Math.floor((tempRgb.g + m) * 255);
              result.b = Math.floor((tempRgb.b + m) * 255);
            }

            return result;
          }
        }, {
          key: "hsvaToRgba",
          value: function hsvaToRgba(hsva) {
            var rgbResult = ColorUtils.hsvToRgb(hsva);
            return {
              a: hsva.a,
              b: rgbResult.b,
              g: rgbResult.g,
              r: rgbResult.r
            };
          }
        }, {
          key: "rgbToHsv",
          value: function rgbToHsv(rgb) {
            var rgbPercent = {
              r: rgb.r / 255,
              g: rgb.g / 255,
              b: rgb.b / 255
            },
                xMax = Math.max(rgbPercent.r, rgbPercent.g, rgbPercent.b),
                xMin = Math.min(rgbPercent.r, rgbPercent.g, rgbPercent.b),
                v = xMax,
                c = xMax - xMin;
            var h = 0;

            if (v === rgbPercent.r) {
              h = 60 * ((rgbPercent.g - rgbPercent.b) / c);
            } else if (v === rgbPercent.g) {
              h = 60 * (2 + (rgbPercent.b - rgbPercent.r) / c);
            } else if (v === rgbPercent.b) {
              h = 60 * (4 + (rgbPercent.r - rgbPercent.g) / c);
            }

            var s = !v ? 0 : c / v;
            return {
              h: h,
              s: s * 100,
              v: v * 100
            };
          }
        }, {
          key: "rgbaToHsva",
          value: function rgbaToHsva(rgba) {
            var hsvResult = ColorUtils.rgbToHsv(rgba);
            return {
              a: rgba.a,
              h: hsvResult.h,
              s: hsvResult.s,
              v: hsvResult.v
            };
          }
        }, {
          key: "getRandomRgbColor",
          value: function getRandomRgbColor(min) {
            var fixedMin = min !== null && min !== void 0 ? min : 0;
            return {
              b: Math.floor(NumberUtils_1.NumberUtils.randomInRange(fixedMin, 256)),
              g: Math.floor(NumberUtils_1.NumberUtils.randomInRange(fixedMin, 256)),
              r: Math.floor(NumberUtils_1.NumberUtils.randomInRange(fixedMin, 256))
            };
          }
        }, {
          key: "getStyleFromRgb",
          value: function getStyleFromRgb(color, opacity) {
            return "rgba(".concat(color.r, ", ").concat(color.g, ", ").concat(color.b, ", ").concat(opacity !== null && opacity !== void 0 ? opacity : 1, ")");
          }
        }, {
          key: "getStyleFromHsl",
          value: function getStyleFromHsl(color, opacity) {
            return "hsla(".concat(color.h, ", ").concat(color.s, "%, ").concat(color.l, "%, ").concat(opacity !== null && opacity !== void 0 ? opacity : 1, ")");
          }
        }, {
          key: "getStyleFromHsv",
          value: function getStyleFromHsv(color, opacity) {
            return ColorUtils.getStyleFromHsl(ColorUtils.hsvToHsl(color), opacity);
          }
        }, {
          key: "mix",
          value: function mix(color1, color2, size1, size2) {
            var rgb1 = color1;
            var rgb2 = color2;

            if (rgb1.r === undefined) {
              rgb1 = ColorUtils.hslToRgb(color1);
            }

            if (rgb2.r === undefined) {
              rgb2 = ColorUtils.hslToRgb(color2);
            }

            return {
              b: NumberUtils_1.NumberUtils.mix(rgb1.b, rgb2.b, size1, size2),
              g: NumberUtils_1.NumberUtils.mix(rgb1.g, rgb2.g, size1, size2),
              r: NumberUtils_1.NumberUtils.mix(rgb1.r, rgb2.r, size1, size2)
            };
          }
        }, {
          key: "replaceColorSvg",
          value: function replaceColorSvg(image, color, opacity) {
            if (!image.svgData) {
              return "";
            }

            var svgXml = image.svgData;
            var rgbHex = /#([0-9A-F]{3,6})/gi;
            return svgXml.replace(rgbHex, function () {
              return ColorUtils.getStyleFromHsl(color, opacity);
            });
          }
        }, {
          key: "getLinkColor",
          value: function getLinkColor(p1, p2, linkColor) {
            var _a, _b;

            if (linkColor === Constants_1.Constants.randomColorValue) {
              return ColorUtils.getRandomRgbColor();
            } else if (linkColor === "mid") {
              var sourceColor = (_a = p1.getFillColor()) !== null && _a !== void 0 ? _a : p1.getStrokeColor();
              var destColor = (_b = p2 === null || p2 === void 0 ? void 0 : p2.getFillColor()) !== null && _b !== void 0 ? _b : p2 === null || p2 === void 0 ? void 0 : p2.getStrokeColor();

              if (sourceColor && destColor && p2) {
                return ColorUtils.mix(sourceColor, destColor, p1.getRadius(), p2.getRadius());
              } else {
                var hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;

                if (hslColor) {
                  return ColorUtils.hslToRgb(hslColor);
                }
              }
            } else {
              return linkColor;
            }
          }
        }, {
          key: "getLinkRandomColor",
          value: function getLinkRandomColor(optColor, blink, consent) {
            var color = typeof optColor === "string" ? optColor : optColor.value;

            if (color === Constants_1.Constants.randomColorValue) {
              if (consent) {
                return ColorUtils.colorToRgb({
                  value: color
                });
              } else if (blink) {
                return Constants_1.Constants.randomColorValue;
              } else {
                return Constants_1.Constants.midColorValue;
              }
            } else {
              return ColorUtils.colorToRgb({
                value: color
              });
            }
          }
        }]);

        return ColorUtils;
      }();

      exports.ColorUtils = ColorUtils;
      /***/
    },

    /***/
    74222:
    /*!**********************************************************!*\
      !*** ./node_modules/tsparticles/dist/Utils/Constants.js ***!
      \**********************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Constants = void 0;

      var Constants = function Constants() {
        _classCallCheck2(this, Constants);
      };

      exports.Constants = Constants;
      Constants.canvasClass = "tsparticles-canvas-el";
      Constants.randomColorValue = "random";
      Constants.midColorValue = "mid";
      Constants.touchEndEvent = "touchend";
      Constants.mouseDownEvent = "mousedown";
      Constants.mouseUpEvent = "mouseup";
      Constants.mouseMoveEvent = "mousemove";
      Constants.touchStartEvent = "touchstart";
      Constants.touchMoveEvent = "touchmove";
      Constants.mouseLeaveEvent = "mouseleave";
      Constants.mouseOutEvent = "mouseout";
      Constants.touchCancelEvent = "touchcancel";
      Constants.resizeEvent = "resize";
      Constants.visibilityChangeEvent = "visibilitychange";
      Constants.noPolygonDataLoaded = "No polygon data loaded.";
      Constants.noPolygonFound = "No polygon found, you need to specify SVG url in config.";
      /***/
    },

    /***/
    66013:
    /*!***************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Utils/EventListeners.js ***!
      \***************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.EventListeners = void 0;

      var Enums_1 = __webpack_require__(
      /*! ../Enums */
      9717);

      var Constants_1 = __webpack_require__(
      /*! ./Constants */
      74222);

      function manageListener(element, event, handler, add, options) {
        if (add) {
          var addOptions = {
            passive: true
          };

          if (typeof options === "boolean") {
            addOptions.capture = options;
          } else if (options !== undefined) {
            addOptions = options;
          }

          element.addEventListener(event, handler, addOptions);
        } else {
          var removeOptions = options;
          element.removeEventListener(event, handler, removeOptions);
        }
      }

      var EventListeners = /*#__PURE__*/function () {
        function EventListeners(container) {
          var _this273 = this;

          _classCallCheck2(this, EventListeners);

          this.container = container;
          this.canPush = true;

          this.mouseMoveHandler = function (e) {
            return _this273.mouseTouchMove(e);
          };

          this.touchStartHandler = function (e) {
            return _this273.mouseTouchMove(e);
          };

          this.touchMoveHandler = function (e) {
            return _this273.mouseTouchMove(e);
          };

          this.touchEndHandler = function () {
            return _this273.mouseTouchFinish();
          };

          this.mouseLeaveHandler = function () {
            return _this273.mouseTouchFinish();
          };

          this.touchCancelHandler = function () {
            return _this273.mouseTouchFinish();
          };

          this.touchEndClickHandler = function (e) {
            return _this273.mouseTouchClick(e);
          };

          this.mouseUpHandler = function (e) {
            return _this273.mouseTouchClick(e);
          };

          this.mouseDownHandler = function () {
            return _this273.mouseDown();
          };

          this.visibilityChangeHandler = function () {
            return _this273.handleVisibilityChange();
          };

          this.resizeHandler = function () {
            return _this273.handleWindowResize();
          };
        }

        _createClass2(EventListeners, [{
          key: "addListeners",
          value: function addListeners() {
            this.manageListeners(true);
          }
        }, {
          key: "removeListeners",
          value: function removeListeners() {
            this.manageListeners(false);
          }
        }, {
          key: "manageListeners",
          value: function manageListeners(add) {
            var _a;

            var container = this.container;
            var options = container.options;
            var detectType = options.interactivity.detectsOn;
            var mouseLeaveEvent = Constants_1.Constants.mouseLeaveEvent;

            if (detectType === Enums_1.InteractivityDetect.window) {
              container.interactivity.element = window;
              mouseLeaveEvent = Constants_1.Constants.mouseOutEvent;
            } else if (detectType === Enums_1.InteractivityDetect.parent && container.canvas.element) {
              var canvasEl = container.canvas.element;
              container.interactivity.element = (_a = canvasEl.parentElement) !== null && _a !== void 0 ? _a : canvasEl.parentNode;
            } else {
              container.interactivity.element = container.canvas.element;
            }

            var interactivityEl = container.interactivity.element;

            if (!interactivityEl) {
              return;
            }

            var html = interactivityEl;

            if (options.interactivity.events.onHover.enable || options.interactivity.events.onClick.enable) {
              manageListener(interactivityEl, Constants_1.Constants.mouseMoveEvent, this.mouseMoveHandler, add);
              manageListener(interactivityEl, Constants_1.Constants.touchStartEvent, this.touchStartHandler, add);
              manageListener(interactivityEl, Constants_1.Constants.touchMoveEvent, this.touchMoveHandler, add);

              if (!options.interactivity.events.onClick.enable) {
                manageListener(interactivityEl, Constants_1.Constants.touchEndEvent, this.touchEndHandler, add);
              } else {
                manageListener(interactivityEl, Constants_1.Constants.touchEndEvent, this.touchEndClickHandler, add);
                manageListener(interactivityEl, Constants_1.Constants.mouseUpEvent, this.mouseUpHandler, add);
                manageListener(interactivityEl, Constants_1.Constants.mouseDownEvent, this.mouseDownHandler, add);
              }

              manageListener(interactivityEl, mouseLeaveEvent, this.mouseLeaveHandler, add);
              manageListener(interactivityEl, Constants_1.Constants.touchCancelEvent, this.touchCancelHandler, add);
            }

            if (container.canvas.element) {
              container.canvas.element.style.pointerEvents = html === container.canvas.element ? "initial" : "none";
            }

            if (options.interactivity.events.resize) {
              manageListener(window, Constants_1.Constants.resizeEvent, this.resizeHandler, add);
            }

            if (document) {
              manageListener(document, Constants_1.Constants.visibilityChangeEvent, this.visibilityChangeHandler, add, false);
            }
          }
        }, {
          key: "handleWindowResize",
          value: function handleWindowResize() {
            var _a;

            (_a = this.container.canvas) === null || _a === void 0 ? void 0 : _a.windowResize();
          }
        }, {
          key: "handleVisibilityChange",
          value: function handleVisibilityChange() {
            var container = this.container;
            var options = container.options;
            this.mouseTouchFinish();

            if (!options.pauseOnBlur) {
              return;
            }

            if (document === null || document === void 0 ? void 0 : document.hidden) {
              container.pageHidden = true;
              container.pause();
            } else {
              container.pageHidden = false;

              if (container.getAnimationStatus()) {
                container.play(true);
              } else {
                container.draw();
              }
            }
          }
        }, {
          key: "mouseDown",
          value: function mouseDown() {
            var interactivity = this.container.interactivity;

            if (interactivity) {
              var mouse = interactivity.mouse;
              mouse.clicking = true;
              mouse.downPosition = mouse.position;
            }
          }
        }, {
          key: "mouseTouchMove",
          value: function mouseTouchMove(e) {
            var _a, _b, _c, _d, _e, _f, _g;

            var container = this.container;
            var options = container.options;

            if (((_a = container.interactivity) === null || _a === void 0 ? void 0 : _a.element) === undefined) {
              return;
            }

            container.interactivity.mouse.inside = true;
            var pos;
            var canvas = container.canvas.element;

            if (e.type.startsWith("mouse")) {
              this.canPush = true;
              var mouseEvent = e;

              if (container.interactivity.element === window) {
                if (canvas) {
                  var clientRect = canvas.getBoundingClientRect();
                  pos = {
                    x: mouseEvent.clientX - clientRect.left,
                    y: mouseEvent.clientY - clientRect.top
                  };
                }
              } else if (options.interactivity.detectsOn === Enums_1.InteractivityDetect.parent) {
                var source = mouseEvent.target;
                var target = mouseEvent.currentTarget;
                var canvasEl = container.canvas.element;

                if (source && target && canvasEl) {
                  var sourceRect = source.getBoundingClientRect();
                  var targetRect = target.getBoundingClientRect();
                  var canvasRect = canvasEl.getBoundingClientRect();
                  pos = {
                    x: mouseEvent.offsetX + 2 * sourceRect.left - (targetRect.left + canvasRect.left),
                    y: mouseEvent.offsetY + 2 * sourceRect.top - (targetRect.top + canvasRect.top)
                  };
                } else {
                  pos = {
                    x: (_b = mouseEvent.offsetX) !== null && _b !== void 0 ? _b : mouseEvent.clientX,
                    y: (_c = mouseEvent.offsetY) !== null && _c !== void 0 ? _c : mouseEvent.clientY
                  };
                }
              } else {
                if (mouseEvent.target === container.canvas.element) {
                  pos = {
                    x: (_d = mouseEvent.offsetX) !== null && _d !== void 0 ? _d : mouseEvent.clientX,
                    y: (_e = mouseEvent.offsetY) !== null && _e !== void 0 ? _e : mouseEvent.clientY
                  };
                }
              }
            } else {
              this.canPush = e.type !== "touchmove";
              var touchEvent = e;
              var lastTouch = touchEvent.touches[touchEvent.touches.length - 1];

              var _canvasRect = canvas === null || canvas === void 0 ? void 0 : canvas.getBoundingClientRect();

              pos = {
                x: lastTouch.clientX - ((_f = _canvasRect === null || _canvasRect === void 0 ? void 0 : _canvasRect.left) !== null && _f !== void 0 ? _f : 0),
                y: lastTouch.clientY - ((_g = _canvasRect === null || _canvasRect === void 0 ? void 0 : _canvasRect.top) !== null && _g !== void 0 ? _g : 0)
              };
            }

            var pxRatio = container.retina.pixelRatio;

            if (pos) {
              pos.x *= pxRatio;
              pos.y *= pxRatio;
            }

            container.interactivity.mouse.position = pos;
            container.interactivity.status = Constants_1.Constants.mouseMoveEvent;
          }
        }, {
          key: "mouseTouchFinish",
          value: function mouseTouchFinish() {
            var interactivity = this.container.interactivity;

            if (interactivity === undefined) {
              return;
            }

            var mouse = interactivity.mouse;
            delete mouse.position;
            delete mouse.clickPosition;
            delete mouse.downPosition;
            interactivity.status = Constants_1.Constants.mouseLeaveEvent;
            mouse.inside = false;
            mouse.clicking = false;
          }
        }, {
          key: "mouseTouchClick",
          value: function mouseTouchClick(e) {
            var container = this.container;
            var options = container.options;
            var mouse = container.interactivity.mouse;
            mouse.inside = true;
            var handled = false;
            var mousePosition = mouse.position;

            if (mousePosition === undefined || !options.interactivity.events.onClick.enable) {
              return;
            }

            var _iterator83 = _createForOfIteratorHelper(container.plugins),
                _step82;

            try {
              for (_iterator83.s(); !(_step82 = _iterator83.n()).done;) {
                var _step82$value = _slicedToArray(_step82.value, 2),
                    plugin = _step82$value[1];

                if (plugin.clickPositionValid !== undefined) {
                  handled = plugin.clickPositionValid(mousePosition);

                  if (handled) {
                    break;
                  }
                }
              }
            } catch (err) {
              _iterator83.e(err);
            } finally {
              _iterator83.f();
            }

            if (!handled) {
              this.doMouseTouchClick(e);
            }

            mouse.clicking = false;
          }
        }, {
          key: "doMouseTouchClick",
          value: function doMouseTouchClick(e) {
            var _this274 = this;

            var container = this.container;
            var options = container.options;

            if (this.canPush) {
              var mousePos = container.interactivity.mouse.position;

              if (mousePos) {
                container.interactivity.mouse.clickPosition = {
                  x: mousePos.x,
                  y: mousePos.y
                };
              } else {
                return;
              }

              container.interactivity.mouse.clickTime = new Date().getTime();
              var onClick = options.interactivity.events.onClick;

              if (onClick.mode instanceof Array) {
                var _iterator84 = _createForOfIteratorHelper(onClick.mode),
                    _step83;

                try {
                  for (_iterator84.s(); !(_step83 = _iterator84.n()).done;) {
                    var mode = _step83.value;
                    this.handleClickMode(mode);
                  }
                } catch (err) {
                  _iterator84.e(err);
                } finally {
                  _iterator84.f();
                }
              } else {
                this.handleClickMode(onClick.mode);
              }
            }

            if (e.type === "touchend") {
              setTimeout(function () {
                return _this274.mouseTouchFinish();
              }, 500);
            }
          }
        }, {
          key: "handleClickMode",
          value: function handleClickMode(mode) {
            var container = this.container;
            var options = container.options;
            var pushNb = options.interactivity.modes.push.quantity;
            var removeNb = options.interactivity.modes.remove.quantity;

            switch (mode) {
              case Enums_1.ClickMode.push:
                {
                  if (pushNb > 0) {
                    container.particles.push(pushNb, container.interactivity.mouse);
                  }

                  break;
                }

              case Enums_1.ClickMode.remove:
                container.particles.removeQuantity(removeNb);
                break;

              case Enums_1.ClickMode.bubble:
                container.bubble.clicking = true;
                break;

              case Enums_1.ClickMode.repulse:
                container.repulse.clicking = true;
                container.repulse.count = 0;

                var _iterator85 = _createForOfIteratorHelper(container.repulse.particles),
                    _step84;

                try {
                  for (_iterator85.s(); !(_step84 = _iterator85.n()).done;) {
                    var particle = _step84.value;
                    particle.velocity.horizontal = particle.initialVelocity.horizontal;
                    particle.velocity.vertical = particle.initialVelocity.vertical;
                  }
                } catch (err) {
                  _iterator85.e(err);
                } finally {
                  _iterator85.f();
                }

                container.repulse.particles = [];
                container.repulse.finish = false;
                setTimeout(function () {
                  if (!container.destroyed) {
                    container.repulse.clicking = false;
                  }
                }, options.interactivity.modes.repulse.duration * 1000);
                break;

              case Enums_1.ClickMode.attract:
                container.attract.clicking = true;
                container.attract.count = 0;

                var _iterator86 = _createForOfIteratorHelper(container.attract.particles),
                    _step85;

                try {
                  for (_iterator86.s(); !(_step85 = _iterator86.n()).done;) {
                    var _particle4 = _step85.value;
                    _particle4.velocity.horizontal = _particle4.initialVelocity.horizontal;
                    _particle4.velocity.vertical = _particle4.initialVelocity.vertical;
                  }
                } catch (err) {
                  _iterator86.e(err);
                } finally {
                  _iterator86.f();
                }

                container.attract.particles = [];
                container.attract.finish = false;
                setTimeout(function () {
                  if (!container.destroyed) {
                    container.attract.clicking = false;
                  }
                }, options.interactivity.modes.attract.duration * 1000);
                break;

              case Enums_1.ClickMode.pause:
                if (container.getAnimationStatus()) {
                  container.pause();
                } else {
                  container.play();
                }

                break;
            }

            var _iterator87 = _createForOfIteratorHelper(container.plugins),
                _step86;

            try {
              for (_iterator87.s(); !(_step86 = _iterator87.n()).done;) {
                var _step86$value = _slicedToArray(_step86.value, 2),
                    plugin = _step86$value[1];

                if (plugin.handleClickMode) {
                  plugin.handleClickMode(mode);
                }
              }
            } catch (err) {
              _iterator87.e(err);
            } finally {
              _iterator87.f();
            }
          }
        }]);

        return EventListeners;
      }();

      exports.EventListeners = EventListeners;
      /***/
    },

    /***/
    27633:
    /*!************************************************************!*\
      !*** ./node_modules/tsparticles/dist/Utils/NumberUtils.js ***!
      \************************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.NumberUtils = void 0;

      var Directions_1 = __webpack_require__(
      /*! ../Enums/Directions */
      25725);

      var NumberUtils = /*#__PURE__*/function () {
        function NumberUtils() {
          _classCallCheck2(this, NumberUtils);
        }

        _createClass2(NumberUtils, null, [{
          key: "clamp",
          value: function clamp(num, min, max) {
            return Math.min(Math.max(num, min), max);
          }
        }, {
          key: "mix",
          value: function mix(comp1, comp2, weight1, weight2) {
            return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));
          }
        }, {
          key: "randomInRange",
          value: function randomInRange(r1, r2) {
            var max = Math.max(r1, r2),
                min = Math.min(r1, r2);
            return Math.random() * (max - min) + min;
          }
        }, {
          key: "getValue",
          value: function getValue(options) {
            var random = options.random;

            var _ref15 = typeof random === "boolean" ? {
              enable: random,
              minimumValue: 0
            } : random,
                enable = _ref15.enable,
                minimumValue = _ref15.minimumValue;

            return enable ? NumberUtils.randomInRange(minimumValue, options.value) : options.value;
          }
        }, {
          key: "getDistances",
          value: function getDistances(pointA, pointB) {
            var dx = pointA.x - pointB.x;
            var dy = pointA.y - pointB.y;
            return {
              dx: dx,
              dy: dy,
              distance: Math.sqrt(dx * dx + dy * dy)
            };
          }
        }, {
          key: "getDistance",
          value: function getDistance(pointA, pointB) {
            return NumberUtils.getDistances(pointA, pointB).distance;
          }
        }, {
          key: "getParticleBaseVelocity",
          value: function getParticleBaseVelocity(particle) {
            var velocityBase;

            switch (particle.direction) {
              case Directions_1.MoveDirection.top:
                velocityBase = {
                  x: 0,
                  y: -1
                };
                break;

              case Directions_1.MoveDirection.topRight:
                velocityBase = {
                  x: 0.5,
                  y: -0.5
                };
                break;

              case Directions_1.MoveDirection.right:
                velocityBase = {
                  x: 1,
                  y: -0
                };
                break;

              case Directions_1.MoveDirection.bottomRight:
                velocityBase = {
                  x: 0.5,
                  y: 0.5
                };
                break;

              case Directions_1.MoveDirection.bottom:
                velocityBase = {
                  x: 0,
                  y: 1
                };
                break;

              case Directions_1.MoveDirection.bottomLeft:
                velocityBase = {
                  x: -0.5,
                  y: 1
                };
                break;

              case Directions_1.MoveDirection.left:
                velocityBase = {
                  x: -1,
                  y: 0
                };
                break;

              case Directions_1.MoveDirection.topLeft:
                velocityBase = {
                  x: -0.5,
                  y: -0.5
                };
                break;

              default:
                velocityBase = {
                  x: 0,
                  y: 0
                };
                break;
            }

            return velocityBase;
          }
        }, {
          key: "rotateVelocity",
          value: function rotateVelocity(velocity, angle) {
            return {
              horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),
              vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle)
            };
          }
        }, {
          key: "collisionVelocity",
          value: function collisionVelocity(v1, v2, m1, m2) {
            return {
              horizontal: v1.horizontal * (m1 - m2) / (m1 + m2) + v2.horizontal * 2 * m2 / (m1 + m2),
              vertical: v1.vertical
            };
          }
        }]);

        return NumberUtils;
      }();

      exports.NumberUtils = NumberUtils;
      /***/
    },

    /***/
    62914:
    /*!********************************************************!*\
      !*** ./node_modules/tsparticles/dist/Utils/Plugins.js ***!
      \********************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Plugins = void 0;
      var plugins = [];
      var presets = new Map();
      var drawers = new Map();

      var Plugins = /*#__PURE__*/function () {
        function Plugins() {
          _classCallCheck2(this, Plugins);
        }

        _createClass2(Plugins, null, [{
          key: "getPlugin",
          value: function getPlugin(plugin) {
            return plugins.find(function (t) {
              return t.id === plugin;
            });
          }
        }, {
          key: "addPlugin",
          value: function addPlugin(plugin) {
            if (!Plugins.getPlugin(plugin.id)) {
              plugins.push(plugin);
            }
          }
        }, {
          key: "getAvailablePlugins",
          value: function getAvailablePlugins(container) {
            var res = new Map();

            var _iterator88 = _createForOfIteratorHelper(plugins),
                _step87;

            try {
              for (_iterator88.s(); !(_step87 = _iterator88.n()).done;) {
                var plugin = _step87.value;

                if (!plugin.needsPlugin(container.options)) {
                  continue;
                }

                res.set(plugin.id, plugin.getPlugin(container));
              }
            } catch (err) {
              _iterator88.e(err);
            } finally {
              _iterator88.f();
            }

            return res;
          }
        }, {
          key: "loadOptions",
          value: function loadOptions(options, sourceOptions) {
            var _iterator89 = _createForOfIteratorHelper(plugins),
                _step88;

            try {
              for (_iterator89.s(); !(_step88 = _iterator89.n()).done;) {
                var plugin = _step88.value;
                plugin.loadOptions(options, sourceOptions);
              }
            } catch (err) {
              _iterator89.e(err);
            } finally {
              _iterator89.f();
            }
          }
        }, {
          key: "getPreset",
          value: function getPreset(preset) {
            return presets.get(preset);
          }
        }, {
          key: "addPreset",
          value: function addPreset(presetKey, options) {
            if (!Plugins.getPreset(presetKey)) {
              presets.set(presetKey, options);
            }
          }
        }, {
          key: "addShapeDrawer",
          value: function addShapeDrawer(type, drawer) {
            if (!Plugins.getShapeDrawer(type)) {
              drawers.set(type, drawer);
            }
          }
        }, {
          key: "getShapeDrawer",
          value: function getShapeDrawer(type) {
            return drawers.get(type);
          }
        }, {
          key: "getSupportedShapes",
          value: function getSupportedShapes() {
            return drawers.keys();
          }
        }]);

        return Plugins;
      }();

      exports.Plugins = Plugins;
      /***/
    },

    /***/
    33617:
    /*!******************************************************!*\
      !*** ./node_modules/tsparticles/dist/Utils/Point.js ***!
      \******************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Point = void 0;

      var Point = function Point(position, particle) {
        _classCallCheck2(this, Point);

        this.position = position;
        this.particle = particle;
      };

      exports.Point = Point;
      /***/
    },

    /***/
    6416:
    /*!*********************************************************!*\
      !*** ./node_modules/tsparticles/dist/Utils/QuadTree.js ***!
      \*********************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.QuadTree = void 0;

      var Rectangle_1 = __webpack_require__(
      /*! ./Rectangle */
      10774);

      var Circle_1 = __webpack_require__(
      /*! ./Circle */
      18117);

      var CircleWarp_1 = __webpack_require__(
      /*! ./CircleWarp */
      5299);

      var QuadTree = /*#__PURE__*/function () {
        function QuadTree(rectangle, capacity) {
          _classCallCheck2(this, QuadTree);

          this.rectangle = rectangle;
          this.capacity = capacity;
          this.points = [];
          this.divided = false;
        }

        _createClass2(QuadTree, [{
          key: "subdivide",
          value: function subdivide() {
            var x = this.rectangle.position.x;
            var y = this.rectangle.position.y;
            var w = this.rectangle.size.width;
            var h = this.rectangle.size.height;
            var capacity = this.capacity;
            this.northEast = new QuadTree(new Rectangle_1.Rectangle(x, y, w / 2, h / 2), capacity);
            this.northWest = new QuadTree(new Rectangle_1.Rectangle(x + w / 2, y, w / 2, h / 2), capacity);
            this.southEast = new QuadTree(new Rectangle_1.Rectangle(x, y + h / 2, w / 2, h / 2), capacity);
            this.southWest = new QuadTree(new Rectangle_1.Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity);
            this.divided = true;
          }
        }, {
          key: "insert",
          value: function insert(point) {
            var _a, _b, _c, _d, _e;

            if (!this.rectangle.contains(point.position)) {
              return false;
            }

            if (this.points.length < this.capacity) {
              this.points.push(point);
              return true;
            }

            if (!this.divided) {
              this.subdivide();
            }

            return (_e = ((_a = this.northEast) === null || _a === void 0 ? void 0 : _a.insert(point)) || ((_b = this.northWest) === null || _b === void 0 ? void 0 : _b.insert(point)) || ((_c = this.southEast) === null || _c === void 0 ? void 0 : _c.insert(point)) || ((_d = this.southWest) === null || _d === void 0 ? void 0 : _d.insert(point))) !== null && _e !== void 0 ? _e : false;
          }
        }, {
          key: "queryCircle",
          value: function queryCircle(position, radius) {
            return this.query(new Circle_1.Circle(position.x, position.y, radius));
          }
        }, {
          key: "queryCircleWarp",
          value: function queryCircleWarp(position, radius, containerOrSize) {
            var container = containerOrSize;
            var size = containerOrSize;
            return this.query(new CircleWarp_1.CircleWarp(position.x, position.y, radius, container.canvas !== undefined ? container.canvas.size : size));
          }
        }, {
          key: "queryRectangle",
          value: function queryRectangle(position, size) {
            return this.query(new Rectangle_1.Rectangle(position.x, position.y, size.width, size.height));
          }
        }, {
          key: "query",
          value: function query(range, found) {
            var _a, _b, _c, _d;

            var res = found !== null && found !== void 0 ? found : [];

            if (!range.intersects(this.rectangle)) {
              return [];
            } else {
              var _iterator90 = _createForOfIteratorHelper(this.points),
                  _step89;

              try {
                for (_iterator90.s(); !(_step89 = _iterator90.n()).done;) {
                  var p = _step89.value;

                  if (!range.contains(p.position)) {
                    continue;
                  }

                  res.push(p.particle);
                }
              } catch (err) {
                _iterator90.e(err);
              } finally {
                _iterator90.f();
              }

              if (this.divided) {
                (_a = this.northEast) === null || _a === void 0 ? void 0 : _a.query(range, res);
                (_b = this.northWest) === null || _b === void 0 ? void 0 : _b.query(range, res);
                (_c = this.southEast) === null || _c === void 0 ? void 0 : _c.query(range, res);
                (_d = this.southWest) === null || _d === void 0 ? void 0 : _d.query(range, res);
              }
            }

            return res;
          }
        }]);

        return QuadTree;
      }();

      exports.QuadTree = QuadTree;
      /***/
    },

    /***/
    63406:
    /*!******************************************************!*\
      !*** ./node_modules/tsparticles/dist/Utils/Range.js ***!
      \******************************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Range = void 0;

      var Range = function Range(x, y) {
        _classCallCheck2(this, Range);

        this.position = {
          x: x,
          y: y
        };
      };

      exports.Range = Range;
      /***/
    },

    /***/
    10774:
    /*!**********************************************************!*\
      !*** ./node_modules/tsparticles/dist/Utils/Rectangle.js ***!
      \**********************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Rectangle = void 0;

      var Range_1 = __webpack_require__(
      /*! ./Range */
      63406);

      var Rectangle = /*#__PURE__*/function (_Range_1$Range2) {
        _inherits(Rectangle, _Range_1$Range2);

        var _super115 = _createSuper(Rectangle);

        function Rectangle(x, y, width, height) {
          var _this275;

          _classCallCheck2(this, Rectangle);

          _this275 = _super115.call(this, x, y);
          _this275.size = {
            height: height,
            width: width
          };
          return _this275;
        }

        _createClass2(Rectangle, [{
          key: "contains",
          value: function contains(point) {
            var w = this.size.width;
            var h = this.size.height;
            var pos = this.position;
            return point.x >= pos.x && point.x <= pos.x + w && point.y >= pos.y && point.y <= pos.y + h;
          }
        }, {
          key: "intersects",
          value: function intersects(range) {
            var rect = range;
            var circle = range;
            var w = this.size.width;
            var h = this.size.height;
            var pos1 = this.position;
            var pos2 = range.position;

            if (circle.radius !== undefined) {
              return circle.intersects(this);
            } else if (rect.size !== undefined) {
              var size2 = rect.size;
              var w2 = size2.width;
              var h2 = size2.height;
              return pos2.x < pos1.x + w && pos2.x + w2 > pos1.x && pos2.y < pos1.y + h && pos2.y + h2 > pos1.y;
            }

            return false;
          }
        }]);

        return Rectangle;
      }(Range_1.Range);

      exports.Rectangle = Rectangle;
      /***/
    },

    /***/
    66485:
    /*!******************************************************!*\
      !*** ./node_modules/tsparticles/dist/Utils/Utils.js ***!
      \******************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function (resolve) {
            resolve(value);
          });
        }

        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }

          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }

          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }

          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Utils = void 0;

      var OutModeDirection_1 = __webpack_require__(
      /*! ../Enums/Directions/OutModeDirection */
      49974);

      var NumberUtils_1 = __webpack_require__(
      /*! ./NumberUtils */
      27633);

      function rectSideBounce(pSide, pOtherSide, rectSide, rectOtherSide, velocity, factor) {
        var res = {
          bounced: false
        };

        if (pOtherSide.min >= rectOtherSide.min && pOtherSide.min <= rectOtherSide.max && pOtherSide.max >= rectOtherSide.min && pOtherSide.max <= rectOtherSide.max) {
          if (pSide.max >= rectSide.min && pSide.max <= (rectSide.max + rectSide.min) / 2 && velocity > 0 || pSide.min <= rectSide.max && pSide.min > (rectSide.max + rectSide.min) / 2 && velocity < 0) {
            res.velocity = velocity * -factor;
            res.bounced = true;
          }
        }

        return res;
      }

      function checkSelector(element, selectors) {
        if (selectors instanceof Array) {
          var _iterator91 = _createForOfIteratorHelper(selectors),
              _step90;

          try {
            for (_iterator91.s(); !(_step90 = _iterator91.n()).done;) {
              var selector = _step90.value;

              if (element.matches(selector)) {
                return true;
              }
            }
          } catch (err) {
            _iterator91.e(err);
          } finally {
            _iterator91.f();
          }

          return false;
        } else {
          return element.matches(selectors);
        }
      }

      var Utils = /*#__PURE__*/function () {
        function Utils() {
          _classCallCheck2(this, Utils);
        }

        _createClass2(Utils, null, [{
          key: "isSsr",
          value: function isSsr() {
            return typeof window === "undefined" || !window;
          }
        }, {
          key: "animate",
          get: function get() {
            return Utils.isSsr() ? function (callback) {
              return setTimeout(callback);
            } : function (callback) {
              return (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || window.setTimeout)(callback);
            };
          }
        }, {
          key: "cancelAnimation",
          get: function get() {
            return Utils.isSsr() ? function (handle) {
              return clearTimeout(handle);
            } : function (handle) {
              return (window.cancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || window.clearTimeout)(handle);
            };
          }
        }, {
          key: "isInArray",
          value: function isInArray(value, array) {
            return value === array || array instanceof Array && array.indexOf(value) > -1;
          }
        }, {
          key: "loadFont",
          value: function loadFont(character) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
              return regeneratorRuntime.wrap(function _callee16$(_context19) {
                while (1) {
                  switch (_context19.prev = _context19.next) {
                    case 0:
                      _context19.prev = 0;
                      _context19.next = 3;
                      return document.fonts.load("".concat(character.weight, " 36px '").concat(character.font, "'"));

                    case 3:
                      _context19.next = 7;
                      break;

                    case 5:
                      _context19.prev = 5;
                      _context19.t0 = _context19["catch"](0);

                    case 7:
                    case "end":
                      return _context19.stop();
                  }
                }
              }, _callee16, null, [[0, 5]]);
            }));
          }
        }, {
          key: "arrayRandomIndex",
          value: function arrayRandomIndex(array) {
            return Math.floor(Math.random() * array.length);
          }
        }, {
          key: "itemFromArray",
          value: function itemFromArray(array, index) {
            var useIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            var fixedIndex = index !== undefined && useIndex ? index % array.length : Utils.arrayRandomIndex(array);
            return array[fixedIndex];
          }
        }, {
          key: "isPointInside",
          value: function isPointInside(point, size, radius, direction) {
            return Utils.areBoundsInside(Utils.calculateBounds(point, radius !== null && radius !== void 0 ? radius : 0), size, direction);
          }
        }, {
          key: "areBoundsInside",
          value: function areBoundsInside(bounds, size, direction) {
            var inside = true;

            if (!direction || direction === OutModeDirection_1.OutModeDirection.bottom) {
              inside = bounds.top < size.height;
            }

            if (inside && (!direction || direction === OutModeDirection_1.OutModeDirection.left)) {
              inside = bounds.right > 0;
            }

            if (inside && (!direction || direction === OutModeDirection_1.OutModeDirection.right)) {
              inside = bounds.left < size.width;
            }

            if (inside && (!direction || direction === OutModeDirection_1.OutModeDirection.top)) {
              inside = bounds.bottom > 0;
            }

            return inside;
          }
        }, {
          key: "calculateBounds",
          value: function calculateBounds(point, radius) {
            return {
              bottom: point.y + radius,
              left: point.x - radius,
              right: point.x + radius,
              top: point.y - radius
            };
          }
        }, {
          key: "loadImage",
          value: function loadImage(source) {
            return new Promise(function (resolve, reject) {
              if (!source) {
                reject("Error tsParticles - No image.src");
                return;
              }

              var image = {
                source: source,
                type: source.substr(source.length - 3)
              };
              var img = new Image();
              img.addEventListener("load", function () {
                image.element = img;
                resolve(image);
              });
              img.addEventListener("error", function () {
                reject("Error tsParticles - loading image: ".concat(source));
              });
              img.src = source;
            });
          }
        }, {
          key: "downloadSvgImage",
          value: function downloadSvgImage(source) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
              var image, response;
              return regeneratorRuntime.wrap(function _callee17$(_context20) {
                while (1) {
                  switch (_context20.prev = _context20.next) {
                    case 0:
                      if (source) {
                        _context20.next = 2;
                        break;
                      }

                      throw new Error("Error tsParticles - No image.src");

                    case 2:
                      image = {
                        source: source,
                        type: source.substr(source.length - 3)
                      };

                      if (!(image.type !== "svg")) {
                        _context20.next = 5;
                        break;
                      }

                      return _context20.abrupt("return", Utils.loadImage(source));

                    case 5:
                      _context20.next = 7;
                      return fetch(image.source);

                    case 7:
                      response = _context20.sent;

                      if (response.ok) {
                        _context20.next = 10;
                        break;
                      }

                      throw new Error("Error tsParticles - Image not found");

                    case 10:
                      _context20.next = 12;
                      return response.text();

                    case 12:
                      image.svgData = _context20.sent;
                      return _context20.abrupt("return", image);

                    case 14:
                    case "end":
                      return _context20.stop();
                  }
                }
              }, _callee17);
            }));
          }
        }, {
          key: "deepExtend",
          value: function deepExtend(destination) {
            for (var _len27 = arguments.length, sources = new Array(_len27 > 1 ? _len27 - 1 : 0), _key28 = 1; _key28 < _len27; _key28++) {
              sources[_key28 - 1] = arguments[_key28];
            }

            for (var _i36 = 0, _sources = sources; _i36 < _sources.length; _i36++) {
              var source = _sources[_i36];

              if (source === undefined || source === null) {
                continue;
              }

              if (typeof source !== "object") {
                destination = source;
                continue;
              }

              var sourceIsArray = Array.isArray(source);

              if (sourceIsArray && (typeof destination !== "object" || !destination || !Array.isArray(destination))) {
                destination = [];
              } else if (!sourceIsArray && (typeof destination !== "object" || !destination || Array.isArray(destination))) {
                destination = {};
              }

              var _loop10 = function _loop10(key) {
                if (key === "__proto__") {
                  return "continue";
                }

                var sourceDict = source;
                var value = sourceDict[key];
                var isObject = typeof value === "object";
                var destDict = destination;
                destDict[key] = isObject && Array.isArray(value) ? value.map(function (v) {
                  return Utils.deepExtend(destDict[key], v);
                }) : Utils.deepExtend(destDict[key], value);
              };

              for (var key in source) {
                var _ret4 = _loop10(key);

                if (_ret4 === "continue") continue;
              }
            }

            return destination;
          }
        }, {
          key: "isDivModeEnabled",
          value: function isDivModeEnabled(mode, divs) {
            return divs instanceof Array ? !!divs.find(function (t) {
              return t.enable && Utils.isInArray(mode, t.mode);
            }) : Utils.isInArray(mode, divs.mode);
          }
        }, {
          key: "divModeExecute",
          value: function divModeExecute(mode, divs, callback) {
            if (divs instanceof Array) {
              var _iterator92 = _createForOfIteratorHelper(divs),
                  _step91;

              try {
                for (_iterator92.s(); !(_step91 = _iterator92.n()).done;) {
                  var div = _step91.value;
                  var divMode = div.mode;
                  var divEnabled = div.enable;

                  if (divEnabled && Utils.isInArray(mode, divMode)) {
                    Utils.singleDivModeExecute(div, callback);
                  }
                }
              } catch (err) {
                _iterator92.e(err);
              } finally {
                _iterator92.f();
              }
            } else {
              var _divMode = divs.mode;
              var _divEnabled = divs.enable;

              if (_divEnabled && Utils.isInArray(mode, _divMode)) {
                Utils.singleDivModeExecute(divs, callback);
              }
            }
          }
        }, {
          key: "singleDivModeExecute",
          value: function singleDivModeExecute(div, callback) {
            var selectors = div.selectors;

            if (selectors instanceof Array) {
              var _iterator93 = _createForOfIteratorHelper(selectors),
                  _step92;

              try {
                for (_iterator93.s(); !(_step92 = _iterator93.n()).done;) {
                  var selector = _step92.value;
                  callback(selector, div);
                }
              } catch (err) {
                _iterator93.e(err);
              } finally {
                _iterator93.f();
              }
            } else {
              callback(selectors, div);
            }
          }
        }, {
          key: "divMode",
          value: function divMode(divs, element) {
            if (!element || !divs) {
              return;
            }

            if (divs instanceof Array) {
              return divs.find(function (d) {
                return checkSelector(element, d.selectors);
              });
            } else if (checkSelector(element, divs.selectors)) {
              return divs;
            }
          }
        }, {
          key: "circleBounceDataFromParticle",
          value: function circleBounceDataFromParticle(p) {
            return {
              position: p.getPosition(),
              radius: p.getRadius(),
              velocity: p.velocity,
              factor: {
                horizontal: NumberUtils_1.NumberUtils.getValue(p.particlesOptions.bounce.horizontal),
                vertical: NumberUtils_1.NumberUtils.getValue(p.particlesOptions.bounce.vertical)
              }
            };
          }
        }, {
          key: "circleBounce",
          value: function circleBounce(p1, p2) {
            var xVelocityDiff = p1.velocity.horizontal;
            var yVelocityDiff = p1.velocity.vertical;
            var pos1 = p1.position;
            var pos2 = p2.position;
            var xDist = pos2.x - pos1.x;
            var yDist = pos2.y - pos1.y;

            if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {
              var angle = -Math.atan2(pos2.y - pos1.y, pos2.x - pos1.x);
              var m1 = p1.radius;
              var m2 = p2.radius;
              var u1 = NumberUtils_1.NumberUtils.rotateVelocity(p1.velocity, angle);
              var u2 = NumberUtils_1.NumberUtils.rotateVelocity(p2.velocity, angle);
              var v1 = NumberUtils_1.NumberUtils.collisionVelocity(u1, u2, m1, m2);
              var v2 = NumberUtils_1.NumberUtils.collisionVelocity(u2, u1, m1, m2);
              var vFinal1 = NumberUtils_1.NumberUtils.rotateVelocity(v1, -angle);
              var vFinal2 = NumberUtils_1.NumberUtils.rotateVelocity(v2, -angle);
              p1.velocity.horizontal = vFinal1.horizontal * p1.factor.horizontal;
              p1.velocity.vertical = vFinal1.vertical * p1.factor.vertical;
              p2.velocity.horizontal = vFinal2.horizontal * p2.factor.horizontal;
              p2.velocity.vertical = vFinal2.vertical * p2.factor.vertical;
            }
          }
        }, {
          key: "rectBounce",
          value: function rectBounce(particle, divBounds) {
            var pPos = particle.getPosition();
            var size = particle.getRadius();
            var bounds = Utils.calculateBounds(pPos, size);
            var resH = rectSideBounce({
              min: bounds.left,
              max: bounds.right
            }, {
              min: bounds.top,
              max: bounds.bottom
            }, {
              min: divBounds.left,
              max: divBounds.right
            }, {
              min: divBounds.top,
              max: divBounds.bottom
            }, particle.velocity.horizontal, NumberUtils_1.NumberUtils.getValue(particle.particlesOptions.bounce.horizontal));

            if (resH.bounced) {
              if (resH.velocity !== undefined) {
                particle.velocity.horizontal = resH.velocity;
              }

              if (resH.position !== undefined) {
                particle.position.x = resH.position;
              }
            }

            var resV = rectSideBounce({
              min: bounds.top,
              max: bounds.bottom
            }, {
              min: bounds.left,
              max: bounds.right
            }, {
              min: divBounds.top,
              max: divBounds.bottom
            }, {
              min: divBounds.left,
              max: divBounds.right
            }, particle.velocity.vertical, NumberUtils_1.NumberUtils.getValue(particle.particlesOptions.bounce.vertical));

            if (resV.bounced) {
              if (resV.velocity !== undefined) {
                particle.velocity.vertical = resV.velocity;
              }

              if (resV.position !== undefined) {
                particle.position.y = resV.position;
              }
            }
          }
        }]);

        return Utils;
      }();

      exports.Utils = Utils;
      /***/
    },

    /***/
    57711:
    /*!******************************************************!*\
      !*** ./node_modules/tsparticles/dist/Utils/index.js ***!
      \******************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

      var __exportStar = this && this.__exportStar || function (m, exports) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        }
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      __exportStar(__webpack_require__(
      /*! ./CanvasUtils */
      65844), exports);

      __exportStar(__webpack_require__(
      /*! ./Circle */
      18117), exports);

      __exportStar(__webpack_require__(
      /*! ./CircleWarp */
      5299), exports);

      __exportStar(__webpack_require__(
      /*! ./ColorUtils */
      830), exports);

      __exportStar(__webpack_require__(
      /*! ./Constants */
      74222), exports);

      __exportStar(__webpack_require__(
      /*! ./EventListeners */
      66013), exports);

      __exportStar(__webpack_require__(
      /*! ./NumberUtils */
      27633), exports);

      __exportStar(__webpack_require__(
      /*! ./Plugins */
      62914), exports);

      __exportStar(__webpack_require__(
      /*! ./Point */
      33617), exports);

      __exportStar(__webpack_require__(
      /*! ./QuadTree */
      6416), exports);

      __exportStar(__webpack_require__(
      /*! ./Range */
      63406), exports);

      __exportStar(__webpack_require__(
      /*! ./Rectangle */
      10774), exports);

      __exportStar(__webpack_require__(
      /*! ./Utils */
      66485), exports);
      /***/

    },

    /***/
    41019:
    /*!************************************************!*\
      !*** ./node_modules/tsparticles/dist/index.js ***!
      \************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

      var __exportStar = this && this.__exportStar || function (m, exports) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        }
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.tsParticles = exports.pJSDom = exports.particlesJS = exports.Utils = exports.Constants = exports.ColorUtils = exports.CanvasUtils = void 0;

      var pjs_1 = __webpack_require__(
      /*! ./pjs */
      87972);

      var main_1 = __webpack_require__(
      /*! ./main */
      68703);

      var Utils_1 = __webpack_require__(
      /*! ./Utils */
      57711);

      Object.defineProperty(exports, "CanvasUtils", {
        enumerable: true,
        get: function get() {
          return Utils_1.CanvasUtils;
        }
      });
      Object.defineProperty(exports, "ColorUtils", {
        enumerable: true,
        get: function get() {
          return Utils_1.ColorUtils;
        }
      });
      Object.defineProperty(exports, "Constants", {
        enumerable: true,
        get: function get() {
          return Utils_1.Constants;
        }
      });
      Object.defineProperty(exports, "Utils", {
        enumerable: true,
        get: function get() {
          return Utils_1.Utils;
        }
      });
      var tsParticles = new main_1.Main();
      exports.tsParticles = tsParticles;
      tsParticles.init();

      var _pjs_1$initPjs = pjs_1.initPjs(tsParticles),
          particlesJS = _pjs_1$initPjs.particlesJS,
          pJSDom = _pjs_1$initPjs.pJSDom;

      exports.particlesJS = particlesJS;
      exports.pJSDom = pJSDom;

      __exportStar(__webpack_require__(
      /*! ./Core/Container */
      81233), exports);

      __exportStar(__webpack_require__(
      /*! ./Enums */
      9717), exports);

      __exportStar(__webpack_require__(
      /*! ./Plugins/Absorbers/Enums */
      34626), exports);

      __exportStar(__webpack_require__(
      /*! ./Plugins/Emitters/Enums */
      80186), exports);

      __exportStar(__webpack_require__(
      /*! ./Plugins/PolygonMask/Enums */
      67177), exports);

      __exportStar(__webpack_require__(
      /*! ./Types */
      76326), exports);
      /***/

    },

    /***/
    68703:
    /*!***********************************************!*\
      !*** ./node_modules/tsparticles/dist/main.js ***!
      \***********************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Main = void 0;

      var main_slim_1 = __webpack_require__(
      /*! ./main.slim */
      55252);

      var AbsorbersPlugin_1 = __webpack_require__(
      /*! ./Plugins/Absorbers/AbsorbersPlugin */
      60545);

      var EmittersPlugin_1 = __webpack_require__(
      /*! ./Plugins/Emitters/EmittersPlugin */
      23964);

      var PolygonMaskPlugin_1 = __webpack_require__(
      /*! ./Plugins/PolygonMask/PolygonMaskPlugin */
      44461);

      var Main = /*#__PURE__*/function (_main_slim_1$MainSlim) {
        _inherits(Main, _main_slim_1$MainSlim);

        var _super116 = _createSuper(Main);

        function Main() {
          var _this276;

          _classCallCheck2(this, Main);

          _this276 = _super116.call(this);

          _this276.addPlugin(AbsorbersPlugin_1.AbsorbersPlugin);

          _this276.addPlugin(EmittersPlugin_1.EmittersPlugin);

          _this276.addPlugin(PolygonMaskPlugin_1.PolygonMaskPlugin);

          return _this276;
        }

        return Main;
      }(main_slim_1.MainSlim);

      exports.Main = Main;
      /***/
    },

    /***/
    55252:
    /*!****************************************************!*\
      !*** ./node_modules/tsparticles/dist/main.slim.js ***!
      \****************************************************/

    /***/
    function _(__unused_webpack_module, exports, __webpack_require__) {
      "use strict";

      var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function (resolve) {
            resolve(value);
          });
        }

        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }

          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }

          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }

          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.MainSlim = void 0;

      var SquareDrawer_1 = __webpack_require__(
      /*! ./ShapeDrawers/SquareDrawer */
      11979);

      var TextDrawer_1 = __webpack_require__(
      /*! ./ShapeDrawers/TextDrawer */
      12075);

      var ImageDrawer_1 = __webpack_require__(
      /*! ./ShapeDrawers/ImageDrawer */
      24704);

      var Utils_1 = __webpack_require__(
      /*! ./Utils */
      57711);

      var Types_1 = __webpack_require__(
      /*! ./Enums/Types */
      32112);

      var LineDrawer_1 = __webpack_require__(
      /*! ./ShapeDrawers/LineDrawer */
      66779);

      var CircleDrawer_1 = __webpack_require__(
      /*! ./ShapeDrawers/CircleDrawer */
      51993);

      var TriangleDrawer_1 = __webpack_require__(
      /*! ./ShapeDrawers/TriangleDrawer */
      11130);

      var StarDrawer_1 = __webpack_require__(
      /*! ./ShapeDrawers/StarDrawer */
      27069);

      var PolygonDrawer_1 = __webpack_require__(
      /*! ./ShapeDrawers/PolygonDrawer */
      85777);

      var Loader_1 = __webpack_require__(
      /*! ./Core/Loader */
      80903);

      var MainSlim = /*#__PURE__*/function () {
        function MainSlim() {
          _classCallCheck2(this, MainSlim);

          this.initialized = false;
          var squareDrawer = new SquareDrawer_1.SquareDrawer();
          var textDrawer = new TextDrawer_1.TextDrawer();
          var imageDrawer = new ImageDrawer_1.ImageDrawer();
          Utils_1.Plugins.addShapeDrawer(Types_1.ShapeType.line, new LineDrawer_1.LineDrawer());
          Utils_1.Plugins.addShapeDrawer(Types_1.ShapeType.circle, new CircleDrawer_1.CircleDrawer());
          Utils_1.Plugins.addShapeDrawer(Types_1.ShapeType.edge, squareDrawer);
          Utils_1.Plugins.addShapeDrawer(Types_1.ShapeType.square, squareDrawer);
          Utils_1.Plugins.addShapeDrawer(Types_1.ShapeType.triangle, new TriangleDrawer_1.TriangleDrawer());
          Utils_1.Plugins.addShapeDrawer(Types_1.ShapeType.star, new StarDrawer_1.StarDrawer());
          Utils_1.Plugins.addShapeDrawer(Types_1.ShapeType.polygon, new PolygonDrawer_1.PolygonDrawer());
          Utils_1.Plugins.addShapeDrawer(Types_1.ShapeType["char"], textDrawer);
          Utils_1.Plugins.addShapeDrawer(Types_1.ShapeType.character, textDrawer);
          Utils_1.Plugins.addShapeDrawer(Types_1.ShapeType.image, imageDrawer);
          Utils_1.Plugins.addShapeDrawer(Types_1.ShapeType.images, imageDrawer);
        }

        _createClass2(MainSlim, [{
          key: "init",
          value: function init() {
            if (!this.initialized) {
              this.initialized = true;
            }
          }
        }, {
          key: "loadFromArray",
          value: function loadFromArray(tagId, options, index) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
              return regeneratorRuntime.wrap(function _callee18$(_context21) {
                while (1) {
                  switch (_context21.prev = _context21.next) {
                    case 0:
                      return _context21.abrupt("return", Loader_1.Loader.load(tagId, options, index));

                    case 1:
                    case "end":
                      return _context21.stop();
                  }
                }
              }, _callee18);
            }));
          }
        }, {
          key: "load",
          value: function load(tagId, options) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
              return regeneratorRuntime.wrap(function _callee19$(_context22) {
                while (1) {
                  switch (_context22.prev = _context22.next) {
                    case 0:
                      return _context22.abrupt("return", Loader_1.Loader.load(tagId, options));

                    case 1:
                    case "end":
                      return _context22.stop();
                  }
                }
              }, _callee19);
            }));
          }
        }, {
          key: "set",
          value: function set(id, element, options) {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {
              return regeneratorRuntime.wrap(function _callee20$(_context23) {
                while (1) {
                  switch (_context23.prev = _context23.next) {
                    case 0:
                      return _context23.abrupt("return", Loader_1.Loader.set(id, element, options));

                    case 1:
                    case "end":
                      return _context23.stop();
                  }
                }
              }, _callee20);
            }));
          }
        }, {
          key: "loadJSON",
          value: function loadJSON(tagId, pathConfigJson, index) {
            return Loader_1.Loader.loadJSON(tagId, pathConfigJson, index);
          }
        }, {
          key: "setOnClickHandler",
          value: function setOnClickHandler(callback) {
            Loader_1.Loader.setOnClickHandler(callback);
          }
        }, {
          key: "dom",
          value: function dom() {
            return Loader_1.Loader.dom();
          }
        }, {
          key: "domItem",
          value: function domItem(index) {
            return Loader_1.Loader.domItem(index);
          }
        }, {
          key: "addShape",
          value: function addShape(shape, drawer, init, afterEffect, destroy) {
            var customDrawer;

            if (typeof drawer === "function") {
              customDrawer = {
                afterEffect: afterEffect,
                destroy: destroy,
                draw: drawer,
                init: init
              };
            } else {
              customDrawer = drawer;
            }

            Utils_1.Plugins.addShapeDrawer(shape, customDrawer);
          }
        }, {
          key: "addPreset",
          value: function addPreset(preset, options) {
            Utils_1.Plugins.addPreset(preset, options);
          }
        }, {
          key: "addPlugin",
          value: function addPlugin(plugin) {
            Utils_1.Plugins.addPlugin(plugin);
          }
        }]);

        return MainSlim;
      }();

      exports.MainSlim = MainSlim;
      /***/
    },

    /***/
    87972:
    /*!**********************************************!*\
      !*** ./node_modules/tsparticles/dist/pjs.js ***!
      \**********************************************/

    /***/
    function _(__unused_webpack_module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.initPjs = void 0;

      var initPjs = function initPjs(main) {
        var particlesJS = function particlesJS(tagId, options) {
          return main.load(tagId, options);
        };

        particlesJS.load = function (tagId, pathConfigJson, callback) {
          main.loadJSON(tagId, pathConfigJson).then(function (container) {
            if (container) {
              callback(container);
            }
          });
        };

        particlesJS.setOnClickHandler = function (callback) {
          main.setOnClickHandler(callback);
        };

        var pJSDom = main.dom();
        return {
          particlesJS: particlesJS,
          pJSDom: pJSDom
        };
      };

      exports.initPjs = initPjs;
      /***/
    },

    /***/
    9028:
    /*!********************************************!*\
      !*** ./node_modules/typed.js/lib/typed.js ***!
      \********************************************/

    /***/
    function _(module) {
      /*!
       * 
       *   typed.js - A JavaScript Typing Animation Library
       *   Author: Matt Boldt <me@mattboldt.com>
       *   Version: v2.0.11
       *   Url: https://github.com/mattboldt/typed.js
       *   License(s): MIT
       * 
       */
      (function webpackUniversalModuleDefinition(root, factory) {
        if (true) module.exports = factory();else {}
      })(this, function () {
        return (
          /******/
          function (modules) {
            // webpackBootstrap

            /******/
            // The module cache

            /******/
            var installedModules = {};
            /******/

            /******/
            // The require function

            /******/

            function __nested_webpack_require_737__(moduleId) {
              /******/

              /******/
              // Check if module is in cache

              /******/
              if (installedModules[moduleId])
                /******/
                return installedModules[moduleId].exports;
              /******/

              /******/
              // Create a new module (and put it into the cache)

              /******/

              var module = installedModules[moduleId] = {
                /******/
                exports: {},

                /******/
                id: moduleId,

                /******/
                loaded: false
                /******/

              };
              /******/

              /******/
              // Execute the module function

              /******/

              modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_737__);
              /******/

              /******/
              // Flag the module as loaded

              /******/

              module.loaded = true;
              /******/

              /******/
              // Return the exports of the module

              /******/

              return module.exports;
              /******/
            }
            /******/

            /******/

            /******/
            // expose the modules object (__webpack_modules__)

            /******/


            __nested_webpack_require_737__.m = modules;
            /******/

            /******/
            // expose the module cache

            /******/

            __nested_webpack_require_737__.c = installedModules;
            /******/

            /******/
            // __webpack_public_path__

            /******/

            __nested_webpack_require_737__.p = "";
            /******/

            /******/
            // Load entry module and return exports

            /******/

            return __nested_webpack_require_737__(0);
            /******/
          }(
          /************************************************************************/

          /******/
          [
          /* 0 */

          /***/
          function (module, exports, __nested_webpack_require_2018__) {
            'use strict';

            Object.defineProperty(exports, '__esModule', {
              value: true
            });

            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ('value' in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
              }
            }

            var _initializerJs = __nested_webpack_require_2018__(1);

            var _htmlParserJs = __nested_webpack_require_2018__(3);
            /**
             * Welcome to Typed.js!
             * @param {string} elementId HTML element ID _OR_ HTML element
             * @param {object} options options object
             * @returns {object} a new Typed object
             */


            var Typed = function () {
              function Typed(elementId, options) {
                _classCallCheck(this, Typed); // Initialize it up


                _initializerJs.initializer.load(this, options, elementId); // All systems go!


                this.begin();
              }
              /**
               * Toggle start() and stop() of the Typed instance
               * @public
               */


              _createClass(Typed, [{
                key: 'toggle',
                value: function toggle() {
                  this.pause.status ? this.start() : this.stop();
                }
                /**
                 * Stop typing / backspacing and enable cursor blinking
                 * @public
                 */

              }, {
                key: 'stop',
                value: function stop() {
                  if (this.typingComplete) return;
                  if (this.pause.status) return;
                  this.toggleBlinking(true);
                  this.pause.status = true;
                  this.options.onStop(this.arrayPos, this);
                }
                /**
                 * Start typing / backspacing after being stopped
                 * @public
                 */

              }, {
                key: 'start',
                value: function start() {
                  if (this.typingComplete) return;
                  if (!this.pause.status) return;
                  this.pause.status = false;

                  if (this.pause.typewrite) {
                    this.typewrite(this.pause.curString, this.pause.curStrPos);
                  } else {
                    this.backspace(this.pause.curString, this.pause.curStrPos);
                  }

                  this.options.onStart(this.arrayPos, this);
                }
                /**
                 * Destroy this instance of Typed
                 * @public
                 */

              }, {
                key: 'destroy',
                value: function destroy() {
                  this.reset(false);
                  this.options.onDestroy(this);
                }
                /**
                 * Reset Typed and optionally restarts
                 * @param {boolean} restart
                 * @public
                 */

              }, {
                key: 'reset',
                value: function reset() {
                  var restart = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
                  clearInterval(this.timeout);
                  this.replaceText('');

                  if (this.cursor && this.cursor.parentNode) {
                    this.cursor.parentNode.removeChild(this.cursor);
                    this.cursor = null;
                  }

                  this.strPos = 0;
                  this.arrayPos = 0;
                  this.curLoop = 0;

                  if (restart) {
                    this.insertCursor();
                    this.options.onReset(this);
                    this.begin();
                  }
                }
                /**
                 * Begins the typing animation
                 * @private
                 */

              }, {
                key: 'begin',
                value: function begin() {
                  var _this = this;

                  this.options.onBegin(this);
                  this.typingComplete = false;
                  this.shuffleStringsIfNeeded(this);
                  this.insertCursor();
                  if (this.bindInputFocusEvents) this.bindFocusEvents();
                  this.timeout = setTimeout(function () {
                    // Check if there is some text in the element, if yes start by backspacing the default message
                    if (!_this.currentElContent || _this.currentElContent.length === 0) {
                      _this.typewrite(_this.strings[_this.sequence[_this.arrayPos]], _this.strPos);
                    } else {
                      // Start typing
                      _this.backspace(_this.currentElContent, _this.currentElContent.length);
                    }
                  }, this.startDelay);
                }
                /**
                 * Called for each character typed
                 * @param {string} curString the current string in the strings array
                 * @param {number} curStrPos the current position in the curString
                 * @private
                 */

              }, {
                key: 'typewrite',
                value: function typewrite(curString, curStrPos) {
                  var _this2 = this;

                  if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {
                    this.el.classList.remove(this.fadeOutClass);
                    if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);
                  }

                  var humanize = this.humanizer(this.typeSpeed);
                  var numChars = 1;

                  if (this.pause.status === true) {
                    this.setPauseStatus(curString, curStrPos, true);
                    return;
                  } // contain typing function in a timeout humanize'd delay


                  this.timeout = setTimeout(function () {
                    // skip over any HTML chars
                    curStrPos = _htmlParserJs.htmlParser.typeHtmlChars(curString, curStrPos, _this2);
                    var pauseTime = 0;
                    var substr = curString.substr(curStrPos); // check for an escape character before a pause value
                    // format: \^\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^
                    // single ^ are removed from string

                    if (substr.charAt(0) === '^') {
                      if (/^\^\d+/.test(substr)) {
                        var skip = 1; // skip at least 1

                        substr = /\d+/.exec(substr)[0];
                        skip += substr.length;
                        pauseTime = parseInt(substr);
                        _this2.temporaryPause = true;

                        _this2.options.onTypingPaused(_this2.arrayPos, _this2); // strip out the escape character and pause value so they're not printed


                        curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);

                        _this2.toggleBlinking(true);
                      }
                    } // check for skip characters formatted as
                    // "this is a `string to print NOW` ..."


                    if (substr.charAt(0) === '`') {
                      while (curString.substr(curStrPos + numChars).charAt(0) !== '`') {
                        numChars++;
                        if (curStrPos + numChars > curString.length) break;
                      } // strip out the escape characters and append all the string in between


                      var stringBeforeSkip = curString.substring(0, curStrPos);
                      var stringSkipped = curString.substring(stringBeforeSkip.length + 1, curStrPos + numChars);
                      var stringAfterSkip = curString.substring(curStrPos + numChars + 1);
                      curString = stringBeforeSkip + stringSkipped + stringAfterSkip;
                      numChars--;
                    } // timeout for any pause after a character


                    _this2.timeout = setTimeout(function () {
                      // Accounts for blinking while paused
                      _this2.toggleBlinking(false); // We're done with this sentence!


                      if (curStrPos >= curString.length) {
                        _this2.doneTyping(curString, curStrPos);
                      } else {
                        _this2.keepTyping(curString, curStrPos, numChars);
                      } // end of character pause


                      if (_this2.temporaryPause) {
                        _this2.temporaryPause = false;

                        _this2.options.onTypingResumed(_this2.arrayPos, _this2);
                      }
                    }, pauseTime); // humanized value for typing
                  }, humanize);
                }
                /**
                 * Continue to the next string & begin typing
                 * @param {string} curString the current string in the strings array
                 * @param {number} curStrPos the current position in the curString
                 * @private
                 */

              }, {
                key: 'keepTyping',
                value: function keepTyping(curString, curStrPos, numChars) {
                  // call before functions if applicable
                  if (curStrPos === 0) {
                    this.toggleBlinking(false);
                    this.options.preStringTyped(this.arrayPos, this);
                  } // start typing each new char into existing string
                  // curString: arg, this.el.html: original text inside element


                  curStrPos += numChars;
                  var nextString = curString.substr(0, curStrPos);
                  this.replaceText(nextString); // loop the function

                  this.typewrite(curString, curStrPos);
                }
                /**
                 * We're done typing the current string
                 * @param {string} curString the current string in the strings array
                 * @param {number} curStrPos the current position in the curString
                 * @private
                 */

              }, {
                key: 'doneTyping',
                value: function doneTyping(curString, curStrPos) {
                  var _this3 = this; // fires callback function


                  this.options.onStringTyped(this.arrayPos, this);
                  this.toggleBlinking(true); // is this the final string

                  if (this.arrayPos === this.strings.length - 1) {
                    // callback that occurs on the last typed string
                    this.complete(); // quit if we wont loop back

                    if (this.loop === false || this.curLoop === this.loopCount) {
                      return;
                    }
                  }

                  this.timeout = setTimeout(function () {
                    _this3.backspace(curString, curStrPos);
                  }, this.backDelay);
                }
                /**
                 * Backspaces 1 character at a time
                 * @param {string} curString the current string in the strings array
                 * @param {number} curStrPos the current position in the curString
                 * @private
                 */

              }, {
                key: 'backspace',
                value: function backspace(curString, curStrPos) {
                  var _this4 = this;

                  if (this.pause.status === true) {
                    this.setPauseStatus(curString, curStrPos, true);
                    return;
                  }

                  if (this.fadeOut) return this.initFadeOut();
                  this.toggleBlinking(false);
                  var humanize = this.humanizer(this.backSpeed);
                  this.timeout = setTimeout(function () {
                    curStrPos = _htmlParserJs.htmlParser.backSpaceHtmlChars(curString, curStrPos, _this4); // replace text with base text + typed characters

                    var curStringAtPosition = curString.substr(0, curStrPos);

                    _this4.replaceText(curStringAtPosition); // if smartBack is enabled


                    if (_this4.smartBackspace) {
                      // the remaining part of the current string is equal of the same part of the new string
                      var nextString = _this4.strings[_this4.arrayPos + 1];

                      if (nextString && curStringAtPosition === nextString.substr(0, curStrPos)) {
                        _this4.stopNum = curStrPos;
                      } else {
                        _this4.stopNum = 0;
                      }
                    } // if the number (id of character in current string) is
                    // less than the stop number, keep going


                    if (curStrPos > _this4.stopNum) {
                      // subtract characters one by one
                      curStrPos--; // loop the function

                      _this4.backspace(curString, curStrPos);
                    } else if (curStrPos <= _this4.stopNum) {
                      // if the stop number has been reached, increase
                      // array position to next string
                      _this4.arrayPos++; // When looping, begin at the beginning after backspace complete

                      if (_this4.arrayPos === _this4.strings.length) {
                        _this4.arrayPos = 0;

                        _this4.options.onLastStringBackspaced();

                        _this4.shuffleStringsIfNeeded();

                        _this4.begin();
                      } else {
                        _this4.typewrite(_this4.strings[_this4.sequence[_this4.arrayPos]], curStrPos);
                      }
                    } // humanized value for typing

                  }, humanize);
                }
                /**
                 * Full animation is complete
                 * @private
                 */

              }, {
                key: 'complete',
                value: function complete() {
                  this.options.onComplete(this);

                  if (this.loop) {
                    this.curLoop++;
                  } else {
                    this.typingComplete = true;
                  }
                }
                /**
                 * Has the typing been stopped
                 * @param {string} curString the current string in the strings array
                 * @param {number} curStrPos the current position in the curString
                 * @param {boolean} isTyping
                 * @private
                 */

              }, {
                key: 'setPauseStatus',
                value: function setPauseStatus(curString, curStrPos, isTyping) {
                  this.pause.typewrite = isTyping;
                  this.pause.curString = curString;
                  this.pause.curStrPos = curStrPos;
                }
                /**
                 * Toggle the blinking cursor
                 * @param {boolean} isBlinking
                 * @private
                 */

              }, {
                key: 'toggleBlinking',
                value: function toggleBlinking(isBlinking) {
                  if (!this.cursor) return; // if in paused state, don't toggle blinking a 2nd time

                  if (this.pause.status) return;
                  if (this.cursorBlinking === isBlinking) return;
                  this.cursorBlinking = isBlinking;

                  if (isBlinking) {
                    this.cursor.classList.add('typed-cursor--blink');
                  } else {
                    this.cursor.classList.remove('typed-cursor--blink');
                  }
                }
                /**
                 * Speed in MS to type
                 * @param {number} speed
                 * @private
                 */

              }, {
                key: 'humanizer',
                value: function humanizer(speed) {
                  return Math.round(Math.random() * speed / 2) + speed;
                }
                /**
                 * Shuffle the sequence of the strings array
                 * @private
                 */

              }, {
                key: 'shuffleStringsIfNeeded',
                value: function shuffleStringsIfNeeded() {
                  if (!this.shuffle) return;
                  this.sequence = this.sequence.sort(function () {
                    return Math.random() - 0.5;
                  });
                }
                /**
                 * Adds a CSS class to fade out current string
                 * @private
                 */

              }, {
                key: 'initFadeOut',
                value: function initFadeOut() {
                  var _this5 = this;

                  this.el.className += ' ' + this.fadeOutClass;
                  if (this.cursor) this.cursor.className += ' ' + this.fadeOutClass;
                  return setTimeout(function () {
                    _this5.arrayPos++;

                    _this5.replaceText(''); // Resets current string if end of loop reached


                    if (_this5.strings.length > _this5.arrayPos) {
                      _this5.typewrite(_this5.strings[_this5.sequence[_this5.arrayPos]], 0);
                    } else {
                      _this5.typewrite(_this5.strings[0], 0);

                      _this5.arrayPos = 0;
                    }
                  }, this.fadeOutDelay);
                }
                /**
                 * Replaces current text in the HTML element
                 * depending on element type
                 * @param {string} str
                 * @private
                 */

              }, {
                key: 'replaceText',
                value: function replaceText(str) {
                  if (this.attr) {
                    this.el.setAttribute(this.attr, str);
                  } else {
                    if (this.isInput) {
                      this.el.value = str;
                    } else if (this.contentType === 'html') {
                      this.el.innerHTML = str;
                    } else {
                      this.el.textContent = str;
                    }
                  }
                }
                /**
                 * If using input elements, bind focus in order to
                 * start and stop the animation
                 * @private
                 */

              }, {
                key: 'bindFocusEvents',
                value: function bindFocusEvents() {
                  var _this6 = this;

                  if (!this.isInput) return;
                  this.el.addEventListener('focus', function (e) {
                    _this6.stop();
                  });
                  this.el.addEventListener('blur', function (e) {
                    if (_this6.el.value && _this6.el.value.length !== 0) {
                      return;
                    }

                    _this6.start();
                  });
                }
                /**
                 * On init, insert the cursor element
                 * @private
                 */

              }, {
                key: 'insertCursor',
                value: function insertCursor() {
                  if (!this.showCursor) return;
                  if (this.cursor) return;
                  this.cursor = document.createElement('span');
                  this.cursor.className = 'typed-cursor';
                  this.cursor.innerHTML = this.cursorChar;
                  this.el.parentNode && this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);
                }
              }]);

              return Typed;
            }();

            exports['default'] = Typed;
            module.exports = exports['default'];
            /***/
          },
          /* 1 */

          /***/
          function (module, exports, __nested_webpack_require_18173__) {
            'use strict';

            Object.defineProperty(exports, '__esModule', {
              value: true
            });

            var _extends = Object.assign || function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];

                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }

              return target;
            };

            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ('value' in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {
                'default': obj
              };
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
              }
            }

            var _defaultsJs = __nested_webpack_require_18173__(2);

            var _defaultsJs2 = _interopRequireDefault(_defaultsJs);
            /**
             * Initialize the Typed object
             */


            var Initializer = function () {
              function Initializer() {
                _classCallCheck(this, Initializer);
              }

              _createClass(Initializer, [{
                key: 'load',

                /**
                 * Load up defaults & options on the Typed instance
                 * @param {Typed} self instance of Typed
                 * @param {object} options options object
                 * @param {string} elementId HTML element ID _OR_ instance of HTML element
                 * @private
                 */
                value: function load(self, options, elementId) {
                  // chosen element to manipulate text
                  if (typeof elementId === 'string') {
                    self.el = document.querySelector(elementId);
                  } else {
                    self.el = elementId;
                  }

                  self.options = _extends({}, _defaultsJs2['default'], options); // attribute to type into

                  self.isInput = self.el.tagName.toLowerCase() === 'input';
                  self.attr = self.options.attr;
                  self.bindInputFocusEvents = self.options.bindInputFocusEvents; // show cursor

                  self.showCursor = self.isInput ? false : self.options.showCursor; // custom cursor

                  self.cursorChar = self.options.cursorChar; // Is the cursor blinking

                  self.cursorBlinking = true; // text content of element

                  self.elContent = self.attr ? self.el.getAttribute(self.attr) : self.el.textContent; // html or plain text

                  self.contentType = self.options.contentType; // typing speed

                  self.typeSpeed = self.options.typeSpeed; // add a delay before typing starts

                  self.startDelay = self.options.startDelay; // backspacing speed

                  self.backSpeed = self.options.backSpeed; // only backspace what doesn't match the previous string

                  self.smartBackspace = self.options.smartBackspace; // amount of time to wait before backspacing

                  self.backDelay = self.options.backDelay; // Fade out instead of backspace

                  self.fadeOut = self.options.fadeOut;
                  self.fadeOutClass = self.options.fadeOutClass;
                  self.fadeOutDelay = self.options.fadeOutDelay; // variable to check whether typing is currently paused

                  self.isPaused = false; // input strings of text

                  self.strings = self.options.strings.map(function (s) {
                    return s.trim();
                  }); // div containing strings

                  if (typeof self.options.stringsElement === 'string') {
                    self.stringsElement = document.querySelector(self.options.stringsElement);
                  } else {
                    self.stringsElement = self.options.stringsElement;
                  }

                  if (self.stringsElement) {
                    self.strings = [];
                    self.stringsElement.style.display = 'none';
                    var strings = Array.prototype.slice.apply(self.stringsElement.children);
                    var stringsLength = strings.length;

                    if (stringsLength) {
                      for (var i = 0; i < stringsLength; i += 1) {
                        var stringEl = strings[i];
                        self.strings.push(stringEl.innerHTML.trim());
                      }
                    }
                  } // character number position of current string


                  self.strPos = 0; // current array position

                  self.arrayPos = 0; // index of string to stop backspacing on

                  self.stopNum = 0; // Looping logic

                  self.loop = self.options.loop;
                  self.loopCount = self.options.loopCount;
                  self.curLoop = 0; // shuffle the strings

                  self.shuffle = self.options.shuffle; // the order of strings

                  self.sequence = [];
                  self.pause = {
                    status: false,
                    typewrite: true,
                    curString: '',
                    curStrPos: 0
                  }; // When the typing is complete (when not looped)

                  self.typingComplete = false; // Set the order in which the strings are typed

                  for (var i in self.strings) {
                    self.sequence[i] = i;
                  } // If there is some text in the element


                  self.currentElContent = this.getCurrentElContent(self);
                  self.autoInsertCss = self.options.autoInsertCss;
                  this.appendAnimationCss(self);
                }
              }, {
                key: 'getCurrentElContent',
                value: function getCurrentElContent(self) {
                  var elContent = '';

                  if (self.attr) {
                    elContent = self.el.getAttribute(self.attr);
                  } else if (self.isInput) {
                    elContent = self.el.value;
                  } else if (self.contentType === 'html') {
                    elContent = self.el.innerHTML;
                  } else {
                    elContent = self.el.textContent;
                  }

                  return elContent;
                }
              }, {
                key: 'appendAnimationCss',
                value: function appendAnimationCss(self) {
                  var cssDataName = 'data-typed-js-css';

                  if (!self.autoInsertCss) {
                    return;
                  }

                  if (!self.showCursor && !self.fadeOut) {
                    return;
                  }

                  if (document.querySelector('[' + cssDataName + ']')) {
                    return;
                  }

                  var css = document.createElement('style');
                  css.type = 'text/css';
                  css.setAttribute(cssDataName, true);
                  var innerCss = '';

                  if (self.showCursor) {
                    innerCss += '\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      ';
                  }

                  if (self.fadeOut) {
                    innerCss += '\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      ';
                  }

                  if (css.length === 0) {
                    return;
                  }

                  css.innerHTML = innerCss;
                  document.body.appendChild(css);
                }
              }]);

              return Initializer;
            }();

            exports['default'] = Initializer;
            var initializer = new Initializer();
            exports.initializer = initializer;
            /***/
          },
          /* 2 */

          /***/
          function (module, exports) {
            /**
             * Defaults & options
             * @returns {object} Typed defaults & options
             * @public
             */
            'use strict';

            Object.defineProperty(exports, '__esModule', {
              value: true
            });
            var defaults = {
              /**
               * @property {array} strings strings to be typed
               * @property {string} stringsElement ID of element containing string children
               */
              strings: ['These are the default values...', 'You know what you should do?', 'Use your own!', 'Have a great day!'],
              stringsElement: null,

              /**
               * @property {number} typeSpeed type speed in milliseconds
               */
              typeSpeed: 0,

              /**
               * @property {number} startDelay time before typing starts in milliseconds
               */
              startDelay: 0,

              /**
               * @property {number} backSpeed backspacing speed in milliseconds
               */
              backSpeed: 0,

              /**
               * @property {boolean} smartBackspace only backspace what doesn't match the previous string
               */
              smartBackspace: true,

              /**
               * @property {boolean} shuffle shuffle the strings
               */
              shuffle: false,

              /**
               * @property {number} backDelay time before backspacing in milliseconds
               */
              backDelay: 700,

              /**
               * @property {boolean} fadeOut Fade out instead of backspace
               * @property {string} fadeOutClass css class for fade animation
               * @property {boolean} fadeOutDelay Fade out delay in milliseconds
               */
              fadeOut: false,
              fadeOutClass: 'typed-fade-out',
              fadeOutDelay: 500,

              /**
               * @property {boolean} loop loop strings
               * @property {number} loopCount amount of loops
               */
              loop: false,
              loopCount: Infinity,

              /**
               * @property {boolean} showCursor show cursor
               * @property {string} cursorChar character for cursor
               * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>
               */
              showCursor: true,
              cursorChar: '|',
              autoInsertCss: true,

              /**
               * @property {string} attr attribute for typing
               * Ex: input placeholder, value, or just HTML text
               */
              attr: null,

              /**
               * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input
               */
              bindInputFocusEvents: false,

              /**
               * @property {string} contentType 'html' or 'null' for plaintext
               */
              contentType: 'html',

              /**
               * Before it begins typing
               * @param {Typed} self
               */
              onBegin: function onBegin(self) {},

              /**
               * All typing is complete
               * @param {Typed} self
               */
              onComplete: function onComplete(self) {},

              /**
               * Before each string is typed
               * @param {number} arrayPos
               * @param {Typed} self
               */
              preStringTyped: function preStringTyped(arrayPos, self) {},

              /**
               * After each string is typed
               * @param {number} arrayPos
               * @param {Typed} self
               */
              onStringTyped: function onStringTyped(arrayPos, self) {},

              /**
               * During looping, after last string is typed
               * @param {Typed} self
               */
              onLastStringBackspaced: function onLastStringBackspaced(self) {},

              /**
               * Typing has been stopped
               * @param {number} arrayPos
               * @param {Typed} self
               */
              onTypingPaused: function onTypingPaused(arrayPos, self) {},

              /**
               * Typing has been started after being stopped
               * @param {number} arrayPos
               * @param {Typed} self
               */
              onTypingResumed: function onTypingResumed(arrayPos, self) {},

              /**
               * After reset
               * @param {Typed} self
               */
              onReset: function onReset(self) {},

              /**
               * After stop
               * @param {number} arrayPos
               * @param {Typed} self
               */
              onStop: function onStop(arrayPos, self) {},

              /**
               * After start
               * @param {number} arrayPos
               * @param {Typed} self
               */
              onStart: function onStart(arrayPos, self) {},

              /**
               * After destroy
               * @param {Typed} self
               */
              onDestroy: function onDestroy(self) {}
            };
            exports['default'] = defaults;
            module.exports = exports['default'];
            /***/
          },
          /* 3 */

          /***/
          function (module, exports) {
            /**
             * TODO: These methods can probably be combined somehow
             * Parse HTML tags & HTML Characters
             */
            'use strict';

            Object.defineProperty(exports, '__esModule', {
              value: true
            });

            var _createClass = function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ('value' in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
              }
            }

            var HTMLParser = function () {
              function HTMLParser() {
                _classCallCheck(this, HTMLParser);
              }

              _createClass(HTMLParser, [{
                key: 'typeHtmlChars',

                /**
                 * Type HTML tags & HTML Characters
                 * @param {string} curString Current string
                 * @param {number} curStrPos Position in current string
                 * @param {Typed} self instance of Typed
                 * @returns {number} a new string position
                 * @private
                 */
                value: function typeHtmlChars(curString, curStrPos, self) {
                  if (self.contentType !== 'html') return curStrPos;
                  var curChar = curString.substr(curStrPos).charAt(0);

                  if (curChar === '<' || curChar === '&') {
                    var endTag = '';

                    if (curChar === '<') {
                      endTag = '>';
                    } else {
                      endTag = ';';
                    }

                    while (curString.substr(curStrPos + 1).charAt(0) !== endTag) {
                      curStrPos++;

                      if (curStrPos + 1 > curString.length) {
                        break;
                      }
                    }

                    curStrPos++;
                  }

                  return curStrPos;
                }
                /**
                 * Backspace HTML tags and HTML Characters
                 * @param {string} curString Current string
                 * @param {number} curStrPos Position in current string
                 * @param {Typed} self instance of Typed
                 * @returns {number} a new string position
                 * @private
                 */

              }, {
                key: 'backSpaceHtmlChars',
                value: function backSpaceHtmlChars(curString, curStrPos, self) {
                  if (self.contentType !== 'html') return curStrPos;
                  var curChar = curString.substr(curStrPos).charAt(0);

                  if (curChar === '>' || curChar === ';') {
                    var endTag = '';

                    if (curChar === '>') {
                      endTag = '<';
                    } else {
                      endTag = '&';
                    }

                    while (curString.substr(curStrPos - 1).charAt(0) !== endTag) {
                      curStrPos--;

                      if (curStrPos < 0) {
                        break;
                      }
                    }

                    curStrPos--;
                  }

                  return curStrPos;
                }
              }]);

              return HTMLParser;
            }();

            exports['default'] = HTMLParser;
            var htmlParser = new HTMLParser();
            exports.htmlParser = htmlParser;
            /***/
          }
          /******/
          ])
        );
      });

      ;
      /***/
    },

    /***/
    64762:
    /*!*****************************************!*\
      !*** ./node_modules/tslib/tslib.es6.js ***!
      \*****************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "__extends": function __extends() {
          return (
            /* binding */
            _extends2
          );
        },

        /* harmony export */
        "__assign": function __assign() {
          return (
            /* binding */
            _assign2
          );
        },

        /* harmony export */
        "__rest": function __rest() {
          return (
            /* binding */
            _rest
          );
        },

        /* harmony export */
        "__decorate": function __decorate() {
          return (
            /* binding */
            _decorate
          );
        },

        /* harmony export */
        "__param": function __param() {
          return (
            /* binding */
            _param
          );
        },

        /* harmony export */
        "__metadata": function __metadata() {
          return (
            /* binding */
            _metadata
          );
        },

        /* harmony export */
        "__awaiter": function __awaiter() {
          return (
            /* binding */
            _awaiter
          );
        },

        /* harmony export */
        "__generator": function __generator() {
          return (
            /* binding */
            _generator
          );
        },

        /* harmony export */
        "__createBinding": function __createBinding() {
          return (
            /* binding */
            _createBinding
          );
        },

        /* harmony export */
        "__exportStar": function __exportStar() {
          return (
            /* binding */
            _exportStar
          );
        },

        /* harmony export */
        "__values": function __values() {
          return (
            /* binding */
            _values
          );
        },

        /* harmony export */
        "__read": function __read() {
          return (
            /* binding */
            _read
          );
        },

        /* harmony export */
        "__spread": function __spread() {
          return (
            /* binding */
            _spread
          );
        },

        /* harmony export */
        "__spreadArrays": function __spreadArrays() {
          return (
            /* binding */
            _spreadArrays
          );
        },

        /* harmony export */
        "__await": function __await() {
          return (
            /* binding */
            _await
          );
        },

        /* harmony export */
        "__asyncGenerator": function __asyncGenerator() {
          return (
            /* binding */
            _asyncGenerator
          );
        },

        /* harmony export */
        "__asyncDelegator": function __asyncDelegator() {
          return (
            /* binding */
            _asyncDelegator
          );
        },

        /* harmony export */
        "__asyncValues": function __asyncValues() {
          return (
            /* binding */
            _asyncValues
          );
        },

        /* harmony export */
        "__makeTemplateObject": function __makeTemplateObject() {
          return (
            /* binding */
            _makeTemplateObject
          );
        },

        /* harmony export */
        "__importStar": function __importStar() {
          return (
            /* binding */
            _importStar
          );
        },

        /* harmony export */
        "__importDefault": function __importDefault() {
          return (
            /* binding */
            _importDefault
          );
        },

        /* harmony export */
        "__classPrivateFieldGet": function __classPrivateFieldGet() {
          return (
            /* binding */
            _classPrivateFieldGet
          );
        },

        /* harmony export */
        "__classPrivateFieldSet": function __classPrivateFieldSet() {
          return (
            /* binding */
            _classPrivateFieldSet
          );
        }
        /* harmony export */

      });
      /*! *****************************************************************************
      Copyright (c) Microsoft Corporation.
      
      Permission to use, copy, modify, and/or distribute this software for any
      purpose with or without fee is hereby granted.
      
      THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
      REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
      AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
      INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
      LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
      OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
      PERFORMANCE OF THIS SOFTWARE.
      ***************************************************************************** */

      /* global Reflect, Promise */


      var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (d, b) {
          d.__proto__ = b;
        } || function (d, b) {
          for (var p in b) {
            if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          }
        };

        return _extendStatics(d, b);
      };

      function _extends2(d, b) {
        _extendStatics(d, b);

        function __() {
          this.constructor = d;
        }

        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      }

      var _assign2 = function _assign() {
        _assign2 = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];

            for (var p in s) {
              if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
          }

          return t;
        };

        return _assign2.apply(this, arguments);
      };

      function _rest(s, e) {
        var t = {};

        for (var p in s) {
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        }

        if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
        }
        return t;
      }

      function _decorate(decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      }

      function _param(paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      }

      function _metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
      }

      function _awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function (resolve) {
            resolve(value);
          });
        }

        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }

          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }

          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }

          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      }

      function _generator(thisArg, body) {
        var _ = {
          label: 0,
          sent: function sent() {
            if (t[0] & 1) throw t[1];
            return t[1];
          },
          trys: [],
          ops: []
        },
            f,
            y,
            t,
            g;
        return g = {
          next: verb(0),
          "throw": verb(1),
          "return": verb(2)
        }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
          return this;
        }), g;

        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }

        function step(op) {
          if (f) throw new TypeError("Generator is already executing.");

          while (_) {
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];

              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;

                case 4:
                  _.label++;
                  return {
                    value: op[1],
                    done: false
                  };

                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;

                case 7:
                  op = _.ops.pop();

                  _.trys.pop();

                  continue;

                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }

                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }

                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }

                  if (t && _.label < t[2]) {
                    _.label = t[2];

                    _.ops.push(op);

                    break;
                  }

                  if (t[2]) _.ops.pop();

                  _.trys.pop();

                  continue;
              }

              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          }

          if (op[0] & 5) throw op[1];
          return {
            value: op[0] ? op[1] : void 0,
            done: true
          };
        }
      }

      var _createBinding = Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      };

      function _exportStar(m, o) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) _createBinding(o, m, p);
        }
      }

      function _values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator,
            m = s && o[s],
            i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
          next: function next() {
            if (o && i >= o.length) o = void 0;
            return {
              value: o && o[i++],
              done: !o
            };
          }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      }

      function _read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
            r,
            ar = [],
            e;

        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
          }
        } catch (error) {
          e = {
            error: error
          };
        } finally {
          try {
            if (r && !r.done && (m = i["return"])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }

        return ar;
      }

      function _spread() {
        for (var ar = [], i = 0; i < arguments.length; i++) {
          ar = ar.concat(_read(arguments[i]));
        }

        return ar;
      }

      function _spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
          s += arguments[i].length;
        }

        for (var r = Array(s), k = 0, i = 0; i < il; i++) {
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
            r[k] = a[j];
          }
        }

        return r;
      }

      ;

      function _await(v) {
        return this instanceof _await ? (this.v = v, this) : new _await(v);
      }

      function _asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []),
            i,
            q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
          return this;
        }, i;

        function verb(n) {
          if (g[n]) i[n] = function (v) {
            return new Promise(function (a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
        }

        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }

        function step(r) {
          r.value instanceof _await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }

        function fulfill(value) {
          resume("next", value);
        }

        function reject(value) {
          resume("throw", value);
        }

        function settle(f, v) {
          if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
        }
      }

      function _asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function () {
          return this;
        }, i;

        function verb(n, f) {
          i[n] = o[n] ? function (v) {
            return (p = !p) ? {
              value: _await(o[n](v)),
              done: n === "return"
            } : f ? f(v) : v;
          } : f;
        }
      }

      function _asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator],
            i;
        return m ? m.call(o) : (o = typeof _values === "function" ? _values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
          return this;
        }, i);

        function verb(n) {
          i[n] = o[n] && function (v) {
            return new Promise(function (resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }

        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v) {
            resolve({
              value: v,
              done: d
            });
          }, reject);
        }
      }

      function _makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", {
            value: raw
          });
        } else {
          cooked.raw = raw;
        }

        return cooked;
      }

      ;

      var __setModuleDefault = Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      };

      function _importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) {
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) _createBinding(result, mod, k);
        }

        __setModuleDefault(result, mod);

        return result;
      }

      function _importDefault(mod) {
        return mod && mod.__esModule ? mod : {
          "default": mod
        };
      }

      function _classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }

        return privateMap.get(receiver);
      }

      function _classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }

        privateMap.set(receiver, value);
        return value;
      }
      /***/

    }
  }]);
})();